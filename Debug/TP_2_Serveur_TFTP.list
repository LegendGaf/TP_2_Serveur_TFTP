
TP_2_Serveur_TFTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002008  0801112c  0801112c  0002112c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013134  08013134  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013134  08013134  00023134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801313c  0801313c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801313c  0801313c  0002313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013140  08013140  00023140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013144  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc1c  20000078  080131bc  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bc94  080131bc  0003bc94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023489  00000000  00000000  000300a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000679d  00000000  00000000  0005352a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  00059cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  0005b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df16  00000000  00000000  0005cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c2c7  00000000  00000000  0008af0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddae5  00000000  00000000  000b71d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194cba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007154  00000000  00000000  00194d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011114 	.word	0x08011114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08011114 	.word	0x08011114

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b976 	b.w	80004d4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14d      	bne.n	80002ac <__udivmoddi4+0xac>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d968      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b152      	cbz	r2, 8000232 <__udivmoddi4+0x32>
 800021c:	fa01 f302 	lsl.w	r3, r1, r2
 8000220:	f1c2 0120 	rsb	r1, r2, #32
 8000224:	fa20 f101 	lsr.w	r1, r0, r1
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	ea41 0803 	orr.w	r8, r1, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000236:	fbb8 f7f1 	udiv	r7, r8, r1
 800023a:	fa1f fe8c 	uxth.w	lr, ip
 800023e:	fb01 8817 	mls	r8, r1, r7, r8
 8000242:	fb07 f00e 	mul.w	r0, r7, lr
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	4298      	cmp	r0, r3
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x66>
 8000250:	eb1c 0303 	adds.w	r3, ip, r3
 8000254:	f107 35ff 	add.w	r5, r7, #4294967295
 8000258:	f080 811e 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025c:	4298      	cmp	r0, r3
 800025e:	f240 811b 	bls.w	8000498 <__udivmoddi4+0x298>
 8000262:	3f02      	subs	r7, #2
 8000264:	4463      	add	r3, ip
 8000266:	1a1b      	subs	r3, r3, r0
 8000268:	fbb3 f0f1 	udiv	r0, r3, r1
 800026c:	fb01 3310 	mls	r3, r1, r0, r3
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	45a6      	cmp	lr, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8109 	bcs.w	800049c <__udivmoddi4+0x29c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8106 	bls.w	800049c <__udivmoddi4+0x29c>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	2100      	movs	r1, #0
 8000296:	eba4 040e 	sub.w	r4, r4, lr
 800029a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa8>
 80002a0:	2300      	movs	r3, #0
 80002a2:	40d4      	lsrs	r4, r2
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	f000 80ee 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b6:	2100      	movs	r1, #0
 80002b8:	e9c6 0500 	strd	r0, r5, [r6]
 80002bc:	4608      	mov	r0, r1
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fc 	bhi.w	80004cc <__udivmoddi4+0x2cc>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0303 	sbc.w	r3, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e2      	beq.n	80002a8 <__udivmoddi4+0xa8>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7df      	b.n	80002a8 <__udivmoddi4+0xa8>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8091 	bne.w	8000418 <__udivmoddi4+0x218>
 80002f6:	eba1 000c 	sub.w	r0, r1, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000300:	fa1f fe8c 	uxth.w	lr, ip
 8000304:	fbb0 f3f7 	udiv	r3, r0, r7
 8000308:	fb07 0013 	mls	r0, r7, r3, r0
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	42a8      	cmp	r0, r5
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0505 	adds.w	r5, ip, r5
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	42a8      	cmp	r0, r5
 8000326:	f200 80ce 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 800032a:	4643      	mov	r3, r8
 800032c:	1a2d      	subs	r5, r5, r0
 800032e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000332:	fb07 5510 	mls	r5, r7, r0, r5
 8000336:	fb0e fe00 	mul.w	lr, lr, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 35ff 	add.w	r5, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80b6 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 8000354:	4628      	mov	r0, r5
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79e      	b.n	800029e <__udivmoddi4+0x9e>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fbba f8f9 	udiv	r8, sl, r9
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000382:	408d      	lsls	r5, r1
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	431d      	orrs	r5, r3
 800038a:	fa00 f301 	lsl.w	r3, r0, r1
 800038e:	fb08 f00e 	mul.w	r0, r8, lr
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000398:	42a0      	cmp	r0, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	42a0      	cmp	r0, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1a24      	subs	r4, r4, r0
 80003ba:	fbb4 f0f9 	udiv	r0, r4, r9
 80003be:	fb09 4410 	mls	r4, r9, r0, r4
 80003c2:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2d0>
 80003fc:	ebb3 0208 	subs.w	r2, r3, r8
 8000400:	eb64 040e 	sbc.w	r4, r4, lr
 8000404:	fa22 f301 	lsr.w	r3, r2, r1
 8000408:	fa04 f707 	lsl.w	r7, r4, r7
 800040c:	431f      	orrs	r7, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	2100      	movs	r1, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa8>
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	f1c2 0120 	rsb	r1, r2, #32
 8000420:	fa25 f301 	lsr.w	r3, r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa20 f101 	lsr.w	r1, r0, r1
 800042c:	4095      	lsls	r5, r2
 800042e:	430d      	orrs	r5, r1
 8000430:	fbb3 f1f7 	udiv	r1, r3, r7
 8000434:	fb07 3311 	mls	r3, r7, r1, r3
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	0c28      	lsrs	r0, r5, #16
 800043e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000442:	fb01 f30e 	mul.w	r3, r1, lr
 8000446:	4283      	cmp	r3, r0
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0000 	adds.w	r0, ip, r0
 8000452:	f101 38ff 	add.w	r8, r1, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	4283      	cmp	r3, r0
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3902      	subs	r1, #2
 800045e:	4460      	add	r0, ip
 8000460:	1ac0      	subs	r0, r0, r3
 8000462:	fbb0 f3f7 	udiv	r3, r0, r7
 8000466:	fb07 0013 	mls	r0, r7, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000470:	fb03 f00e 	mul.w	r0, r3, lr
 8000474:	42a8      	cmp	r0, r5
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0505 	adds.w	r5, ip, r5
 800047c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	42a8      	cmp	r0, r5
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3b02      	subs	r3, #2
 8000488:	4465      	add	r5, ip
 800048a:	1a28      	subs	r0, r5, r0
 800048c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e707      	b.n	80002a8 <__udivmoddi4+0xa8>
 8000498:	462f      	mov	r7, r5
 800049a:	e6e4      	b.n	8000266 <__udivmoddi4+0x66>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f9      	b.n	8000294 <__udivmoddi4+0x94>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4643      	mov	r3, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4628      	mov	r0, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4641      	mov	r1, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	4464      	add	r4, ip
 80004c2:	3802      	subs	r0, #2
 80004c4:	e747      	b.n	8000356 <__udivmoddi4+0x156>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4465      	add	r5, ip
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x12c>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e706      	b.n	80002de <__udivmoddi4+0xde>
 80004d0:	4631      	mov	r1, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa8>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000098 	.word	0x20000098
 8000508:	200000ec 	.word	0x200000ec

0800050c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_FREERTOS_Init+0x30>)
 8000514:	1d3c      	adds	r4, r7, #4
 8000516:	461d      	mov	r5, r3
 8000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f004 f853 	bl	80045d4 <osThreadCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <MX_FREERTOS_Init+0x34>)
 8000532:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	08011138 	.word	0x08011138
 8000540:	20000094 	.word	0x20000094

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800054c:	f003 fa78 	bl	8003a40 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f004 f88b 	bl	800466c <osDelay>
 8000556:	e7fb      	b.n	8000550 <StartDefaultTask+0xc>

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a4a      	ldr	r2, [pc, #296]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	4b44      	ldr	r3, [pc, #272]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a43      	ldr	r2, [pc, #268]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <MX_GPIO_Init+0x148>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b3d      	ldr	r3, [pc, #244]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a3c      	ldr	r2, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <MX_GPIO_Init+0x148>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <MX_GPIO_Init+0x148>)
 8000604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_GPIO_Init+0x148>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f244 0181 	movw	r1, #16513	; 0x4081
 800061c:	4821      	ldr	r0, [pc, #132]	; (80006a4 <MX_GPIO_Init+0x14c>)
 800061e:	f001 ff9f 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <MX_GPIO_Init+0x150>)
 8000628:	f001 ff9a 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800062c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_GPIO_Init+0x154>)
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	481b      	ldr	r0, [pc, #108]	; (80006b0 <MX_GPIO_Init+0x158>)
 8000642:	f001 fdef 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000646:	f244 0381 	movw	r3, #16513	; 0x4081
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <MX_GPIO_Init+0x14c>)
 8000660:	f001 fde0 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <MX_GPIO_Init+0x150>)
 800067c:	f001 fdd2 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_GPIO_Init+0x150>)
 8000694:	f001 fdc6 	bl	8002224 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3730      	adds	r7, #48	; 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400
 80006a8:	40021800 	.word	0x40021800
 80006ac:	10110000 	.word	0x10110000
 80006b0:	40020800 	.word	0x40020800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 faa2 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f80b 	bl	80006d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff4a 	bl	8000558 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f97c 	bl	80009c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 f9ec 	bl	8000aa4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006cc:	f7ff ff1e 	bl	800050c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006d0:	f003 ff69 	bl	80045a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x20>

080006d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b092      	sub	sp, #72	; 0x48
 80006da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2230      	movs	r2, #48	; 0x30
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f00f fd79 	bl	80101dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800070c:	230d      	movs	r3, #13
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000710:	23c3      	movs	r3, #195	; 0xc3
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000718:	2305      	movs	r3, #5
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f853 	bl	80027cc <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800072c:	f000 f81a 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2103      	movs	r1, #3
 800074c:	4618      	mov	r0, r3
 800074e:	f002 faa5 	bl	8002c9c <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000758:	f000 f804 	bl	8000764 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3748      	adds	r7, #72	; 0x48
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_MspInit+0x54>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_MspInit+0x54>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	f06f 0001 	mvn.w	r0, #1
 80007b6:	f000 fb8c 	bl	8000ed2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 fa55 	bl	8000ca4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007fa:	f005 ff4f 	bl	800669c <xTaskGetSchedulerState>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d001      	beq.n	8000808 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000804:	f006 fb00 	bl	8006e08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <ETH_IRQHandler+0x10>)
 8000812:	f000 ff62 	bl	80016da <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20004630 	.word	0x20004630

08000820 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e00a      	b.n	8000848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000832:	f3af 8000 	nop.w
 8000836:	4601      	mov	r1, r0
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	b2ca      	uxtb	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf0      	blt.n	8000832 <_read+0x12>
	}

return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e009      	b.n	8000880 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf1      	blt.n	800086c <_write+0x12>
	}
	return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_close>:

int _close(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
	return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b8:	605a      	str	r2, [r3, #4]
	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
	return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d205      	bcs.n	8000930 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <_sbrk+0x6c>)
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a06      	ldr	r2, [pc, #24]	; (8000958 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20020000 	.word	0x20020000
 8000954:	00000400 	.word	0x00000400
 8000958:	200010ec 	.word	0x200010ec
 800095c:	2000bc98 	.word	0x2000bc98
 8000960:	2000bc80 	.word	0x2000bc80

08000964 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <SystemInit+0x50>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <SystemInit+0x50>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <SystemInit+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <SystemInit+0x50>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <SystemInit+0x50>)
 8000980:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000988:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <SystemInit+0x50>)
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <SystemInit+0x54>)
 800098e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <SystemInit+0x50>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <SystemInit+0x50>)
 8000996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SystemInit+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x58>)
 80009a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009a8:	609a      	str	r2, [r3, #8]
#endif
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	24003010 	.word	0x24003010
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_USART3_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART3_UART_Init+0x4c>)
 80009f8:	f002 fb96 	bl	8003128 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a02:	f7ff feaf 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200010f0 	.word	0x200010f0
 8000a10:	40004800 	.word	0x40004800

08000a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_UART_MspInit+0x8c>)
 8000a8c:	f001 fbca 	bl	8002224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004800 	.word	0x40004800
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ae2:	f001 fd55 	bl	8002590 <HAL_PCD_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f7ff fe3a 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20001130 	.word	0x20001130

08000af8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b18:	d13f      	bne.n	8000b9a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <HAL_PCD_MspInit+0xb0>)
 8000b54:	f001 fb66 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <HAL_PCD_MspInit+0xb0>)
 8000b6e:	f001 fb59 	bl	8002224 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	6353      	str	r3, [r2, #52]	; 0x34
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_PCD_MspInit+0xac>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bb2:	e003      	b.n	8000bbc <LoopCopyDataInit>

08000bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bba:	3104      	adds	r1, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc4:	d3f6      	bcc.n	8000bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc8:	e002      	b.n	8000bd0 <LoopFillZerobss>

08000bca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bcc:	f842 3b04 	str.w	r3, [r2], #4

08000bd0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd4:	d3f9      	bcc.n	8000bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd6:	f7ff fec5 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f00f fabd 	bl	8010158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd69 	bl	80006b4 <main>
  bx  lr
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be8:	08013144 	.word	0x08013144
  ldr  r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000bf4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000bf8:	2000bc94 	.word	0x2000bc94

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f947 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fd9c 	bl	8000770 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f95f 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f927 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20001530 	.word	0x20001530

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <HAL_GetTick+0x10>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20001530 	.word	0x20001530

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff fff0 	bl	8000cc8 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffe0 	bl	8000cc8 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4906      	ldr	r1, [pc, #24]	; (8000dbc <__NVIC_EnableIRQ+0x34>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff90 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff2d 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff42 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff35 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f50:	4ba3      	ldr	r3, [pc, #652]	; (80011e0 <HAL_ETH_Init+0x2a0>)
 8000f52:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e173      	b.n	800124e <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 febe 	bl	8003cfc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b97      	ldr	r3, [pc, #604]	; (80011e4 <HAL_ETH_Init+0x2a4>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f88:	4a96      	ldr	r2, [pc, #600]	; (80011e4 <HAL_ETH_Init+0x2a4>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f90:	4b94      	ldr	r3, [pc, #592]	; (80011e4 <HAL_ETH_Init+0x2a4>)
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f9c:	4b92      	ldr	r3, [pc, #584]	; (80011e8 <HAL_ETH_Init+0x2a8>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a91      	ldr	r2, [pc, #580]	; (80011e8 <HAL_ETH_Init+0x2a8>)
 8000fa2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fa6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fa8:	4b8f      	ldr	r3, [pc, #572]	; (80011e8 <HAL_ETH_Init+0x2a8>)
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	498d      	ldr	r1, [pc, #564]	; (80011e8 <HAL_ETH_Init+0x2a8>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fce:	f7ff fe7b 	bl	8000cc8 <HAL_GetTick>
 8000fd2:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fd4:	e011      	b.n	8000ffa <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000fd6:	f7ff fe77 	bl	8000cc8 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fe4:	d909      	bls.n	8000ffa <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e129      	b.n	800124e <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1e4      	bne.n	8000fd6 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f023 031c 	bic.w	r3, r3, #28
 800101a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800101c:	f002 f836 	bl	800308c <HAL_RCC_GetHCLKFreq>
 8001020:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4a71      	ldr	r2, [pc, #452]	; (80011ec <HAL_ETH_Init+0x2ac>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d908      	bls.n	800103c <HAL_ETH_Init+0xfc>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4a70      	ldr	r2, [pc, #448]	; (80011f0 <HAL_ETH_Init+0x2b0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d804      	bhi.n	800103c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e01a      	b.n	8001072 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	4a6c      	ldr	r2, [pc, #432]	; (80011f0 <HAL_ETH_Init+0x2b0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d908      	bls.n	8001056 <HAL_ETH_Init+0x116>
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4a66      	ldr	r2, [pc, #408]	; (80011e0 <HAL_ETH_Init+0x2a0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d204      	bcs.n	8001056 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f043 030c 	orr.w	r3, r3, #12
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	e00d      	b.n	8001072 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4a61      	ldr	r2, [pc, #388]	; (80011e0 <HAL_ETH_Init+0x2a0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d303      	bcc.n	8001066 <HAL_ETH_Init+0x126>
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4a64      	ldr	r2, [pc, #400]	; (80011f4 <HAL_ETH_Init+0x2b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d904      	bls.n	8001070 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e000      	b.n	8001072 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001070:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800107a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800107e:	2100      	movs	r1, #0
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fc08 	bl	8001896 <HAL_ETH_WritePHYRegister>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fdbe 	bl	8001c14 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0d4      	b.n	800124e <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010a4:	20ff      	movs	r0, #255	; 0xff
 80010a6:	f7ff fe19 	bl	8000cdc <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80a2 	beq.w	80011f8 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fe08 	bl	8000cc8 <HAL_GetTick>
 80010b8:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb7f 	bl	80017c6 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80010c8:	f7ff fdfe 	bl	8000cc8 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d90f      	bls.n	80010fa <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fd97 	bl	8001c14 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0a9      	b.n	800124e <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0da      	beq.n	80010ba <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001108:	2100      	movs	r1, #0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fbc3 	bl	8001896 <HAL_ETH_WritePHYRegister>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fd79 	bl	8001c14 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e08f      	b.n	800124e <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800112e:	f7ff fdcb 	bl	8000cc8 <HAL_GetTick>
 8001132:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	461a      	mov	r2, r3
 800113a:	2101      	movs	r1, #1
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fb42 	bl	80017c6 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001142:	f7ff fdc1 	bl	8000cc8 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001150:	4293      	cmp	r3, r2
 8001152:	d90f      	bls.n	8001174 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fd5a 	bl	8001c14 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e06c      	b.n	800124e <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0da      	beq.n	8001134 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	461a      	mov	r2, r3
 8001184:	2110      	movs	r1, #16
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fb1d 	bl	80017c6 <HAL_ETH_ReadPHYRegister>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fd3b 	bl	8001c14 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e051      	b.n	800124e <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	e002      	b.n	80011c4 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e032      	b.n	800123c <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	e02d      	b.n	800123c <HAL_ETH_Init+0x2fc>
 80011e0:	03938700 	.word	0x03938700
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	01312cff 	.word	0x01312cff
 80011f0:	02160ebf 	.word	0x02160ebf
 80011f4:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001208:	4313      	orrs	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	2100      	movs	r1, #0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fb40 	bl	8001896 <HAL_ETH_WritePHYRegister>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fcf6 	bl	8001c14 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e00c      	b.n	800124e <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001234:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001238:	f7ff fd50 	bl	8000cdc <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fce8 	bl	8001c14 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop

08001258 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ETH_DMATxDescListInit+0x20>
 8001274:	2302      	movs	r3, #2
 8001276:	e051      	b.n	800131c <HAL_ETH_DMATxDescListInit+0xc4>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2202      	movs	r2, #2
 8001284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e030      	b.n	80012f6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d208      	bcs.n	80012ea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	015b      	lsls	r3, r3, #5
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	461a      	mov	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	e002      	b.n	80012f0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3ca      	bcc.n	8001294 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001308:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001326:	b480      	push	{r7}
 8001328:	b087      	sub	sp, #28
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_ETH_DMARxDescListInit+0x20>
 8001342:	2302      	movs	r3, #2
 8001344:	e055      	b.n	80013f2 <HAL_ETH_DMARxDescListInit+0xcc>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2202      	movs	r2, #2
 8001352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e034      	b.n	80013cc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	015b      	lsls	r3, r3, #5
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	4413      	add	r3, r2
 800136a:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001372:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800137a:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	461a      	mov	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d208      	bcs.n	80013c0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	015b      	lsls	r3, r3, #5
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	4413      	add	r3, r2
 80013b8:	461a      	mov	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e002      	b.n	80013c6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3c6      	bcc.n	8001362 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013de:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_ETH_TransmitFrame+0x24>
 800141c:	2302      	movs	r3, #2
 800141e:	e0cc      	b.n	80015ba <HAL_ETH_TransmitFrame+0x1be>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0b7      	b.n	80015ba <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da09      	bge.n	8001468 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2212      	movs	r2, #18
 8001458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0a8      	b.n	80015ba <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800146e:	4293      	cmp	r3, r2
 8001470:	d915      	bls.n	800149e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	4a53      	ldr	r2, [pc, #332]	; (80015c4 <HAL_ETH_TransmitFrame+0x1c8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0a9b      	lsrs	r3, r3, #10
 800147c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_ETH_TransmitFrame+0x1c8>)
 8001482:	fba3 1302 	umull	r1, r3, r3, r2
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e001      	b.n	80014a2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800149e:	2301      	movs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11c      	bne.n	80014e2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80014b6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014c2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014d2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e0:	e04b      	b.n	800157a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e044      	b.n	8001572 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014f6:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800150c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001516:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3b01      	subs	r3, #1
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	429a      	cmp	r2, r3
 8001520:	d116      	bne.n	8001550 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001530:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001536:	fb03 f202 	mul.w	r2, r3, r2
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	4413      	add	r3, r2
 800153e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001542:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800154e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800155e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	3301      	adds	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3b6      	bcc.n	80014e8 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00d      	beq.n	80015a8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001594:	461a      	mov	r2, r3
 8001596:	2304      	movs	r3, #4
 8001598:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a2:	461a      	mov	r2, r3
 80015a4:	2300      	movs	r3, #0
 80015a6:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	ac02b00b 	.word	0xac02b00b
 80015c8:	fffffa0c 	.word	0xfffffa0c

080015cc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e074      	b.n	80016d0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015f6:	e05a      	b.n	80016ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800160c:	d10d      	bne.n	800162a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
 8001628:	e041      	b.n	80016ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
 800164e:	e02e      	b.n	80016ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	2b01      	cmp	r3, #1
 8001668:	d103      	bne.n	8001672 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800167e:	1f1a      	subs	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e010      	b.n	80016d0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db02      	blt.n	80016be <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d99c      	bls.n	80015f8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f0:	2b40      	cmp	r3, #64	; 0x40
 80016f2:	d112      	bne.n	800171a <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f002 fbcf 	bl	8003e98 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	461a      	mov	r2, r3
 8001704:	2340      	movs	r3, #64	; 0x40
 8001706:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001718:	e01a      	b.n	8001750 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d111      	bne.n	8001750 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f838 	bl	80017a2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	461a      	mov	r2, r3
 800173c:	2301      	movs	r3, #1
 800173e:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	461a      	mov	r2, r3
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001772:	d112      	bne.n	800179a <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f81d 	bl	80017b4 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001782:	461a      	mov	r2, r3
 8001784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001788:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	460b      	mov	r3, r1
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b82      	cmp	r3, #130	; 0x82
 80017e6:	d101      	bne.n	80017ec <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017e8:	2302      	movs	r3, #2
 80017ea:	e050      	b.n	800188e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2282      	movs	r2, #130	; 0x82
 80017f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 031c 	and.w	r3, r3, #28
 8001802:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8a1b      	ldrh	r3, [r3, #16]
 8001808:	02db      	lsls	r3, r3, #11
 800180a:	b29b      	uxth	r3, r3
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4313      	orrs	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fa46 	bl	8000cc8 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800183e:	e015      	b.n	800186c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001840:	f7ff fa42 	bl	8000cc8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184e:	d309      	bcc.n	8001864 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e014      	b.n	800188e <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e4      	bne.n	8001840 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	460b      	mov	r3, r1
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b42      	cmp	r3, #66	; 0x42
 80018b6:	d101      	bne.n	80018bc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80018b8:	2302      	movs	r3, #2
 80018ba:	e04e      	b.n	800195a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2242      	movs	r2, #66	; 0x42
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 031c 	and.w	r3, r3, #28
 80018d2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8a1b      	ldrh	r3, [r3, #16]
 80018d8:	02db      	lsls	r3, r3, #11
 80018da:	b29b      	uxth	r3, r3
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001912:	f7ff f9d9 	bl	8000cc8 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001918:	e015      	b.n	8001946 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800191a:	f7ff f9d5 	bl	8000cc8 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d309      	bcc.n	800193e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e00d      	b.n	800195a <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e4      	bne.n	800191a <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ETH_Start+0x16>
 8001974:	2302      	movs	r3, #2
 8001976:	e01f      	b.n	80019b8 <HAL_ETH_Start+0x56>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fb3f 	bl	800200c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb76 	bl	8002080 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fc01 	bl	800219c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fbaa 	bl	80020f4 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fbd1 	bl	8002148 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ETH_Stop+0x16>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e01f      	b.n	8001a16 <HAL_ETH_Stop+0x56>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fb99 	bl	800211e <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fbc0 	bl	8002172 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fb61 	bl	80020ba <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fbcf 	bl	800219c <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fb21 	bl	8002046 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_ETH_ConfigMAC+0x1c>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e0e4      	b.n	8001c06 <HAL_ETH_ConfigMAC+0x1e6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80b1 	beq.w	8001bb6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <HAL_ETH_ConfigMAC+0x1f0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001a6c:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001a72:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001a78:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001a7e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001a84:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001a8a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001a90:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001a96:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001a9c:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001aa2:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001aa8:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001aae:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7ff f908 	bl	8000cdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001adc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ae2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ae8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001aee:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001af4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001afa:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b06:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001b08:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff f8e2 	bl	8000cdc <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b28:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b32:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b50:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b56:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b5c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001b62:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b68:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff f8ab 	bl	8000cdc <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7ff f898 	bl	8000cdc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	61da      	str	r2, [r3, #28]
 8001bb4:	e01e      	b.n	8001bf4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001bc4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff f878 	bl	8000cdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	ff20810f 	.word	0xff20810f

08001c14 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0b0      	sub	sp, #192	; 0xc0
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c30:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c38:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c60:	e001      	b.n	8001c66 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c80:	2340      	movs	r3, #64	; 0x40
 8001c82:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ce8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cec:	4baa      	ldr	r3, [pc, #680]	; (8001f98 <ETH_MACDMAConfig+0x384>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001cf8:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001cfc:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001d00:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001d06:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001d0a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001d0e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001d14:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001d18:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001d1c:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001d20:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001d24:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001d28:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7fe ffc7 	bl	8000cdc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d56:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001d58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001d5c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d60:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d66:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001d6c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d72:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d78:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d84:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001d86:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7fe ffa2 	bl	8000cdc <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da0:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001daa:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001db4:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001dc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dc8:	4013      	ands	r3, r2
 8001dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001dd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001dd8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001dde:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001de4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001dea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001df0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e04:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7fe ff63 	bl	8000cdc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e1e:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001e20:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8001e24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7fe ff4e 	bl	8000cdc <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e48:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e52:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e5c:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ea4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <ETH_MACDMAConfig+0x388>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001eb0:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001eb2:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001eb4:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001eb6:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8001eb8:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001eba:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001ebc:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001ebe:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001ec0:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001ec2:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8001ec4:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001ec8:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001ecc:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8001ed0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001ed2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eea:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7fe feee 	bl	8000cdc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f0e:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001f14:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8001f18:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f1c:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8001f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8001f20:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f24:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001f26:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001f2a:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f38:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7fe fec7 	bl	8000cdc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f56:	461a      	mov	r2, r3
 8001f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f5c:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d10d      	bne.n	8001f82 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f80:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	461a      	mov	r2, r3
 8001f88:	2100      	movs	r1, #0
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f808 	bl	8001fa0 <ETH_MACAddressConfig>
}
 8001f90:	bf00      	nop
 8001f92:	37c0      	adds	r7, #192	; 0xc0
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	ff20810f 	.word	0xff20810f
 8001f9c:	f8de3f23 	.word	0xf8de3f23

08001fa0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3305      	adds	r3, #5
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	3204      	adds	r2, #4
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <ETH_MACAddressConfig+0x64>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3303      	adds	r3, #3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	061a      	lsls	r2, r3, #24
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <ETH_MACAddressConfig+0x68>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	6013      	str	r3, [r2, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40028040 	.word	0x40028040
 8002008:	40028044 	.word	0x40028044

0800200c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0208 	orr.w	r2, r2, #8
 8002026:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002030:	2001      	movs	r0, #1
 8002032:	f000 f8d9 	bl	80021e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0208 	bic.w	r2, r2, #8
 8002060:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800206a:	2001      	movs	r0, #1
 800206c:	f000 f8bc 	bl	80021e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0204 	orr.w	r2, r2, #4
 800209a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f000 f89f 	bl	80021e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 f882 	bl	80021e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800210e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002112:	6193      	str	r3, [r2, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002138:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800213c:	6193      	str	r3, [r2, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002166:	6193      	str	r3, [r2, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002190:	6193      	str	r3, [r2, #24]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021be:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f000 f80b 	bl	80021e8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021dc:	6193      	str	r3, [r2, #24]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <ETH_Delay+0x34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <ETH_Delay+0x38>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002204:	bf00      	nop
  }
  while (Delay --);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	60fa      	str	r2, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <ETH_Delay+0x1c>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000000 	.word	0x20000000
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002232:	e16f      	b.n	8002514 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8161 	beq.w	800250e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d00b      	beq.n	800226c <HAL_GPIO_Init+0x48>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002260:	2b11      	cmp	r3, #17
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b12      	cmp	r3, #18
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 0201 	and.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0xea>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b12      	cmp	r3, #18
 800230c:	d123      	bne.n	8002356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	6939      	ldr	r1, [r7, #16]
 8002352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0203 	and.w	r2, r3, #3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80bb 	beq.w	800250e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_GPIO_Init+0x30c>)
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	4a63      	ldr	r2, [pc, #396]	; (8002530 <HAL_GPIO_Init+0x30c>)
 80023a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a6:	6453      	str	r3, [r2, #68]	; 0x44
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_GPIO_Init+0x30c>)
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b4:	4a5f      	ldr	r2, [pc, #380]	; (8002534 <HAL_GPIO_Init+0x310>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_GPIO_Init+0x314>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d031      	beq.n	8002444 <HAL_GPIO_Init+0x220>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_GPIO_Init+0x318>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d02b      	beq.n	8002440 <HAL_GPIO_Init+0x21c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a55      	ldr	r2, [pc, #340]	; (8002540 <HAL_GPIO_Init+0x31c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d025      	beq.n	800243c <HAL_GPIO_Init+0x218>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a54      	ldr	r2, [pc, #336]	; (8002544 <HAL_GPIO_Init+0x320>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d01f      	beq.n	8002438 <HAL_GPIO_Init+0x214>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a53      	ldr	r2, [pc, #332]	; (8002548 <HAL_GPIO_Init+0x324>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d019      	beq.n	8002434 <HAL_GPIO_Init+0x210>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_GPIO_Init+0x328>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_GPIO_Init+0x20c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a51      	ldr	r2, [pc, #324]	; (8002550 <HAL_GPIO_Init+0x32c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00d      	beq.n	800242c <HAL_GPIO_Init+0x208>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_GPIO_Init+0x330>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d007      	beq.n	8002428 <HAL_GPIO_Init+0x204>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_GPIO_Init+0x334>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_GPIO_Init+0x200>
 8002420:	2308      	movs	r3, #8
 8002422:	e010      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002424:	2309      	movs	r3, #9
 8002426:	e00e      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002428:	2307      	movs	r3, #7
 800242a:	e00c      	b.n	8002446 <HAL_GPIO_Init+0x222>
 800242c:	2306      	movs	r3, #6
 800242e:	e00a      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002430:	2305      	movs	r3, #5
 8002432:	e008      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002434:	2304      	movs	r3, #4
 8002436:	e006      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002438:	2303      	movs	r3, #3
 800243a:	e004      	b.n	8002446 <HAL_GPIO_Init+0x222>
 800243c:	2302      	movs	r3, #2
 800243e:	e002      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_GPIO_Init+0x222>
 8002444:	2300      	movs	r3, #0
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	f002 0203 	and.w	r2, r2, #3
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4093      	lsls	r3, r2
 8002450:	461a      	mov	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002458:	4936      	ldr	r1, [pc, #216]	; (8002534 <HAL_GPIO_Init+0x310>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_GPIO_Init+0x338>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800248a:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_GPIO_Init+0x338>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_GPIO_Init+0x338>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024b4:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_GPIO_Init+0x338>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_GPIO_Init+0x338>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_GPIO_Init+0x338>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_GPIO_Init+0x338>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_GPIO_Init+0x338>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f ae88 	bne.w	8002234 <HAL_GPIO_Init+0x10>
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40021400 	.word	0x40021400
 8002550:	40021800 	.word	0x40021800
 8002554:	40021c00 	.word	0x40021c00
 8002558:	40022000 	.word	0x40022000
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002592:	b08f      	sub	sp, #60	; 0x3c
 8002594:	af0a      	add	r7, sp, #40	; 0x28
 8002596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e10f      	b.n	80027c2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d106      	bne.n	80025c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe fa9b 	bl	8000af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d102      	bne.n	80025dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 ffda 	bl	800359a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	687e      	ldr	r6, [r7, #4]
 80025ee:	466d      	mov	r5, sp
 80025f0:	f106 0410 	add.w	r4, r6, #16
 80025f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002600:	e885 0003 	stmia.w	r5, {r0, r1}
 8002604:	1d33      	adds	r3, r6, #4
 8002606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	f000 ff6f 	bl	80034ec <USB_CoreInit>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d0      	b.n	80027c2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f000 ffc7 	bl	80035ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e04a      	b.n	80026c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	333d      	adds	r3, #61	; 0x3d
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	333c      	adds	r3, #60	; 0x3c
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	b298      	uxth	r0, r3
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3342      	adds	r3, #66	; 0x42
 800266e:	4602      	mov	r2, r0
 8002670:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	333f      	adds	r3, #63	; 0x3f
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3344      	adds	r3, #68	; 0x44
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3348      	adds	r3, #72	; 0x48
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3350      	adds	r3, #80	; 0x50
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3af      	bcc.n	8002632 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e044      	b.n	8002762 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	3301      	adds	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d3b5      	bcc.n	80026d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	687e      	ldr	r6, [r7, #4]
 8002774:	466d      	mov	r5, sp
 8002776:	f106 0410 	add.w	r4, r6, #16
 800277a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002786:	e885 0003 	stmia.w	r5, {r0, r1}
 800278a:	1d33      	adds	r3, r6, #4
 800278c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f000 ff3e 	bl	8003610 <USB_DevInit>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00d      	b.n	80027c2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 f8f6 	bl	80039ac <USB_DevDisconnect>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	; 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e252      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d050      	beq.n	800288c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ea:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d00c      	beq.n	8002810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f6:	4b9b      	ldr	r3, [pc, #620]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d112      	bne.n	8002828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002802:	4b98      	ldr	r3, [pc, #608]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280e:	d10b      	bne.n	8002828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	4b94      	ldr	r3, [pc, #592]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d036      	beq.n	800288a <HAL_RCC_OscConfig+0xbe>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d132      	bne.n	800288a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e22d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4b8e      	ldr	r3, [pc, #568]	; (8002a68 <HAL_RCC_OscConfig+0x29c>)
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d013      	beq.n	8002862 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe fa45 	bl	8000cc8 <HAL_GetTick>
 800283e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002842:	f7fe fa41 	bl	8000cc8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e217      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002854:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x76>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fa31 	bl	8000cc8 <HAL_GetTick>
 8002866:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286a:	f7fe fa2d 	bl	8000cc8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b64      	cmp	r3, #100	; 0x64
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e203      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287c:	4b79      	ldr	r3, [pc, #484]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x9e>
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d077      	beq.n	8002988 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002898:	4b72      	ldr	r3, [pc, #456]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d126      	bne.n	80028fe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b0:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d120      	bne.n	80028fe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x108>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e1d7      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	21f8      	movs	r1, #248	; 0xf8
 80028e2:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e6:	fa91 f1a1 	rbit	r1, r1
 80028ea:	62f9      	str	r1, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ee:	fab1 f181 	clz	r1, r1
 80028f2:	b2c9      	uxtb	r1, r1
 80028f4:	408b      	lsls	r3, r1
 80028f6:	495b      	ldr	r1, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fc:	e044      	b.n	8002988 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02a      	beq.n	800295c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002906:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <HAL_RCC_OscConfig+0x2a0>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe f9dc 	bl	8000cc8 <HAL_GetTick>
 8002910:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7fe f9d8 	bl	8000cc8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1ae      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b4f      	ldr	r3, [pc, #316]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	21f8      	movs	r1, #248	; 0xf8
 8002940:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002944:	fa91 f1a1 	rbit	r1, r1
 8002948:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800294a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800294c:	fab1 f181 	clz	r1, r1
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	408b      	lsls	r3, r1
 8002954:	4943      	ldr	r1, [pc, #268]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
 800295a:	e015      	b.n	8002988 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295c:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x2a0>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe f9b1 	bl	8000cc8 <HAL_GetTick>
 8002966:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe f9ad 	bl	8000cc8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e183      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d030      	beq.n	80029f6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299c:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x2a4>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe f991 	bl	8000cc8 <HAL_GetTick>
 80029a6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe f98d 	bl	8000cc8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e163      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x1de>
 80029c8:	e015      	b.n	80029f6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <HAL_RCC_OscConfig+0x2a4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe f97a 	bl	8000cc8 <HAL_GetTick>
 80029d4:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe f976 	bl	8000cc8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e14c      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8087 	beq.w	8002b12 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d110      	bne.n	8002a38 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_RCC_OscConfig+0x298>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x2a8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x2a8>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x2a8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d122      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCC_OscConfig+0x2a8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_RCC_OscConfig+0x2a8>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5c:	f7fe f934 	bl	8000cc8 <HAL_GetTick>
 8002a60:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	e012      	b.n	8002a8a <HAL_RCC_OscConfig+0x2be>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40023802 	.word	0x40023802
 8002a6c:	42470000 	.word	0x42470000
 8002a70:	42470e80 	.word	0x42470e80
 8002a74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a78:	f7fe f926 	bl	8000cc8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0fc      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b80      	ldr	r3, [pc, #512]	; (8002c8c <HAL_RCC_OscConfig+0x4c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe f90e 	bl	8000cc8 <HAL_GetTick>
 8002aac:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe f90a 	bl	8000cc8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0de      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2e4>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f8f8 	bl	8000cc8 <HAL_GetTick>
 8002ad8:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe f8f4 	bl	8000cc8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0c8      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ee      	bne.n	8002adc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a62      	ldr	r2, [pc, #392]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80b3 	beq.w	8002c82 <HAL_RCC_OscConfig+0x4b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d07d      	beq.n	8002c24 <HAL_RCC_OscConfig+0x458>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d162      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x42a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe f8c7 	bl	8000cc8 <HAL_GetTick>
 8002b3a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe f8c3 	bl	8000cc8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e099      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002b6e:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6939      	ldr	r1, [r7, #16]
 8002b72:	fa91 f1a1 	rbit	r1, r1
 8002b76:	60f9      	str	r1, [r7, #12]
  return result;
 8002b78:	68f9      	ldr	r1, [r7, #12]
 8002b7a:	fab1 f181 	clz	r1, r1
 8002b7e:	b2c9      	uxtb	r1, r1
 8002b80:	408b      	lsls	r3, r1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002b90:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	fa91 f1a1 	rbit	r1, r1
 8002b98:	6179      	str	r1, [r7, #20]
  return result;
 8002b9a:	6979      	ldr	r1, [r7, #20]
 8002b9c:	fab1 f181 	clz	r1, r1
 8002ba0:	b2c9      	uxtb	r1, r1
 8002ba2:	408b      	lsls	r3, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002bae:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	fa91 f1a1 	rbit	r1, r1
 8002bb6:	61f9      	str	r1, [r7, #28]
  return result;
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	fab1 f181 	clz	r1, r1
 8002bbe:	b2c9      	uxtb	r1, r1
 8002bc0:	408b      	lsls	r3, r1
 8002bc2:	4934      	ldr	r1, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe f87b 	bl	8000cc8 <HAL_GetTick>
 8002bd2:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f877 	bl	8000cc8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	; 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e04d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x40a>
 8002bf4:	e045      	b.n	8002c82 <HAL_RCC_OscConfig+0x4b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f864 	bl	8000cc8 <HAL_GetTick>
 8002c00:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x44a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe f860 	bl	8000cc8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x44a>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e036      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x438>
 8002c22:	e02e      	b.n	8002c82 <HAL_RCC_OscConfig+0x4b6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e029      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d11c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4b2>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d115      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4b2>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4b2>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4b2>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3740      	adds	r7, #64	; 0x40
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	40023870 	.word	0x40023870
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470060 	.word	0x42470060

08002c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0d2      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0be      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf0:	4b5c      	ldr	r3, [pc, #368]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a5b      	ldr	r2, [pc, #364]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4950      	ldr	r1, [pc, #320]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d040      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d115      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e085      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e079      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e071      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4939      	ldr	r1, [pc, #228]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fd ffa0 	bl	8000cc8 <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fd ff9c 	bl	8000cc8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e059      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d20c      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e03c      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	491b      	ldr	r1, [pc, #108]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4913      	ldr	r1, [pc, #76]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002e1a:	f000 f82b 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4601      	mov	r1, r0
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e28:	22f0      	movs	r2, #240	; 0xf0
 8002e2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	fa92 f2a2 	rbit	r2, r2
 8002e32:	60fa      	str	r2, [r7, #12]
  return result;
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	40d3      	lsrs	r3, r2
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1cc>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	fa21 f303 	lsr.w	r3, r1, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1d0>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1d4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fef8 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08012f58 	.word	0x08012f58
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000004 	.word	0x20000004

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b094      	sub	sp, #80	; 0x50
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e80:	2300      	movs	r3, #0
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e84:	2300      	movs	r3, #0
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8c:	4b7c      	ldr	r3, [pc, #496]	; (8003080 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	f200 80e7 	bhi.w	800306c <HAL_RCC_GetSysClockFreq+0x1f8>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea6:	e0e1      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_GetSysClockFreq+0x210>)
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eac:	e0e1      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4b76      	ldr	r3, [pc, #472]	; (8003088 <HAL_RCC_GetSysClockFreq+0x214>)
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb2:	e0de      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4b72      	ldr	r3, [pc, #456]	; (8003080 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b70      	ldr	r3, [pc, #448]	; (8003080 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d065      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	f04f 0000 	mov.w	r0, #0
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	0159      	lsls	r1, r3, #5
 8002ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef8:	0150      	lsls	r0, r2, #5
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4621      	mov	r1, r4
 8002f00:	1a51      	subs	r1, r2, r1
 8002f02:	6139      	str	r1, [r7, #16]
 8002f04:	4629      	mov	r1, r5
 8002f06:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f18:	4659      	mov	r1, fp
 8002f1a:	018b      	lsls	r3, r1, #6
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f22:	4651      	mov	r1, sl
 8002f24:	018a      	lsls	r2, r1, #6
 8002f26:	46d4      	mov	ip, sl
 8002f28:	ebb2 080c 	subs.w	r8, r2, ip
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f46:	4690      	mov	r8, r2
 8002f48:	4699      	mov	r9, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	eb18 0303 	adds.w	r3, r8, r3
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	462b      	mov	r3, r5
 8002f54:	eb49 0303 	adc.w	r3, r9, r3
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f66:	4629      	mov	r1, r5
 8002f68:	024b      	lsls	r3, r1, #9
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4604      	mov	r4, r0
 8002f70:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002f74:	4601      	mov	r1, r0
 8002f76:	024a      	lsls	r2, r1, #9
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7e:	2200      	movs	r2, #0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f88:	f7fd f922 	bl	80001d0 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f94:	e05c      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
 8002fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0159      	lsls	r1, r3, #5
 8002fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc2:	0150      	lsls	r0, r2, #5
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	46c4      	mov	ip, r8
 8002fca:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	468c      	mov	ip, r1
 8002fd4:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fec:	ebb2 040a 	subs.w	r4, r2, sl
 8002ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	00eb      	lsls	r3, r5, #3
 8002ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003002:	00e2      	lsls	r2, r4, #3
 8003004:	4614      	mov	r4, r2
 8003006:	461d      	mov	r5, r3
 8003008:	4603      	mov	r3, r0
 800300a:	18e3      	adds	r3, r4, r3
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	460b      	mov	r3, r1
 8003010:	eb45 0303 	adc.w	r3, r5, r3
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003022:	4629      	mov	r1, r5
 8003024:	028b      	lsls	r3, r1, #10
 8003026:	4620      	mov	r0, r4
 8003028:	4629      	mov	r1, r5
 800302a:	4604      	mov	r4, r0
 800302c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003030:	4601      	mov	r1, r0
 8003032:	028a      	lsls	r2, r1, #10
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	2200      	movs	r2, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	61fa      	str	r2, [r7, #28]
 8003040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003044:	f7fd f8c4 	bl	80001d0 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306a:	e002      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetSysClockFreq+0x210>)
 800306e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003074:	4618      	mov	r0, r3
 8003076:	3750      	adds	r7, #80	; 0x50
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <HAL_RCC_GetHCLKFreq+0x10>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	20000000 	.word	0x20000000

080030a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80030a6:	f7ff fff1 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030aa:	4601      	mov	r1, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80030b4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80030b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	603a      	str	r2, [r7, #0]
  return result;
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	40d3      	lsrs	r3, r2
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08012f68 	.word	0x08012f68

080030e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80030ea:	f7ff ffcf 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ee:	4601      	mov	r1, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030f8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80030fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	fa92 f2a2 	rbit	r2, r2
 8003104:	603a      	str	r2, [r7, #0]
  return result;
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	fab2 f282 	clz	r2, r2
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	40d3      	lsrs	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	08012f68 	.word	0x08012f68

08003128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e03f      	b.n	80031ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fc60 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f829 	bl	80031c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003204:	f023 030c 	bic.w	r3, r3, #12
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003230:	f040 80aa 	bne.w	8003388 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4aa9      	ldr	r2, [pc, #676]	; (80034e0 <UART_SetConfig+0x31c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <UART_SetConfig+0x84>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4aa8      	ldr	r2, [pc, #672]	; (80034e4 <UART_SetConfig+0x320>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d14f      	bne.n	80032e8 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7ff ff4c 	bl	80030e4 <HAL_RCC_GetPCLK2Freq>
 800324c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	4aa0      	ldr	r2, [pc, #640]	; (80034e8 <UART_SetConfig+0x324>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	0119      	lsls	r1, r3, #4
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4b98      	ldr	r3, [pc, #608]	; (80034e8 <UART_SetConfig+0x324>)
 8003286:	fba3 0302 	umull	r0, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2064      	movs	r0, #100	; 0x64
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a93      	ldr	r2, [pc, #588]	; (80034e8 <UART_SetConfig+0x324>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a6:	4419      	add	r1, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009a      	lsls	r2, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80032be:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <UART_SetConfig+0x324>)
 80032c0:	fba3 0302 	umull	r0, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2064      	movs	r0, #100	; 0x64
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	3332      	adds	r3, #50	; 0x32
 80032d2:	4a85      	ldr	r2, [pc, #532]	; (80034e8 <UART_SetConfig+0x324>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	440a      	add	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	e0f7      	b.n	80034d8 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7ff feda 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 80032ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	4a78      	ldr	r2, [pc, #480]	; (80034e8 <UART_SetConfig+0x324>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	0119      	lsls	r1, r3, #4
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	009a      	lsls	r2, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fbb2 f2f3 	udiv	r2, r2, r3
 8003324:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <UART_SetConfig+0x324>)
 8003326:	fba3 0302 	umull	r0, r3, r3, r2
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2064      	movs	r0, #100	; 0x64
 800332e:	fb00 f303 	mul.w	r3, r0, r3
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	3332      	adds	r3, #50	; 0x32
 8003338:	4a6b      	ldr	r2, [pc, #428]	; (80034e8 <UART_SetConfig+0x324>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003346:	4419      	add	r1, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fbb2 f2f3 	udiv	r2, r2, r3
 800335e:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <UART_SetConfig+0x324>)
 8003360:	fba3 0302 	umull	r0, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2064      	movs	r0, #100	; 0x64
 8003368:	fb00 f303 	mul.w	r3, r0, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <UART_SetConfig+0x324>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 0207 	and.w	r2, r3, #7
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	440a      	add	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003386:	e0a7      	b.n	80034d8 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a54      	ldr	r2, [pc, #336]	; (80034e0 <UART_SetConfig+0x31c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <UART_SetConfig+0x1d8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a53      	ldr	r2, [pc, #332]	; (80034e4 <UART_SetConfig+0x320>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d14e      	bne.n	800343a <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff fea2 	bl	80030e4 <HAL_RCC_GetPCLK2Freq>
 80033a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	009a      	lsls	r2, r3, #2
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <UART_SetConfig+0x324>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	0119      	lsls	r1, r3, #4
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009a      	lsls	r2, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <UART_SetConfig+0x324>)
 80033da:	fba3 0302 	umull	r0, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2064      	movs	r0, #100	; 0x64
 80033e2:	fb00 f303 	mul.w	r3, r0, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	3332      	adds	r3, #50	; 0x32
 80033ec:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <UART_SetConfig+0x324>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f8:	4419      	add	r1, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <UART_SetConfig+0x324>)
 8003412:	fba3 0302 	umull	r0, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	3332      	adds	r3, #50	; 0x32
 8003424:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <UART_SetConfig+0x324>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	440a      	add	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e04e      	b.n	80034d8 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 800343a:	f7ff fe31 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 800343e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009a      	lsls	r2, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <UART_SetConfig+0x324>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	0119      	lsls	r1, r3, #4
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	fbb2 f2f3 	udiv	r2, r2, r3
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <UART_SetConfig+0x324>)
 8003478:	fba3 0302 	umull	r0, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	2064      	movs	r0, #100	; 0x64
 8003480:	fb00 f303 	mul.w	r3, r0, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	3332      	adds	r3, #50	; 0x32
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <UART_SetConfig+0x324>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003496:	4419      	add	r1, r3
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009a      	lsls	r2, r3, #2
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <UART_SetConfig+0x324>)
 80034b0:	fba3 0302 	umull	r0, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2064      	movs	r0, #100	; 0x64
 80034b8:	fb00 f303 	mul.w	r3, r0, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	3332      	adds	r3, #50	; 0x32
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <UART_SetConfig+0x324>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	440a      	add	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	e7ff      	b.n	80034d8 <UART_SetConfig+0x314>
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40011400 	.word	0x40011400
 80034e8:	51eb851f 	.word	0x51eb851f

080034ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034ec:	b084      	sub	sp, #16
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	f107 001c 	add.w	r0, r7, #28
 80034fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2b01      	cmp	r3, #1
 8003502:	d122      	bne.n	800354a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fa4c 	bl	80039dc <USB_CoreReset>
 8003544:	4603      	mov	r3, r0
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e010      	b.n	800356c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa40 	bl	80039dc <USB_CoreReset>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10b      	bne.n	800358a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f043 0206 	orr.w	r2, r3, #6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003596:	b004      	add	sp, #16
 8003598:	4770      	bx	lr

0800359a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0201 	bic.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e00b      	b.n	80035fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
 80035f8:	e001      	b.n	80035fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e003      	b.n	8003606 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80035fe:	2032      	movs	r0, #50	; 0x32
 8003600:	f7fd fb6c 	bl	8000cdc <HAL_Delay>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003610:	b084      	sub	sp, #16
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800361e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e009      	b.n	8003644 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	3340      	adds	r3, #64	; 0x40
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	2200      	movs	r2, #0
 800363c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3301      	adds	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0e      	cmp	r3, #14
 8003648:	d9f2      	bls.n	8003630 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d112      	bne.n	8003676 <USB_DevInit+0x66>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
 8003674:	e00b      	b.n	800368e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003694:	461a      	mov	r2, r3
 8003696:	2300      	movs	r3, #0
 8003698:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	4619      	mov	r1, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	461a      	mov	r2, r3
 80036aa:	680b      	ldr	r3, [r1, #0]
 80036ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10c      	bne.n	80036ce <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036ba:	2100      	movs	r1, #0
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f95d 	bl	800397c <USB_SetDevSpeed>
 80036c2:	e008      	b.n	80036d6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036c4:	2101      	movs	r1, #1
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f958 	bl	800397c <USB_SetDevSpeed>
 80036cc:	e003      	b.n	80036d6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036ce:	2103      	movs	r1, #3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f953 	bl	800397c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036d6:	2110      	movs	r1, #16
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f90b 	bl	80038f4 <USB_FlushTxFifo>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f927 	bl	800393c <USB_FlushRxFifo>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370a:	461a      	mov	r2, r3
 800370c:	2300      	movs	r3, #0
 800370e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	e043      	b.n	80037aa <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003738:	d118      	bne.n	800376c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e013      	b.n	800377e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	461a      	mov	r2, r3
 8003764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e008      	b.n	800377e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2300      	movs	r3, #0
 800377c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	461a      	mov	r2, r3
 800379e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	3301      	adds	r3, #1
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d3b7      	bcc.n	8003722 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	e043      	b.n	8003840 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ce:	d118      	bne.n	8003802 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	461a      	mov	r2, r3
 80037e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e013      	b.n	8003814 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	e008      	b.n	8003814 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380e:	461a      	mov	r2, r3
 8003810:	2300      	movs	r3, #0
 8003812:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2300      	movs	r3, #0
 8003824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	461a      	mov	r2, r3
 8003834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003838:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d3b7      	bcc.n	80037b8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	2b01      	cmp	r3, #1
 8003860:	d111      	bne.n	8003886 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	461a      	mov	r2, r3
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <USB_DevInit+0x2dc>)
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	f043 0303 	orr.w	r3, r3, #3
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003892:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <USB_DevInit+0x2e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f043 0208 	orr.w	r2, r3, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038e6:	b004      	add	sp, #16
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	00800100 	.word	0x00800100
 80038f0:	803c3800 	.word	0x803c3800

080038f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3301      	adds	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a08      	ldr	r2, [pc, #32]	; (8003938 <USB_FlushTxFifo+0x44>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e006      	b.n	800392e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b20      	cmp	r3, #32
 800392a:	d0f0      	beq.n	800390e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	00030d40 	.word	0x00030d40

0800393c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2210      	movs	r2, #16
 800394c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3301      	adds	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <USB_FlushRxFifo+0x3c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e006      	b.n	800396e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b10      	cmp	r3, #16
 800396a:	d0f0      	beq.n	800394e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	00030d40 	.word	0x00030d40

0800397c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80039cc:	2003      	movs	r0, #3
 80039ce:	f7fd f985 	bl	8000cdc <HAL_Delay>

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <USB_CoreReset+0x60>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e01b      	b.n	8003a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	daf2      	bge.n	80039e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <USB_CoreReset+0x60>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e006      	b.n	8003a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d0f0      	beq.n	8003a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	00030d40 	.word	0x00030d40

08003a40 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b08e      	sub	sp, #56	; 0x38
 8003a44:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8003a46:	4ba0      	ldr	r3, [pc, #640]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003a48:	22a9      	movs	r2, #169	; 0xa9
 8003a4a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8003a4c:	4b9e      	ldr	r3, [pc, #632]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003a4e:	22fe      	movs	r2, #254	; 0xfe
 8003a50:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 103;
 8003a52:	4b9d      	ldr	r3, [pc, #628]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003a54:	2267      	movs	r2, #103	; 0x67
 8003a56:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003a58:	4b9b      	ldr	r3, [pc, #620]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003a5a:	226f      	movs	r2, #111	; 0x6f
 8003a5c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003a5e:	4b9b      	ldr	r3, [pc, #620]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003a64:	4b99      	ldr	r3, [pc, #612]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8003a6a:	4b98      	ldr	r3, [pc, #608]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003a70:	4b96      	ldr	r3, [pc, #600]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003a76:	4b96      	ldr	r3, [pc, #600]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003a7c:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003a82:	4b93      	ldr	r3, [pc, #588]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003a88:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003a8e:	2100      	movs	r1, #0
 8003a90:	2000      	movs	r0, #0
 8003a92:	f003 fd2d 	bl	80074f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003a96:	4b8c      	ldr	r3, [pc, #560]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	061a      	lsls	r2, r3, #24
 8003a9c:	4b8a      	ldr	r3, [pc, #552]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003a9e:	785b      	ldrb	r3, [r3, #1]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	4a86      	ldr	r2, [pc, #536]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003aae:	78d2      	ldrb	r2, [r2, #3]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	061a      	lsls	r2, r3, #24
 8003ab4:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	0619      	lsls	r1, r3, #24
 8003aba:	4b83      	ldr	r3, [pc, #524]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	4319      	orrs	r1, r3
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003ac4:	789b      	ldrb	r3, [r3, #2]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	497f      	ldr	r1, [pc, #508]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003acc:	78c9      	ldrb	r1, [r1, #3]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	0619      	lsls	r1, r3, #24
 8003ade:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	4319      	orrs	r1, r3
 8003ae6:	4b78      	ldr	r3, [pc, #480]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003ae8:	789b      	ldrb	r3, [r3, #2]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	430b      	orrs	r3, r1
 8003aee:	4976      	ldr	r1, [pc, #472]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003af0:	78c9      	ldrb	r1, [r1, #3]
 8003af2:	430b      	orrs	r3, r1
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003afa:	431a      	orrs	r2, r3
 8003afc:	4b72      	ldr	r3, [pc, #456]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	0619      	lsls	r1, r3, #24
 8003b02:	4b71      	ldr	r3, [pc, #452]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	4319      	orrs	r1, r3
 8003b0a:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003b0c:	789b      	ldrb	r3, [r3, #2]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	430b      	orrs	r3, r1
 8003b12:	496d      	ldr	r1, [pc, #436]	; (8003cc8 <MX_LWIP_Init+0x288>)
 8003b14:	78c9      	ldrb	r1, [r1, #3]
 8003b16:	430b      	orrs	r3, r1
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	4a6d      	ldr	r2, [pc, #436]	; (8003cd4 <MX_LWIP_Init+0x294>)
 8003b1e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b20:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	061a      	lsls	r2, r3, #24
 8003b26:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	4b67      	ldr	r3, [pc, #412]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b30:	789b      	ldrb	r3, [r3, #2]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	4313      	orrs	r3, r2
 8003b36:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b38:	78d2      	ldrb	r2, [r2, #3]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	061a      	lsls	r2, r3, #24
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	0619      	lsls	r1, r3, #24
 8003b44:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	4319      	orrs	r1, r3
 8003b4c:	4b5f      	ldr	r3, [pc, #380]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b4e:	789b      	ldrb	r3, [r3, #2]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	430b      	orrs	r3, r1
 8003b54:	495d      	ldr	r1, [pc, #372]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b56:	78c9      	ldrb	r1, [r1, #3]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b60:	431a      	orrs	r2, r3
 8003b62:	4b5a      	ldr	r3, [pc, #360]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	0619      	lsls	r1, r3, #24
 8003b68:	4b58      	ldr	r3, [pc, #352]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	4319      	orrs	r1, r3
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b72:	789b      	ldrb	r3, [r3, #2]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	430b      	orrs	r3, r1
 8003b78:	4954      	ldr	r1, [pc, #336]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b7a:	78c9      	ldrb	r1, [r1, #3]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b84:	431a      	orrs	r2, r3
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	0619      	lsls	r1, r3, #24
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	4319      	orrs	r1, r3
 8003b94:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b96:	789b      	ldrb	r3, [r3, #2]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	494b      	ldr	r1, [pc, #300]	; (8003ccc <MX_LWIP_Init+0x28c>)
 8003b9e:	78c9      	ldrb	r1, [r1, #3]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	0e1b      	lsrs	r3, r3, #24
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <MX_LWIP_Init+0x298>)
 8003ba8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003baa:	4b49      	ldr	r3, [pc, #292]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	061a      	lsls	r2, r3, #24
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bba:	789b      	ldrb	r3, [r3, #2]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	4a43      	ldr	r2, [pc, #268]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bc2:	78d2      	ldrb	r2, [r2, #3]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	061a      	lsls	r2, r3, #24
 8003bc8:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	0619      	lsls	r1, r3, #24
 8003bce:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	4319      	orrs	r1, r3
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bd8:	789b      	ldrb	r3, [r3, #2]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	493c      	ldr	r1, [pc, #240]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003be0:	78c9      	ldrb	r1, [r1, #3]
 8003be2:	430b      	orrs	r3, r1
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bea:	431a      	orrs	r2, r3
 8003bec:	4b38      	ldr	r3, [pc, #224]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	0619      	lsls	r1, r3, #24
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	4319      	orrs	r1, r3
 8003bfa:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003bfc:	789b      	ldrb	r3, [r3, #2]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	430b      	orrs	r3, r1
 8003c02:	4933      	ldr	r1, [pc, #204]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003c04:	78c9      	ldrb	r1, [r1, #3]
 8003c06:	430b      	orrs	r3, r1
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	0619      	lsls	r1, r3, #24
 8003c16:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	4319      	orrs	r1, r3
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003c20:	789b      	ldrb	r3, [r3, #2]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	430b      	orrs	r3, r1
 8003c26:	492a      	ldr	r1, [pc, #168]	; (8003cd0 <MX_LWIP_Init+0x290>)
 8003c28:	78c9      	ldrb	r1, [r1, #3]
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	0e1b      	lsrs	r3, r3, #24
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <MX_LWIP_Init+0x29c>)
 8003c32:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003c34:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <MX_LWIP_Init+0x2a0>)
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <MX_LWIP_Init+0x2a4>)
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <MX_LWIP_Init+0x29c>)
 8003c42:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <MX_LWIP_Init+0x298>)
 8003c44:	4923      	ldr	r1, [pc, #140]	; (8003cd4 <MX_LWIP_Init+0x294>)
 8003c46:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c48:	f004 f90a 	bl	8007e60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003c4c:	4826      	ldr	r0, [pc, #152]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c4e:	f004 f9e9 	bl	8008024 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003c52:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003c64:	4820      	ldr	r0, [pc, #128]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c66:	f004 f9eb 	bl	8008040 <netif_set_up>
 8003c6a:	e002      	b.n	8003c72 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003c6c:	481e      	ldr	r0, [pc, #120]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c6e:	f004 fa2b 	bl	80080c8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003c72:	491e      	ldr	r1, [pc, #120]	; (8003cec <MX_LWIP_Init+0x2ac>)
 8003c74:	481c      	ldr	r0, [pc, #112]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c76:	f004 fa94 	bl	80081a2 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003c82:	f107 0320 	add.w	r3, r7, #32
 8003c86:	2101      	movs	r1, #1
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fd9f 	bl	80047cc <osSemaphoreCreate>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <MX_LWIP_Init+0x2b0>)
 8003c92:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <MX_LWIP_Init+0x2b4>)
 8003c96:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <MX_LWIP_Init+0x2a8>)
 8003c98:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <MX_LWIP_Init+0x2b0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <MX_LWIP_Init+0x2b4>)
 8003ca0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <MX_LWIP_Init+0x2b8>)
 8003ca4:	1d3c      	adds	r4, r7, #4
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <MX_LWIP_Init+0x2b4>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fc8b 	bl	80045d4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003cbe:	bf00      	nop
 8003cc0:	3728      	adds	r7, #40	; 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001580 	.word	0x20001580
 8003ccc:	20001584 	.word	0x20001584
 8003cd0:	20001588 	.word	0x20001588
 8003cd4:	20001574 	.word	0x20001574
 8003cd8:	20001578 	.word	0x20001578
 8003cdc:	2000157c 	.word	0x2000157c
 8003ce0:	08007419 	.word	0x08007419
 8003ce4:	08004369 	.word	0x08004369
 8003ce8:	20001540 	.word	0x20001540
 8003cec:	0800444d 	.word	0x0800444d
 8003cf0:	20001534 	.word	0x20001534
 8003cf4:	20001538 	.word	0x20001538
 8003cf8:	0801115c 	.word	0x0801115c

08003cfc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a59      	ldr	r2, [pc, #356]	; (8003e80 <HAL_ETH_MspInit+0x184>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	f040 80ac 	bne.w	8003e78 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4a56      	ldr	r2, [pc, #344]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d30:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4a4f      	ldr	r2, [pc, #316]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4a48      	ldr	r2, [pc, #288]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d66:	6313      	str	r3, [r2, #48]	; 0x30
 8003d68:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	4b42      	ldr	r3, [pc, #264]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	6313      	str	r3, [r2, #48]	; 0x30
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003da0:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_ETH_MspInit+0x188>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003de4:	2332      	movs	r3, #50	; 0x32
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de8:	2302      	movs	r3, #2
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df0:	2303      	movs	r3, #3
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003df4:	230b      	movs	r3, #11
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4822      	ldr	r0, [pc, #136]	; (8003e88 <HAL_ETH_MspInit+0x18c>)
 8003e00:	f7fe fa10 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e04:	2386      	movs	r3, #134	; 0x86
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e10:	2303      	movs	r3, #3
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e14:	230b      	movs	r3, #11
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	481b      	ldr	r0, [pc, #108]	; (8003e8c <HAL_ETH_MspInit+0x190>)
 8003e20:	f7fe fa00 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e32:	2303      	movs	r3, #3
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e36:	230b      	movs	r3, #11
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4813      	ldr	r0, [pc, #76]	; (8003e90 <HAL_ETH_MspInit+0x194>)
 8003e42:	f7fe f9ef 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003e46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e58:	230b      	movs	r3, #11
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e60:	4619      	mov	r1, r3
 8003e62:	480c      	ldr	r0, [pc, #48]	; (8003e94 <HAL_ETH_MspInit+0x198>)
 8003e64:	f7fe f9de 	bl	8002224 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2105      	movs	r1, #5
 8003e6c:	203d      	movs	r0, #61	; 0x3d
 8003e6e:	f7fd f830 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003e72:	203d      	movs	r0, #61	; 0x3d
 8003e74:	f7fd f849 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3738      	adds	r7, #56	; 0x38
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40028000 	.word	0x40028000
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020000 	.word	0x40020000
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40021800 	.word	0x40021800

08003e98 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_ETH_RxCpltCallback+0x1c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fd11 	bl	80048cc <osSemaphoreRelease>
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000462c 	.word	0x2000462c

08003eb8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b090      	sub	sp, #64	; 0x40
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ec4:	4b60      	ldr	r3, [pc, #384]	; (8004048 <low_level_init+0x190>)
 8003ec6:	4a61      	ldr	r2, [pc, #388]	; (800404c <low_level_init+0x194>)
 8003ec8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <low_level_init+0x190>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003ed0:	4b5d      	ldr	r3, [pc, #372]	; (8004048 <low_level_init+0x190>)
 8003ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ed6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003ed8:	4b5b      	ldr	r3, [pc, #364]	; (8004048 <low_level_init+0x190>)
 8003eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ede:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <low_level_init+0x190>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003ef2:	23e1      	movs	r3, #225	; 0xe1
 8003ef4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8003f0a:	4a4f      	ldr	r2, [pc, #316]	; (8004048 <low_level_init+0x190>)
 8003f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f10:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003f12:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <low_level_init+0x190>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003f18:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <low_level_init+0x190>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <low_level_init+0x190>)
 8003f20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f24:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003f26:	4848      	ldr	r0, [pc, #288]	; (8004048 <low_level_init+0x190>)
 8003f28:	f7fd f80a 	bl	8000f40 <HAL_ETH_Init>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003f32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	4a40      	ldr	r2, [pc, #256]	; (8004050 <low_level_init+0x198>)
 8003f50:	4940      	ldr	r1, [pc, #256]	; (8004054 <low_level_init+0x19c>)
 8003f52:	483d      	ldr	r0, [pc, #244]	; (8004048 <low_level_init+0x190>)
 8003f54:	f7fd f980 	bl	8001258 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003f58:	2304      	movs	r3, #4
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <low_level_init+0x1a0>)
 8003f5c:	493f      	ldr	r1, [pc, #252]	; (800405c <low_level_init+0x1a4>)
 8003f5e:	483a      	ldr	r0, [pc, #232]	; (8004048 <low_level_init+0x190>)
 8003f60:	f7fd f9e1 	bl	8001326 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2206      	movs	r2, #6
 8003f68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <low_level_init+0x190>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	781a      	ldrb	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003f78:	4b33      	ldr	r3, [pc, #204]	; (8004048 <low_level_init+0x190>)
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	785a      	ldrb	r2, [r3, #1]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003f84:	4b30      	ldr	r3, [pc, #192]	; (8004048 <low_level_init+0x190>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	789a      	ldrb	r2, [r3, #2]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003f90:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <low_level_init+0x190>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	78da      	ldrb	r2, [r3, #3]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <low_level_init+0x190>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	791a      	ldrb	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <low_level_init+0x190>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	795a      	ldrb	r2, [r3, #5]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003fba:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003fc2:	f043 030a 	orr.w	r3, r3, #10
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fbf5 	bl	80047cc <osSemaphoreCreate>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <low_level_init+0x1a8>)
 8003fe6:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <low_level_init+0x1ac>)
 8003fea:	f107 040c 	add.w	r4, r7, #12
 8003fee:	461d      	mov	r5, r3
 8003ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fae6 	bl	80045d4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004008:	480f      	ldr	r0, [pc, #60]	; (8004048 <low_level_init+0x190>)
 800400a:	f7fd fcaa 	bl	8001962 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800400e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004012:	461a      	mov	r2, r3
 8004014:	211d      	movs	r1, #29
 8004016:	480c      	ldr	r0, [pc, #48]	; (8004048 <low_level_init+0x190>)
 8004018:	f7fd fbd5 	bl	80017c6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401e:	f043 030b 	orr.w	r3, r3, #11
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	461a      	mov	r2, r3
 8004028:	211d      	movs	r1, #29
 800402a:	4807      	ldr	r0, [pc, #28]	; (8004048 <low_level_init+0x190>)
 800402c:	f7fd fc33 	bl	8001896 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004030:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004034:	461a      	mov	r2, r3
 8004036:	211d      	movs	r1, #29
 8004038:	4803      	ldr	r0, [pc, #12]	; (8004048 <low_level_init+0x190>)
 800403a:	f7fd fbc4 	bl	80017c6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800403e:	bf00      	nop
 8004040:	3740      	adds	r7, #64	; 0x40
 8004042:	46bd      	mov	sp, r7
 8004044:	bdb0      	pop	{r4, r5, r7, pc}
 8004046:	bf00      	nop
 8004048:	20004630 	.word	0x20004630
 800404c:	40028000 	.word	0x40028000
 8004050:	20002e5c 	.word	0x20002e5c
 8004054:	2000160c 	.word	0x2000160c
 8004058:	2000168c 	.word	0x2000168c
 800405c:	2000158c 	.word	0x2000158c
 8004060:	2000462c 	.word	0x2000462c
 8004064:	08011180 	.word	0x08011180

08004068 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <low_level_output+0x138>)
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800408a:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <low_level_output+0x138>)
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	e05a      	b.n	8004150 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da03      	bge.n	80040aa <low_level_output+0x42>
      {
        errval = ERR_USE;
 80040a2:	23f8      	movs	r3, #248	; 0xf8
 80040a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80040a8:	e05c      	b.n	8004164 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	895b      	ldrh	r3, [r3, #10]
 80040ae:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80040b4:	e02f      	b.n	8004116 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	18d0      	adds	r0, r2, r3
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	18d1      	adds	r1, r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80040ca:	3304      	adds	r3, #4
 80040cc:	461a      	mov	r2, r3
 80040ce:	f00c f877 	bl	80101c0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	da03      	bge.n	80040e8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80040e0:	23f8      	movs	r3, #248	; 0xf8
 80040e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80040e6:	e03d      	b.n	8004164 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80040f8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004104:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004110:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004120:	4293      	cmp	r3, r2
 8004122:	d8c8      	bhi.n	80040b6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	18d0      	adds	r0, r2, r3
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4619      	mov	r1, r3
 8004136:	f00c f843 	bl	80101c0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1a1      	bne.n	800409a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	4811      	ldr	r0, [pc, #68]	; (80041a0 <low_level_output+0x138>)
 800415a:	f7fd f94f 	bl	80013fc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <low_level_output+0x138>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <low_level_output+0x138>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417e:	461a      	mov	r2, r3
 8004180:	2320      	movs	r3, #32
 8004182:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <low_level_output+0x138>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	461a      	mov	r2, r3
 800418e:	2300      	movs	r3, #0
 8004190:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8004192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20004630 	.word	0x20004630

080041a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80041c8:	484e      	ldr	r0, [pc, #312]	; (8004304 <low_level_input+0x160>)
 80041ca:	f7fd f9ff 	bl	80015cc <HAL_ETH_GetReceivedFrame_IT>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <low_level_input+0x34>

    return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e090      	b.n	80042fa <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80041d8:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <low_level_input+0x160>)
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80041de:	4b49      	ldr	r3, [pc, #292]	; (8004304 <low_level_input+0x160>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80041e4:	89fb      	ldrh	r3, [r7, #14]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80041ea:	89fb      	ldrh	r3, [r7, #14]
 80041ec:	2203      	movs	r2, #3
 80041ee:	4619      	mov	r1, r3
 80041f0:	2004      	movs	r0, #4
 80041f2:	f004 f847 	bl	8008284 <pbuf_alloc>
 80041f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04b      	beq.n	8004296 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <low_level_input+0x160>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
 800420c:	e040      	b.n	8004290 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	895b      	ldrh	r3, [r3, #10]
 8004212:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004218:	e021      	b.n	800425e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	18d0      	adds	r0, r2, r3
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	18d1      	adds	r1, r2, r3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800422e:	3304      	adds	r3, #4
 8004230:	461a      	mov	r2, r3
 8004232:	f00b ffc5 	bl	80101c0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800424c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004258:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004268:	4293      	cmp	r3, r2
 800426a:	d8d6      	bhi.n	800421a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	18d0      	adds	r0, r2, r3
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4619      	mov	r1, r3
 800427e:	f00b ff9f 	bl	80101c0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1bb      	bne.n	800420e <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <low_level_input+0x160>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e00b      	b.n	80042ba <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3301      	adds	r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <low_level_input+0x160>)
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3ee      	bcc.n	80042a2 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <low_level_input+0x160>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <low_level_input+0x160>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <low_level_input+0x160>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	461a      	mov	r2, r3
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <low_level_input+0x160>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6093      	str	r3, [r2, #8]
  }
  return p;
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3730      	adds	r7, #48	; 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20004630 	.word	0x20004630

08004308 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <ethernetif_input+0x58>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f04f 31ff 	mov.w	r1, #4294967295
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa87 	bl	8004830 <osSemaphoreWait>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f5      	bne.n	8004314 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004328:	480e      	ldr	r0, [pc, #56]	; (8004364 <ethernetif_input+0x5c>)
 800432a:	f00b feb5 	bl	8010098 <sys_mutex_lock>
        p = low_level_input( netif );
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff ff38 	bl	80041a4 <low_level_input>
 8004334:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	68b8      	ldr	r0, [r7, #8]
 8004344:	4798      	blx	r3
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800434c:	68b8      	ldr	r0, [r7, #8]
 800434e:	f004 fb11 	bl	8008974 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004352:	4804      	ldr	r0, [pc, #16]	; (8004364 <ethernetif_input+0x5c>)
 8004354:	f00b feaf 	bl	80100b6 <sys_mutex_unlock>
      } while(p!=NULL);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e4      	bne.n	8004328 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800435e:	e7d9      	b.n	8004314 <ethernetif_input+0xc>
 8004360:	2000462c 	.word	0x2000462c
 8004364:	200083d0 	.word	0x200083d0

08004368 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <ethernetif_init+0x1c>
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <ethernetif_init+0x48>)
 8004378:	f240 2236 	movw	r2, #566	; 0x236
 800437c:	490d      	ldr	r1, [pc, #52]	; (80043b4 <ethernetif_init+0x4c>)
 800437e:	480e      	ldr	r0, [pc, #56]	; (80043b8 <ethernetif_init+0x50>)
 8004380:	f00b ff34 	bl	80101ec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2273      	movs	r2, #115	; 0x73
 8004388:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2274      	movs	r2, #116	; 0x74
 8004390:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <ethernetif_init+0x54>)
 8004398:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <ethernetif_init+0x58>)
 800439e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fd89 	bl	8003eb8 <low_level_init>

  return ERR_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	0801119c 	.word	0x0801119c
 80043b4:	080111b8 	.word	0x080111b8
 80043b8:	080111c8 	.word	0x080111c8
 80043bc:	0800e325 	.word	0x0800e325
 80043c0:	08004069 	.word	0x08004069

080043c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80043c8:	f7fc fc7e 	bl	8000cc8 <HAL_GetTick>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	461a      	mov	r2, r3
 80043ea:	2101      	movs	r1, #1
 80043ec:	4816      	ldr	r0, [pc, #88]	; (8004448 <ethernetif_set_link+0x74>)
 80043ee:	f7fd f9ea 	bl	80017c6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <ethernetif_set_link+0x48>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f003 fe79 	bl	800810c <netif_set_link_up>
 800441a:	e011      	b.n	8004440 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <ethernetif_set_link+0x6c>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fe91 	bl	8008162 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004440:	20c8      	movs	r0, #200	; 0xc8
 8004442:	f000 f913 	bl	800466c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004446:	e7cd      	b.n	80043e4 <ethernetif_set_link+0x10>
 8004448:	20004630 	.word	0x20004630

0800444c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d05d      	beq.n	800452a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <ethernetif_update_config+0xf4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03f      	beq.n	80044f6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800447a:	2100      	movs	r1, #0
 800447c:	4830      	ldr	r0, [pc, #192]	; (8004540 <ethernetif_update_config+0xf4>)
 800447e:	f7fd fa0a 	bl	8001896 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004482:	f7fc fc21 	bl	8000cc8 <HAL_GetTick>
 8004486:	4603      	mov	r3, r0
 8004488:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	461a      	mov	r2, r3
 8004490:	2101      	movs	r1, #1
 8004492:	482b      	ldr	r0, [pc, #172]	; (8004540 <ethernetif_update_config+0xf4>)
 8004494:	f7fd f997 	bl	80017c6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004498:	f7fc fc16 	bl	8000cc8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a6:	d828      	bhi.n	80044fa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0eb      	beq.n	800448a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	461a      	mov	r2, r3
 80044b8:	2110      	movs	r1, #16
 80044ba:	4821      	ldr	r0, [pc, #132]	; (8004540 <ethernetif_update_config+0xf4>)
 80044bc:	f7fd f983 	bl	80017c6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80044ca:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <ethernetif_update_config+0xf4>)
 80044cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	e002      	b.n	80044da <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <ethernetif_update_config+0xf4>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <ethernetif_update_config+0xf4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	e016      	b.n	800451a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <ethernetif_update_config+0xf4>)
 80044ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	e011      	b.n	800451a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <ethernetif_update_config+0xb0>
          goto error;
 80044fa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <ethernetif_update_config+0xf4>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	08db      	lsrs	r3, r3, #3
 8004502:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <ethernetif_update_config+0xf4>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800450c:	4313      	orrs	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	2100      	movs	r1, #0
 8004514:	480a      	ldr	r0, [pc, #40]	; (8004540 <ethernetif_update_config+0xf4>)
 8004516:	f7fd f9be 	bl	8001896 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800451a:	2100      	movs	r1, #0
 800451c:	4808      	ldr	r0, [pc, #32]	; (8004540 <ethernetif_update_config+0xf4>)
 800451e:	f7fd fa7f 	bl	8001a20 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004522:	4807      	ldr	r0, [pc, #28]	; (8004540 <ethernetif_update_config+0xf4>)
 8004524:	f7fd fa1d 	bl	8001962 <HAL_ETH_Start>
 8004528:	e002      	b.n	8004530 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <ethernetif_update_config+0xf4>)
 800452c:	f7fd fa48 	bl	80019c0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f807 	bl	8004544 <ethernetif_notify_conn_changed>
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20004630 	.word	0x20004630

08004544 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	4603      	mov	r3, r0
 800455e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004568:	2b84      	cmp	r3, #132	; 0x84
 800456a:	d005      	beq.n	8004578 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800456c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	3303      	adds	r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458a:	f3ef 8305 	mrs	r3, IPSR
 800458e:	607b      	str	r3, [r7, #4]
  return(result);
 8004590:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045aa:	f001 fc51 	bl	8005e50 <vTaskStartScheduler>
  
  return osOK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80045b8:	f7ff ffe4 	bl	8004584 <inHandlerMode>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80045c2:	f001 fd5d 	bl	8006080 <xTaskGetTickCountFromISR>
 80045c6:	4603      	mov	r3, r0
 80045c8:	e002      	b.n	80045d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80045ca:	f001 fd4b 	bl	8006064 <xTaskGetTickCount>
 80045ce:	4603      	mov	r3, r0
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af04      	add	r7, sp, #16
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d020      	beq.n	8004628 <osThreadCreate+0x54>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01c      	beq.n	8004628 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685c      	ldr	r4, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681d      	ldr	r5, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691e      	ldr	r6, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ffa8 	bl	8004556 <makeFreeRtosPriority>
 8004606:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004610:	9202      	str	r2, [sp, #8]
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	9100      	str	r1, [sp, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	4632      	mov	r2, r6
 800461a:	4629      	mov	r1, r5
 800461c:	4620      	mov	r0, r4
 800461e:	f001 fa58 	bl	8005ad2 <xTaskCreateStatic>
 8004622:	4603      	mov	r3, r0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e01c      	b.n	8004662 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685c      	ldr	r4, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004634:	b29e      	uxth	r6, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff8a 	bl	8004556 <makeFreeRtosPriority>
 8004642:	4602      	mov	r2, r0
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	9200      	str	r2, [sp, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4632      	mov	r2, r6
 8004650:	4629      	mov	r1, r5
 8004652:	4620      	mov	r0, r4
 8004654:	f001 fa99 	bl	8005b8a <xTaskCreate>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <osDelay+0x16>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	e000      	b.n	8004684 <osDelay+0x18>
 8004682:	2301      	movs	r3, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f001 fbaf 	bl	8005de8 <vTaskDelay>
  
  return osOK;
 800468a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	2001      	movs	r0, #1
 80046ac:	f000 fc3e 	bl	8004f2c <xQueueCreateMutexStatic>
 80046b0:	4603      	mov	r3, r0
 80046b2:	e003      	b.n	80046bc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80046b4:	2001      	movs	r0, #1
 80046b6:	f000 fc21 	bl	8004efc <xQueueCreateMutex>
 80046ba:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <osMutexWait+0x18>
    return osErrorParameter;
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	e03a      	b.n	8004752 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d103      	bne.n	80046f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e009      	b.n	8004704 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <osMutexWait+0x40>
      ticks = 1;
 8004700:	2301      	movs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004704:	f7ff ff3e 	bl	8004584 <inHandlerMode>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d017      	beq.n	800473e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800470e:	f107 0308 	add.w	r3, r7, #8
 8004712:	461a      	mov	r2, r3
 8004714:	2100      	movs	r1, #0
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 f834 	bl	8005784 <xQueueReceiveFromISR>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d001      	beq.n	8004726 <osMutexWait+0x62>
      return osErrorOS;
 8004722:	23ff      	movs	r3, #255	; 0xff
 8004724:	e015      	b.n	8004752 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d011      	beq.n	8004750 <osMutexWait+0x8c>
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <osMutexWait+0x98>)
 800472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	e008      	b.n	8004750 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 ff13 	bl	800556c <xQueueSemaphoreTake>
 8004746:	4603      	mov	r3, r0
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <osMutexWait+0x8c>
    return osErrorOS;
 800474c:	23ff      	movs	r3, #255	; 0xff
 800474e:	e000      	b.n	8004752 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004770:	f7ff ff08 	bl	8004584 <inHandlerMode>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fd85 	bl	8005290 <xQueueGiveFromISR>
 8004786:	4603      	mov	r3, r0
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <osMutexRelease+0x30>
      return osErrorOS;
 800478c:	23ff      	movs	r3, #255	; 0xff
 800478e:	e017      	b.n	80047c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d013      	beq.n	80047be <osMutexRelease+0x5e>
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <osMutexRelease+0x68>)
 8004798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	e00a      	b.n	80047be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80047a8:	2300      	movs	r3, #0
 80047aa:	2200      	movs	r2, #0
 80047ac:	2100      	movs	r1, #0
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fbd8 	bl	8004f64 <xQueueGenericSend>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80047ba:	23ff      	movs	r3, #255	; 0xff
 80047bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00f      	beq.n	80047fe <osSemaphoreCreate+0x32>
    if (count == 1) {
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10a      	bne.n	80047fa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2203      	movs	r2, #3
 80047ea:	9200      	str	r2, [sp, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	2100      	movs	r1, #0
 80047f0:	2001      	movs	r0, #1
 80047f2:	f000 fa95 	bl	8004d20 <xQueueGenericCreateStatic>
 80047f6:	4603      	mov	r3, r0
 80047f8:	e016      	b.n	8004828 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e014      	b.n	8004828 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d110      	bne.n	8004826 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004804:	2203      	movs	r2, #3
 8004806:	2100      	movs	r1, #0
 8004808:	2001      	movs	r0, #1
 800480a:	f000 fb00 	bl	8004e0e <xQueueGenericCreate>
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <osSemaphoreCreate+0x56>
 8004816:	2300      	movs	r3, #0
 8004818:	2200      	movs	r2, #0
 800481a:	2100      	movs	r1, #0
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fba1 	bl	8004f64 <xQueueGenericSend>
      return sema;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e000      	b.n	8004828 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004826:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	e03a      	b.n	80048be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d103      	bne.n	800485c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e009      	b.n	8004870 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <osSemaphoreWait+0x40>
      ticks = 1;
 800486c:	2301      	movs	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004870:	f7ff fe88 	bl	8004584 <inHandlerMode>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	461a      	mov	r2, r3
 8004880:	2100      	movs	r1, #0
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 ff7e 	bl	8005784 <xQueueReceiveFromISR>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <osSemaphoreWait+0x62>
      return osErrorOS;
 800488e:	23ff      	movs	r3, #255	; 0xff
 8004890:	e015      	b.n	80048be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <osSemaphoreWait+0x8c>
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <osSemaphoreWait+0x98>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	e008      	b.n	80048bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fe5d 	bl	800556c <xQueueSemaphoreTake>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d001      	beq.n	80048bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80048b8:	23ff      	movs	r3, #255	; 0xff
 80048ba:	e000      	b.n	80048be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80048dc:	f7ff fe52 	bl	8004584 <inHandlerMode>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80048e6:	f107 0308 	add.w	r3, r7, #8
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fccf 	bl	8005290 <xQueueGiveFromISR>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80048f8:	23ff      	movs	r3, #255	; 0xff
 80048fa:	e017      	b.n	800492c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <osSemaphoreRelease+0x5e>
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <osSemaphoreRelease+0x68>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	e00a      	b.n	800492a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004914:	2300      	movs	r3, #0
 8004916:	2200      	movs	r2, #0
 8004918:	2100      	movs	r1, #0
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fb22 	bl	8004f64 <xQueueGenericSend>
 8004920:	4603      	mov	r3, r0
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004926:	23ff      	movs	r3, #255	; 0xff
 8004928:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b085      	sub	sp, #20
 800493c:	af02      	add	r7, sp, #8
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <osMessageCreate+0x36>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2400      	movs	r4, #0
 8004964:	9400      	str	r4, [sp, #0]
 8004966:	f000 f9db 	bl	8004d20 <xQueueGenericCreateStatic>
 800496a:	4603      	mov	r3, r0
 800496c:	e008      	b.n	8004980 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	4619      	mov	r1, r3
 800497a:	f000 fa48 	bl	8004e0e <xQueueGenericCreate>
 800497e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bd90      	pop	{r4, r7, pc}

08004988 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <osMessagePut+0x1e>
    ticks = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80049a6:	f7ff fded 	bl	8004584 <inHandlerMode>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d018      	beq.n	80049e2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80049b0:	f107 0210 	add.w	r2, r7, #16
 80049b4:	f107 0108 	add.w	r1, r7, #8
 80049b8:	2300      	movs	r3, #0
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fbd0 	bl	8005160 <xQueueGenericSendFromISR>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d001      	beq.n	80049ca <osMessagePut+0x42>
      return osErrorOS;
 80049c6:	23ff      	movs	r3, #255	; 0xff
 80049c8:	e018      	b.n	80049fc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d014      	beq.n	80049fa <osMessagePut+0x72>
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <osMessagePut+0x7c>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	e00b      	b.n	80049fa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80049e2:	f107 0108 	add.w	r1, r7, #8
 80049e6:	2300      	movs	r3, #0
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 faba 	bl	8004f64 <xQueueGenericSend>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <osMessagePut+0x72>
      return osErrorOS;
 80049f6:	23ff      	movs	r3, #255	; 0xff
 80049f8:	e000      	b.n	80049fc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b08b      	sub	sp, #44	; 0x2c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	617b      	str	r3, [r7, #20]
    return event;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	461c      	mov	r4, r3
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a36:	e054      	b.n	8004ae2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d103      	bne.n	8004a50 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	e009      	b.n	8004a64 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d006      	beq.n	8004a64 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <osMessageGet+0x5c>
      ticks = 1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004a64:	f7ff fd8e 	bl	8004584 <inHandlerMode>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01c      	beq.n	8004aa8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004a6e:	f107 0220 	add.w	r2, r7, #32
 8004a72:	f107 0314 	add.w	r3, r7, #20
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f000 fe82 	bl	8005784 <xQueueReceiveFromISR>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004a86:	2310      	movs	r3, #16
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e001      	b.n	8004a90 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01d      	beq.n	8004ad2 <osMessageGet+0xca>
 8004a96:	4b15      	ldr	r3, [pc, #84]	; (8004aec <osMessageGet+0xe4>)
 8004a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	e014      	b.n	8004ad2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	3304      	adds	r3, #4
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	68b8      	ldr	r0, [r7, #8]
 8004ab4:	f000 fc7a 	bl	80053ac <xQueueReceive>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d102      	bne.n	8004ac4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004abe:	2310      	movs	r3, #16
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e006      	b.n	8004ad2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <osMessageGet+0xc6>
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <osMessageGet+0xc8>
 8004ace:	2340      	movs	r3, #64	; 0x40
 8004ad0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	461c      	mov	r4, r3
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	372c      	adds	r7, #44	; 0x2c
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd90      	pop	{r4, r7, pc}
 8004aea:	bf00      	nop
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f103 0208 	add.w	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f103 0208 	add.w	r2, r3, #8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f103 0208 	add.w	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d103      	bne.n	8004bac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e00c      	b.n	8004bc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e002      	b.n	8004bba <vListInsert+0x2e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d2f6      	bcs.n	8004bb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6852      	ldr	r2, [r2, #4]
 8004c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d103      	bne.n	8004c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
	...

08004c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c7a:	f002 f847 	bl	8006d0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c8a:	fb01 f303 	mul.w	r3, r1, r3
 8004c8e:	441a      	add	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	3b01      	subs	r3, #1
 8004cac:	68f9      	ldr	r1, [r7, #12]
 8004cae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	22ff      	movs	r2, #255	; 0xff
 8004cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d114      	bne.n	8004cfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01a      	beq.n	8004d0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3310      	adds	r3, #16
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fb1d 	bl	800631c <xTaskRemoveFromEventList>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <xQueueGenericReset+0xcc>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	e009      	b.n	8004d0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fef6 	bl	8004af0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3324      	adds	r3, #36	; 0x24
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fef1 	bl	8004af0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d0e:	f002 f82d 	bl	8006d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d12:	2301      	movs	r3, #1
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08e      	sub	sp, #56	; 0x38
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <xQueueGenericCreateStatic+0x52>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <xQueueGenericCreateStatic+0x56>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xQueueGenericCreateStatic+0x58>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	623b      	str	r3, [r7, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <xQueueGenericCreateStatic+0x7e>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <xQueueGenericCreateStatic+0x82>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <xQueueGenericCreateStatic+0x84>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	61fb      	str	r3, [r7, #28]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dbe:	2348      	movs	r3, #72	; 0x48
 8004dc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b48      	cmp	r3, #72	; 0x48
 8004dc6:	d00a      	beq.n	8004dde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	61bb      	str	r3, [r7, #24]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f843 	bl	8004e8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3730      	adds	r7, #48	; 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b08a      	sub	sp, #40	; 0x28
 8004e12:	af02      	add	r7, sp, #8
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	613b      	str	r3, [r7, #16]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e004      	b.n	8004e4e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3348      	adds	r3, #72	; 0x48
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 f85a 	bl	8006f0c <pvPortMalloc>
 8004e58:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00f      	beq.n	8004e80 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	3348      	adds	r3, #72	; 0x48
 8004e64:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e6e:	79fa      	ldrb	r2, [r7, #7]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f805 	bl	8004e8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e80:	69bb      	ldr	r3, [r7, #24]
	}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e002      	b.n	8004eac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eb8:	2101      	movs	r1, #1
 8004eba:	69b8      	ldr	r0, [r7, #24]
 8004ebc:	f7ff fec8 	bl	8004c50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00e      	beq.n	8004ef4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ee8:	2300      	movs	r3, #0
 8004eea:	2200      	movs	r2, #0
 8004eec:	2100      	movs	r1, #0
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f838 	bl	8004f64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004f06:	2301      	movs	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6939      	ldr	r1, [r7, #16]
 8004f14:	6978      	ldr	r0, [r7, #20]
 8004f16:	f7ff ff7a 	bl	8004e0e <xQueueGenericCreate>
 8004f1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff ffd3 	bl	8004ec8 <prvInitialiseMutex>

		return pxNewQueue;
 8004f22:	68fb      	ldr	r3, [r7, #12]
	}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	4603      	mov	r3, r0
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	6939      	ldr	r1, [r7, #16]
 8004f4a:	6978      	ldr	r0, [r7, #20]
 8004f4c:	f7ff fee8 	bl	8004d20 <xQueueGenericCreateStatic>
 8004f50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff ffb8 	bl	8004ec8 <prvInitialiseMutex>

		return pxNewQueue;
 8004f58:	68fb      	ldr	r3, [r7, #12]
	}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	; 0x38
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f72:	2300      	movs	r3, #0
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xQueueGenericSend+0x32>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <xQueueGenericSend+0x40>
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <xQueueGenericSend+0x44>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <xQueueGenericSend+0x46>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <xQueueGenericSend+0x60>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d103      	bne.n	8004fd2 <xQueueGenericSend+0x6e>
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <xQueueGenericSend+0x72>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <xQueueGenericSend+0x74>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	623b      	str	r3, [r7, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff2:	f001 fb53 	bl	800669c <xTaskGetSchedulerState>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <xQueueGenericSend+0x9e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <xQueueGenericSend+0xa2>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <xQueueGenericSend+0xa4>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xQueueGenericSend+0xbe>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	61fb      	str	r3, [r7, #28]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005022:	f001 fe73 	bl	8006d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <xQueueGenericSend+0xd4>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d129      	bne.n	800508c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800503e:	f000 fc38 	bl	80058b2 <prvCopyDataToQueue>
 8005042:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	3324      	adds	r3, #36	; 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f001 f963 	bl	800631c <xTaskRemoveFromEventList>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800505c:	4b3f      	ldr	r3, [pc, #252]	; (800515c <xQueueGenericSend+0x1f8>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	e00a      	b.n	8005084 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005074:	4b39      	ldr	r3, [pc, #228]	; (800515c <xQueueGenericSend+0x1f8>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005084:	f001 fe72 	bl	8006d6c <vPortExitCritical>
				return pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	e063      	b.n	8005154 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005092:	f001 fe6b 	bl	8006d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005096:	2300      	movs	r3, #0
 8005098:	e05c      	b.n	8005154 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f99b 	bl	80063e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050aa:	2301      	movs	r3, #1
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050ae:	f001 fe5d 	bl	8006d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050b2:	f000 ff2d 	bl	8005f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050b6:	f001 fe29 	bl	8006d0c <vPortEnterCritical>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d103      	bne.n	80050d0 <xQueueGenericSend+0x16c>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSend+0x182>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e6:	f001 fe41 	bl	8006d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ea:	1d3a      	adds	r2, r7, #4
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f98a 	bl	800640c <xTaskCheckForTimeOut>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d124      	bne.n	8005148 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005100:	f000 fccf 	bl	8005aa2 <prvIsQueueFull>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	3310      	adds	r3, #16
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f001 f8de 	bl	80062d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fc5a 	bl	80059d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800511e:	f000 ff05 	bl	8005f2c <xTaskResumeAll>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f af7c 	bne.w	8005022 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <xQueueGenericSend+0x1f8>)
 800512c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	e772      	b.n	8005022 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800513c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800513e:	f000 fc48 	bl	80059d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005142:	f000 fef3 	bl	8005f2c <xTaskResumeAll>
 8005146:	e76c      	b.n	8005022 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800514a:	f000 fc42 	bl	80059d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800514e:	f000 feed 	bl	8005f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005152:	2300      	movs	r3, #0
		}
	}
}
 8005154:	4618      	mov	r0, r3
 8005156:	3738      	adds	r7, #56	; 0x38
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08e      	sub	sp, #56	; 0x38
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <xQueueGenericSendFromISR+0x3c>
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <xQueueGenericSendFromISR+0x40>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <xQueueGenericSendFromISR+0x42>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	623b      	str	r3, [r7, #32]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d103      	bne.n	80051ca <xQueueGenericSendFromISR+0x6a>
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <xQueueGenericSendFromISR+0x6e>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <xQueueGenericSendFromISR+0x70>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	61fb      	str	r3, [r7, #28]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ea:	f001 fe51 	bl	8006e90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051ee:	f3ef 8211 	mrs	r2, BASEPRI
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	61ba      	str	r2, [r7, #24]
 8005204:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005206:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <xQueueGenericSendFromISR+0xbc>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d12c      	bne.n	8005276 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522c:	f000 fb41 	bl	80058b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005230:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d112      	bne.n	8005260 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	3324      	adds	r3, #36	; 0x24
 8005246:	4618      	mov	r0, r3
 8005248:	f001 f868 	bl	800631c <xTaskRemoveFromEventList>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e007      	b.n	8005270 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005264:	3301      	adds	r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	b25a      	sxtb	r2, r3
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005270:	2301      	movs	r3, #1
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005274:	e001      	b.n	800527a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005276:	2300      	movs	r3, #0
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005284:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005288:	4618      	mov	r0, r3
 800528a:	3738      	adds	r7, #56	; 0x38
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGiveFromISR+0x2a>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	623b      	str	r3, [r7, #32]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	61fb      	str	r3, [r7, #28]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <xQueueGiveFromISR+0x58>
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <xQueueGiveFromISR+0x5c>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <xQueueGiveFromISR+0x5e>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <xQueueGiveFromISR+0x78>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	61bb      	str	r3, [r7, #24]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005308:	f001 fdc2 	bl	8006e90 <vPortValidateInterruptPriority>
	__asm volatile
 800530c:	f3ef 8211 	mrs	r2, BASEPRI
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	617a      	str	r2, [r7, #20]
 8005322:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005324:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005334:	429a      	cmp	r2, r3
 8005336:	d22b      	bcs.n	8005390 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800534a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d112      	bne.n	800537a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d016      	beq.n	800538a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	4618      	mov	r0, r3
 8005362:	f000 ffdb 	bl	800631c <xTaskRemoveFromEventList>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00e      	beq.n	800538a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e007      	b.n	800538a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800537a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800537e:	3301      	adds	r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	b25a      	sxtb	r2, r3
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800538a:	2301      	movs	r3, #1
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	e001      	b.n	8005394 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3738      	adds	r7, #56	; 0x38
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08c      	sub	sp, #48	; 0x30
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <xQueueReceive+0x30>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	623b      	str	r3, [r7, #32]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <xQueueReceive+0x3e>
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <xQueueReceive+0x42>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueReceive+0x44>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueReceive+0x5e>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	61fb      	str	r3, [r7, #28]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800540a:	f001 f947 	bl	800669c <xTaskGetSchedulerState>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <xQueueReceive+0x6e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueReceive+0x72>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueReceive+0x74>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xQueueReceive+0x8e>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61bb      	str	r3, [r7, #24]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800543a:	f001 fc67 	bl	8006d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01f      	beq.n	800548a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544e:	f000 fa9a 	bl	8005986 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	1e5a      	subs	r2, r3, #1
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	3310      	adds	r3, #16
 8005466:	4618      	mov	r0, r3
 8005468:	f000 ff58 	bl	800631c <xTaskRemoveFromEventList>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005472:	4b3d      	ldr	r3, [pc, #244]	; (8005568 <xQueueReceive+0x1bc>)
 8005474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005482:	f001 fc73 	bl	8006d6c <vPortExitCritical>
				return pdPASS;
 8005486:	2301      	movs	r3, #1
 8005488:	e069      	b.n	800555e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005490:	f001 fc6c 	bl	8006d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005494:	2300      	movs	r3, #0
 8005496:	e062      	b.n	800555e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800549e:	f107 0310 	add.w	r3, r7, #16
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 ff9c 	bl	80063e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ac:	f001 fc5e 	bl	8006d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054b0:	f000 fd2e 	bl	8005f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054b4:	f001 fc2a 	bl	8006d0c <vPortEnterCritical>
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054be:	b25b      	sxtb	r3, r3
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d103      	bne.n	80054ce <xQueueReceive+0x122>
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d103      	bne.n	80054e4 <xQueueReceive+0x138>
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e4:	f001 fc42 	bl	8006d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054e8:	1d3a      	adds	r2, r7, #4
 80054ea:	f107 0310 	add.w	r3, r7, #16
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 ff8b 	bl	800640c <xTaskCheckForTimeOut>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d123      	bne.n	8005544 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fe:	f000 faba 	bl	8005a76 <prvIsQueueEmpty>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d017      	beq.n	8005538 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	3324      	adds	r3, #36	; 0x24
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fedf 	bl	80062d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005518:	f000 fa5b 	bl	80059d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800551c:	f000 fd06 	bl	8005f2c <xTaskResumeAll>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d189      	bne.n	800543a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <xQueueReceive+0x1bc>)
 8005528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	e780      	b.n	800543a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553a:	f000 fa4a 	bl	80059d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800553e:	f000 fcf5 	bl	8005f2c <xTaskResumeAll>
 8005542:	e77a      	b.n	800543a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f000 fa44 	bl	80059d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800554a:	f000 fcef 	bl	8005f2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800554e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005550:	f000 fa91 	bl	8005a76 <prvIsQueueEmpty>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	f43f af6f 	beq.w	800543a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800555c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800555e:	4618      	mov	r0, r3
 8005560:	3730      	adds	r7, #48	; 0x30
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	623b      	str	r3, [r7, #32]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	61fb      	str	r3, [r7, #28]
}
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055bc:	f001 f86e 	bl	800669c <xTaskGetSchedulerState>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <xQueueSemaphoreTake+0x60>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xQueueSemaphoreTake+0x64>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <xQueueSemaphoreTake+0x66>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	61bb      	str	r3, [r7, #24]
}
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ec:	f001 fb8e 	bl	8006d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d024      	beq.n	8005646 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	1e5a      	subs	r2, r3, #1
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800560c:	f001 fa10 	bl	8006a30 <pvTaskIncrementMutexHeldCount>
 8005610:	4602      	mov	r2, r0
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00f      	beq.n	800563e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	3310      	adds	r3, #16
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fe7a 	bl	800631c <xTaskRemoveFromEventList>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800562e:	4b54      	ldr	r3, [pc, #336]	; (8005780 <xQueueSemaphoreTake+0x214>)
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800563e:	f001 fb95 	bl	8006d6c <vPortExitCritical>
				return pdPASS;
 8005642:	2301      	movs	r3, #1
 8005644:	e097      	b.n	8005776 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d111      	bne.n	8005670 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	617b      	str	r3, [r7, #20]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005668:	f001 fb80 	bl	8006d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800566c:	2300      	movs	r3, #0
 800566e:	e082      	b.n	8005776 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005676:	f107 030c 	add.w	r3, r7, #12
 800567a:	4618      	mov	r0, r3
 800567c:	f000 feb0 	bl	80063e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005684:	f001 fb72 	bl	8006d6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005688:	f000 fc42 	bl	8005f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800568c:	f001 fb3e 	bl	8006d0c <vPortEnterCritical>
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005696:	b25b      	sxtb	r3, r3
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d103      	bne.n	80056a6 <xQueueSemaphoreTake+0x13a>
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ac:	b25b      	sxtb	r3, r3
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d103      	bne.n	80056bc <xQueueSemaphoreTake+0x150>
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056bc:	f001 fb56 	bl	8006d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056c0:	463a      	mov	r2, r7
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fe9f 	bl	800640c <xTaskCheckForTimeOut>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d132      	bne.n	800573a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056d6:	f000 f9ce 	bl	8005a76 <prvIsQueueEmpty>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d026      	beq.n	800572e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80056e8:	f001 fb10 	bl	8006d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fff1 	bl	80066d8 <xTaskPriorityInherit>
 80056f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80056f8:	f001 fb38 	bl	8006d6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fde5 	bl	80062d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800570a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800570c:	f000 f961 	bl	80059d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005710:	f000 fc0c 	bl	8005f2c <xTaskResumeAll>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	f47f af68 	bne.w	80055ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800571c:	4b18      	ldr	r3, [pc, #96]	; (8005780 <xQueueSemaphoreTake+0x214>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	e75e      	b.n	80055ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800572e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005730:	f000 f94f 	bl	80059d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005734:	f000 fbfa 	bl	8005f2c <xTaskResumeAll>
 8005738:	e758      	b.n	80055ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800573a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800573c:	f000 f949 	bl	80059d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005740:	f000 fbf4 	bl	8005f2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005746:	f000 f996 	bl	8005a76 <prvIsQueueEmpty>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	f43f af4d 	beq.w	80055ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00d      	beq.n	8005774 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005758:	f001 fad8 	bl	8006d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800575c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800575e:	f000 f891 	bl	8005884 <prvGetDisinheritPriorityAfterTimeout>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800576a:	4618      	mov	r0, r3
 800576c:	f001 f8c0 	bl	80068f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005770:	f001 fafc 	bl	8006d6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005776:	4618      	mov	r0, r3
 8005778:	3738      	adds	r7, #56	; 0x38
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08e      	sub	sp, #56	; 0x38
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	623b      	str	r3, [r7, #32]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <xQueueReceiveFromISR+0x3a>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <xQueueReceiveFromISR+0x3e>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <xQueueReceiveFromISR+0x40>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	61fb      	str	r3, [r7, #28]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057de:	f001 fb57 	bl	8006e90 <vPortValidateInterruptPriority>
	__asm volatile
 80057e2:	f3ef 8211 	mrs	r2, BASEPRI
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	61ba      	str	r2, [r7, #24]
 80057f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80057fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02f      	beq.n	800586a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005818:	f000 f8b5 	bl	8005986 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d112      	bne.n	8005854 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	3310      	adds	r3, #16
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fd6e 	bl	800631c <xTaskRemoveFromEventList>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00e      	beq.n	8005864 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e007      	b.n	8005864 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005858:	3301      	adds	r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	b25a      	sxtb	r2, r3
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005864:	2301      	movs	r3, #1
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
 8005868:	e001      	b.n	800586e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800586a:	2300      	movs	r3, #0
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f383 8811 	msr	BASEPRI, r3
}
 8005878:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800587c:	4618      	mov	r0, r3
 800587e:	3738      	adds	r7, #56	; 0x38
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1c3 0307 	rsb	r3, r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e001      	b.n	80058a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80058a6:	68fb      	ldr	r3, [r7, #12]
	}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d14d      	bne.n	8005974 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 ff81 	bl	80067e4 <xTaskPriorityDisinherit>
 80058e2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	e043      	b.n	8005974 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d119      	bne.n	8005926 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6898      	ldr	r0, [r3, #8]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	461a      	mov	r2, r3
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	f00a fc5f 	bl	80101c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	441a      	add	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d32b      	bcc.n	8005974 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	e026      	b.n	8005974 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68d8      	ldr	r0, [r3, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	461a      	mov	r2, r3
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	f00a fc45 	bl	80101c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	425b      	negs	r3, r3
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d207      	bcs.n	8005962 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	425b      	negs	r3, r3
 800595c:	441a      	add	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d105      	bne.n	8005974 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3b01      	subs	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800597c:	697b      	ldr	r3, [r7, #20]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d018      	beq.n	80059ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d303      	bcc.n	80059ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	461a      	mov	r2, r3
 80059c4:	6838      	ldr	r0, [r7, #0]
 80059c6:	f00a fbfb 	bl	80101c0 <memcpy>
	}
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059da:	f001 f997 	bl	8006d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059e6:	e011      	b.n	8005a0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3324      	adds	r3, #36	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fc91 	bl	800631c <xTaskRemoveFromEventList>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a00:	f000 fd66 	bl	80064d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dce9      	bgt.n	80059e8 <prvUnlockQueue+0x16>
 8005a14:	e000      	b.n	8005a18 <prvUnlockQueue+0x46>
					break;
 8005a16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	22ff      	movs	r2, #255	; 0xff
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a20:	f001 f9a4 	bl	8006d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a24:	f001 f972 	bl	8006d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a30:	e011      	b.n	8005a56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d012      	beq.n	8005a60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fc6c 	bl	800631c <xTaskRemoveFromEventList>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a4a:	f000 fd41 	bl	80064d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dce9      	bgt.n	8005a32 <prvUnlockQueue+0x60>
 8005a5e:	e000      	b.n	8005a62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a6a:	f001 f97f 	bl	8006d6c <vPortExitCritical>
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a7e:	f001 f945 	bl	8006d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e001      	b.n	8005a94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a94:	f001 f96a 	bl	8006d6c <vPortExitCritical>

	return xReturn;
 8005a98:	68fb      	ldr	r3, [r7, #12]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aaa:	f001 f92f 	bl	8006d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d102      	bne.n	8005ac0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e001      	b.n	8005ac4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ac4:	f001 f952 	bl	8006d6c <vPortExitCritical>

	return xReturn;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b08e      	sub	sp, #56	; 0x38
 8005ad6:	af04      	add	r7, sp, #16
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	623b      	str	r3, [r7, #32]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	61fb      	str	r3, [r7, #28]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b18:	2354      	movs	r3, #84	; 0x54
 8005b1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b54      	cmp	r3, #84	; 0x54
 8005b20:	d00a      	beq.n	8005b38 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	61bb      	str	r3, [r7, #24]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01e      	beq.n	8005b7c <xTaskCreateStatic+0xaa>
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b56:	2300      	movs	r3, #0
 8005b58:	9303      	str	r3, [sp, #12]
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	9302      	str	r3, [sp, #8]
 8005b5e:	f107 0314 	add.w	r3, r7, #20
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f850 	bl	8005c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b76:	f000 f8cd 	bl	8005d14 <prvAddNewTaskToReadyList>
 8005b7a:	e001      	b.n	8005b80 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b80:	697b      	ldr	r3, [r7, #20]
	}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3728      	adds	r7, #40	; 0x28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08c      	sub	sp, #48	; 0x30
 8005b8e:	af04      	add	r7, sp, #16
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f9b4 	bl	8006f0c <pvPortMalloc>
 8005ba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00e      	beq.n	8005bca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005bac:	2054      	movs	r0, #84	; 0x54
 8005bae:	f001 f9ad 	bl	8006f0c <pvPortMalloc>
 8005bb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc0:	e005      	b.n	8005bce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f001 fa66 	bl	8007094 <vPortFree>
 8005bc8:	e001      	b.n	8005bce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d017      	beq.n	8005c04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9303      	str	r3, [sp, #12]
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	9302      	str	r3, [sp, #8]
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f80e 	bl	8005c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bf8:	69f8      	ldr	r0, [r7, #28]
 8005bfa:	f000 f88b 	bl	8005d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e002      	b.n	8005c0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e012      	b.n	8005c88 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	7819      	ldrb	r1, [r3, #0]
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3334      	adds	r3, #52	; 0x34
 8005c72:	460a      	mov	r2, r1
 8005c74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d006      	beq.n	8005c90 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d9e9      	bls.n	8005c62 <prvInitialiseNewTask+0x4e>
 8005c8e:	e000      	b.n	8005c92 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005c90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d901      	bls.n	8005ca4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe ff37 	bl	8004b2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe ff32 	bl	8004b2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	f1c3 0207 	rsb	r2, r3, #7
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	69b8      	ldr	r0, [r7, #24]
 8005cf4:	f000 ff16 	bl	8006b24 <pxPortInitialiseStack>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d0a:	bf00      	nop
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d1c:	f000 fff6 	bl	8006d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d20:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <prvAddNewTaskToReadyList+0xb8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <prvAddNewTaskToReadyList+0xb8>)
 8005d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d2a:	4b29      	ldr	r3, [pc, #164]	; (8005dd0 <prvAddNewTaskToReadyList+0xbc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d32:	4a27      	ldr	r2, [pc, #156]	; (8005dd0 <prvAddNewTaskToReadyList+0xbc>)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <prvAddNewTaskToReadyList+0xb8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d110      	bne.n	8005d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d40:	f000 fbea 	bl	8006518 <prvInitialiseTaskLists>
 8005d44:	e00d      	b.n	8005d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d46:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <prvAddNewTaskToReadyList+0xc0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d4e:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <prvAddNewTaskToReadyList+0xbc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d802      	bhi.n	8005d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <prvAddNewTaskToReadyList+0xbc>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d62:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <prvAddNewTaskToReadyList+0xc4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <prvAddNewTaskToReadyList+0xc4>)
 8005d6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	2201      	movs	r2, #1
 8005d72:	409a      	lsls	r2, r3
 8005d74:	4b19      	ldr	r3, [pc, #100]	; (8005ddc <prvAddNewTaskToReadyList+0xc8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <prvAddNewTaskToReadyList+0xc8>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <prvAddNewTaskToReadyList+0xcc>)
 8005d8c:	441a      	add	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f7fe fed6 	bl	8004b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d9a:	f000 ffe7 	bl	8006d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <prvAddNewTaskToReadyList+0xc0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <prvAddNewTaskToReadyList+0xbc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d207      	bcs.n	8005dc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <prvAddNewTaskToReadyList+0xd0>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20004778 	.word	0x20004778
 8005dd0:	20004678 	.word	0x20004678
 8005dd4:	20004784 	.word	0x20004784
 8005dd8:	20004794 	.word	0x20004794
 8005ddc:	20004780 	.word	0x20004780
 8005de0:	2000467c 	.word	0x2000467c
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <vTaskDelay+0x60>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <vTaskDelay+0x30>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60bb      	str	r3, [r7, #8]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e18:	f000 f87a 	bl	8005f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fe1a 	bl	8006a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e24:	f000 f882 	bl	8005f2c <xTaskResumeAll>
 8005e28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <vTaskDelay+0x64>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200047a0 	.word	0x200047a0
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e5e:	463a      	mov	r2, r7
 8005e60:	1d39      	adds	r1, r7, #4
 8005e62:	f107 0308 	add.w	r3, r7, #8
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa fb36 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	9202      	str	r2, [sp, #8]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	2300      	movs	r3, #0
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	460a      	mov	r2, r1
 8005e7e:	491e      	ldr	r1, [pc, #120]	; (8005ef8 <vTaskStartScheduler+0xa8>)
 8005e80:	481e      	ldr	r0, [pc, #120]	; (8005efc <vTaskStartScheduler+0xac>)
 8005e82:	f7ff fe26 	bl	8005ad2 <xTaskCreateStatic>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <vTaskStartScheduler+0xb0>)
 8005e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e8c:	4b1c      	ldr	r3, [pc, #112]	; (8005f00 <vTaskStartScheduler+0xb0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e001      	b.n	8005e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d116      	bne.n	8005ed2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	613b      	str	r3, [r7, #16]
}
 8005eb6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <vTaskStartScheduler+0xb4>)
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <vTaskStartScheduler+0xb8>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <vTaskStartScheduler+0xbc>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ecc:	f000 feac 	bl	8006c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ed0:	e00e      	b.n	8005ef0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d10a      	bne.n	8005ef0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60fb      	str	r3, [r7, #12]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <vTaskStartScheduler+0x9e>
}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	080111f0 	.word	0x080111f0
 8005efc:	080064e9 	.word	0x080064e9
 8005f00:	2000479c 	.word	0x2000479c
 8005f04:	20004798 	.word	0x20004798
 8005f08:	20004784 	.word	0x20004784
 8005f0c:	2000477c 	.word	0x2000477c

08005f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <vTaskSuspendAll+0x18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4a03      	ldr	r2, [pc, #12]	; (8005f28 <vTaskSuspendAll+0x18>)
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	200047a0 	.word	0x200047a0

08005f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f3a:	4b41      	ldr	r3, [pc, #260]	; (8006040 <xTaskResumeAll+0x114>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	603b      	str	r3, [r7, #0]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f58:	f000 fed8 	bl	8006d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f5c:	4b38      	ldr	r3, [pc, #224]	; (8006040 <xTaskResumeAll+0x114>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4a37      	ldr	r2, [pc, #220]	; (8006040 <xTaskResumeAll+0x114>)
 8005f64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f66:	4b36      	ldr	r3, [pc, #216]	; (8006040 <xTaskResumeAll+0x114>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d161      	bne.n	8006032 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f6e:	4b35      	ldr	r3, [pc, #212]	; (8006044 <xTaskResumeAll+0x118>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d05d      	beq.n	8006032 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f76:	e02e      	b.n	8005fd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f78:	4b33      	ldr	r3, [pc, #204]	; (8006048 <xTaskResumeAll+0x11c>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3318      	adds	r3, #24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fe39 	bl	8004bfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fe34 	bl	8004bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	2201      	movs	r2, #1
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <xTaskResumeAll+0x120>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <xTaskResumeAll+0x120>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a27      	ldr	r2, [pc, #156]	; (8006050 <xTaskResumeAll+0x124>)
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fe fdc2 	bl	8004b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	4b23      	ldr	r3, [pc, #140]	; (8006054 <xTaskResumeAll+0x128>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005fd0:	4b21      	ldr	r3, [pc, #132]	; (8006058 <xTaskResumeAll+0x12c>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <xTaskResumeAll+0x11c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1cc      	bne.n	8005f78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fe4:	f000 fb36 	bl	8006654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <xTaskResumeAll+0x130>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d010      	beq.n	8006016 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ff4:	f000 f856 	bl	80060a4 <xTaskIncrementTick>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ffe:	4b16      	ldr	r3, [pc, #88]	; (8006058 <xTaskResumeAll+0x12c>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3b01      	subs	r3, #1
 8006008:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f1      	bne.n	8005ff4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <xTaskResumeAll+0x130>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <xTaskResumeAll+0x12c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006022:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <xTaskResumeAll+0x134>)
 8006024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006032:	f000 fe9b 	bl	8006d6c <vPortExitCritical>

	return xAlreadyYielded;
 8006036:	68bb      	ldr	r3, [r7, #8]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200047a0 	.word	0x200047a0
 8006044:	20004778 	.word	0x20004778
 8006048:	20004738 	.word	0x20004738
 800604c:	20004780 	.word	0x20004780
 8006050:	2000467c 	.word	0x2000467c
 8006054:	20004678 	.word	0x20004678
 8006058:	2000478c 	.word	0x2000478c
 800605c:	20004788 	.word	0x20004788
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800606a:	4b04      	ldr	r3, [pc, #16]	; (800607c <xTaskGetTickCount+0x18>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006070:	687b      	ldr	r3, [r7, #4]
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr
 800607c:	2000477c 	.word	0x2000477c

08006080 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006086:	f000 ff03 	bl	8006e90 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800608a:	2300      	movs	r3, #0
 800608c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <xTaskGetTickCountFromISR+0x20>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006094:	683b      	ldr	r3, [r7, #0]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	2000477c 	.word	0x2000477c

080060a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ae:	4b51      	ldr	r3, [pc, #324]	; (80061f4 <xTaskIncrementTick+0x150>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 808d 	bne.w	80061d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060b8:	4b4f      	ldr	r3, [pc, #316]	; (80061f8 <xTaskIncrementTick+0x154>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060c0:	4a4d      	ldr	r2, [pc, #308]	; (80061f8 <xTaskIncrementTick+0x154>)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d120      	bne.n	800610e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060cc:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <xTaskIncrementTick+0x158>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <xTaskIncrementTick+0x48>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	603b      	str	r3, [r7, #0]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <xTaskIncrementTick+0x46>
 80060ec:	4b43      	ldr	r3, [pc, #268]	; (80061fc <xTaskIncrementTick+0x158>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	4b43      	ldr	r3, [pc, #268]	; (8006200 <xTaskIncrementTick+0x15c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a41      	ldr	r2, [pc, #260]	; (80061fc <xTaskIncrementTick+0x158>)
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	4a41      	ldr	r2, [pc, #260]	; (8006200 <xTaskIncrementTick+0x15c>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	4b40      	ldr	r3, [pc, #256]	; (8006204 <xTaskIncrementTick+0x160>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	4a3f      	ldr	r2, [pc, #252]	; (8006204 <xTaskIncrementTick+0x160>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	f000 faa3 	bl	8006654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800610e:	4b3e      	ldr	r3, [pc, #248]	; (8006208 <xTaskIncrementTick+0x164>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	429a      	cmp	r2, r3
 8006116:	d34d      	bcc.n	80061b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006118:	4b38      	ldr	r3, [pc, #224]	; (80061fc <xTaskIncrementTick+0x158>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <xTaskIncrementTick+0x82>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <xTaskIncrementTick+0x84>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <xTaskIncrementTick+0x164>)
 800612e:	f04f 32ff 	mov.w	r2, #4294967295
 8006132:	601a      	str	r2, [r3, #0]
					break;
 8006134:	e03e      	b.n	80061b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006136:	4b31      	ldr	r3, [pc, #196]	; (80061fc <xTaskIncrementTick+0x158>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d203      	bcs.n	8006156 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800614e:	4a2e      	ldr	r2, [pc, #184]	; (8006208 <xTaskIncrementTick+0x164>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6013      	str	r3, [r2, #0]
						break;
 8006154:	e02e      	b.n	80061b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	3304      	adds	r3, #4
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fd4e 	bl	8004bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	3318      	adds	r3, #24
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fd45 	bl	8004bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	2201      	movs	r2, #1
 8006178:	409a      	lsls	r2, r3
 800617a:	4b24      	ldr	r3, [pc, #144]	; (800620c <xTaskIncrementTick+0x168>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4313      	orrs	r3, r2
 8006180:	4a22      	ldr	r2, [pc, #136]	; (800620c <xTaskIncrementTick+0x168>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <xTaskIncrementTick+0x16c>)
 8006192:	441a      	add	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fcd3 	bl	8004b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <xTaskIncrementTick+0x170>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3b4      	bcc.n	8006118 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061ae:	2301      	movs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061b2:	e7b1      	b.n	8006118 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061b4:	4b17      	ldr	r3, [pc, #92]	; (8006214 <xTaskIncrementTick+0x170>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ba:	4915      	ldr	r1, [pc, #84]	; (8006210 <xTaskIncrementTick+0x16c>)
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d907      	bls.n	80061dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e004      	b.n	80061dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <xTaskIncrementTick+0x174>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3301      	adds	r3, #1
 80061d8:	4a0f      	ldr	r2, [pc, #60]	; (8006218 <xTaskIncrementTick+0x174>)
 80061da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <xTaskIncrementTick+0x178>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061e8:	697b      	ldr	r3, [r7, #20]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200047a0 	.word	0x200047a0
 80061f8:	2000477c 	.word	0x2000477c
 80061fc:	20004730 	.word	0x20004730
 8006200:	20004734 	.word	0x20004734
 8006204:	20004790 	.word	0x20004790
 8006208:	20004798 	.word	0x20004798
 800620c:	20004780 	.word	0x20004780
 8006210:	2000467c 	.word	0x2000467c
 8006214:	20004678 	.word	0x20004678
 8006218:	20004788 	.word	0x20004788
 800621c:	2000478c 	.word	0x2000478c

08006220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006226:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <vTaskSwitchContext+0xa0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800622e:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <vTaskSwitchContext+0xa4>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006234:	e03f      	b.n	80062b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006236:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <vTaskSwitchContext+0xa4>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800623c:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <vTaskSwitchContext+0xa8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	fab3 f383 	clz	r3, r3
 8006248:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	f1c3 031f 	rsb	r3, r3, #31
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	491e      	ldr	r1, [pc, #120]	; (80062cc <vTaskSwitchContext+0xac>)
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	607b      	str	r3, [r7, #4]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <vTaskSwitchContext+0x5a>
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <vTaskSwitchContext+0xac>)
 8006288:	4413      	add	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3308      	adds	r3, #8
 800629e:	429a      	cmp	r2, r3
 80062a0:	d104      	bne.n	80062ac <vTaskSwitchContext+0x8c>
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	605a      	str	r2, [r3, #4]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <vTaskSwitchContext+0xb0>)
 80062b4:	6013      	str	r3, [r2, #0]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr
 80062c0:	200047a0 	.word	0x200047a0
 80062c4:	2000478c 	.word	0x2000478c
 80062c8:	20004780 	.word	0x20004780
 80062cc:	2000467c 	.word	0x2000467c
 80062d0:	20004678 	.word	0x20004678

080062d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60fb      	str	r3, [r7, #12]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <vTaskPlaceOnEventList+0x44>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3318      	adds	r3, #24
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fe fc42 	bl	8004b8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006308:	2101      	movs	r1, #1
 800630a:	6838      	ldr	r0, [r7, #0]
 800630c:	f000 fba4 	bl	8006a58 <prvAddCurrentTaskToDelayedList>
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20004678 	.word	0x20004678

0800631c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	3318      	adds	r3, #24
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe fc55 	bl	8004bfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006352:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <xTaskRemoveFromEventList+0xac>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11c      	bne.n	8006394 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	3304      	adds	r3, #4
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fc4c 	bl	8004bfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	2201      	movs	r2, #1
 800636a:	409a      	lsls	r2, r3
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <xTaskRemoveFromEventList+0xb0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4313      	orrs	r3, r2
 8006372:	4a16      	ldr	r2, [pc, #88]	; (80063cc <xTaskRemoveFromEventList+0xb0>)
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <xTaskRemoveFromEventList+0xb4>)
 8006384:	441a      	add	r2, r3
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7fe fbda 	bl	8004b46 <vListInsertEnd>
 8006392:	e005      	b.n	80063a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3318      	adds	r3, #24
 8006398:	4619      	mov	r1, r3
 800639a:	480e      	ldr	r0, [pc, #56]	; (80063d4 <xTaskRemoveFromEventList+0xb8>)
 800639c:	f7fe fbd3 	bl	8004b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <xTaskRemoveFromEventList+0xbc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d905      	bls.n	80063ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <xTaskRemoveFromEventList+0xc0>)
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	e001      	b.n	80063be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063be:	697b      	ldr	r3, [r7, #20]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200047a0 	.word	0x200047a0
 80063cc:	20004780 	.word	0x20004780
 80063d0:	2000467c 	.word	0x2000467c
 80063d4:	20004738 	.word	0x20004738
 80063d8:	20004678 	.word	0x20004678
 80063dc:	2000478c 	.word	0x2000478c

080063e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <vTaskInternalSetTimeOutState+0x24>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <vTaskInternalSetTimeOutState+0x28>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	605a      	str	r2, [r3, #4]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20004790 	.word	0x20004790
 8006408:	2000477c 	.word	0x2000477c

0800640c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	613b      	str	r3, [r7, #16]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	60fb      	str	r3, [r7, #12]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800644e:	f000 fc5d 	bl	8006d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <xTaskCheckForTimeOut+0xbc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d102      	bne.n	8006472 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
 8006470:	e023      	b.n	80064ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <xTaskCheckForTimeOut+0xc0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d007      	beq.n	800648e <xTaskCheckForTimeOut+0x82>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	e015      	b.n	80064ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	429a      	cmp	r2, r3
 8006496:	d20b      	bcs.n	80064b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff9b 	bl	80063e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	e004      	b.n	80064ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ba:	f000 fc57 	bl	8006d6c <vPortExitCritical>

	return xReturn;
 80064be:	69fb      	ldr	r3, [r7, #28]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	2000477c 	.word	0x2000477c
 80064cc:	20004790 	.word	0x20004790

080064d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <vTaskMissedYield+0x14>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
}
 80064da:	bf00      	nop
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000478c 	.word	0x2000478c

080064e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064f0:	f000 f852 	bl	8006598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <prvIdleTask+0x28>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d9f9      	bls.n	80064f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <prvIdleTask+0x2c>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800650c:	e7f0      	b.n	80064f0 <prvIdleTask+0x8>
 800650e:	bf00      	nop
 8006510:	2000467c 	.word	0x2000467c
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	e00c      	b.n	800653e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4a12      	ldr	r2, [pc, #72]	; (8006578 <prvInitialiseTaskLists+0x60>)
 8006530:	4413      	add	r3, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fadc 	bl	8004af0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3301      	adds	r3, #1
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b06      	cmp	r3, #6
 8006542:	d9ef      	bls.n	8006524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006544:	480d      	ldr	r0, [pc, #52]	; (800657c <prvInitialiseTaskLists+0x64>)
 8006546:	f7fe fad3 	bl	8004af0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800654a:	480d      	ldr	r0, [pc, #52]	; (8006580 <prvInitialiseTaskLists+0x68>)
 800654c:	f7fe fad0 	bl	8004af0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006550:	480c      	ldr	r0, [pc, #48]	; (8006584 <prvInitialiseTaskLists+0x6c>)
 8006552:	f7fe facd 	bl	8004af0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006556:	480c      	ldr	r0, [pc, #48]	; (8006588 <prvInitialiseTaskLists+0x70>)
 8006558:	f7fe faca 	bl	8004af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800655c:	480b      	ldr	r0, [pc, #44]	; (800658c <prvInitialiseTaskLists+0x74>)
 800655e:	f7fe fac7 	bl	8004af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <prvInitialiseTaskLists+0x78>)
 8006564:	4a05      	ldr	r2, [pc, #20]	; (800657c <prvInitialiseTaskLists+0x64>)
 8006566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvInitialiseTaskLists+0x7c>)
 800656a:	4a05      	ldr	r2, [pc, #20]	; (8006580 <prvInitialiseTaskLists+0x68>)
 800656c:	601a      	str	r2, [r3, #0]
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	2000467c 	.word	0x2000467c
 800657c:	20004708 	.word	0x20004708
 8006580:	2000471c 	.word	0x2000471c
 8006584:	20004738 	.word	0x20004738
 8006588:	2000474c 	.word	0x2000474c
 800658c:	20004764 	.word	0x20004764
 8006590:	20004730 	.word	0x20004730
 8006594:	20004734 	.word	0x20004734

08006598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800659e:	e019      	b.n	80065d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065a0:	f000 fbb4 	bl	8006d0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <prvCheckTasksWaitingTermination+0x50>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fb23 	bl	8004bfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <prvCheckTasksWaitingTermination+0x54>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <prvCheckTasksWaitingTermination+0x54>)
 80065be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <prvCheckTasksWaitingTermination+0x58>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <prvCheckTasksWaitingTermination+0x58>)
 80065c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065ca:	f000 fbcf 	bl	8006d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f810 	bl	80065f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065d4:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <prvCheckTasksWaitingTermination+0x58>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e1      	bne.n	80065a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000474c 	.word	0x2000474c
 80065ec:	20004778 	.word	0x20004778
 80065f0:	20004760 	.word	0x20004760

080065f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006602:	2b00      	cmp	r3, #0
 8006604:	d108      	bne.n	8006618 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fd42 	bl	8007094 <vPortFree>
				vPortFree( pxTCB );
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fd3f 	bl	8007094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006616:	e018      	b.n	800664a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661e:	2b01      	cmp	r3, #1
 8006620:	d103      	bne.n	800662a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fd36 	bl	8007094 <vPortFree>
	}
 8006628:	e00f      	b.n	800664a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006630:	2b02      	cmp	r3, #2
 8006632:	d00a      	beq.n	800664a <prvDeleteTCB+0x56>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <prvDeleteTCB+0x54>
	}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <prvResetNextTaskUnblockTime+0x40>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <prvResetNextTaskUnblockTime+0x14>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <prvResetNextTaskUnblockTime+0x16>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvResetNextTaskUnblockTime+0x44>)
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006676:	e008      	b.n	800668a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <prvResetNextTaskUnblockTime+0x40>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4a04      	ldr	r2, [pc, #16]	; (8006698 <prvResetNextTaskUnblockTime+0x44>)
 8006688:	6013      	str	r3, [r2, #0]
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	20004730 	.word	0x20004730
 8006698:	20004798 	.word	0x20004798

0800669c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <xTaskGetSchedulerState+0x34>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066aa:	2301      	movs	r3, #1
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	e008      	b.n	80066c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <xTaskGetSchedulerState+0x38>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066b8:	2302      	movs	r3, #2
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	e001      	b.n	80066c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066c2:	687b      	ldr	r3, [r7, #4]
	}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20004784 	.word	0x20004784
 80066d4:	200047a0 	.word	0x200047a0

080066d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d06e      	beq.n	80067cc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <xTaskPriorityInherit+0x100>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d25e      	bcs.n	80067ba <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	db06      	blt.n	8006712 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006704:	4b34      	ldr	r3, [pc, #208]	; (80067d8 <xTaskPriorityInherit+0x100>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	f1c3 0207 	rsb	r2, r3, #7
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6959      	ldr	r1, [r3, #20]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4a2e      	ldr	r2, [pc, #184]	; (80067dc <xTaskPriorityInherit+0x104>)
 8006724:	4413      	add	r3, r2
 8006726:	4299      	cmp	r1, r3
 8006728:	d101      	bne.n	800672e <xTaskPriorityInherit+0x56>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xTaskPriorityInherit+0x58>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d03a      	beq.n	80067aa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3304      	adds	r3, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fa5f 	bl	8004bfc <uxListRemove>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d115      	bne.n	8006770 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4924      	ldr	r1, [pc, #144]	; (80067dc <xTaskPriorityInherit+0x104>)
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xTaskPriorityInherit+0x98>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	2201      	movs	r2, #1
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	43da      	mvns	r2, r3
 8006766:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <xTaskPriorityInherit+0x108>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4013      	ands	r3, r2
 800676c:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <xTaskPriorityInherit+0x108>)
 800676e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <xTaskPriorityInherit+0x100>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	2201      	movs	r2, #1
 8006780:	409a      	lsls	r2, r3
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <xTaskPriorityInherit+0x108>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4313      	orrs	r3, r2
 8006788:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <xTaskPriorityInherit+0x108>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a10      	ldr	r2, [pc, #64]	; (80067dc <xTaskPriorityInherit+0x104>)
 800679a:	441a      	add	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe f9cf 	bl	8004b46 <vListInsertEnd>
 80067a8:	e004      	b.n	80067b4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <xTaskPriorityInherit+0x100>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e008      	b.n	80067cc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <xTaskPriorityInherit+0x100>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d201      	bcs.n	80067cc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067cc:	68fb      	ldr	r3, [r7, #12]
	}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20004678 	.word	0x20004678
 80067dc:	2000467c 	.word	0x2000467c
 80067e0:	20004780 	.word	0x20004780

080067e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06e      	beq.n	80068d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067fa:	4b3a      	ldr	r3, [pc, #232]	; (80068e4 <xTaskPriorityDisinherit+0x100>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	429a      	cmp	r2, r3
 8006802:	d00a      	beq.n	800681a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	60fb      	str	r3, [r7, #12]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60bb      	str	r3, [r7, #8]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	429a      	cmp	r2, r3
 800684c:	d044      	beq.n	80068d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006852:	2b00      	cmp	r3, #0
 8006854:	d140      	bne.n	80068d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f9ce 	bl	8004bfc <uxListRemove>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d115      	bne.n	8006892 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	491f      	ldr	r1, [pc, #124]	; (80068e8 <xTaskPriorityDisinherit+0x104>)
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xTaskPriorityDisinherit+0xae>
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	2201      	movs	r2, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43da      	mvns	r2, r3
 8006888:	4b18      	ldr	r3, [pc, #96]	; (80068ec <xTaskPriorityDisinherit+0x108>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4013      	ands	r3, r2
 800688e:	4a17      	ldr	r2, [pc, #92]	; (80068ec <xTaskPriorityDisinherit+0x108>)
 8006890:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	f1c3 0207 	rsb	r2, r3, #7
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	2201      	movs	r2, #1
 80068ac:	409a      	lsls	r2, r3
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <xTaskPriorityDisinherit+0x108>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <xTaskPriorityDisinherit+0x108>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <xTaskPriorityDisinherit+0x104>)
 80068c6:	441a      	add	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fe f939 	bl	8004b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068d8:	697b      	ldr	r3, [r7, #20]
	}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20004678 	.word	0x20004678
 80068e8:	2000467c 	.word	0x2000467c
 80068ec:	20004780 	.word	0x20004780

080068f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80068fe:	2301      	movs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8088 	beq.w	8006a1a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60fb      	str	r3, [r7, #12]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d902      	bls.n	8006938 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	e002      	b.n	800693e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	429a      	cmp	r2, r3
 8006946:	d068      	beq.n	8006a1a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d163      	bne.n	8006a1a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006952:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	429a      	cmp	r2, r3
 800695a:	d10a      	bne.n	8006972 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	60bb      	str	r3, [r7, #8]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	db04      	blt.n	8006990 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f1c3 0207 	rsb	r2, r3, #7
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	6959      	ldr	r1, [r3, #20]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80069a0:	4413      	add	r3, r2
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d101      	bne.n	80069aa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d034      	beq.n	8006a1a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe f921 	bl	8004bfc <uxListRemove>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d115      	bne.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4918      	ldr	r1, [pc, #96]	; (8006a28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	2201      	movs	r2, #1
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	43da      	mvns	r2, r3
 80069e2:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4013      	ands	r3, r2
 80069e8:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069ea:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	2201      	movs	r2, #1
 80069f2:	409a      	lsls	r2, r3
 80069f4:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	4a0c      	ldr	r2, [pc, #48]	; (8006a2c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4a07      	ldr	r2, [pc, #28]	; (8006a28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a0c:	441a      	add	r2, r3
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4619      	mov	r1, r3
 8006a14:	4610      	mov	r0, r2
 8006a16:	f7fe f896 	bl	8004b46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a1a:	bf00      	nop
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20004678 	.word	0x20004678
 8006a28:	2000467c 	.word	0x2000467c
 8006a2c:	20004780 	.word	0x20004780

08006a30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a42:	3201      	adds	r2, #1
 8006a44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006a46:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a48:	681b      	ldr	r3, [r3, #0]
	}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20004678 	.word	0x20004678

08006a58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a68:	4b28      	ldr	r3, [pc, #160]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe f8c4 	bl	8004bfc <uxListRemove>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	2201      	movs	r2, #1
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43da      	mvns	r2, r3
 8006a88:	4b21      	ldr	r3, [pc, #132]	; (8006b10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	4a20      	ldr	r2, [pc, #128]	; (8006b10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d10a      	bne.n	8006ab0 <prvAddCurrentTaskToDelayedList+0x58>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	481a      	ldr	r0, [pc, #104]	; (8006b14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006aaa:	f7fe f84c 	bl	8004b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aae:	e026      	b.n	8006afe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ab8:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d209      	bcs.n	8006adc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fe f859 	bl	8004b8c <vListInsert>
}
 8006ada:	e010      	b.n	8006afe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006adc:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe f84f 	bl	8004b8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006aee:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d202      	bcs.n	8006afe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6013      	str	r3, [r2, #0]
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2000477c 	.word	0x2000477c
 8006b0c:	20004678 	.word	0x20004678
 8006b10:	20004780 	.word	0x20004780
 8006b14:	20004764 	.word	0x20004764
 8006b18:	20004734 	.word	0x20004734
 8006b1c:	20004730 	.word	0x20004730
 8006b20:	20004798 	.word	0x20004798

08006b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3b04      	subs	r3, #4
 8006b34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3b04      	subs	r3, #4
 8006b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f023 0201 	bic.w	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b54:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <pxPortInitialiseStack+0x54>)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3b14      	subs	r3, #20
 8006b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3b20      	subs	r3, #32
 8006b6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr
 8006b78:	08006b7d 	.word	0x08006b7d

08006b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <prvTaskExitError+0x54>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d00a      	beq.n	8006ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <prvTaskExitError+0x28>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60bb      	str	r3, [r7, #8]
}
 8006bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bba:	bf00      	nop
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0fc      	beq.n	8006bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	2000000c 	.word	0x2000000c
	...

08006be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <pxCurrentTCBConst2>)
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bea:	f380 8809 	msr	PSP, r0
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006bfe:	4770      	bx	lr

08006c00 <pxCurrentTCBConst2>:
 8006c00:	20004678 	.word	0x20004678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c08:	4806      	ldr	r0, [pc, #24]	; (8006c24 <prvPortStartFirstTask+0x1c>)
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f380 8808 	msr	MSP, r0
 8006c12:	b662      	cpsie	i
 8006c14:	b661      	cpsie	f
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	df00      	svc	0
 8006c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c22:	bf00      	nop
 8006c24:	e000ed08 	.word	0xe000ed08

08006c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c2e:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <xPortStartScheduler+0xd0>)
 8006c30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	22ff      	movs	r2, #255	; 0xff
 8006c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	4b2a      	ldr	r3, [pc, #168]	; (8006cfc <xPortStartScheduler+0xd4>)
 8006c54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c56:	4b2a      	ldr	r3, [pc, #168]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006c58:	2207      	movs	r2, #7
 8006c5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c5c:	e009      	b.n	8006c72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c5e:	4b28      	ldr	r3, [pc, #160]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006c66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d0ef      	beq.n	8006c5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c7e:	4b20      	ldr	r3, [pc, #128]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f1c3 0307 	rsb	r3, r3, #7
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d00a      	beq.n	8006ca0 <xPortStartScheduler+0x78>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	60bb      	str	r3, [r7, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ca0:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006ca8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006caa:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cb2:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <xPortStartScheduler+0xd8>)
 8006cb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <xPortStartScheduler+0xdc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <xPortStartScheduler+0xdc>)
 8006cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <xPortStartScheduler+0xdc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a0d      	ldr	r2, [pc, #52]	; (8006d04 <xPortStartScheduler+0xdc>)
 8006cd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cd6:	f000 f8b9 	bl	8006e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <xPortStartScheduler+0xe0>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ce0:	f7ff ff92 	bl	8006c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ce4:	f7ff fa9c 	bl	8006220 <vTaskSwitchContext>
	prvTaskExitError();
 8006ce8:	f7ff ff48 	bl	8006b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	e000e400 	.word	0xe000e400
 8006cfc:	200047a4 	.word	0x200047a4
 8006d00:	200047a8 	.word	0x200047a8
 8006d04:	e000ed20 	.word	0xe000ed20
 8006d08:	2000000c 	.word	0x2000000c

08006d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	607b      	str	r3, [r7, #4]
}
 8006d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d26:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <vPortEnterCritical+0x58>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	4a0d      	ldr	r2, [pc, #52]	; (8006d64 <vPortEnterCritical+0x58>)
 8006d2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <vPortEnterCritical+0x58>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10f      	bne.n	8006d58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <vPortEnterCritical+0x5c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	603b      	str	r3, [r7, #0]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <vPortEnterCritical+0x4a>
	}
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d72:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <vPortExitCritical+0x4c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <vPortExitCritical+0x24>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <vPortExitCritical+0x4c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	4a08      	ldr	r2, [pc, #32]	; (8006db8 <vPortExitCritical+0x4c>)
 8006d98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <vPortExitCritical+0x4c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d105      	bne.n	8006dae <vPortExitCritical+0x42>
 8006da2:	2300      	movs	r3, #0
 8006da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	f383 8811 	msr	BASEPRI, r3
}
 8006dac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr
 8006db8:	2000000c 	.word	0x2000000c
 8006dbc:	00000000 	.word	0x00000000

08006dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006dc0:	f3ef 8009 	mrs	r0, PSP
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <pxCurrentTCBConst>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006dd0:	6010      	str	r0, [r2, #0]
 8006dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006dd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dda:	f380 8811 	msr	BASEPRI, r0
 8006dde:	f7ff fa1f 	bl	8006220 <vTaskSwitchContext>
 8006de2:	f04f 0000 	mov.w	r0, #0
 8006de6:	f380 8811 	msr	BASEPRI, r0
 8006dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006dee:	6819      	ldr	r1, [r3, #0]
 8006df0:	6808      	ldr	r0, [r1, #0]
 8006df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006df6:	f380 8809 	msr	PSP, r0
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	4770      	bx	lr

08006e00 <pxCurrentTCBConst>:
 8006e00:	20004678 	.word	0x20004678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop

08006e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e22:	f7ff f93f 	bl	80060a4 <xTaskIncrementTick>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <xPortSysTickHandler+0x40>)
 8006e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
}
 8006e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <vPortSetupTimerInterrupt+0x30>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <vPortSetupTimerInterrupt+0x34>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e5c:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <vPortSetupTimerInterrupt+0x38>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a09      	ldr	r2, [pc, #36]	; (8006e88 <vPortSetupTimerInterrupt+0x3c>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	099b      	lsrs	r3, r3, #6
 8006e68:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <vPortSetupTimerInterrupt+0x40>)
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <vPortSetupTimerInterrupt+0x30>)
 8006e70:	2207      	movs	r2, #7
 8006e72:	601a      	str	r2, [r3, #0]
}
 8006e74:	bf00      	nop
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr
 8006e7c:	e000e010 	.word	0xe000e010
 8006e80:	e000e018 	.word	0xe000e018
 8006e84:	20000000 	.word	0x20000000
 8006e88:	10624dd3 	.word	0x10624dd3
 8006e8c:	e000e014 	.word	0xe000e014

08006e90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e96:	f3ef 8305 	mrs	r3, IPSR
 8006e9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d914      	bls.n	8006ecc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ea2:	4a16      	ldr	r2, [pc, #88]	; (8006efc <vPortValidateInterruptPriority+0x6c>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006eac:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <vPortValidateInterruptPriority+0x70>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	7afa      	ldrb	r2, [r7, #11]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d20a      	bcs.n	8006ecc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	607b      	str	r3, [r7, #4]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <vPortValidateInterruptPriority+0x74>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ed4:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <vPortValidateInterruptPriority+0x78>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d90a      	bls.n	8006ef2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	603b      	str	r3, [r7, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <vPortValidateInterruptPriority+0x60>
	}
 8006ef2:	bf00      	nop
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr
 8006efc:	e000e3f0 	.word	0xe000e3f0
 8006f00:	200047a4 	.word	0x200047a4
 8006f04:	e000ed0c 	.word	0xe000ed0c
 8006f08:	200047a8 	.word	0x200047a8

08006f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f18:	f7fe fffa 	bl	8005f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f1c:	4b58      	ldr	r3, [pc, #352]	; (8007080 <pvPortMalloc+0x174>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f24:	f000 f910 	bl	8007148 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f28:	4b56      	ldr	r3, [pc, #344]	; (8007084 <pvPortMalloc+0x178>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 808e 	bne.w	8007052 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01d      	beq.n	8006f78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d014      	beq.n	8006f78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	3308      	adds	r3, #8
 8006f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <pvPortMalloc+0x6c>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	617b      	str	r3, [r7, #20]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d069      	beq.n	8007052 <pvPortMalloc+0x146>
 8006f7e:	4b42      	ldr	r3, [pc, #264]	; (8007088 <pvPortMalloc+0x17c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d864      	bhi.n	8007052 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f88:	4b40      	ldr	r3, [pc, #256]	; (800708c <pvPortMalloc+0x180>)
 8006f8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f8c:	4b3f      	ldr	r3, [pc, #252]	; (800708c <pvPortMalloc+0x180>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f92:	e004      	b.n	8006f9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d903      	bls.n	8006fb0 <pvPortMalloc+0xa4>
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f1      	bne.n	8006f94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fb0:	4b33      	ldr	r3, [pc, #204]	; (8007080 <pvPortMalloc+0x174>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d04b      	beq.n	8007052 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	4413      	add	r3, r2
 8006fc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d91f      	bls.n	800701c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <pvPortMalloc+0xf8>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	613b      	str	r3, [r7, #16]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007016:	69b8      	ldr	r0, [r7, #24]
 8007018:	f000 f8f8 	bl	800720c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800701c:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <pvPortMalloc+0x17c>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <pvPortMalloc+0x17c>)
 8007028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800702a:	4b17      	ldr	r3, [pc, #92]	; (8007088 <pvPortMalloc+0x17c>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b18      	ldr	r3, [pc, #96]	; (8007090 <pvPortMalloc+0x184>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d203      	bcs.n	800703e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <pvPortMalloc+0x17c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a15      	ldr	r2, [pc, #84]	; (8007090 <pvPortMalloc+0x184>)
 800703c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	4b10      	ldr	r3, [pc, #64]	; (8007084 <pvPortMalloc+0x178>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	431a      	orrs	r2, r3
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007052:	f7fe ff6b 	bl	8005f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <pvPortMalloc+0x16a>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	60fb      	str	r3, [r7, #12]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <pvPortMalloc+0x168>
	return pvReturn;
 8007076:	69fb      	ldr	r3, [r7, #28]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3728      	adds	r7, #40	; 0x28
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	200083b4 	.word	0x200083b4
 8007084:	200083c0 	.word	0x200083c0
 8007088:	200083b8 	.word	0x200083b8
 800708c:	200083ac 	.word	0x200083ac
 8007090:	200083bc 	.word	0x200083bc

08007094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d048      	beq.n	8007138 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070a6:	2308      	movs	r3, #8
 80070a8:	425b      	negs	r3, r3
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4b21      	ldr	r3, [pc, #132]	; (8007140 <vPortFree+0xac>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <vPortFree+0x44>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60fb      	str	r3, [r7, #12]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <vPortFree+0x62>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60bb      	str	r3, [r7, #8]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	4b11      	ldr	r3, [pc, #68]	; (8007140 <vPortFree+0xac>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4013      	ands	r3, r2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d019      	beq.n	8007138 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d115      	bne.n	8007138 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <vPortFree+0xac>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	43db      	mvns	r3, r3
 8007116:	401a      	ands	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800711c:	f7fe fef8 	bl	8005f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <vPortFree+0xb0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4413      	add	r3, r2
 800712a:	4a06      	ldr	r2, [pc, #24]	; (8007144 <vPortFree+0xb0>)
 800712c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800712e:	6938      	ldr	r0, [r7, #16]
 8007130:	f000 f86c 	bl	800720c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007134:	f7fe fefa 	bl	8005f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007138:	bf00      	nop
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	200083c0 	.word	0x200083c0
 8007144:	200083b8 	.word	0x200083b8

08007148 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800714e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007152:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007154:	4b27      	ldr	r3, [pc, #156]	; (80071f4 <prvHeapInit+0xac>)
 8007156:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3307      	adds	r3, #7
 8007166:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	4a1f      	ldr	r2, [pc, #124]	; (80071f4 <prvHeapInit+0xac>)
 8007178:	4413      	add	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007180:	4a1d      	ldr	r2, [pc, #116]	; (80071f8 <prvHeapInit+0xb0>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007186:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <prvHeapInit+0xb0>)
 8007188:	2200      	movs	r2, #0
 800718a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007194:	2208      	movs	r2, #8
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0307 	bic.w	r3, r3, #7
 80071a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a15      	ldr	r2, [pc, #84]	; (80071fc <prvHeapInit+0xb4>)
 80071a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071aa:	4b14      	ldr	r3, [pc, #80]	; (80071fc <prvHeapInit+0xb4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2200      	movs	r2, #0
 80071b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <prvHeapInit+0xb4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <prvHeapInit+0xb4>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <prvHeapInit+0xb8>)
 80071d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4a09      	ldr	r2, [pc, #36]	; (8007204 <prvHeapInit+0xbc>)
 80071de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071e0:	4b09      	ldr	r3, [pc, #36]	; (8007208 <prvHeapInit+0xc0>)
 80071e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071e6:	601a      	str	r2, [r3, #0]
}
 80071e8:	bf00      	nop
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	200047ac 	.word	0x200047ac
 80071f8:	200083ac 	.word	0x200083ac
 80071fc:	200083b4 	.word	0x200083b4
 8007200:	200083bc 	.word	0x200083bc
 8007204:	200083b8 	.word	0x200083b8
 8007208:	200083c0 	.word	0x200083c0

0800720c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007214:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <prvInsertBlockIntoFreeList+0xa8>)
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e002      	b.n	8007220 <prvInsertBlockIntoFreeList+0x14>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	429a      	cmp	r2, r3
 8007228:	d8f7      	bhi.n	800721a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d108      	bne.n	800724e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	441a      	add	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	441a      	add	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d118      	bne.n	8007294 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <prvInsertBlockIntoFreeList+0xac>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d00d      	beq.n	800728a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e008      	b.n	800729c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <prvInsertBlockIntoFreeList+0xac>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e003      	b.n	800729c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d002      	beq.n	80072aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr
 80072b4:	200083ac 	.word	0x200083ac
 80072b8:	200083b4 	.word	0x200083b4

080072bc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80072c4:	4b2b      	ldr	r3, [pc, #172]	; (8007374 <tcpip_thread+0xb8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 80072cc:	4b29      	ldr	r3, [pc, #164]	; (8007374 <tcpip_thread+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a29      	ldr	r2, [pc, #164]	; (8007378 <tcpip_thread+0xbc>)
 80072d2:	6812      	ldr	r2, [r2, #0]
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 80072d8:	4828      	ldr	r0, [pc, #160]	; (800737c <tcpip_thread+0xc0>)
 80072da:	f008 fedd 	bl	8010098 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80072de:	4827      	ldr	r0, [pc, #156]	; (800737c <tcpip_thread+0xc0>)
 80072e0:	f008 fee9 	bl	80100b6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	4619      	mov	r1, r3
 80072ea:	4825      	ldr	r0, [pc, #148]	; (8007380 <tcpip_thread+0xc4>)
 80072ec:	f006 fa80 	bl	800d7f0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 80072f0:	4822      	ldr	r0, [pc, #136]	; (800737c <tcpip_thread+0xc0>)
 80072f2:	f008 fed1 	bl	8010098 <sys_mutex_lock>
    if (msg == NULL) {
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d106      	bne.n	800730a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80072fc:	4b21      	ldr	r3, [pc, #132]	; (8007384 <tcpip_thread+0xc8>)
 80072fe:	2269      	movs	r2, #105	; 0x69
 8007300:	4921      	ldr	r1, [pc, #132]	; (8007388 <tcpip_thread+0xcc>)
 8007302:	4822      	ldr	r0, [pc, #136]	; (800738c <tcpip_thread+0xd0>)
 8007304:	f008 ff72 	bl	80101ec <iprintf>
      continue;
 8007308:	e032      	b.n	8007370 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b04      	cmp	r3, #4
 8007310:	d020      	beq.n	8007354 <tcpip_thread+0x98>
 8007312:	2b04      	cmp	r3, #4
 8007314:	dc25      	bgt.n	8007362 <tcpip_thread+0xa6>
 8007316:	2b02      	cmp	r3, #2
 8007318:	d002      	beq.n	8007320 <tcpip_thread+0x64>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d00e      	beq.n	800733c <tcpip_thread+0x80>
 800731e:	e020      	b.n	8007362 <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	6850      	ldr	r0, [r2, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	6892      	ldr	r2, [r2, #8]
 800732c:	4611      	mov	r1, r2
 800732e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4619      	mov	r1, r3
 8007334:	2009      	movs	r0, #9
 8007336:	f000 fd63 	bl	8007e00 <memp_free>
      break;
 800733a:	e019      	b.n	8007370 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	6892      	ldr	r2, [r2, #8]
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4619      	mov	r1, r3
 800734c:	2008      	movs	r0, #8
 800734e:	f000 fd57 	bl	8007e00 <memp_free>
      break;
 8007352:	e00d      	b.n	8007370 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	6892      	ldr	r2, [r2, #8]
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
      break;
 8007360:	e006      	b.n	8007370 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007362:	4b08      	ldr	r3, [pc, #32]	; (8007384 <tcpip_thread+0xc8>)
 8007364:	229b      	movs	r2, #155	; 0x9b
 8007366:	4908      	ldr	r1, [pc, #32]	; (8007388 <tcpip_thread+0xcc>)
 8007368:	4808      	ldr	r0, [pc, #32]	; (800738c <tcpip_thread+0xd0>)
 800736a:	f008 ff3f 	bl	80101ec <iprintf>
      break;
 800736e:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8007370:	e7b5      	b.n	80072de <tcpip_thread+0x22>
 8007372:	bf00      	nop
 8007374:	200083c4 	.word	0x200083c4
 8007378:	200083c8 	.word	0x200083c8
 800737c:	200083d0 	.word	0x200083d0
 8007380:	200083cc 	.word	0x200083cc
 8007384:	080111f8 	.word	0x080111f8
 8007388:	08011228 	.word	0x08011228
 800738c:	08011248 	.word	0x08011248

08007390 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800739c:	481a      	ldr	r0, [pc, #104]	; (8007408 <tcpip_inpkt+0x78>)
 800739e:	f008 fe40 	bl	8010022 <sys_mbox_valid>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <tcpip_inpkt+0x24>
 80073a8:	4b18      	ldr	r3, [pc, #96]	; (800740c <tcpip_inpkt+0x7c>)
 80073aa:	22b5      	movs	r2, #181	; 0xb5
 80073ac:	4918      	ldr	r1, [pc, #96]	; (8007410 <tcpip_inpkt+0x80>)
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <tcpip_inpkt+0x84>)
 80073b0:	f008 ff1c 	bl	80101ec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80073b4:	2009      	movs	r0, #9
 80073b6:	f000 fcd1 	bl	8007d5c <memp_malloc>
 80073ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	e01a      	b.n	80073fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2202      	movs	r2, #2
 80073cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80073e0:	6979      	ldr	r1, [r7, #20]
 80073e2:	4809      	ldr	r0, [pc, #36]	; (8007408 <tcpip_inpkt+0x78>)
 80073e4:	f008 fdc4 	bl	800ff70 <sys_mbox_trypost>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	2009      	movs	r0, #9
 80073f2:	f000 fd05 	bl	8007e00 <memp_free>
    return ERR_MEM;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	e000      	b.n	80073fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80073fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200083cc 	.word	0x200083cc
 800740c:	080111f8 	.word	0x080111f8
 8007410:	08011270 	.word	0x08011270
 8007414:	08011248 	.word	0x08011248

08007418 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007428:	f003 0318 	and.w	r3, r3, #24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007430:	4a08      	ldr	r2, [pc, #32]	; (8007454 <tcpip_input+0x3c>)
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff ffab 	bl	8007390 <tcpip_inpkt>
 800743a:	4603      	mov	r3, r0
 800743c:	e005      	b.n	800744a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800743e:	4a06      	ldr	r2, [pc, #24]	; (8007458 <tcpip_input+0x40>)
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff ffa4 	bl	8007390 <tcpip_inpkt>
 8007448:	4603      	mov	r3, r0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	0800fd45 	.word	0x0800fd45
 8007458:	0800ed01 	.word	0x0800ed01

0800745c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800746a:	481d      	ldr	r0, [pc, #116]	; (80074e0 <tcpip_callback_with_block+0x84>)
 800746c:	f008 fdd9 	bl	8010022 <sys_mbox_valid>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <tcpip_callback_with_block+0x26>
 8007476:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <tcpip_callback_with_block+0x88>)
 8007478:	22ee      	movs	r2, #238	; 0xee
 800747a:	491b      	ldr	r1, [pc, #108]	; (80074e8 <tcpip_callback_with_block+0x8c>)
 800747c:	481b      	ldr	r0, [pc, #108]	; (80074ec <tcpip_callback_with_block+0x90>)
 800747e:	f008 feb5 	bl	80101ec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007482:	2008      	movs	r0, #8
 8007484:	f000 fc6a 	bl	8007d5c <memp_malloc>
 8007488:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	e01f      	b.n	80074d6 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2203      	movs	r2, #3
 800749a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	609a      	str	r2, [r3, #8]
  if (block) {
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80074ae:	6979      	ldr	r1, [r7, #20]
 80074b0:	480b      	ldr	r0, [pc, #44]	; (80074e0 <tcpip_callback_with_block+0x84>)
 80074b2:	f008 fd47 	bl	800ff44 <sys_mbox_post>
 80074b6:	e00d      	b.n	80074d4 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80074b8:	6979      	ldr	r1, [r7, #20]
 80074ba:	4809      	ldr	r0, [pc, #36]	; (80074e0 <tcpip_callback_with_block+0x84>)
 80074bc:	f008 fd58 	bl	800ff70 <sys_mbox_trypost>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d006      	beq.n	80074d4 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80074c6:	6979      	ldr	r1, [r7, #20]
 80074c8:	2008      	movs	r0, #8
 80074ca:	f000 fc99 	bl	8007e00 <memp_free>
      return ERR_MEM;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	e000      	b.n	80074d6 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200083cc 	.word	0x200083cc
 80074e4:	080111f8 	.word	0x080111f8
 80074e8:	08011270 	.word	0x08011270
 80074ec:	08011248 	.word	0x08011248

080074f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80074fa:	f000 f868 	bl	80075ce <lwip_init>

  tcpip_init_done = initfunc;
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <tcpip_init+0x6c>)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007504:	4a16      	ldr	r2, [pc, #88]	; (8007560 <tcpip_init+0x70>)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800750a:	2106      	movs	r1, #6
 800750c:	4815      	ldr	r0, [pc, #84]	; (8007564 <tcpip_init+0x74>)
 800750e:	f008 fcf7 	bl	800ff00 <sys_mbox_new>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <tcpip_init+0x78>)
 800751a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800751e:	4913      	ldr	r1, [pc, #76]	; (800756c <tcpip_init+0x7c>)
 8007520:	4813      	ldr	r0, [pc, #76]	; (8007570 <tcpip_init+0x80>)
 8007522:	f008 fe63 	bl	80101ec <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007526:	4813      	ldr	r0, [pc, #76]	; (8007574 <tcpip_init+0x84>)
 8007528:	f008 fd9a 	bl	8010060 <sys_mutex_new>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d006      	beq.n	8007540 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <tcpip_init+0x78>)
 8007534:	f240 12d9 	movw	r2, #473	; 0x1d9
 8007538:	490f      	ldr	r1, [pc, #60]	; (8007578 <tcpip_init+0x88>)
 800753a:	480d      	ldr	r0, [pc, #52]	; (8007570 <tcpip_init+0x80>)
 800753c:	f008 fe56 	bl	80101ec <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007540:	2300      	movs	r3, #0
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007548:	2200      	movs	r2, #0
 800754a:	490c      	ldr	r1, [pc, #48]	; (800757c <tcpip_init+0x8c>)
 800754c:	480c      	ldr	r0, [pc, #48]	; (8007580 <tcpip_init+0x90>)
 800754e:	f008 fdbf 	bl	80100d0 <sys_thread_new>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200083c4 	.word	0x200083c4
 8007560:	200083c8 	.word	0x200083c8
 8007564:	200083cc 	.word	0x200083cc
 8007568:	080111f8 	.word	0x080111f8
 800756c:	08011280 	.word	0x08011280
 8007570:	08011248 	.word	0x08011248
 8007574:	200083d0 	.word	0x200083d0
 8007578:	080112a4 	.word	0x080112a4
 800757c:	080072bd 	.word	0x080072bd
 8007580:	080112c8 	.word	0x080112c8

08007584 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	ba5b      	rev16	r3, r3
 8007592:	b29b      	uxth	r3, r3
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr

0800759e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	061a      	lsls	r2, r3, #24
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	0e1b      	lsrs	r3, r3, #24
 80075c2:	4313      	orrs	r3, r2
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80075d8:	f008 fd34 	bl	8010044 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80075dc:	f000 f8a6 	bl	800772c <mem_init>
  memp_init();
 80075e0:	f000 fb70 	bl	8007cc4 <memp_init>
  pbuf_init();
  netif_init();
 80075e4:	f000 fc36 	bl	8007e54 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80075e8:	f006 f928 	bl	800d83c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80075ec:	f001 fc36 	bl	8008e5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80075f0:	f005 ffba 	bl	800d568 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007604:	4b40      	ldr	r3, [pc, #256]	; (8007708 <plug_holes+0x10c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d206      	bcs.n	800761c <plug_holes+0x20>
 800760e:	4b3f      	ldr	r3, [pc, #252]	; (800770c <plug_holes+0x110>)
 8007610:	f240 125d 	movw	r2, #349	; 0x15d
 8007614:	493e      	ldr	r1, [pc, #248]	; (8007710 <plug_holes+0x114>)
 8007616:	483f      	ldr	r0, [pc, #252]	; (8007714 <plug_holes+0x118>)
 8007618:	f008 fde8 	bl	80101ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800761c:	4b3e      	ldr	r3, [pc, #248]	; (8007718 <plug_holes+0x11c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d306      	bcc.n	8007634 <plug_holes+0x38>
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <plug_holes+0x110>)
 8007628:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800762c:	493b      	ldr	r1, [pc, #236]	; (800771c <plug_holes+0x120>)
 800762e:	4839      	ldr	r0, [pc, #228]	; (8007714 <plug_holes+0x118>)
 8007630:	f008 fddc 	bl	80101ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	791b      	ldrb	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <plug_holes+0x4e>
 800763c:	4b33      	ldr	r3, [pc, #204]	; (800770c <plug_holes+0x110>)
 800763e:	f240 125f 	movw	r2, #351	; 0x15f
 8007642:	4937      	ldr	r1, [pc, #220]	; (8007720 <plug_holes+0x124>)
 8007644:	4833      	ldr	r0, [pc, #204]	; (8007714 <plug_holes+0x118>)
 8007646:	f008 fdd1 	bl	80101ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007652:	d906      	bls.n	8007662 <plug_holes+0x66>
 8007654:	4b2d      	ldr	r3, [pc, #180]	; (800770c <plug_holes+0x110>)
 8007656:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800765a:	4932      	ldr	r1, [pc, #200]	; (8007724 <plug_holes+0x128>)
 800765c:	482d      	ldr	r0, [pc, #180]	; (8007714 <plug_holes+0x118>)
 800765e:	f008 fdc5 	bl	80101ec <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <plug_holes+0x10c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	8812      	ldrh	r2, [r2, #0]
 800766a:	4413      	add	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d01f      	beq.n	80076b6 <plug_holes+0xba>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d11b      	bne.n	80076b6 <plug_holes+0xba>
 800767e:	4b26      	ldr	r3, [pc, #152]	; (8007718 <plug_holes+0x11c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	429a      	cmp	r2, r3
 8007686:	d016      	beq.n	80076b6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <plug_holes+0x12c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	429a      	cmp	r2, r3
 8007690:	d102      	bne.n	8007698 <plug_holes+0x9c>
      lfree = mem;
 8007692:	4a25      	ldr	r2, [pc, #148]	; (8007728 <plug_holes+0x12c>)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80076a0:	4b19      	ldr	r3, [pc, #100]	; (8007708 <plug_holes+0x10c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	1ad1      	subs	r1, r2, r3
 80076a8:	4b17      	ldr	r3, [pc, #92]	; (8007708 <plug_holes+0x10c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	8812      	ldrh	r2, [r2, #0]
 80076b0:	4413      	add	r3, r2
 80076b2:	b28a      	uxth	r2, r1
 80076b4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <plug_holes+0x10c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	8852      	ldrh	r2, [r2, #2]
 80076be:	4413      	add	r3, r2
 80076c0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d01a      	beq.n	8007700 <plug_holes+0x104>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	791b      	ldrb	r3, [r3, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d116      	bne.n	8007700 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <plug_holes+0x12c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d102      	bne.n	80076e2 <plug_holes+0xe6>
      lfree = pmem;
 80076dc:	4a12      	ldr	r2, [pc, #72]	; (8007728 <plug_holes+0x12c>)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	881a      	ldrh	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <plug_holes+0x10c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	1ad1      	subs	r1, r2, r3
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <plug_holes+0x10c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	8812      	ldrh	r2, [r2, #0]
 80076fa:	4413      	add	r3, r2
 80076fc:	b28a      	uxth	r2, r1
 80076fe:	805a      	strh	r2, [r3, #2]
  }
}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20008a40 	.word	0x20008a40
 800770c:	080112d8 	.word	0x080112d8
 8007710:	08011308 	.word	0x08011308
 8007714:	08011320 	.word	0x08011320
 8007718:	20008a44 	.word	0x20008a44
 800771c:	08011348 	.word	0x08011348
 8007720:	08011364 	.word	0x08011364
 8007724:	08011380 	.word	0x08011380
 8007728:	20008a48 	.word	0x20008a48

0800772c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007732:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <mem_init+0x80>)
 8007734:	3303      	adds	r3, #3
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	461a      	mov	r2, r3
 800773c:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <mem_init+0x84>)
 800773e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <mem_init+0x84>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800774c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <mem_init+0x84>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007762:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <mem_init+0x88>)
 8007764:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <mem_init+0x88>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2201      	movs	r2, #1
 800776c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800776e:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <mem_init+0x88>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007776:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <mem_init+0x88>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007780:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <mem_init+0x84>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a0c      	ldr	r2, [pc, #48]	; (80077b8 <mem_init+0x8c>)
 8007788:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800778a:	480c      	ldr	r0, [pc, #48]	; (80077bc <mem_init+0x90>)
 800778c:	f008 fc68 	bl	8010060 <sys_mutex_new>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007796:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <mem_init+0x94>)
 8007798:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800779c:	4909      	ldr	r1, [pc, #36]	; (80077c4 <mem_init+0x98>)
 800779e:	480a      	ldr	r0, [pc, #40]	; (80077c8 <mem_init+0x9c>)
 80077a0:	f008 fd24 	bl	80101ec <iprintf>
  }
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200083ec 	.word	0x200083ec
 80077b0:	20008a40 	.word	0x20008a40
 80077b4:	20008a44 	.word	0x20008a44
 80077b8:	20008a48 	.word	0x20008a48
 80077bc:	20008a4c 	.word	0x20008a4c
 80077c0:	080112d8 	.word	0x080112d8
 80077c4:	080113ac 	.word	0x080113ac
 80077c8:	08011320 	.word	0x08011320

080077cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d050      	beq.n	800787c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d006      	beq.n	80077f2 <mem_free+0x26>
 80077e4:	4b27      	ldr	r3, [pc, #156]	; (8007884 <mem_free+0xb8>)
 80077e6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80077ea:	4927      	ldr	r1, [pc, #156]	; (8007888 <mem_free+0xbc>)
 80077ec:	4827      	ldr	r0, [pc, #156]	; (800788c <mem_free+0xc0>)
 80077ee:	f008 fcfd 	bl	80101ec <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80077f2:	4b27      	ldr	r3, [pc, #156]	; (8007890 <mem_free+0xc4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d304      	bcc.n	8007806 <mem_free+0x3a>
 80077fc:	4b25      	ldr	r3, [pc, #148]	; (8007894 <mem_free+0xc8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d306      	bcc.n	8007814 <mem_free+0x48>
 8007806:	4b1f      	ldr	r3, [pc, #124]	; (8007884 <mem_free+0xb8>)
 8007808:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800780c:	4922      	ldr	r1, [pc, #136]	; (8007898 <mem_free+0xcc>)
 800780e:	481f      	ldr	r0, [pc, #124]	; (800788c <mem_free+0xc0>)
 8007810:	f008 fcec 	bl	80101ec <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007814:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <mem_free+0xc4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d304      	bcc.n	8007828 <mem_free+0x5c>
 800781e:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <mem_free+0xc8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d306      	bcc.n	8007836 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007828:	f008 fc78 	bl	801011c <sys_arch_protect>
 800782c:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800782e:	68b8      	ldr	r0, [r7, #8]
 8007830:	f008 fc82 	bl	8010138 <sys_arch_unprotect>
    return;
 8007834:	e023      	b.n	800787e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007836:	4819      	ldr	r0, [pc, #100]	; (800789c <mem_free+0xd0>)
 8007838:	f008 fc2e 	bl	8010098 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3b08      	subs	r3, #8
 8007840:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <mem_free+0x8c>
 800784a:	4b0e      	ldr	r3, [pc, #56]	; (8007884 <mem_free+0xb8>)
 800784c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007850:	4913      	ldr	r1, [pc, #76]	; (80078a0 <mem_free+0xd4>)
 8007852:	480e      	ldr	r0, [pc, #56]	; (800788c <mem_free+0xc0>)
 8007854:	f008 fcca 	bl	80101ec <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800785e:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <mem_free+0xd8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	429a      	cmp	r2, r3
 8007866:	d202      	bcs.n	800786e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007868:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <mem_free+0xd8>)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff fec4 	bl	80075fc <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007874:	4809      	ldr	r0, [pc, #36]	; (800789c <mem_free+0xd0>)
 8007876:	f008 fc1e 	bl	80100b6 <sys_mutex_unlock>
 800787a:	e000      	b.n	800787e <mem_free+0xb2>
    return;
 800787c:	bf00      	nop
}
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	080112d8 	.word	0x080112d8
 8007888:	080113c8 	.word	0x080113c8
 800788c:	08011320 	.word	0x08011320
 8007890:	20008a40 	.word	0x20008a40
 8007894:	20008a44 	.word	0x20008a44
 8007898:	080113ec 	.word	0x080113ec
 800789c:	20008a4c 	.word	0x20008a4c
 80078a0:	08011404 	.word	0x08011404
 80078a4:	20008a48 	.word	0x20008a48

080078a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80078b4:	887b      	ldrh	r3, [r7, #2]
 80078b6:	3303      	adds	r3, #3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80078c0:	887b      	ldrh	r3, [r7, #2]
 80078c2:	2b0b      	cmp	r3, #11
 80078c4:	d801      	bhi.n	80078ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80078c6:	230c      	movs	r3, #12
 80078c8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80078ca:	887b      	ldrh	r3, [r7, #2]
 80078cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078d0:	d901      	bls.n	80078d6 <mem_trim+0x2e>
    return NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e0bd      	b.n	8007a52 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80078d6:	4b61      	ldr	r3, [pc, #388]	; (8007a5c <mem_trim+0x1b4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d304      	bcc.n	80078ea <mem_trim+0x42>
 80078e0:	4b5f      	ldr	r3, [pc, #380]	; (8007a60 <mem_trim+0x1b8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d306      	bcc.n	80078f8 <mem_trim+0x50>
 80078ea:	4b5e      	ldr	r3, [pc, #376]	; (8007a64 <mem_trim+0x1bc>)
 80078ec:	f240 12f3 	movw	r2, #499	; 0x1f3
 80078f0:	495d      	ldr	r1, [pc, #372]	; (8007a68 <mem_trim+0x1c0>)
 80078f2:	485e      	ldr	r0, [pc, #376]	; (8007a6c <mem_trim+0x1c4>)
 80078f4:	f008 fc7a 	bl	80101ec <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80078f8:	4b58      	ldr	r3, [pc, #352]	; (8007a5c <mem_trim+0x1b4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d304      	bcc.n	800790c <mem_trim+0x64>
 8007902:	4b57      	ldr	r3, [pc, #348]	; (8007a60 <mem_trim+0x1b8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d307      	bcc.n	800791c <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800790c:	f008 fc06 	bl	801011c <sys_arch_protect>
 8007910:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f008 fc10 	bl	8010138 <sys_arch_unprotect>
    return rmem;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	e09a      	b.n	8007a52 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3b08      	subs	r3, #8
 8007920:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007922:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <mem_trim+0x1b4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	881a      	ldrh	r2, [r3, #0]
 8007930:	8b7b      	ldrh	r3, [r7, #26]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b08      	subs	r3, #8
 8007938:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800793a:	887a      	ldrh	r2, [r7, #2]
 800793c:	8b3b      	ldrh	r3, [r7, #24]
 800793e:	429a      	cmp	r2, r3
 8007940:	d906      	bls.n	8007950 <mem_trim+0xa8>
 8007942:	4b48      	ldr	r3, [pc, #288]	; (8007a64 <mem_trim+0x1bc>)
 8007944:	f240 2206 	movw	r2, #518	; 0x206
 8007948:	4949      	ldr	r1, [pc, #292]	; (8007a70 <mem_trim+0x1c8>)
 800794a:	4848      	ldr	r0, [pc, #288]	; (8007a6c <mem_trim+0x1c4>)
 800794c:	f008 fc4e 	bl	80101ec <iprintf>
  if (newsize > size) {
 8007950:	887a      	ldrh	r2, [r7, #2]
 8007952:	8b3b      	ldrh	r3, [r7, #24]
 8007954:	429a      	cmp	r2, r3
 8007956:	d901      	bls.n	800795c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	e07a      	b.n	8007a52 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800795c:	887a      	ldrh	r2, [r7, #2]
 800795e:	8b3b      	ldrh	r3, [r7, #24]
 8007960:	429a      	cmp	r2, r3
 8007962:	d101      	bne.n	8007968 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	e074      	b.n	8007a52 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007968:	4842      	ldr	r0, [pc, #264]	; (8007a74 <mem_trim+0x1cc>)
 800796a:	f008 fb95 	bl	8010098 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800796e:	4b3b      	ldr	r3, [pc, #236]	; (8007a5c <mem_trim+0x1b4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	8812      	ldrh	r2, [r2, #0]
 8007976:	4413      	add	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	791b      	ldrb	r3, [r3, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d131      	bne.n	80079e6 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007988:	8b7a      	ldrh	r2, [r7, #26]
 800798a:	887b      	ldrh	r3, [r7, #2]
 800798c:	4413      	add	r3, r2
 800798e:	b29b      	uxth	r3, r3
 8007990:	3308      	adds	r3, #8
 8007992:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 8007994:	4b38      	ldr	r3, [pc, #224]	; (8007a78 <mem_trim+0x1d0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	429a      	cmp	r2, r3
 800799c:	d105      	bne.n	80079aa <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800799e:	4b2f      	ldr	r3, [pc, #188]	; (8007a5c <mem_trim+0x1b4>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	8a7b      	ldrh	r3, [r7, #18]
 80079a4:	4413      	add	r3, r2
 80079a6:	4a34      	ldr	r2, [pc, #208]	; (8007a78 <mem_trim+0x1d0>)
 80079a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80079aa:	4b2c      	ldr	r3, [pc, #176]	; (8007a5c <mem_trim+0x1b4>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	8a7b      	ldrh	r3, [r7, #18]
 80079b0:	4413      	add	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2200      	movs	r2, #0
 80079b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	8a3a      	ldrh	r2, [r7, #16]
 80079be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	8b7a      	ldrh	r2, [r7, #26]
 80079c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	8a7a      	ldrh	r2, [r7, #18]
 80079ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079d4:	d039      	beq.n	8007a4a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80079d6:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <mem_trim+0x1b4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	8812      	ldrh	r2, [r2, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	8a7a      	ldrh	r2, [r7, #18]
 80079e2:	805a      	strh	r2, [r3, #2]
 80079e4:	e031      	b.n	8007a4a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80079e6:	887b      	ldrh	r3, [r7, #2]
 80079e8:	f103 0214 	add.w	r2, r3, #20
 80079ec:	8b3b      	ldrh	r3, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d82b      	bhi.n	8007a4a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80079f2:	8b7a      	ldrh	r2, [r7, #26]
 80079f4:	887b      	ldrh	r3, [r7, #2]
 80079f6:	4413      	add	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3308      	adds	r3, #8
 80079fc:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80079fe:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <mem_trim+0x1b4>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	8a7b      	ldrh	r3, [r7, #18]
 8007a04:	4413      	add	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 8007a08:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <mem_trim+0x1d0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d202      	bcs.n	8007a18 <mem_trim+0x170>
      lfree = mem2;
 8007a12:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <mem_trim+0x1d0>)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	881a      	ldrh	r2, [r3, #0]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	8b7a      	ldrh	r2, [r7, #26]
 8007a2a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	8a7a      	ldrh	r2, [r7, #18]
 8007a30:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007a3a:	d006      	beq.n	8007a4a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <mem_trim+0x1b4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	8812      	ldrh	r2, [r2, #0]
 8007a44:	4413      	add	r3, r2
 8007a46:	8a7a      	ldrh	r2, [r7, #18]
 8007a48:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007a4a:	480a      	ldr	r0, [pc, #40]	; (8007a74 <mem_trim+0x1cc>)
 8007a4c:	f008 fb33 	bl	80100b6 <sys_mutex_unlock>
  return rmem;
 8007a50:	687b      	ldr	r3, [r7, #4]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20008a40 	.word	0x20008a40
 8007a60:	20008a44 	.word	0x20008a44
 8007a64:	080112d8 	.word	0x080112d8
 8007a68:	08011418 	.word	0x08011418
 8007a6c:	08011320 	.word	0x08011320
 8007a70:	08011430 	.word	0x08011430
 8007a74:	20008a4c 	.word	0x20008a4c
 8007a78:	20008a48 	.word	0x20008a48

08007a7c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <mem_malloc+0x14>
    return NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e0d0      	b.n	8007c32 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	3303      	adds	r3, #3
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	2b0b      	cmp	r3, #11
 8007aa0:	d801      	bhi.n	8007aa6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007aac:	d901      	bls.n	8007ab2 <mem_malloc+0x36>
    return NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e0bf      	b.n	8007c32 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007ab2:	4862      	ldr	r0, [pc, #392]	; (8007c3c <mem_malloc+0x1c0>)
 8007ab4:	f008 faf0 	bl	8010098 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007ab8:	4b61      	ldr	r3, [pc, #388]	; (8007c40 <mem_malloc+0x1c4>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b61      	ldr	r3, [pc, #388]	; (8007c44 <mem_malloc+0x1c8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	83fb      	strh	r3, [r7, #30]
 8007ac4:	e0aa      	b.n	8007c1c <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8007ac6:	4b5f      	ldr	r3, [pc, #380]	; (8007c44 <mem_malloc+0x1c8>)
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	8bfb      	ldrh	r3, [r7, #30]
 8007acc:	4413      	add	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	791b      	ldrb	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 809b 	bne.w	8007c10 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	8bfb      	ldrh	r3, [r7, #30]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	f1a3 0208 	sub.w	r2, r3, #8
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f0c0 8090 	bcc.w	8007c10 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	8bfb      	ldrh	r3, [r7, #30]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	f1a3 0208 	sub.w	r2, r3, #8
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	3314      	adds	r3, #20
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d327      	bcc.n	8007b56 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007b06:	8bfa      	ldrh	r2, [r7, #30]
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3308      	adds	r3, #8
 8007b10:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007b12:	4b4c      	ldr	r3, [pc, #304]	; (8007c44 <mem_malloc+0x1c8>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	8a7b      	ldrh	r3, [r7, #18]
 8007b18:	4413      	add	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8bfa      	ldrh	r2, [r7, #30]
 8007b2e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	8a7a      	ldrh	r2, [r7, #18]
 8007b34:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b44:	d00a      	beq.n	8007b5c <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007b46:	4b3f      	ldr	r3, [pc, #252]	; (8007c44 <mem_malloc+0x1c8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	8812      	ldrh	r2, [r2, #0]
 8007b4e:	4413      	add	r3, r2
 8007b50:	8a7a      	ldrh	r2, [r7, #18]
 8007b52:	805a      	strh	r2, [r3, #2]
 8007b54:	e002      	b.n	8007b5c <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007b5c:	4b38      	ldr	r3, [pc, #224]	; (8007c40 <mem_malloc+0x1c4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d127      	bne.n	8007bb6 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 8007b66:	4b36      	ldr	r3, [pc, #216]	; (8007c40 <mem_malloc+0x1c4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007b6c:	e005      	b.n	8007b7a <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8007b6e:	4b35      	ldr	r3, [pc, #212]	; (8007c44 <mem_malloc+0x1c8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	8812      	ldrh	r2, [r2, #0]
 8007b76:	4413      	add	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <mem_malloc+0x110>
 8007b82:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <mem_malloc+0x1cc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d1f0      	bne.n	8007b6e <mem_malloc+0xf2>
          }
          lfree = cur;
 8007b8c:	4a2c      	ldr	r2, [pc, #176]	; (8007c40 <mem_malloc+0x1c4>)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007b92:	4b2b      	ldr	r3, [pc, #172]	; (8007c40 <mem_malloc+0x1c4>)
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b2c      	ldr	r3, [pc, #176]	; (8007c48 <mem_malloc+0x1cc>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d00b      	beq.n	8007bb6 <mem_malloc+0x13a>
 8007b9e:	4b28      	ldr	r3, [pc, #160]	; (8007c40 <mem_malloc+0x1c4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	791b      	ldrb	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d006      	beq.n	8007bb6 <mem_malloc+0x13a>
 8007ba8:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <mem_malloc+0x1d0>)
 8007baa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007bae:	4928      	ldr	r1, [pc, #160]	; (8007c50 <mem_malloc+0x1d4>)
 8007bb0:	4828      	ldr	r0, [pc, #160]	; (8007c54 <mem_malloc+0x1d8>)
 8007bb2:	f008 fb1b 	bl	80101ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007bb6:	4821      	ldr	r0, [pc, #132]	; (8007c3c <mem_malloc+0x1c0>)
 8007bb8:	f008 fa7d 	bl	80100b6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	4a20      	ldr	r2, [pc, #128]	; (8007c48 <mem_malloc+0x1cc>)
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d906      	bls.n	8007bda <mem_malloc+0x15e>
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <mem_malloc+0x1d0>)
 8007bce:	f240 22d3 	movw	r2, #723	; 0x2d3
 8007bd2:	4921      	ldr	r1, [pc, #132]	; (8007c58 <mem_malloc+0x1dc>)
 8007bd4:	481f      	ldr	r0, [pc, #124]	; (8007c54 <mem_malloc+0x1d8>)
 8007bd6:	f008 fb09 	bl	80101ec <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f003 0303 	and.w	r3, r3, #3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <mem_malloc+0x176>
 8007be4:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <mem_malloc+0x1d0>)
 8007be6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8007bea:	491c      	ldr	r1, [pc, #112]	; (8007c5c <mem_malloc+0x1e0>)
 8007bec:	4819      	ldr	r0, [pc, #100]	; (8007c54 <mem_malloc+0x1d8>)
 8007bee:	f008 fafd 	bl	80101ec <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d006      	beq.n	8007c0a <mem_malloc+0x18e>
 8007bfc:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <mem_malloc+0x1d0>)
 8007bfe:	f240 22d7 	movw	r2, #727	; 0x2d7
 8007c02:	4917      	ldr	r1, [pc, #92]	; (8007c60 <mem_malloc+0x1e4>)
 8007c04:	4813      	ldr	r0, [pc, #76]	; (8007c54 <mem_malloc+0x1d8>)
 8007c06:	f008 faf1 	bl	80101ec <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	e010      	b.n	8007c32 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <mem_malloc+0x1c8>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	8bfb      	ldrh	r3, [r7, #30]
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007c1c:	8bfa      	ldrh	r2, [r7, #30]
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007c24:	429a      	cmp	r2, r3
 8007c26:	f4ff af4e 	bcc.w	8007ac6 <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007c2a:	4804      	ldr	r0, [pc, #16]	; (8007c3c <mem_malloc+0x1c0>)
 8007c2c:	f008 fa43 	bl	80100b6 <sys_mutex_unlock>
  return NULL;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20008a4c 	.word	0x20008a4c
 8007c40:	20008a48 	.word	0x20008a48
 8007c44:	20008a40 	.word	0x20008a40
 8007c48:	20008a44 	.word	0x20008a44
 8007c4c:	080112d8 	.word	0x080112d8
 8007c50:	08011450 	.word	0x08011450
 8007c54:	08011320 	.word	0x08011320
 8007c58:	0801146c 	.word	0x0801146c
 8007c5c:	0801149c 	.word	0x0801149c
 8007c60:	080114cc 	.word	0x080114cc

08007c64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	3303      	adds	r3, #3
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e011      	b.n	8007caa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	dbe7      	blt.n	8007c86 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
	...

08007cc4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007cca:	2300      	movs	r3, #0
 8007ccc:	80fb      	strh	r3, [r7, #6]
 8007cce:	e009      	b.n	8007ce4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007cd0:	88fb      	ldrh	r3, [r7, #6]
 8007cd2:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <memp_init+0x30>)
 8007cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff ffc3 	bl	8007c64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	80fb      	strh	r3, [r7, #6]
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	2b0c      	cmp	r3, #12
 8007ce8:	d9f2      	bls.n	8007cd0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	0801300c 	.word	0x0801300c

08007cf8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007d00:	f008 fa0c 	bl	801011c <sys_arch_protect>
 8007d04:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d015      	beq.n	8007d40 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <do_memp_malloc_pool+0x3e>
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <do_memp_malloc_pool+0x58>)
 8007d2a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8007d2e:	4909      	ldr	r1, [pc, #36]	; (8007d54 <do_memp_malloc_pool+0x5c>)
 8007d30:	4809      	ldr	r0, [pc, #36]	; (8007d58 <do_memp_malloc_pool+0x60>)
 8007d32:	f008 fa5b 	bl	80101ec <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f008 f9fe 	bl	8010138 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	e003      	b.n	8007d48 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f008 f9f9 	bl	8010138 <sys_arch_unprotect>
  return NULL;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	080114f0 	.word	0x080114f0
 8007d54:	08011520 	.word	0x08011520
 8007d58:	08011544 	.word	0x08011544

08007d5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	2b0c      	cmp	r3, #12
 8007d6a:	d908      	bls.n	8007d7e <memp_malloc+0x22>
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <memp_malloc+0x3c>)
 8007d6e:	f240 1287 	movw	r2, #391	; 0x187
 8007d72:	490a      	ldr	r1, [pc, #40]	; (8007d9c <memp_malloc+0x40>)
 8007d74:	480a      	ldr	r0, [pc, #40]	; (8007da0 <memp_malloc+0x44>)
 8007d76:	f008 fa39 	bl	80101ec <iprintf>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e008      	b.n	8007d90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	4a08      	ldr	r2, [pc, #32]	; (8007da4 <memp_malloc+0x48>)
 8007d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ffb6 	bl	8007cf8 <do_memp_malloc_pool>
 8007d8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	080114f0 	.word	0x080114f0
 8007d9c:	08011580 	.word	0x08011580
 8007da0:	08011544 	.word	0x08011544
 8007da4:	0801300c 	.word	0x0801300c

08007da8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d006      	beq.n	8007dca <do_memp_free_pool+0x22>
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <do_memp_free_pool+0x4c>)
 8007dbe:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007dc2:	490d      	ldr	r1, [pc, #52]	; (8007df8 <do_memp_free_pool+0x50>)
 8007dc4:	480d      	ldr	r0, [pc, #52]	; (8007dfc <do_memp_free_pool+0x54>)
 8007dc6:	f008 fa11 	bl	80101ec <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007dce:	f008 f9a5 	bl	801011c <sys_arch_protect>
 8007dd2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007de6:	68b8      	ldr	r0, [r7, #8]
 8007de8:	f008 f9a6 	bl	8010138 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	080114f0 	.word	0x080114f0
 8007df8:	080115a0 	.word	0x080115a0
 8007dfc:	08011544 	.word	0x08011544

08007e00 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	6039      	str	r1, [r7, #0]
 8007e0a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b0c      	cmp	r3, #12
 8007e10:	d907      	bls.n	8007e22 <memp_free+0x22>
 8007e12:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <memp_free+0x44>)
 8007e14:	f240 12db 	movw	r2, #475	; 0x1db
 8007e18:	490b      	ldr	r1, [pc, #44]	; (8007e48 <memp_free+0x48>)
 8007e1a:	480c      	ldr	r0, [pc, #48]	; (8007e4c <memp_free+0x4c>)
 8007e1c:	f008 f9e6 	bl	80101ec <iprintf>
 8007e20:	e00c      	b.n	8007e3c <memp_free+0x3c>

  if (mem == NULL) {
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <memp_free+0x50>)
 8007e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff ffb8 	bl	8007da8 <do_memp_free_pool>
 8007e38:	e000      	b.n	8007e3c <memp_free+0x3c>
    return;
 8007e3a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	080114f0 	.word	0x080114f0
 8007e48:	080115c0 	.word	0x080115c0
 8007e4c:	08011544 	.word	0x08011544
 8007e50:	0801300c 	.word	0x0801300c

08007e54 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007e58:	bf00      	nop
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <netif_add+0x20>
 8007e74:	4b21      	ldr	r3, [pc, #132]	; (8007efc <netif_add+0x9c>)
 8007e76:	22fb      	movs	r2, #251	; 0xfb
 8007e78:	4921      	ldr	r1, [pc, #132]	; (8007f00 <netif_add+0xa0>)
 8007e7a:	4822      	ldr	r0, [pc, #136]	; (8007f04 <netif_add+0xa4>)
 8007e7c:	f008 f9b6 	bl	80101ec <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <netif_add+0xa8>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	b2d1      	uxtb	r1, r2
 8007eb6:	4a14      	ldr	r2, [pc, #80]	; (8007f08 <netif_add+0xa8>)
 8007eb8:	7011      	strb	r1, [r2, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a3a      	ldr	r2, [r7, #32]
 8007ec4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f81f 	bl	8007f10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	4798      	blx	r3
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <netif_add+0x82>
    return NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e007      	b.n	8007ef2 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <netif_add+0xac>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007eea:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <netif_add+0xac>)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	080115dc 	.word	0x080115dc
 8007f00:	08011610 	.word	0x08011610
 8007f04:	08011628 	.word	0x08011628
 8007f08:	2000bb20 	.word	0x2000bb20
 8007f0c:	2000bb18 	.word	0x2000bb18

08007f10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <netif_set_addr+0x1c>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10c      	bne.n	8007f46 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f81a 	bl	8007f68 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 f861 	bl	8007ffe <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 f84a 	bl	8007fd8 <netif_set_gw>
 8007f44:	e00c      	b.n	8007f60 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f858 	bl	8007ffe <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f841 	bl	8007fd8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f805 	bl	8007f68 <netif_set_ipaddr>
  }
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <netif_set_ipaddr+0x18>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e002      	b.n	8007f86 <netif_set_ipaddr+0x1e>
 8007f80:	4b14      	ldr	r3, [pc, #80]	; (8007fd4 <netif_set_ipaddr+0x6c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d01c      	beq.n	8007fcc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	f107 020c 	add.w	r2, r7, #12
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f002 f8f1 	bl	800a184 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	f107 020c 	add.w	r2, r7, #12
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f005 fd6b 	bl	800da88 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <netif_set_ipaddr+0x56>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	e000      	b.n	8007fc0 <netif_set_ipaddr+0x58>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f85d 	bl	8008086 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	08013080 	.word	0x08013080

08007fd8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <netif_set_gw+0x16>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	e000      	b.n	8007ff0 <netif_set_gw+0x18>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <netif_set_netmask+0x16>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	e000      	b.n	8008016 <netif_set_netmask+0x18>
 8008014:	2300      	movs	r3, #0
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800802c:	4a03      	ldr	r2, [pc, #12]	; (800803c <netif_set_default+0x18>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	2000bb1c 	.word	0x2000bb1c

08008040 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d113      	bne.n	800807e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800805c:	f043 0301 	orr.w	r3, r3, #1
 8008060:	b2da      	uxtb	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800806e:	f003 0304 	and.w	r3, r3, #4
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008076:	2103      	movs	r1, #3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f804 	bl	8008086 <netif_issue_reports>
    }
  }
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d011      	beq.n	80080c0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00c      	beq.n	80080c0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f006 fc16 	bl	800e8ec <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d012      	beq.n	8008104 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f005 ffba 	bl	800e078 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d11b      	bne.n	800815a <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008128:	f043 0304 	orr.w	r3, r3, #4
 800812c:	b2da      	uxtb	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008142:	2103      	movs	r1, #3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff ff9e 	bl	8008086 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <netif_set_link_up+0x4e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
  }
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d010      	beq.n	800819a <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800817e:	f023 0304 	bic.w	r3, r3, #4
 8008182:	b2da      	uxtb	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <netif_set_link_down+0x38>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
  }
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  if (netif) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	61da      	str	r2, [r3, #28]
  }
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	bc80      	pop	{r7}
 80081c0:	4770      	bx	lr
	...

080081c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80081ca:	f007 ffa7 	bl	801011c <sys_arch_protect>
 80081ce:	6038      	str	r0, [r7, #0]
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <pbuf_free_ooseq+0x4c>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	6838      	ldr	r0, [r7, #0]
 80081d8:	f007 ffae 	bl	8010138 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <pbuf_free_ooseq+0x50>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	607b      	str	r3, [r7, #4]
 80081e2:	e00f      	b.n	8008204 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d008      	beq.n	80081fe <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fd04 	bl	8009bfe <tcp_segs_free>
      pcb->ooseq = NULL;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80081fc:	e005      	b.n	800820a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1ec      	bne.n	80081e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	2000bb21 	.word	0x2000bb21
 8008214:	2000bb30 	.word	0x2000bb30

08008218 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008220:	f7ff ffd0 	bl	80081c4 <pbuf_free_ooseq>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008232:	f007 ff73 	bl	801011c <sys_arch_protect>
 8008236:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <pbuf_pool_is_empty+0x50>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <pbuf_pool_is_empty+0x50>)
 8008240:	2201      	movs	r2, #1
 8008242:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f007 ff77 	bl	8010138 <sys_arch_unprotect>

  if (!queued) {
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d110      	bne.n	8008272 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	480a      	ldr	r0, [pc, #40]	; (8008280 <pbuf_pool_is_empty+0x54>)
 8008256:	f7ff f901 	bl	800745c <tcpip_callback_with_block>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <pbuf_pool_is_empty+0x46>
 8008260:	f007 ff5c 	bl	801011c <sys_arch_protect>
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <pbuf_pool_is_empty+0x50>)
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f007 ff63 	bl	8010138 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	2000bb21 	.word	0x2000bb21
 8008280:	08008219 	.word	0x08008219

08008284 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	71fb      	strb	r3, [r7, #7]
 800828e:	460b      	mov	r3, r1
 8008290:	80bb      	strh	r3, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d81c      	bhi.n	80082d6 <pbuf_alloc+0x52>
 800829c:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <pbuf_alloc+0x20>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082bf 	.word	0x080082bf
 80082ac:	080082c5 	.word	0x080082c5
 80082b0:	080082cb 	.word	0x080082cb
 80082b4:	080082d1 	.word	0x080082d1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80082b8:	2336      	movs	r3, #54	; 0x36
 80082ba:	82fb      	strh	r3, [r7, #22]
    break;
 80082bc:	e014      	b.n	80082e8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80082be:	2322      	movs	r3, #34	; 0x22
 80082c0:	82fb      	strh	r3, [r7, #22]
    break;
 80082c2:	e011      	b.n	80082e8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80082c4:	230e      	movs	r3, #14
 80082c6:	82fb      	strh	r3, [r7, #22]
    break;
 80082c8:	e00e      	b.n	80082e8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80082ca:	2300      	movs	r3, #0
 80082cc:	82fb      	strh	r3, [r7, #22]
    break;
 80082ce:	e00b      	b.n	80082e8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	82fb      	strh	r3, [r7, #22]
    break;
 80082d4:	e008      	b.n	80082e8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80082d6:	4ba1      	ldr	r3, [pc, #644]	; (800855c <pbuf_alloc+0x2d8>)
 80082d8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80082dc:	49a0      	ldr	r1, [pc, #640]	; (8008560 <pbuf_alloc+0x2dc>)
 80082de:	48a1      	ldr	r0, [pc, #644]	; (8008564 <pbuf_alloc+0x2e0>)
 80082e0:	f007 ff84 	bl	80101ec <iprintf>
    return NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e15c      	b.n	80085a2 <pbuf_alloc+0x31e>
  }

  switch (type) {
 80082e8:	79bb      	ldrb	r3, [r7, #6]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d00d      	beq.n	800830a <pbuf_alloc+0x86>
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f300 8146 	bgt.w	8008580 <pbuf_alloc+0x2fc>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80d0 	beq.w	800849a <pbuf_alloc+0x216>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f2c0 8140 	blt.w	8008580 <pbuf_alloc+0x2fc>
 8008300:	3b01      	subs	r3, #1
 8008302:	2b01      	cmp	r3, #1
 8008304:	f200 813c 	bhi.w	8008580 <pbuf_alloc+0x2fc>
 8008308:	e10d      	b.n	8008526 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800830a:	200c      	movs	r0, #12
 800830c:	f7ff fd26 	bl	8007d5c <memp_malloc>
 8008310:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8008318:	f7ff ff88 	bl	800822c <pbuf_pool_is_empty>
      return NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	e140      	b.n	80085a2 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	79ba      	ldrb	r2, [r7, #6]
 8008324:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800832c:	8afb      	ldrh	r3, [r7, #22]
 800832e:	3310      	adds	r3, #16
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	3303      	adds	r3, #3
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	461a      	mov	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d006      	beq.n	800835a <pbuf_alloc+0xd6>
 800834c:	4b83      	ldr	r3, [pc, #524]	; (800855c <pbuf_alloc+0x2d8>)
 800834e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008352:	4985      	ldr	r1, [pc, #532]	; (8008568 <pbuf_alloc+0x2e4>)
 8008354:	4883      	ldr	r0, [pc, #524]	; (8008564 <pbuf_alloc+0x2e0>)
 8008356:	f007 ff49 	bl	80101ec <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	88ba      	ldrh	r2, [r7, #4]
 800835e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008360:	8afb      	ldrh	r3, [r7, #22]
 8008362:	3303      	adds	r3, #3
 8008364:	f023 0303 	bic.w	r3, r3, #3
 8008368:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800836c:	88bb      	ldrh	r3, [r7, #4]
 800836e:	4293      	cmp	r3, r2
 8008370:	bf28      	it	cs
 8008372:	4613      	movcs	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	8952      	ldrh	r2, [r2, #10]
 8008382:	441a      	add	r2, r3
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800838a:	429a      	cmp	r2, r3
 800838c:	d906      	bls.n	800839c <pbuf_alloc+0x118>
 800838e:	4b73      	ldr	r3, [pc, #460]	; (800855c <pbuf_alloc+0x2d8>)
 8008390:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008394:	4975      	ldr	r1, [pc, #468]	; (800856c <pbuf_alloc+0x2e8>)
 8008396:	4873      	ldr	r0, [pc, #460]	; (8008564 <pbuf_alloc+0x2e0>)
 8008398:	f007 ff28 	bl	80101ec <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800839c:	8afb      	ldrh	r3, [r7, #22]
 800839e:	3303      	adds	r3, #3
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80083a8:	d106      	bne.n	80083b8 <pbuf_alloc+0x134>
 80083aa:	4b6c      	ldr	r3, [pc, #432]	; (800855c <pbuf_alloc+0x2d8>)
 80083ac:	f240 1231 	movw	r2, #305	; 0x131
 80083b0:	496f      	ldr	r1, [pc, #444]	; (8008570 <pbuf_alloc+0x2ec>)
 80083b2:	486c      	ldr	r0, [pc, #432]	; (8008564 <pbuf_alloc+0x2e0>)
 80083b4:	f007 ff1a 	bl	80101ec <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2201      	movs	r2, #1
 80083bc:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80083c2:	88bb      	ldrh	r3, [r7, #4]
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	8952      	ldrh	r2, [r2, #10]
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80083cc:	e061      	b.n	8008492 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80083ce:	200c      	movs	r0, #12
 80083d0:	f7ff fcc4 	bl	8007d5c <memp_malloc>
 80083d4:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80083dc:	f7ff ff26 	bl	800822c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80083e0:	69f8      	ldr	r0, [r7, #28]
 80083e2:	f000 fac7 	bl	8008974 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e0db      	b.n	80085a2 <pbuf_alloc+0x31e>
      }
      q->type = type;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	79ba      	ldrb	r2, [r7, #6]
 80083ee:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008408:	4293      	cmp	r3, r2
 800840a:	dd06      	ble.n	800841a <pbuf_alloc+0x196>
 800840c:	4b53      	ldr	r3, [pc, #332]	; (800855c <pbuf_alloc+0x2d8>)
 800840e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008412:	4958      	ldr	r1, [pc, #352]	; (8008574 <pbuf_alloc+0x2f0>)
 8008414:	4853      	ldr	r0, [pc, #332]	; (8008564 <pbuf_alloc+0x2e0>)
 8008416:	f007 fee9 	bl	80101ec <iprintf>
      q->tot_len = (u16_t)rem_len;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	b29a      	uxth	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	b29b      	uxth	r3, r3
 8008426:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800842a:	bf28      	it	cs
 800842c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f103 0210 	add.w	r2, r3, #16
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d006      	beq.n	800845a <pbuf_alloc+0x1d6>
 800844c:	4b43      	ldr	r3, [pc, #268]	; (800855c <pbuf_alloc+0x2d8>)
 800844e:	f240 1251 	movw	r2, #337	; 0x151
 8008452:	4949      	ldr	r1, [pc, #292]	; (8008578 <pbuf_alloc+0x2f4>)
 8008454:	4843      	ldr	r0, [pc, #268]	; (8008564 <pbuf_alloc+0x2e0>)
 8008456:	f007 fec9 	bl	80101ec <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	8952      	ldrh	r2, [r2, #10]
 8008462:	441a      	add	r2, r3
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800846a:	429a      	cmp	r2, r3
 800846c:	d906      	bls.n	800847c <pbuf_alloc+0x1f8>
 800846e:	4b3b      	ldr	r3, [pc, #236]	; (800855c <pbuf_alloc+0x2d8>)
 8008470:	f240 1253 	movw	r2, #339	; 0x153
 8008474:	493d      	ldr	r1, [pc, #244]	; (800856c <pbuf_alloc+0x2e8>)
 8008476:	483b      	ldr	r0, [pc, #236]	; (8008564 <pbuf_alloc+0x2e0>)
 8008478:	f007 feb8 	bl	80101ec <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	895b      	ldrh	r3, [r3, #10]
 8008486:	461a      	mov	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1a9b      	subs	r3, r3, r2
 800848c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	dc9a      	bgt.n	80083ce <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008498:	e07c      	b.n	8008594 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800849a:	8afb      	ldrh	r3, [r7, #22]
 800849c:	3313      	adds	r3, #19
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f023 0303 	bic.w	r3, r3, #3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	88bb      	ldrh	r3, [r7, #4]
 80084a8:	3303      	adds	r3, #3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4413      	add	r3, r2
 80084b4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80084b6:	897a      	ldrh	r2, [r7, #10]
 80084b8:	88bb      	ldrh	r3, [r7, #4]
 80084ba:	3303      	adds	r3, #3
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d201      	bcs.n	80084c8 <pbuf_alloc+0x244>
        return NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e06c      	b.n	80085a2 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80084c8:	897b      	ldrh	r3, [r7, #10]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff fad6 	bl	8007a7c <mem_malloc>
 80084d0:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <pbuf_alloc+0x258>
      return NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	e062      	b.n	80085a2 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80084dc:	8afb      	ldrh	r3, [r7, #22]
 80084de:	3310      	adds	r3, #16
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	4413      	add	r3, r2
 80084e4:	3303      	adds	r3, #3
 80084e6:	f023 0303 	bic.w	r3, r3, #3
 80084ea:	461a      	mov	r2, r3
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	88ba      	ldrh	r2, [r7, #4]
 80084f4:	811a      	strh	r2, [r3, #8]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	891a      	ldrh	r2, [r3, #8]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	79ba      	ldrb	r2, [r7, #6]
 8008508:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d03d      	beq.n	8008592 <pbuf_alloc+0x30e>
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <pbuf_alloc+0x2d8>)
 8008518:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800851c:	4917      	ldr	r1, [pc, #92]	; (800857c <pbuf_alloc+0x2f8>)
 800851e:	4811      	ldr	r0, [pc, #68]	; (8008564 <pbuf_alloc+0x2e0>)
 8008520:	f007 fe64 	bl	80101ec <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8008524:	e035      	b.n	8008592 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008526:	200b      	movs	r0, #11
 8008528:	f7ff fc18 	bl	8007d5c <memp_malloc>
 800852c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	e034      	b.n	80085a2 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2200      	movs	r2, #0
 800853c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	88ba      	ldrh	r2, [r7, #4]
 8008542:	811a      	strh	r2, [r3, #8]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	891a      	ldrh	r2, [r3, #8]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	79ba      	ldrb	r2, [r7, #6]
 8008556:	731a      	strb	r2, [r3, #12]
    break;
 8008558:	e01c      	b.n	8008594 <pbuf_alloc+0x310>
 800855a:	bf00      	nop
 800855c:	08011650 	.word	0x08011650
 8008560:	08011680 	.word	0x08011680
 8008564:	0801169c 	.word	0x0801169c
 8008568:	080116c4 	.word	0x080116c4
 800856c:	080116f4 	.word	0x080116f4
 8008570:	08011728 	.word	0x08011728
 8008574:	0801175c 	.word	0x0801175c
 8008578:	08011770 	.word	0x08011770
 800857c:	080117a0 	.word	0x080117a0
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <pbuf_alloc+0x328>)
 8008582:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008586:	490a      	ldr	r1, [pc, #40]	; (80085b0 <pbuf_alloc+0x32c>)
 8008588:	480a      	ldr	r0, [pc, #40]	; (80085b4 <pbuf_alloc+0x330>)
 800858a:	f007 fe2f 	bl	80101ec <iprintf>
    return NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	e007      	b.n	80085a2 <pbuf_alloc+0x31e>
    break;
 8008592:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	2201      	movs	r2, #1
 8008598:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	2200      	movs	r2, #0
 800859e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	08011650 	.word	0x08011650
 80085b0:	080117cc 	.word	0x080117cc
 80085b4:	0801169c 	.word	0x0801169c

080085b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	4603      	mov	r3, r0
 80085c2:	71fb      	strb	r3, [r7, #7]
 80085c4:	460b      	mov	r3, r1
 80085c6:	80bb      	strh	r3, [r7, #4]
 80085c8:	4613      	mov	r3, r2
 80085ca:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d81b      	bhi.n	800860a <pbuf_alloced_custom+0x52>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <pbuf_alloced_custom+0x20>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085ed 	.word	0x080085ed
 80085dc:	080085f3 	.word	0x080085f3
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	080085ff 	.word	0x080085ff
 80085e8:	08008605 	.word	0x08008605
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80085ec:	2336      	movs	r3, #54	; 0x36
 80085ee:	81fb      	strh	r3, [r7, #14]
    break;
 80085f0:	e014      	b.n	800861c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80085f2:	2322      	movs	r3, #34	; 0x22
 80085f4:	81fb      	strh	r3, [r7, #14]
    break;
 80085f6:	e011      	b.n	800861c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80085f8:	230e      	movs	r3, #14
 80085fa:	81fb      	strh	r3, [r7, #14]
    break;
 80085fc:	e00e      	b.n	800861c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80085fe:	2300      	movs	r3, #0
 8008600:	81fb      	strh	r3, [r7, #14]
    break;
 8008602:	e00b      	b.n	800861c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	81fb      	strh	r3, [r7, #14]
    break;
 8008608:	e008      	b.n	800861c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800860a:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <pbuf_alloced_custom+0xc8>)
 800860c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008610:	491c      	ldr	r1, [pc, #112]	; (8008684 <pbuf_alloced_custom+0xcc>)
 8008612:	481d      	ldr	r0, [pc, #116]	; (8008688 <pbuf_alloced_custom+0xd0>)
 8008614:	f007 fdea 	bl	80101ec <iprintf>
    return NULL;
 8008618:	2300      	movs	r3, #0
 800861a:	e02d      	b.n	8008678 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800861c:	89fb      	ldrh	r3, [r7, #14]
 800861e:	3303      	adds	r3, #3
 8008620:	f023 0203 	bic.w	r2, r3, #3
 8008624:	88bb      	ldrh	r3, [r7, #4]
 8008626:	441a      	add	r2, r3
 8008628:	8bbb      	ldrh	r3, [r7, #28]
 800862a:	429a      	cmp	r2, r3
 800862c:	d901      	bls.n	8008632 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	e022      	b.n	8008678 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800863e:	89fb      	ldrh	r3, [r7, #14]
 8008640:	3303      	adds	r3, #3
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	441a      	add	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	e002      	b.n	8008656 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2202      	movs	r2, #2
 800865a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	88ba      	ldrh	r2, [r7, #4]
 8008660:	811a      	strh	r2, [r3, #8]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	891a      	ldrh	r2, [r3, #8]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	79ba      	ldrb	r2, [r7, #6]
 800866e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2201      	movs	r2, #1
 8008674:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8008676:	683b      	ldr	r3, [r7, #0]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	08011650 	.word	0x08011650
 8008684:	080117e8 	.word	0x080117e8
 8008688:	0801169c 	.word	0x0801169c

0800868c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <pbuf_realloc+0x20>
 800869e:	4b4b      	ldr	r3, [pc, #300]	; (80087cc <pbuf_realloc+0x140>)
 80086a0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80086a4:	494a      	ldr	r1, [pc, #296]	; (80087d0 <pbuf_realloc+0x144>)
 80086a6:	484b      	ldr	r0, [pc, #300]	; (80087d4 <pbuf_realloc+0x148>)
 80086a8:	f007 fda0 	bl	80101ec <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7b1b      	ldrb	r3, [r3, #12]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d012      	beq.n	80086da <pbuf_realloc+0x4e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	7b1b      	ldrb	r3, [r3, #12]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d00e      	beq.n	80086da <pbuf_realloc+0x4e>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7b1b      	ldrb	r3, [r3, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <pbuf_realloc+0x4e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7b1b      	ldrb	r3, [r3, #12]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d006      	beq.n	80086da <pbuf_realloc+0x4e>
 80086cc:	4b3f      	ldr	r3, [pc, #252]	; (80087cc <pbuf_realloc+0x140>)
 80086ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80086d2:	4941      	ldr	r1, [pc, #260]	; (80087d8 <pbuf_realloc+0x14c>)
 80086d4:	483f      	ldr	r0, [pc, #252]	; (80087d4 <pbuf_realloc+0x148>)
 80086d6:	f007 fd89 	bl	80101ec <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	891b      	ldrh	r3, [r3, #8]
 80086de:	887a      	ldrh	r2, [r7, #2]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d26e      	bcs.n	80087c2 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80086e4:	887b      	ldrh	r3, [r7, #2]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	8912      	ldrh	r2, [r2, #8]
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80086ee:	887b      	ldrh	r3, [r7, #2]
 80086f0:	827b      	strh	r3, [r7, #18]
  q = p;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80086f6:	e025      	b.n	8008744 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	895b      	ldrh	r3, [r3, #10]
 80086fc:	8a7a      	ldrh	r2, [r7, #18]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008708:	4293      	cmp	r3, r2
 800870a:	dd06      	ble.n	800871a <pbuf_realloc+0x8e>
 800870c:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <pbuf_realloc+0x140>)
 800870e:	f240 220b 	movw	r2, #523	; 0x20b
 8008712:	4932      	ldr	r1, [pc, #200]	; (80087dc <pbuf_realloc+0x150>)
 8008714:	482f      	ldr	r0, [pc, #188]	; (80087d4 <pbuf_realloc+0x148>)
 8008716:	f007 fd69 	bl	80101ec <iprintf>
    q->tot_len += (u16_t)grow;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	891a      	ldrh	r2, [r3, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	b29b      	uxth	r3, r3
 8008722:	4413      	add	r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <pbuf_realloc+0xb8>
 8008736:	4b25      	ldr	r3, [pc, #148]	; (80087cc <pbuf_realloc+0x140>)
 8008738:	f240 220f 	movw	r2, #527	; 0x20f
 800873c:	4928      	ldr	r1, [pc, #160]	; (80087e0 <pbuf_realloc+0x154>)
 800873e:	4825      	ldr	r0, [pc, #148]	; (80087d4 <pbuf_realloc+0x148>)
 8008740:	f007 fd54 	bl	80101ec <iprintf>
  while (rem_len > q->len) {
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	895b      	ldrh	r3, [r3, #10]
 8008748:	8a7a      	ldrh	r2, [r7, #18]
 800874a:	429a      	cmp	r2, r3
 800874c:	d8d4      	bhi.n	80086f8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	7b1b      	ldrb	r3, [r3, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d121      	bne.n	800879a <pbuf_realloc+0x10e>
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	895b      	ldrh	r3, [r3, #10]
 800875a:	8a7a      	ldrh	r2, [r7, #18]
 800875c:	429a      	cmp	r2, r3
 800875e:	d01c      	beq.n	800879a <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	7b5b      	ldrb	r3, [r3, #13]
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d116      	bne.n	800879a <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	b29a      	uxth	r2, r3
 8008776:	8a7b      	ldrh	r3, [r7, #18]
 8008778:	4413      	add	r3, r2
 800877a:	b29b      	uxth	r3, r3
 800877c:	4619      	mov	r1, r3
 800877e:	6978      	ldr	r0, [r7, #20]
 8008780:	f7ff f892 	bl	80078a8 <mem_trim>
 8008784:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <pbuf_realloc+0x10e>
 800878c:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <pbuf_realloc+0x140>)
 800878e:	f240 221d 	movw	r2, #541	; 0x21d
 8008792:	4914      	ldr	r1, [pc, #80]	; (80087e4 <pbuf_realloc+0x158>)
 8008794:	480f      	ldr	r0, [pc, #60]	; (80087d4 <pbuf_realloc+0x148>)
 8008796:	f007 fd29 	bl	80101ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	8a7a      	ldrh	r2, [r7, #18]
 800879e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	895a      	ldrh	r2, [r3, #10]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 f8dd 	bl	8008974 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e000      	b.n	80087c4 <pbuf_realloc+0x138>
    return;
 80087c2:	bf00      	nop

}
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	08011650 	.word	0x08011650
 80087d0:	0801180c 	.word	0x0801180c
 80087d4:	0801169c 	.word	0x0801169c
 80087d8:	08011824 	.word	0x08011824
 80087dc:	08011840 	.word	0x08011840
 80087e0:	08011854 	.word	0x08011854
 80087e4:	0801186c 	.word	0x0801186c

080087e8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	807b      	strh	r3, [r7, #2]
 80087f4:	4613      	mov	r3, r2
 80087f6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <pbuf_header_impl+0x24>
 80087fe:	4b46      	ldr	r3, [pc, #280]	; (8008918 <pbuf_header_impl+0x130>)
 8008800:	f240 223f 	movw	r2, #575	; 0x23f
 8008804:	4945      	ldr	r1, [pc, #276]	; (800891c <pbuf_header_impl+0x134>)
 8008806:	4846      	ldr	r0, [pc, #280]	; (8008920 <pbuf_header_impl+0x138>)
 8008808:	f007 fcf0 	bl	80101ec <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800880c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <pbuf_header_impl+0x32>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <pbuf_header_impl+0x36>
    return 0;
 800881a:	2300      	movs	r3, #0
 800881c:	e078      	b.n	8008910 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800881e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008822:	2b00      	cmp	r3, #0
 8008824:	da10      	bge.n	8008848 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8008826:	887b      	ldrh	r3, [r7, #2]
 8008828:	425b      	negs	r3, r3
 800882a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	895b      	ldrh	r3, [r3, #10]
 8008830:	89fa      	ldrh	r2, [r7, #14]
 8008832:	429a      	cmp	r2, r3
 8008834:	d90a      	bls.n	800884c <pbuf_header_impl+0x64>
 8008836:	4b38      	ldr	r3, [pc, #224]	; (8008918 <pbuf_header_impl+0x130>)
 8008838:	f240 2247 	movw	r2, #583	; 0x247
 800883c:	4939      	ldr	r1, [pc, #228]	; (8008924 <pbuf_header_impl+0x13c>)
 800883e:	4838      	ldr	r0, [pc, #224]	; (8008920 <pbuf_header_impl+0x138>)
 8008840:	f007 fcd4 	bl	80101ec <iprintf>
 8008844:	2301      	movs	r3, #1
 8008846:	e063      	b.n	8008910 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8008848:	887b      	ldrh	r3, [r7, #2]
 800884a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7b1b      	ldrb	r3, [r3, #12]
 8008850:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008858:	89bb      	ldrh	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <pbuf_header_impl+0x7c>
 800885e:	89bb      	ldrh	r3, [r7, #12]
 8008860:	2b03      	cmp	r3, #3
 8008862:	d112      	bne.n	800888a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800886c:	425b      	negs	r3, r3
 800886e:	441a      	add	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3310      	adds	r3, #16
 800887c:	429a      	cmp	r2, r3
 800887e:	d238      	bcs.n	80088f2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8008886:	2301      	movs	r3, #1
 8008888:	e042      	b.n	8008910 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800888a:	89bb      	ldrh	r3, [r7, #12]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d002      	beq.n	8008896 <pbuf_header_impl+0xae>
 8008890:	89bb      	ldrh	r3, [r7, #12]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d124      	bne.n	80088e0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008896:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800889a:	2b00      	cmp	r3, #0
 800889c:	da0d      	bge.n	80088ba <pbuf_header_impl+0xd2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	895b      	ldrh	r3, [r3, #10]
 80088a2:	89fa      	ldrh	r2, [r7, #14]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d808      	bhi.n	80088ba <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088b0:	425b      	negs	r3, r3
 80088b2:	441a      	add	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]
 80088b8:	e011      	b.n	80088de <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80088ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dd0b      	ble.n	80088da <pbuf_header_impl+0xf2>
 80088c2:	787b      	ldrb	r3, [r7, #1]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d008      	beq.n	80088da <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088d0:	425b      	negs	r3, r3
 80088d2:	441a      	add	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	605a      	str	r2, [r3, #4]
 80088d8:	e001      	b.n	80088de <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80088da:	2301      	movs	r3, #1
 80088dc:	e018      	b.n	8008910 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80088de:	e008      	b.n	80088f2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <pbuf_header_impl+0x130>)
 80088e2:	f240 2277 	movw	r2, #631	; 0x277
 80088e6:	4910      	ldr	r1, [pc, #64]	; (8008928 <pbuf_header_impl+0x140>)
 80088e8:	480d      	ldr	r0, [pc, #52]	; (8008920 <pbuf_header_impl+0x138>)
 80088ea:	f007 fc7f 	bl	80101ec <iprintf>
    return 1;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e00e      	b.n	8008910 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	895a      	ldrh	r2, [r3, #10]
 80088f6:	887b      	ldrh	r3, [r7, #2]
 80088f8:	4413      	add	r3, r2
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	891a      	ldrh	r2, [r3, #8]
 8008904:	887b      	ldrh	r3, [r7, #2]
 8008906:	4413      	add	r3, r2
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	08011650 	.word	0x08011650
 800891c:	08011888 	.word	0x08011888
 8008920:	0801169c 	.word	0x0801169c
 8008924:	08011894 	.word	0x08011894
 8008928:	080118b4 	.word	0x080118b4

0800892c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8008938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800893c:	2200      	movs	r2, #0
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ff51 	bl	80087e8 <pbuf_header_impl>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800895c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008960:	2201      	movs	r2, #1
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ff3f 	bl	80087e8 <pbuf_header_impl>
 800896a:	4603      	mov	r3, r0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d106      	bne.n	8008996 <pbuf_free+0x22>
 8008988:	4b41      	ldr	r3, [pc, #260]	; (8008a90 <pbuf_free+0x11c>)
 800898a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800898e:	4941      	ldr	r1, [pc, #260]	; (8008a94 <pbuf_free+0x120>)
 8008990:	4841      	ldr	r0, [pc, #260]	; (8008a98 <pbuf_free+0x124>)
 8008992:	f007 fc2b 	bl	80101ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008996:	2300      	movs	r3, #0
 8008998:	e076      	b.n	8008a88 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7b1b      	ldrb	r3, [r3, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d012      	beq.n	80089c8 <pbuf_free+0x54>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7b1b      	ldrb	r3, [r3, #12]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d00e      	beq.n	80089c8 <pbuf_free+0x54>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7b1b      	ldrb	r3, [r3, #12]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d00a      	beq.n	80089c8 <pbuf_free+0x54>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7b1b      	ldrb	r3, [r3, #12]
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d006      	beq.n	80089c8 <pbuf_free+0x54>
 80089ba:	4b35      	ldr	r3, [pc, #212]	; (8008a90 <pbuf_free+0x11c>)
 80089bc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80089c0:	4936      	ldr	r1, [pc, #216]	; (8008a9c <pbuf_free+0x128>)
 80089c2:	4835      	ldr	r0, [pc, #212]	; (8008a98 <pbuf_free+0x124>)
 80089c4:	f007 fc12 	bl	80101ec <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80089cc:	e058      	b.n	8008a80 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80089ce:	f007 fba5 	bl	801011c <sys_arch_protect>
 80089d2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	89db      	ldrh	r3, [r3, #14]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <pbuf_free+0x76>
 80089dc:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <pbuf_free+0x11c>)
 80089de:	f240 22eb 	movw	r2, #747	; 0x2eb
 80089e2:	492f      	ldr	r1, [pc, #188]	; (8008aa0 <pbuf_free+0x12c>)
 80089e4:	482c      	ldr	r0, [pc, #176]	; (8008a98 <pbuf_free+0x124>)
 80089e6:	f007 fc01 	bl	80101ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	89db      	ldrh	r3, [r3, #14]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	81da      	strh	r2, [r3, #14]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	89db      	ldrh	r3, [r3, #14]
 80089fa:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 80089fc:	69b8      	ldr	r0, [r7, #24]
 80089fe:	f007 fb9b 	bl	8010138 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008a02:	8afb      	ldrh	r3, [r7, #22]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d139      	bne.n	8008a7c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7b1b      	ldrb	r3, [r3, #12]
 8008a12:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7b5b      	ldrb	r3, [r3, #13]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d011      	beq.n	8008a44 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <pbuf_free+0xc6>
 8008a2c:	4b18      	ldr	r3, [pc, #96]	; (8008a90 <pbuf_free+0x11c>)
 8008a2e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8008a32:	491c      	ldr	r1, [pc, #112]	; (8008aa4 <pbuf_free+0x130>)
 8008a34:	4818      	ldr	r0, [pc, #96]	; (8008a98 <pbuf_free+0x124>)
 8008a36:	f007 fbd9 	bl	80101ec <iprintf>
        pc->custom_free_function(p);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
 8008a42:	e015      	b.n	8008a70 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8008a44:	89fb      	ldrh	r3, [r7, #14]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d104      	bne.n	8008a54 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	200c      	movs	r0, #12
 8008a4e:	f7ff f9d7 	bl	8007e00 <memp_free>
 8008a52:	e00d      	b.n	8008a70 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8008a54:	89fb      	ldrh	r3, [r7, #14]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d002      	beq.n	8008a60 <pbuf_free+0xec>
 8008a5a:	89fb      	ldrh	r3, [r7, #14]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d104      	bne.n	8008a6a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	200b      	movs	r0, #11
 8008a64:	f7ff f9cc 	bl	8007e00 <memp_free>
 8008a68:	e002      	b.n	8008a70 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fe feae 	bl	80077cc <mem_free>
        }
      }
      count++;
 8008a70:	7ffb      	ldrb	r3, [r7, #31]
 8008a72:	3301      	adds	r3, #1
 8008a74:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	e001      	b.n	8008a80 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1a3      	bne.n	80089ce <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008a86:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3720      	adds	r7, #32
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	08011650 	.word	0x08011650
 8008a94:	08011888 	.word	0x08011888
 8008a98:	0801169c 	.word	0x0801169c
 8008a9c:	080118c4 	.word	0x080118c4
 8008aa0:	080118dc 	.word	0x080118dc
 8008aa4:	080118f4 	.word	0x080118f4

08008aa8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008ab4:	e005      	b.n	8008ac2 <pbuf_clen+0x1a>
    ++len;
 8008ab6:	89fb      	ldrh	r3, [r7, #14]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1f6      	bne.n	8008ab6 <pbuf_clen+0xe>
  }
  return len;
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr

08008ad4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8008ae2:	f007 fb1b 	bl	801011c <sys_arch_protect>
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	89db      	ldrh	r3, [r3, #14]
 8008aec:	3301      	adds	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	81da      	strh	r2, [r3, #14]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f007 fb1f 	bl	8010138 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	89db      	ldrh	r3, [r3, #14]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <pbuf_ref+0x3c>
 8008b02:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <pbuf_ref+0x44>)
 8008b04:	f240 3239 	movw	r2, #825	; 0x339
 8008b08:	4904      	ldr	r1, [pc, #16]	; (8008b1c <pbuf_ref+0x48>)
 8008b0a:	4805      	ldr	r0, [pc, #20]	; (8008b20 <pbuf_ref+0x4c>)
 8008b0c:	f007 fb6e 	bl	80101ec <iprintf>
  }
}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	08011650 	.word	0x08011650
 8008b1c:	08011918 	.word	0x08011918
 8008b20:	0801169c 	.word	0x0801169c

08008b24 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <pbuf_cat+0x16>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d107      	bne.n	8008b4a <pbuf_cat+0x26>
 8008b3a:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <pbuf_cat+0x98>)
 8008b3c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8008b40:	491f      	ldr	r1, [pc, #124]	; (8008bc0 <pbuf_cat+0x9c>)
 8008b42:	4820      	ldr	r0, [pc, #128]	; (8008bc4 <pbuf_cat+0xa0>)
 8008b44:	f007 fb52 	bl	80101ec <iprintf>
 8008b48:	e034      	b.n	8008bb4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	e00a      	b.n	8008b66 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	891a      	ldrh	r2, [r3, #8]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	891b      	ldrh	r3, [r3, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	891a      	ldrh	r2, [r3, #8]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	895b      	ldrh	r3, [r3, #10]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d006      	beq.n	8008b88 <pbuf_cat+0x64>
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <pbuf_cat+0x98>)
 8008b7c:	f240 3255 	movw	r2, #853	; 0x355
 8008b80:	4911      	ldr	r1, [pc, #68]	; (8008bc8 <pbuf_cat+0xa4>)
 8008b82:	4810      	ldr	r0, [pc, #64]	; (8008bc4 <pbuf_cat+0xa0>)
 8008b84:	f007 fb32 	bl	80101ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d006      	beq.n	8008b9e <pbuf_cat+0x7a>
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <pbuf_cat+0x98>)
 8008b92:	f240 3256 	movw	r2, #854	; 0x356
 8008b96:	490d      	ldr	r1, [pc, #52]	; (8008bcc <pbuf_cat+0xa8>)
 8008b98:	480a      	ldr	r0, [pc, #40]	; (8008bc4 <pbuf_cat+0xa0>)
 8008b9a:	f007 fb27 	bl	80101ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	891a      	ldrh	r2, [r3, #8]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	891b      	ldrh	r3, [r3, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	08011650 	.word	0x08011650
 8008bc0:	0801192c 	.word	0x0801192c
 8008bc4:	0801169c 	.word	0x0801169c
 8008bc8:	08011964 	.word	0x08011964
 8008bcc:	08011994 	.word	0x08011994

08008bd0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	81fb      	strh	r3, [r7, #14]
 8008bde:	2300      	movs	r3, #0
 8008be0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d008      	beq.n	8008bfa <pbuf_copy+0x2a>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <pbuf_copy+0x2a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	891a      	ldrh	r2, [r3, #8]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	891b      	ldrh	r3, [r3, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d209      	bcs.n	8008c0e <pbuf_copy+0x3e>
 8008bfa:	4b54      	ldr	r3, [pc, #336]	; (8008d4c <pbuf_copy+0x17c>)
 8008bfc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8008c00:	4953      	ldr	r1, [pc, #332]	; (8008d50 <pbuf_copy+0x180>)
 8008c02:	4854      	ldr	r0, [pc, #336]	; (8008d54 <pbuf_copy+0x184>)
 8008c04:	f007 faf2 	bl	80101ec <iprintf>
 8008c08:	f06f 030f 	mvn.w	r3, #15
 8008c0c:	e099      	b.n	8008d42 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	895b      	ldrh	r3, [r3, #10]
 8008c12:	461a      	mov	r2, r3
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	89bb      	ldrh	r3, [r7, #12]
 8008c20:	1acb      	subs	r3, r1, r3
 8008c22:	429a      	cmp	r2, r3
 8008c24:	db05      	blt.n	8008c32 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	895a      	ldrh	r2, [r3, #10]
 8008c2a:	89bb      	ldrh	r3, [r7, #12]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	817b      	strh	r3, [r7, #10]
 8008c30:	e004      	b.n	8008c3c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	895a      	ldrh	r2, [r3, #10]
 8008c36:	89fb      	ldrh	r3, [r7, #14]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	18d0      	adds	r0, r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	89bb      	ldrh	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	897a      	ldrh	r2, [r7, #10]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f007 fab6 	bl	80101c0 <memcpy>
    offset_to += len;
 8008c54:	89fa      	ldrh	r2, [r7, #14]
 8008c56:	897b      	ldrh	r3, [r7, #10]
 8008c58:	4413      	add	r3, r2
 8008c5a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8008c5c:	89ba      	ldrh	r2, [r7, #12]
 8008c5e:	897b      	ldrh	r3, [r7, #10]
 8008c60:	4413      	add	r3, r2
 8008c62:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	895b      	ldrh	r3, [r3, #10]
 8008c68:	89fa      	ldrh	r2, [r7, #14]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d906      	bls.n	8008c7c <pbuf_copy+0xac>
 8008c6e:	4b37      	ldr	r3, [pc, #220]	; (8008d4c <pbuf_copy+0x17c>)
 8008c70:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008c74:	4938      	ldr	r1, [pc, #224]	; (8008d58 <pbuf_copy+0x188>)
 8008c76:	4837      	ldr	r0, [pc, #220]	; (8008d54 <pbuf_copy+0x184>)
 8008c78:	f007 fab8 	bl	80101ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	895b      	ldrh	r3, [r3, #10]
 8008c80:	89ba      	ldrh	r2, [r7, #12]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d906      	bls.n	8008c94 <pbuf_copy+0xc4>
 8008c86:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <pbuf_copy+0x17c>)
 8008c88:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008c8c:	4933      	ldr	r1, [pc, #204]	; (8008d5c <pbuf_copy+0x18c>)
 8008c8e:	4831      	ldr	r0, [pc, #196]	; (8008d54 <pbuf_copy+0x184>)
 8008c90:	f007 faac 	bl	80101ec <iprintf>
    if (offset_from >= p_from->len) {
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	895b      	ldrh	r3, [r3, #10]
 8008c98:	89ba      	ldrh	r2, [r7, #12]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d304      	bcc.n	8008ca8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	895b      	ldrh	r3, [r3, #10]
 8008cac:	89fa      	ldrh	r2, [r7, #14]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d114      	bne.n	8008cdc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10c      	bne.n	8008cdc <pbuf_copy+0x10c>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <pbuf_copy+0x10c>
 8008cc8:	4b20      	ldr	r3, [pc, #128]	; (8008d4c <pbuf_copy+0x17c>)
 8008cca:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008cce:	4924      	ldr	r1, [pc, #144]	; (8008d60 <pbuf_copy+0x190>)
 8008cd0:	4820      	ldr	r0, [pc, #128]	; (8008d54 <pbuf_copy+0x184>)
 8008cd2:	f007 fa8b 	bl	80101ec <iprintf>
 8008cd6:	f06f 030f 	mvn.w	r3, #15
 8008cda:	e032      	b.n	8008d42 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d013      	beq.n	8008d0a <pbuf_copy+0x13a>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	895a      	ldrh	r2, [r3, #10]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	891b      	ldrh	r3, [r3, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d10d      	bne.n	8008d0a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <pbuf_copy+0x13a>
 8008cf6:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <pbuf_copy+0x17c>)
 8008cf8:	f240 32dd 	movw	r2, #989	; 0x3dd
 8008cfc:	4919      	ldr	r1, [pc, #100]	; (8008d64 <pbuf_copy+0x194>)
 8008cfe:	4815      	ldr	r0, [pc, #84]	; (8008d54 <pbuf_copy+0x184>)
 8008d00:	f007 fa74 	bl	80101ec <iprintf>
 8008d04:	f06f 0305 	mvn.w	r3, #5
 8008d08:	e01b      	b.n	8008d42 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d013      	beq.n	8008d38 <pbuf_copy+0x168>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	895a      	ldrh	r2, [r3, #10]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	891b      	ldrh	r3, [r3, #8]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d10d      	bne.n	8008d38 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <pbuf_copy+0x168>
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <pbuf_copy+0x17c>)
 8008d26:	f240 32e2 	movw	r2, #994	; 0x3e2
 8008d2a:	490e      	ldr	r1, [pc, #56]	; (8008d64 <pbuf_copy+0x194>)
 8008d2c:	4809      	ldr	r0, [pc, #36]	; (8008d54 <pbuf_copy+0x184>)
 8008d2e:	f007 fa5d 	bl	80101ec <iprintf>
 8008d32:	f06f 0305 	mvn.w	r3, #5
 8008d36:	e004      	b.n	8008d42 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f47f af67 	bne.w	8008c0e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08011650 	.word	0x08011650
 8008d50:	080119e0 	.word	0x080119e0
 8008d54:	0801169c 	.word	0x0801169c
 8008d58:	08011a10 	.word	0x08011a10
 8008d5c:	08011a28 	.word	0x08011a28
 8008d60:	08011a44 	.word	0x08011a44
 8008d64:	08011a54 	.word	0x08011a54

08008d68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	460b      	mov	r3, r1
 8008d78:	80fb      	strh	r3, [r7, #6]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d108      	bne.n	8008d9a <pbuf_copy_partial+0x32>
 8008d88:	4b30      	ldr	r3, [pc, #192]	; (8008e4c <pbuf_copy_partial+0xe4>)
 8008d8a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d8e:	4930      	ldr	r1, [pc, #192]	; (8008e50 <pbuf_copy_partial+0xe8>)
 8008d90:	4830      	ldr	r0, [pc, #192]	; (8008e54 <pbuf_copy_partial+0xec>)
 8008d92:	f007 fa2b 	bl	80101ec <iprintf>
 8008d96:	2300      	movs	r3, #0
 8008d98:	e054      	b.n	8008e44 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d108      	bne.n	8008db2 <pbuf_copy_partial+0x4a>
 8008da0:	4b2a      	ldr	r3, [pc, #168]	; (8008e4c <pbuf_copy_partial+0xe4>)
 8008da2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008da6:	492c      	ldr	r1, [pc, #176]	; (8008e58 <pbuf_copy_partial+0xf0>)
 8008da8:	482a      	ldr	r0, [pc, #168]	; (8008e54 <pbuf_copy_partial+0xec>)
 8008daa:	f007 fa1f 	bl	80101ec <iprintf>
 8008dae:	2300      	movs	r3, #0
 8008db0:	e048      	b.n	8008e44 <pbuf_copy_partial+0xdc>

  left = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <pbuf_copy_partial+0x5a>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <pbuf_copy_partial+0x5e>
    return 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e03e      	b.n	8008e44 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	e034      	b.n	8008e36 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8008dcc:	88bb      	ldrh	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <pbuf_copy_partial+0x80>
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	895b      	ldrh	r3, [r3, #10]
 8008dd6:	88ba      	ldrh	r2, [r7, #4]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d305      	bcc.n	8008de8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	895b      	ldrh	r3, [r3, #10]
 8008de0:	88ba      	ldrh	r2, [r7, #4]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	80bb      	strh	r3, [r7, #4]
 8008de6:	e023      	b.n	8008e30 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	895a      	ldrh	r2, [r3, #10]
 8008dec:	88bb      	ldrh	r3, [r7, #4]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008df2:	8b3a      	ldrh	r2, [r7, #24]
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d901      	bls.n	8008dfe <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008dfe:	8b7b      	ldrh	r3, [r7, #26]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	18d0      	adds	r0, r2, r3
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	8b3a      	ldrh	r2, [r7, #24]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	f007 f9d6 	bl	80101c0 <memcpy>
      copied_total += buf_copy_len;
 8008e14:	8afa      	ldrh	r2, [r7, #22]
 8008e16:	8b3b      	ldrh	r3, [r7, #24]
 8008e18:	4413      	add	r3, r2
 8008e1a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8008e1c:	8b7a      	ldrh	r2, [r7, #26]
 8008e1e:	8b3b      	ldrh	r3, [r7, #24]
 8008e20:	4413      	add	r3, r2
 8008e22:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8008e24:	88fa      	ldrh	r2, [r7, #6]
 8008e26:	8b3b      	ldrh	r3, [r7, #24]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <pbuf_copy_partial+0xda>
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1c4      	bne.n	8008dcc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8008e42:	8afb      	ldrh	r3, [r7, #22]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	08011650 	.word	0x08011650
 8008e50:	08011a80 	.word	0x08011a80
 8008e54:	0801169c 	.word	0x0801169c
 8008e58:	08011aa0 	.word	0x08011aa0

08008e5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8008e60:	bf00      	nop
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e6c:	f000 fdfa 	bl	8009a64 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <tcp_tmr+0x28>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <tcp_tmr+0x28>)
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <tcp_tmr+0x28>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008e88:	f000 fb2a 	bl	80094e0 <tcp_slowtmr>
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	2000bb39 	.word	0x2000bb39

08008e94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e00a      	b.n	8008eba <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d102      	bne.n	8008eb4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f1      	bne.n	8008ea4 <tcp_remove_listener+0x10>
      }
   }
}
 8008ec0:	bf00      	nop
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr

08008ecc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d105      	bne.n	8008ee6 <tcp_listen_closed+0x1a>
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <tcp_listen_closed+0x5c>)
 8008edc:	22c0      	movs	r2, #192	; 0xc0
 8008ede:	4913      	ldr	r1, [pc, #76]	; (8008f2c <tcp_listen_closed+0x60>)
 8008ee0:	4813      	ldr	r0, [pc, #76]	; (8008f30 <tcp_listen_closed+0x64>)
 8008ee2:	f007 f983 	bl	80101ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7d1b      	ldrb	r3, [r3, #20]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d005      	beq.n	8008efa <tcp_listen_closed+0x2e>
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <tcp_listen_closed+0x5c>)
 8008ef0:	22c1      	movs	r2, #193	; 0xc1
 8008ef2:	4910      	ldr	r1, [pc, #64]	; (8008f34 <tcp_listen_closed+0x68>)
 8008ef4:	480e      	ldr	r0, [pc, #56]	; (8008f30 <tcp_listen_closed+0x64>)
 8008ef6:	f007 f979 	bl	80101ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008efa:	2301      	movs	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	e00b      	b.n	8008f18 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008f00:	4a0d      	ldr	r2, [pc, #52]	; (8008f38 <tcp_listen_closed+0x6c>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7ff ffc1 	bl	8008e94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d9f0      	bls.n	8008f00 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	08011bd4 	.word	0x08011bd4
 8008f2c:	08011c04 	.word	0x08011c04
 8008f30:	08011c10 	.word	0x08011c10
 8008f34:	08011c38 	.word	0x08011c38
 8008f38:	08013058 	.word	0x08013058

08008f3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008f3c:	b5b0      	push	{r4, r5, r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d075      	beq.n	800903a <tcp_close_shutdown+0xfe>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7d1b      	ldrb	r3, [r3, #20]
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d003      	beq.n	8008f5e <tcp_close_shutdown+0x22>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7d1b      	ldrb	r3, [r3, #20]
 8008f5a:	2b07      	cmp	r3, #7
 8008f5c:	d16d      	bne.n	800903a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d104      	bne.n	8008f70 <tcp_close_shutdown+0x34>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008f6e:	d064      	beq.n	800903a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7e9b      	ldrb	r3, [r3, #26]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <tcp_close_shutdown+0x4e>
 8008f7c:	4b5b      	ldr	r3, [pc, #364]	; (80090ec <tcp_close_shutdown+0x1b0>)
 8008f7e:	f240 120f 	movw	r2, #271	; 0x10f
 8008f82:	495b      	ldr	r1, [pc, #364]	; (80090f0 <tcp_close_shutdown+0x1b4>)
 8008f84:	485b      	ldr	r0, [pc, #364]	; (80090f4 <tcp_close_shutdown+0x1b8>)
 8008f86:	f007 f931 	bl	80101ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f92:	687c      	ldr	r4, [r7, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	1d1d      	adds	r5, r3, #4
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	8adb      	ldrh	r3, [r3, #22]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	8b12      	ldrh	r2, [r2, #24]
 8008fa0:	9201      	str	r2, [sp, #4]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	f004 f860 	bl	800d06c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 ffcf 	bl	8009f50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008fb2:	4b51      	ldr	r3, [pc, #324]	; (80090f8 <tcp_close_shutdown+0x1bc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d105      	bne.n	8008fc8 <tcp_close_shutdown+0x8c>
 8008fbc:	4b4e      	ldr	r3, [pc, #312]	; (80090f8 <tcp_close_shutdown+0x1bc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4a4d      	ldr	r2, [pc, #308]	; (80090f8 <tcp_close_shutdown+0x1bc>)
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	e013      	b.n	8008ff0 <tcp_close_shutdown+0xb4>
 8008fc8:	4b4b      	ldr	r3, [pc, #300]	; (80090f8 <tcp_close_shutdown+0x1bc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	e00c      	b.n	8008fea <tcp_close_shutdown+0xae>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d104      	bne.n	8008fe4 <tcp_close_shutdown+0xa8>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	60da      	str	r2, [r3, #12]
 8008fe2:	e005      	b.n	8008ff0 <tcp_close_shutdown+0xb4>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1ef      	bne.n	8008fd0 <tcp_close_shutdown+0x94>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	4b41      	ldr	r3, [pc, #260]	; (80090fc <tcp_close_shutdown+0x1c0>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7d1b      	ldrb	r3, [r3, #20]
 8009000:	2b04      	cmp	r3, #4
 8009002:	d10c      	bne.n	800901e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	220a      	movs	r2, #10
 8009008:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800900a:	4b3d      	ldr	r3, [pc, #244]	; (8009100 <tcp_close_shutdown+0x1c4>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]
 8009012:	4a3b      	ldr	r2, [pc, #236]	; (8009100 <tcp_close_shutdown+0x1c4>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	f004 fa70 	bl	800d4fc <tcp_timer_needed>
 800901c:	e00b      	b.n	8009036 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800901e:	4b39      	ldr	r3, [pc, #228]	; (8009104 <tcp_close_shutdown+0x1c8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d102      	bne.n	800902e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8009028:	f003 faf2 	bl	800c610 <tcp_trigger_input_pcb_close>
 800902c:	e003      	b.n	8009036 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	2001      	movs	r0, #1
 8009032:	f7fe fee5 	bl	8007e00 <memp_free>
        }
      }
      return ERR_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	e053      	b.n	80090e2 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7d1b      	ldrb	r3, [r3, #20]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d03d      	beq.n	80090be <tcp_close_shutdown+0x182>
 8009042:	2b02      	cmp	r3, #2
 8009044:	dc47      	bgt.n	80090d6 <tcp_close_shutdown+0x19a>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <tcp_close_shutdown+0x114>
 800904a:	2b01      	cmp	r3, #1
 800904c:	d02b      	beq.n	80090a6 <tcp_close_shutdown+0x16a>
 800904e:	e042      	b.n	80090d6 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8adb      	ldrh	r3, [r3, #22]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d021      	beq.n	800909c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009058:	4b2b      	ldr	r3, [pc, #172]	; (8009108 <tcp_close_shutdown+0x1cc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	429a      	cmp	r2, r3
 8009060:	d105      	bne.n	800906e <tcp_close_shutdown+0x132>
 8009062:	4b29      	ldr	r3, [pc, #164]	; (8009108 <tcp_close_shutdown+0x1cc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	4a27      	ldr	r2, [pc, #156]	; (8009108 <tcp_close_shutdown+0x1cc>)
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	e013      	b.n	8009096 <tcp_close_shutdown+0x15a>
 800906e:	4b26      	ldr	r3, [pc, #152]	; (8009108 <tcp_close_shutdown+0x1cc>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60bb      	str	r3, [r7, #8]
 8009074:	e00c      	b.n	8009090 <tcp_close_shutdown+0x154>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	d104      	bne.n	800908a <tcp_close_shutdown+0x14e>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	60da      	str	r2, [r3, #12]
 8009088:	e005      	b.n	8009096 <tcp_close_shutdown+0x15a>
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	60bb      	str	r3, [r7, #8]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1ef      	bne.n	8009076 <tcp_close_shutdown+0x13a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	2001      	movs	r0, #1
 80090a0:	f7fe feae 	bl	8007e00 <memp_free>
    break;
 80090a4:	e01c      	b.n	80090e0 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff ff10 	bl	8008ecc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4817      	ldr	r0, [pc, #92]	; (800910c <tcp_close_shutdown+0x1d0>)
 80090b0:	f000 ff90 	bl	8009fd4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	2002      	movs	r0, #2
 80090b8:	f7fe fea2 	bl	8007e00 <memp_free>
    break;
 80090bc:	e010      	b.n	80090e0 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	480d      	ldr	r0, [pc, #52]	; (80090f8 <tcp_close_shutdown+0x1bc>)
 80090c2:	f000 ff87 	bl	8009fd4 <tcp_pcb_remove>
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <tcp_close_shutdown+0x1c0>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	2001      	movs	r0, #1
 80090d0:	f7fe fe96 	bl	8007e00 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80090d4:	e004      	b.n	80090e0 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f81a 	bl	8009110 <tcp_close_shutdown_fin>
 80090dc:	4603      	mov	r3, r0
 80090de:	e000      	b.n	80090e2 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bdb0      	pop	{r4, r5, r7, pc}
 80090ea:	bf00      	nop
 80090ec:	08011bd4 	.word	0x08011bd4
 80090f0:	08011c50 	.word	0x08011c50
 80090f4:	08011c10 	.word	0x08011c10
 80090f8:	2000bb30 	.word	0x2000bb30
 80090fc:	2000bb38 	.word	0x2000bb38
 8009100:	2000bb34 	.word	0x2000bb34
 8009104:	2000bb70 	.word	0x2000bb70
 8009108:	2000bb28 	.word	0x2000bb28
 800910c:	2000bb2c 	.word	0x2000bb2c

08009110 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <tcp_close_shutdown_fin+0x1c>
 800911e:	4b2e      	ldr	r3, [pc, #184]	; (80091d8 <tcp_close_shutdown_fin+0xc8>)
 8009120:	f240 124d 	movw	r2, #333	; 0x14d
 8009124:	492d      	ldr	r1, [pc, #180]	; (80091dc <tcp_close_shutdown_fin+0xcc>)
 8009126:	482e      	ldr	r0, [pc, #184]	; (80091e0 <tcp_close_shutdown_fin+0xd0>)
 8009128:	f007 f860 	bl	80101ec <iprintf>

  switch (pcb->state) {
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7d1b      	ldrb	r3, [r3, #20]
 8009130:	2b07      	cmp	r3, #7
 8009132:	d020      	beq.n	8009176 <tcp_close_shutdown_fin+0x66>
 8009134:	2b07      	cmp	r3, #7
 8009136:	dc2b      	bgt.n	8009190 <tcp_close_shutdown_fin+0x80>
 8009138:	2b03      	cmp	r3, #3
 800913a:	d002      	beq.n	8009142 <tcp_close_shutdown_fin+0x32>
 800913c:	2b04      	cmp	r3, #4
 800913e:	d00d      	beq.n	800915c <tcp_close_shutdown_fin+0x4c>
 8009140:	e026      	b.n	8009190 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f003 faee 	bl	800c724 <tcp_send_fin>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800914c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11f      	bne.n	8009194 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2205      	movs	r2, #5
 8009158:	751a      	strb	r2, [r3, #20]
    }
    break;
 800915a:	e01b      	b.n	8009194 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f003 fae1 	bl	800c724 <tcp_send_fin>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2205      	movs	r2, #5
 8009172:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009174:	e010      	b.n	8009198 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f003 fad4 	bl	800c724 <tcp_send_fin>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2209      	movs	r2, #9
 800918c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800918e:	e005      	b.n	800919c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	e01c      	b.n	80091ce <tcp_close_shutdown_fin+0xbe>
    break;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <tcp_close_shutdown_fin+0x8e>
    break;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <tcp_close_shutdown_fin+0x8e>
    break;
 800919c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d103      	bne.n	80091ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f003 fcdc 	bl	800cb64 <tcp_output>
 80091ac:	e00d      	b.n	80091ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80091ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d108      	bne.n	80091ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7e9b      	ldrb	r3, [r3, #26]
 80091bc:	f043 0308 	orr.w	r3, r3, #8
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e001      	b.n	80091ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80091ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	08011bd4 	.word	0x08011bd4
 80091dc:	08011c04 	.word	0x08011c04
 80091e0:	08011c10 	.word	0x08011c10

080091e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7d1b      	ldrb	r3, [r3, #20]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d006      	beq.n	8009202 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7e9b      	ldrb	r3, [r3, #26]
 80091f8:	f043 0310 	orr.w	r3, r3, #16
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009202:	2101      	movs	r1, #1
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fe99 	bl	8008f3c <tcp_close_shutdown>
 800920a:	4603      	mov	r3, r0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08c      	sub	sp, #48	; 0x30
 8009218:	af02      	add	r7, sp, #8
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7d1b      	ldrb	r3, [r3, #20]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d106      	bne.n	8009234 <tcp_abandon+0x20>
 8009226:	4b4d      	ldr	r3, [pc, #308]	; (800935c <tcp_abandon+0x148>)
 8009228:	f240 12df 	movw	r2, #479	; 0x1df
 800922c:	494c      	ldr	r1, [pc, #304]	; (8009360 <tcp_abandon+0x14c>)
 800922e:	484d      	ldr	r0, [pc, #308]	; (8009364 <tcp_abandon+0x150>)
 8009230:	f006 ffdc 	bl	80101ec <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7d1b      	ldrb	r3, [r3, #20]
 8009238:	2b0a      	cmp	r3, #10
 800923a:	d108      	bne.n	800924e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	484a      	ldr	r0, [pc, #296]	; (8009368 <tcp_abandon+0x154>)
 8009240:	f000 fec8 	bl	8009fd4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	2001      	movs	r0, #1
 8009248:	f7fe fdda 	bl	8007e00 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800924c:	e081      	b.n	8009352 <tcp_abandon+0x13e>
    int send_rst = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009268:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7d1b      	ldrb	r3, [r3, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d126      	bne.n	80092c6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	8adb      	ldrh	r3, [r3, #22]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d02e      	beq.n	80092de <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009280:	4b3a      	ldr	r3, [pc, #232]	; (800936c <tcp_abandon+0x158>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d105      	bne.n	8009296 <tcp_abandon+0x82>
 800928a:	4b38      	ldr	r3, [pc, #224]	; (800936c <tcp_abandon+0x158>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	4a36      	ldr	r2, [pc, #216]	; (800936c <tcp_abandon+0x158>)
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	e013      	b.n	80092be <tcp_abandon+0xaa>
 8009296:	4b35      	ldr	r3, [pc, #212]	; (800936c <tcp_abandon+0x158>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	e00c      	b.n	80092b8 <tcp_abandon+0xa4>
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d104      	bne.n	80092b2 <tcp_abandon+0x9e>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e005      	b.n	80092be <tcp_abandon+0xaa>
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1ef      	bne.n	800929e <tcp_abandon+0x8a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	60da      	str	r2, [r3, #12]
 80092c4:	e00b      	b.n	80092de <tcp_abandon+0xca>
      send_rst = reset;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	8adb      	ldrh	r3, [r3, #22]
 80092ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4827      	ldr	r0, [pc, #156]	; (8009370 <tcp_abandon+0x15c>)
 80092d4:	f000 fe7e 	bl	8009fd4 <tcp_pcb_remove>
 80092d8:	4b26      	ldr	r3, [pc, #152]	; (8009374 <tcp_abandon+0x160>)
 80092da:	2201      	movs	r2, #1
 80092dc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d004      	beq.n	80092f0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fc87 	bl	8009bfe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fc7e 	bl	8009bfe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fc75 	bl	8009bfe <tcp_segs_free>
    if (send_rst) {
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00c      	beq.n	8009334 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	1d19      	adds	r1, r3, #4
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8b1b      	ldrh	r3, [r3, #24]
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	460b      	mov	r3, r1
 800932c:	6979      	ldr	r1, [r7, #20]
 800932e:	69b8      	ldr	r0, [r7, #24]
 8009330:	f003 fe9c 	bl	800d06c <tcp_rst>
    last_state = pcb->state;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	7d1b      	ldrb	r3, [r3, #20]
 8009338:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	2001      	movs	r0, #1
 800933e:	f7fe fd5f 	bl	8007e00 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <tcp_abandon+0x13e>
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f06f 010c 	mvn.w	r1, #12
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	4798      	blx	r3
}
 8009352:	bf00      	nop
 8009354:	3728      	adds	r7, #40	; 0x28
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	08011bd4 	.word	0x08011bd4
 8009360:	08011c6c 	.word	0x08011c6c
 8009364:	08011c10 	.word	0x08011c10
 8009368:	2000bb34 	.word	0x2000bb34
 800936c:	2000bb28 	.word	0x2000bb28
 8009370:	2000bb30 	.word	0x2000bb30
 8009374:	2000bb38 	.word	0x2000bb38

08009378 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff ff46 	bl	8009214 <tcp_abandon>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80093a0:	4413      	add	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80093ac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80093b0:	bf28      	it	cs
 80093b2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80093b6:	b292      	uxth	r2, r2
 80093b8:	4413      	add	r3, r2
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	db08      	blt.n	80093d4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	e020      	b.n	8009416 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dd03      	ble.n	80093ea <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093e8:	e014      	b.n	8009414 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fc:	d306      	bcc.n	800940c <tcp_update_rcv_ann_wnd+0x7c>
 80093fe:	4b08      	ldr	r3, [pc, #32]	; (8009420 <tcp_update_rcv_ann_wnd+0x90>)
 8009400:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009404:	4907      	ldr	r1, [pc, #28]	; (8009424 <tcp_update_rcv_ann_wnd+0x94>)
 8009406:	4808      	ldr	r0, [pc, #32]	; (8009428 <tcp_update_rcv_ann_wnd+0x98>)
 8009408:	f006 fef0 	bl	80101ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009414:	2300      	movs	r3, #0
  }
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	08011bd4 	.word	0x08011bd4
 8009424:	08011cec 	.word	0x08011cec
 8009428:	08011c10 	.word	0x08011c10

0800942c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7d1b      	ldrb	r3, [r3, #20]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d106      	bne.n	800944e <tcp_recved+0x22>
 8009440:	4b23      	ldr	r3, [pc, #140]	; (80094d0 <tcp_recved+0xa4>)
 8009442:	f240 321f 	movw	r2, #799	; 0x31f
 8009446:	4923      	ldr	r1, [pc, #140]	; (80094d4 <tcp_recved+0xa8>)
 8009448:	4823      	ldr	r0, [pc, #140]	; (80094d8 <tcp_recved+0xac>)
 800944a:	f006 fecf 	bl	80101ec <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009452:	887b      	ldrh	r3, [r7, #2]
 8009454:	4413      	add	r3, r2
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009460:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009464:	d904      	bls.n	8009470 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800946c:	851a      	strh	r2, [r3, #40]	; 0x28
 800946e:	e017      	b.n	80094a0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009474:	2b00      	cmp	r3, #0
 8009476:	d113      	bne.n	80094a0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7d1b      	ldrb	r3, [r3, #20]
 800947c:	2b07      	cmp	r3, #7
 800947e:	d003      	beq.n	8009488 <tcp_recved+0x5c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7d1b      	ldrb	r3, [r3, #20]
 8009484:	2b09      	cmp	r3, #9
 8009486:	d104      	bne.n	8009492 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800948e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009490:	e006      	b.n	80094a0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8009492:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <tcp_recved+0xa4>)
 8009494:	f240 322d 	movw	r2, #813	; 0x32d
 8009498:	4910      	ldr	r1, [pc, #64]	; (80094dc <tcp_recved+0xb0>)
 800949a:	480f      	ldr	r0, [pc, #60]	; (80094d8 <tcp_recved+0xac>)
 800949c:	f006 fea6 	bl	80101ec <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ff75 	bl	8009390 <tcp_update_rcv_ann_wnd>
 80094a6:	4603      	mov	r3, r0
 80094a8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80094b0:	db09      	blt.n	80094c6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7e9b      	ldrb	r3, [r3, #26]
 80094b6:	f043 0302 	orr.w	r3, r3, #2
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f003 fb4f 	bl	800cb64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80094c6:	bf00      	nop
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	08011bd4 	.word	0x08011bd4
 80094d4:	08011d08 	.word	0x08011d08
 80094d8:	08011c10 	.word	0x08011c10
 80094dc:	08011d30 	.word	0x08011d30

080094e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b08c      	sub	sp, #48	; 0x30
 80094e4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80094ea:	4b97      	ldr	r3, [pc, #604]	; (8009748 <tcp_slowtmr+0x268>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4a95      	ldr	r2, [pc, #596]	; (8009748 <tcp_slowtmr+0x268>)
 80094f2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80094f4:	4b95      	ldr	r3, [pc, #596]	; (800974c <tcp_slowtmr+0x26c>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	4b93      	ldr	r3, [pc, #588]	; (800974c <tcp_slowtmr+0x26c>)
 80094fe:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009500:	2300      	movs	r3, #0
 8009502:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8009504:	4b92      	ldr	r3, [pc, #584]	; (8009750 <tcp_slowtmr+0x270>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800950a:	e227      	b.n	800995c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	7d1b      	ldrb	r3, [r3, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <tcp_slowtmr+0x42>
 8009514:	4b8f      	ldr	r3, [pc, #572]	; (8009754 <tcp_slowtmr+0x274>)
 8009516:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800951a:	498f      	ldr	r1, [pc, #572]	; (8009758 <tcp_slowtmr+0x278>)
 800951c:	488f      	ldr	r0, [pc, #572]	; (800975c <tcp_slowtmr+0x27c>)
 800951e:	f006 fe65 	bl	80101ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	7d1b      	ldrb	r3, [r3, #20]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d106      	bne.n	8009538 <tcp_slowtmr+0x58>
 800952a:	4b8a      	ldr	r3, [pc, #552]	; (8009754 <tcp_slowtmr+0x274>)
 800952c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009530:	498b      	ldr	r1, [pc, #556]	; (8009760 <tcp_slowtmr+0x280>)
 8009532:	488a      	ldr	r0, [pc, #552]	; (800975c <tcp_slowtmr+0x27c>)
 8009534:	f006 fe5a 	bl	80101ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	7d1b      	ldrb	r3, [r3, #20]
 800953c:	2b0a      	cmp	r3, #10
 800953e:	d106      	bne.n	800954e <tcp_slowtmr+0x6e>
 8009540:	4b84      	ldr	r3, [pc, #528]	; (8009754 <tcp_slowtmr+0x274>)
 8009542:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8009546:	4987      	ldr	r1, [pc, #540]	; (8009764 <tcp_slowtmr+0x284>)
 8009548:	4884      	ldr	r0, [pc, #528]	; (800975c <tcp_slowtmr+0x27c>)
 800954a:	f006 fe4f 	bl	80101ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	7f5a      	ldrb	r2, [r3, #29]
 8009552:	4b7e      	ldr	r3, [pc, #504]	; (800974c <tcp_slowtmr+0x26c>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d103      	bne.n	8009562 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009560:	e1fc      	b.n	800995c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009562:	4b7a      	ldr	r3, [pc, #488]	; (800974c <tcp_slowtmr+0x26c>)
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	7d1b      	ldrb	r3, [r3, #20]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d108      	bne.n	800958c <tcp_slowtmr+0xac>
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009580:	2b05      	cmp	r3, #5
 8009582:	d903      	bls.n	800958c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8009584:	7ffb      	ldrb	r3, [r7, #31]
 8009586:	3301      	adds	r3, #1
 8009588:	77fb      	strb	r3, [r7, #31]
 800958a:	e0a2      	b.n	80096d2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009592:	2b0b      	cmp	r3, #11
 8009594:	d903      	bls.n	800959e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009596:	7ffb      	ldrb	r3, [r7, #31]
 8009598:	3301      	adds	r3, #1
 800959a:	77fb      	strb	r3, [r7, #31]
 800959c:	e099      	b.n	80096d2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d032      	beq.n	800960e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80095ae:	3b01      	subs	r3, #1
 80095b0:	4a6d      	ldr	r2, [pc, #436]	; (8009768 <tcp_slowtmr+0x288>)
 80095b2:	5cd3      	ldrb	r3, [r2, r3]
 80095b4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80095bc:	7cfa      	ldrb	r2, [r7, #19]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d907      	bls.n	80095d2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80095c8:	3301      	adds	r3, #1
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80095d8:	7cfa      	ldrb	r2, [r7, #19]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d879      	bhi.n	80096d2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80095de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095e0:	f003 fecb 	bl	800d37a <tcp_zero_window_probe>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d173      	bne.n	80096d2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80095f8:	2b06      	cmp	r3, #6
 80095fa:	d86a      	bhi.n	80096d2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009602:	3301      	adds	r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800960c:	e061      	b.n	80096d2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009614:	2b00      	cmp	r3, #0
 8009616:	db08      	blt.n	800962a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800961e:	b29b      	uxth	r3, r3
 8009620:	3301      	adds	r3, #1
 8009622:	b29b      	uxth	r3, r3
 8009624:	b21a      	sxth	r2, r3
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d04f      	beq.n	80096d2 <tcp_slowtmr+0x1f2>
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800963e:	429a      	cmp	r2, r3
 8009640:	db47      	blt.n	80096d2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	7d1b      	ldrb	r3, [r3, #20]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d018      	beq.n	800967c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009650:	2b0c      	cmp	r3, #12
 8009652:	bf28      	it	cs
 8009654:	230c      	movcs	r3, #12
 8009656:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800965e:	10db      	asrs	r3, r3, #3
 8009660:	b21b      	sxth	r3, r3
 8009662:	461a      	mov	r2, r3
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800966a:	4413      	add	r3, r2
 800966c:	7dfa      	ldrb	r2, [r7, #23]
 800966e:	493f      	ldr	r1, [pc, #252]	; (800976c <tcp_slowtmr+0x28c>)
 8009670:	5c8a      	ldrb	r2, [r1, r2]
 8009672:	4093      	lsls	r3, r2
 8009674:	b21a      	sxth	r2, r3
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	2200      	movs	r2, #0
 8009680:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800968e:	4293      	cmp	r3, r2
 8009690:	bf28      	it	cs
 8009692:	4613      	movcs	r3, r2
 8009694:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8009696:	8abb      	ldrh	r3, [r7, #20]
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d206      	bcs.n	80096c2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80096cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096ce:	f003 fd43 	bl	800d158 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	7d1b      	ldrb	r3, [r3, #20]
 80096d6:	2b06      	cmp	r3, #6
 80096d8:	d10f      	bne.n	80096fa <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	7e9b      	ldrb	r3, [r3, #26]
 80096de:	f003 0310 	and.w	r3, r3, #16
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096e6:	4b18      	ldr	r3, [pc, #96]	; (8009748 <tcp_slowtmr+0x268>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b28      	cmp	r3, #40	; 0x28
 80096f2:	d902      	bls.n	80096fa <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80096f4:	7ffb      	ldrb	r3, [r7, #31]
 80096f6:	3301      	adds	r3, #1
 80096f8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	7a1b      	ldrb	r3, [r3, #8]
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d05d      	beq.n	80097c2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800970a:	2b04      	cmp	r3, #4
 800970c:	d003      	beq.n	8009716 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8009712:	2b07      	cmp	r3, #7
 8009714:	d155      	bne.n	80097c2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009716:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <tcp_slowtmr+0x268>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009726:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800972a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800972e:	4910      	ldr	r1, [pc, #64]	; (8009770 <tcp_slowtmr+0x290>)
 8009730:	fba1 1303 	umull	r1, r3, r1, r3
 8009734:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009736:	429a      	cmp	r2, r3
 8009738:	d91c      	bls.n	8009774 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800973a:	7ffb      	ldrb	r3, [r7, #31]
 800973c:	3301      	adds	r3, #1
 800973e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8009740:	7fbb      	ldrb	r3, [r7, #30]
 8009742:	3301      	adds	r3, #1
 8009744:	77bb      	strb	r3, [r7, #30]
 8009746:	e03c      	b.n	80097c2 <tcp_slowtmr+0x2e2>
 8009748:	2000bb24 	.word	0x2000bb24
 800974c:	2000bb3a 	.word	0x2000bb3a
 8009750:	2000bb30 	.word	0x2000bb30
 8009754:	08011bd4 	.word	0x08011bd4
 8009758:	08011d84 	.word	0x08011d84
 800975c:	08011c10 	.word	0x08011c10
 8009760:	08011db0 	.word	0x08011db0
 8009764:	08011ddc 	.word	0x08011ddc
 8009768:	08013050 	.word	0x08013050
 800976c:	08013040 	.word	0x08013040
 8009770:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009774:	4b97      	ldr	r3, [pc, #604]	; (80099d4 <tcp_slowtmr+0x4f4>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800978a:	4618      	mov	r0, r3
 800978c:	4b92      	ldr	r3, [pc, #584]	; (80099d8 <tcp_slowtmr+0x4f8>)
 800978e:	fb00 f303 	mul.w	r3, r0, r3
 8009792:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8009794:	4991      	ldr	r1, [pc, #580]	; (80099dc <tcp_slowtmr+0x4fc>)
 8009796:	fba1 1303 	umull	r1, r3, r1, r3
 800979a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800979c:	429a      	cmp	r2, r3
 800979e:	d910      	bls.n	80097c2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80097a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097a2:	f003 fdad 	bl	800d300 <tcp_keepalive>
 80097a6:	4603      	mov	r3, r0
 80097a8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80097aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d107      	bne.n	80097c2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80097b8:	3301      	adds	r3, #1
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d016      	beq.n	80097f8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80097ca:	4b82      	ldr	r3, [pc, #520]	; (80099d4 <tcp_slowtmr+0x4f4>)
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	1ad2      	subs	r2, r2, r3
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80097da:	4619      	mov	r1, r3
 80097dc:	460b      	mov	r3, r1
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	440b      	add	r3, r1
 80097e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d307      	bcc.n	80097f8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fa06 	bl	8009bfe <tcp_segs_free>
      pcb->ooseq = NULL;
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	2200      	movs	r2, #0
 80097f6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	7d1b      	ldrb	r3, [r3, #20]
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d109      	bne.n	8009814 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009800:	4b74      	ldr	r3, [pc, #464]	; (80099d4 <tcp_slowtmr+0x4f4>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b28      	cmp	r3, #40	; 0x28
 800980c:	d902      	bls.n	8009814 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800980e:	7ffb      	ldrb	r3, [r7, #31]
 8009810:	3301      	adds	r3, #1
 8009812:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	7d1b      	ldrb	r3, [r3, #20]
 8009818:	2b09      	cmp	r3, #9
 800981a:	d109      	bne.n	8009830 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800981c:	4b6d      	ldr	r3, [pc, #436]	; (80099d4 <tcp_slowtmr+0x4f4>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2bf0      	cmp	r3, #240	; 0xf0
 8009828:	d902      	bls.n	8009830 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800982a:	7ffb      	ldrb	r3, [r7, #31]
 800982c:	3301      	adds	r3, #1
 800982e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009830:	7ffb      	ldrb	r3, [r7, #31]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d05d      	beq.n	80098f2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800983c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800983e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009840:	f000 fb86 	bl	8009f50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d010      	beq.n	800986c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800984a:	4b65      	ldr	r3, [pc, #404]	; (80099e0 <tcp_slowtmr+0x500>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009850:	429a      	cmp	r2, r3
 8009852:	d106      	bne.n	8009862 <tcp_slowtmr+0x382>
 8009854:	4b63      	ldr	r3, [pc, #396]	; (80099e4 <tcp_slowtmr+0x504>)
 8009856:	f240 4289 	movw	r2, #1161	; 0x489
 800985a:	4963      	ldr	r1, [pc, #396]	; (80099e8 <tcp_slowtmr+0x508>)
 800985c:	4863      	ldr	r0, [pc, #396]	; (80099ec <tcp_slowtmr+0x50c>)
 800985e:	f006 fcc5 	bl	80101ec <iprintf>
        prev->next = pcb->next;
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	e00f      	b.n	800988c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800986c:	4b5c      	ldr	r3, [pc, #368]	; (80099e0 <tcp_slowtmr+0x500>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009872:	429a      	cmp	r2, r3
 8009874:	d006      	beq.n	8009884 <tcp_slowtmr+0x3a4>
 8009876:	4b5b      	ldr	r3, [pc, #364]	; (80099e4 <tcp_slowtmr+0x504>)
 8009878:	f240 428d 	movw	r2, #1165	; 0x48d
 800987c:	495c      	ldr	r1, [pc, #368]	; (80099f0 <tcp_slowtmr+0x510>)
 800987e:	485b      	ldr	r0, [pc, #364]	; (80099ec <tcp_slowtmr+0x50c>)
 8009880:	f006 fcb4 	bl	80101ec <iprintf>
        tcp_active_pcbs = pcb->next;
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	4a55      	ldr	r2, [pc, #340]	; (80099e0 <tcp_slowtmr+0x500>)
 800988a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800988c:	7fbb      	ldrb	r3, [r7, #30]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d010      	beq.n	80098b4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800989a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	1d1d      	adds	r5, r3, #4
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	8adb      	ldrh	r3, [r3, #22]
 80098a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a6:	8b12      	ldrh	r2, [r2, #24]
 80098a8:	9201      	str	r2, [sp, #4]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	462b      	mov	r3, r5
 80098ae:	4622      	mov	r2, r4
 80098b0:	f003 fbdc 	bl	800d06c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	7d1b      	ldrb	r3, [r3, #20]
 80098be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	2001      	movs	r0, #1
 80098ce:	f7fe fa97 	bl	8007e00 <memp_free>

      tcp_active_pcbs_changed = 0;
 80098d2:	4b48      	ldr	r3, [pc, #288]	; (80099f4 <tcp_slowtmr+0x514>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d004      	beq.n	80098e8 <tcp_slowtmr+0x408>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f06f 010c 	mvn.w	r1, #12
 80098e4:	68b8      	ldr	r0, [r7, #8]
 80098e6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80098e8:	4b42      	ldr	r3, [pc, #264]	; (80099f4 <tcp_slowtmr+0x514>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d035      	beq.n	800995c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80098f0:	e606      	b.n	8009500 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	7edb      	ldrb	r3, [r3, #27]
 8009900:	3301      	adds	r3, #1
 8009902:	b2da      	uxtb	r2, r3
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	7eda      	ldrb	r2, [r3, #27]
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	7f1b      	ldrb	r3, [r3, #28]
 8009910:	429a      	cmp	r2, r3
 8009912:	d323      	bcc.n	800995c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	2200      	movs	r2, #0
 8009918:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800991a:	4b36      	ldr	r3, [pc, #216]	; (80099f4 <tcp_slowtmr+0x514>)
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <tcp_slowtmr+0x460>
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009930:	6a3a      	ldr	r2, [r7, #32]
 8009932:	6912      	ldr	r2, [r2, #16]
 8009934:	6a39      	ldr	r1, [r7, #32]
 8009936:	4610      	mov	r0, r2
 8009938:	4798      	blx	r3
 800993a:	4603      	mov	r3, r0
 800993c:	777b      	strb	r3, [r7, #29]
 800993e:	e001      	b.n	8009944 <tcp_slowtmr+0x464>
 8009940:	2300      	movs	r3, #0
 8009942:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8009944:	4b2b      	ldr	r3, [pc, #172]	; (80099f4 <tcp_slowtmr+0x514>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d000      	beq.n	800994e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800994c:	e5d8      	b.n	8009500 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800994e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8009956:	6a38      	ldr	r0, [r7, #32]
 8009958:	f003 f904 	bl	800cb64 <tcp_output>
  while (pcb != NULL) {
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	f47f add4 	bne.w	800950c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009964:	2300      	movs	r3, #0
 8009966:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8009968:	4b23      	ldr	r3, [pc, #140]	; (80099f8 <tcp_slowtmr+0x518>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800996e:	e068      	b.n	8009a42 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	7d1b      	ldrb	r3, [r3, #20]
 8009974:	2b0a      	cmp	r3, #10
 8009976:	d006      	beq.n	8009986 <tcp_slowtmr+0x4a6>
 8009978:	4b1a      	ldr	r3, [pc, #104]	; (80099e4 <tcp_slowtmr+0x504>)
 800997a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800997e:	491f      	ldr	r1, [pc, #124]	; (80099fc <tcp_slowtmr+0x51c>)
 8009980:	481a      	ldr	r0, [pc, #104]	; (80099ec <tcp_slowtmr+0x50c>)
 8009982:	f006 fc33 	bl	80101ec <iprintf>
    pcb_remove = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800998a:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <tcp_slowtmr+0x4f4>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	2bf0      	cmp	r3, #240	; 0xf0
 8009996:	d902      	bls.n	800999e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8009998:	7ffb      	ldrb	r3, [r7, #31]
 800999a:	3301      	adds	r3, #1
 800999c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800999e:	7ffb      	ldrb	r3, [r7, #31]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d049      	beq.n	8009a38 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80099a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099a6:	f000 fad3 	bl	8009f50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d029      	beq.n	8009a04 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80099b0:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <tcp_slowtmr+0x518>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d106      	bne.n	80099c8 <tcp_slowtmr+0x4e8>
 80099ba:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <tcp_slowtmr+0x504>)
 80099bc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80099c0:	490f      	ldr	r1, [pc, #60]	; (8009a00 <tcp_slowtmr+0x520>)
 80099c2:	480a      	ldr	r0, [pc, #40]	; (80099ec <tcp_slowtmr+0x50c>)
 80099c4:	f006 fc12 	bl	80101ec <iprintf>
        prev->next = pcb->next;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	60da      	str	r2, [r3, #12]
 80099d0:	e028      	b.n	8009a24 <tcp_slowtmr+0x544>
 80099d2:	bf00      	nop
 80099d4:	2000bb24 	.word	0x2000bb24
 80099d8:	000124f8 	.word	0x000124f8
 80099dc:	10624dd3 	.word	0x10624dd3
 80099e0:	2000bb30 	.word	0x2000bb30
 80099e4:	08011bd4 	.word	0x08011bd4
 80099e8:	08011e0c 	.word	0x08011e0c
 80099ec:	08011c10 	.word	0x08011c10
 80099f0:	08011e38 	.word	0x08011e38
 80099f4:	2000bb38 	.word	0x2000bb38
 80099f8:	2000bb34 	.word	0x2000bb34
 80099fc:	08011e64 	.word	0x08011e64
 8009a00:	08011e94 	.word	0x08011e94
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009a04:	4b13      	ldr	r3, [pc, #76]	; (8009a54 <tcp_slowtmr+0x574>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d006      	beq.n	8009a1c <tcp_slowtmr+0x53c>
 8009a0e:	4b12      	ldr	r3, [pc, #72]	; (8009a58 <tcp_slowtmr+0x578>)
 8009a10:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009a14:	4911      	ldr	r1, [pc, #68]	; (8009a5c <tcp_slowtmr+0x57c>)
 8009a16:	4812      	ldr	r0, [pc, #72]	; (8009a60 <tcp_slowtmr+0x580>)
 8009a18:	f006 fbe8 	bl	80101ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	4a0c      	ldr	r2, [pc, #48]	; (8009a54 <tcp_slowtmr+0x574>)
 8009a22:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8009a2e:	69b9      	ldr	r1, [r7, #24]
 8009a30:	2001      	movs	r0, #1
 8009a32:	f7fe f9e5 	bl	8007e00 <memp_free>
 8009a36:	e004      	b.n	8009a42 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d193      	bne.n	8009970 <tcp_slowtmr+0x490>
    }
  }
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	3728      	adds	r7, #40	; 0x28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bdb0      	pop	{r4, r5, r7, pc}
 8009a52:	bf00      	nop
 8009a54:	2000bb34 	.word	0x2000bb34
 8009a58:	08011bd4 	.word	0x08011bd4
 8009a5c:	08011ebc 	.word	0x08011ebc
 8009a60:	08011c10 	.word	0x08011c10

08009a64 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009a6a:	4b2d      	ldr	r3, [pc, #180]	; (8009b20 <tcp_fasttmr+0xbc>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	4b2b      	ldr	r3, [pc, #172]	; (8009b20 <tcp_fasttmr+0xbc>)
 8009a74:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009a76:	4b2b      	ldr	r3, [pc, #172]	; (8009b24 <tcp_fasttmr+0xc0>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009a7c:	e048      	b.n	8009b10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7f5a      	ldrb	r2, [r3, #29]
 8009a82:	4b27      	ldr	r3, [pc, #156]	; (8009b20 <tcp_fasttmr+0xbc>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d03f      	beq.n	8009b0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009a8a:	4b25      	ldr	r3, [pc, #148]	; (8009b20 <tcp_fasttmr+0xbc>)
 8009a8c:	781a      	ldrb	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7e9b      	ldrb	r3, [r3, #26]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d010      	beq.n	8009ac0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7e9b      	ldrb	r3, [r3, #26]
 8009aa2:	f043 0302 	orr.w	r3, r3, #2
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f003 f859 	bl	800cb64 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7e9b      	ldrb	r3, [r3, #26]
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	7e9b      	ldrb	r3, [r3, #26]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d009      	beq.n	8009ae0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7e9b      	ldrb	r3, [r3, #26]
 8009ad0:	f023 0308 	bic.w	r3, r3, #8
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff fb18 	bl	8009110 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009aee:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <tcp_fasttmr+0xc4>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f819 	bl	8009b2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <tcp_fasttmr+0xc4>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d000      	beq.n	8009b04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009b02:	e7b8      	b.n	8009a76 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	607b      	str	r3, [r7, #4]
 8009b08:	e002      	b.n	8009b10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1b3      	bne.n	8009a7e <tcp_fasttmr+0x1a>
    }
  }
}
 8009b16:	bf00      	nop
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	2000bb3a 	.word	0x2000bb3a
 8009b24:	2000bb30 	.word	0x2000bb30
 8009b28:	2000bb38 	.word	0x2000bb38

08009b2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009b2c:	b590      	push	{r4, r7, lr}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b38:	7b5b      	ldrb	r3, [r3, #13]
 8009b3a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b40:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <tcp_process_refused_data+0x3e>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6918      	ldr	r0, [r3, #16]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	47a0      	blx	r4
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
 8009b68:	e007      	b.n	8009b7a <tcp_process_refused_data+0x4e>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	2000      	movs	r0, #0
 8009b72:	f000 f88d 	bl	8009c90 <tcp_recv_null>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d12a      	bne.n	8009bd8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d033      	beq.n	8009bf4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b90:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009b94:	d005      	beq.n	8009ba2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <tcp_process_refused_data+0x98>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6918      	ldr	r0, [r3, #16]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2200      	movs	r2, #0
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	47a0      	blx	r4
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73fb      	strb	r3, [r7, #15]
 8009bc2:	e001      	b.n	8009bc8 <tcp_process_refused_data+0x9c>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bcc:	f113 0f0d 	cmn.w	r3, #13
 8009bd0:	d110      	bne.n	8009bf4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8009bd2:	f06f 030c 	mvn.w	r3, #12
 8009bd6:	e00e      	b.n	8009bf6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8009bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bdc:	f113 0f0d 	cmn.w	r3, #13
 8009be0:	d102      	bne.n	8009be8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009be2:	f06f 030c 	mvn.w	r3, #12
 8009be6:	e006      	b.n	8009bf6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8009bee:	f06f 0304 	mvn.w	r3, #4
 8009bf2:	e000      	b.n	8009bf6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd90      	pop	{r4, r7, pc}

08009bfe <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009c06:	e007      	b.n	8009c18 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f80a 	bl	8009c28 <tcp_seg_free>
    seg = next;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f4      	bne.n	8009c08 <tcp_segs_free+0xa>
  }
}
 8009c1e:	bf00      	nop
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00c      	beq.n	8009c50 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fe96 	bl	8008974 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	2003      	movs	r0, #3
 8009c4c:	f7fe f8d8 	bl	8007e00 <memp_free>
  }
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009c60:	2003      	movs	r0, #3
 8009c62:	f7fe f87b 	bl	8007d5c <memp_malloc>
 8009c66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <tcp_seg_copy+0x1a>
    return NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e00a      	b.n	8009c88 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009c72:	2210      	movs	r2, #16
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f006 faa2 	bl	80101c0 <memcpy>
  pbuf_ref(cseg->p);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe ff27 	bl	8008ad4 <pbuf_ref>
  return cseg;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d009      	beq.n	8009cb8 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	891b      	ldrh	r3, [r3, #8]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	68b8      	ldr	r0, [r7, #8]
 8009cac:	f7ff fbbe 	bl	800942c <tcp_recved>
    pbuf_free(p);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7fe fe5f 	bl	8008974 <pbuf_free>
 8009cb6:	e008      	b.n	8009cca <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8009cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d104      	bne.n	8009cca <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f7ff fa8f 	bl	80091e4 <tcp_close>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	e000      	b.n	8009ccc <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	db01      	blt.n	8009cea <tcp_kill_prio+0x16>
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	e000      	b.n	8009cec <tcp_kill_prio+0x18>
 8009cea:	237f      	movs	r3, #127	; 0x7f
 8009cec:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cf6:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <tcp_kill_prio+0x7c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	e01a      	b.n	8009d34 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	7d5b      	ldrb	r3, [r3, #21]
 8009d02:	7afa      	ldrb	r2, [r7, #11]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d312      	bcc.n	8009d2e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d08:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <tcp_kill_prio+0x80>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d80a      	bhi.n	8009d2e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8009d18:	4b0e      	ldr	r3, [pc, #56]	; (8009d54 <tcp_kill_prio+0x80>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	7d5b      	ldrb	r3, [r3, #21]
 8009d2c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e1      	bne.n	8009cfe <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d40:	6938      	ldr	r0, [r7, #16]
 8009d42:	f7ff fb19 	bl	8009378 <tcp_abort>
  }
}
 8009d46:	bf00      	nop
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2000bb30 	.word	0x2000bb30
 8009d54:	2000bb24 	.word	0x2000bb24

08009d58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d009      	beq.n	8009d7c <tcp_kill_state+0x24>
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d006      	beq.n	8009d7c <tcp_kill_state+0x24>
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <tcp_kill_state+0x80>)
 8009d70:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009d74:	4919      	ldr	r1, [pc, #100]	; (8009ddc <tcp_kill_state+0x84>)
 8009d76:	481a      	ldr	r0, [pc, #104]	; (8009de0 <tcp_kill_state+0x88>)
 8009d78:	f006 fa38 	bl	80101ec <iprintf>

  inactivity = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d84:	4b17      	ldr	r3, [pc, #92]	; (8009de4 <tcp_kill_state+0x8c>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e017      	b.n	8009dbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	7d1b      	ldrb	r3, [r3, #20]
 8009d90:	79fa      	ldrb	r2, [r7, #7]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d10f      	bne.n	8009db6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d96:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <tcp_kill_state+0x90>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d807      	bhi.n	8009db6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <tcp_kill_state+0x90>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e4      	bne.n	8009d8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d003      	beq.n	8009dd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009dc8:	2100      	movs	r1, #0
 8009dca:	6938      	ldr	r0, [r7, #16]
 8009dcc:	f7ff fa22 	bl	8009214 <tcp_abandon>
  }
}
 8009dd0:	bf00      	nop
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	08011bd4 	.word	0x08011bd4
 8009ddc:	08011ee4 	.word	0x08011ee4
 8009de0:	08011c10 	.word	0x08011c10
 8009de4:	2000bb30 	.word	0x2000bb30
 8009de8:	2000bb24 	.word	0x2000bb24

08009dec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dfa:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <tcp_kill_timewait+0x58>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e012      	b.n	8009e28 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e02:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <tcp_kill_timewait+0x5c>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d807      	bhi.n	8009e22 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009e12:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <tcp_kill_timewait+0x5c>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e9      	bne.n	8009e02 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009e34:	68b8      	ldr	r0, [r7, #8]
 8009e36:	f7ff fa9f 	bl	8009378 <tcp_abort>
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	2000bb34 	.word	0x2000bb34
 8009e48:	2000bb24 	.word	0x2000bb24

08009e4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e56:	2001      	movs	r0, #1
 8009e58:	f7fd ff80 	bl	8007d5c <memp_malloc>
 8009e5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d124      	bne.n	8009eae <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009e64:	f7ff ffc2 	bl	8009dec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e68:	2001      	movs	r0, #1
 8009e6a:	f7fd ff77 	bl	8007d5c <memp_malloc>
 8009e6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d11b      	bne.n	8009eae <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009e76:	2009      	movs	r0, #9
 8009e78:	f7ff ff6e 	bl	8009d58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	f7fd ff6d 	bl	8007d5c <memp_malloc>
 8009e82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d111      	bne.n	8009eae <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009e8a:	2008      	movs	r0, #8
 8009e8c:	f7ff ff64 	bl	8009d58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e90:	2001      	movs	r0, #1
 8009e92:	f7fd ff63 	bl	8007d5c <memp_malloc>
 8009e96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d107      	bne.n	8009eae <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff ff17 	bl	8009cd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f7fd ff58 	bl	8007d5c <memp_malloc>
 8009eac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d03f      	beq.n	8009f34 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009eb4:	2298      	movs	r2, #152	; 0x98
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f006 f98f 	bl	80101dc <memset>
    pcb->prio = prio;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	79fa      	ldrb	r2, [r7, #7]
 8009ec2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009eca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	22ff      	movs	r2, #255	; 0xff
 8009ee2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009eea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2206      	movs	r2, #6
 8009ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2206      	movs	r2, #6
 8009ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f00:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009f0a:	4b0d      	ldr	r3, [pc, #52]	; (8009f40 <tcp_alloc+0xf4>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009f12:	4b0c      	ldr	r3, [pc, #48]	; (8009f44 <tcp_alloc+0xf8>)
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009f20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4a08      	ldr	r2, [pc, #32]	; (8009f48 <tcp_alloc+0xfc>)
 8009f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a07      	ldr	r2, [pc, #28]	; (8009f4c <tcp_alloc+0x100>)
 8009f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009f34:	68fb      	ldr	r3, [r7, #12]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	2000bb24 	.word	0x2000bb24
 8009f44:	2000bb3a 	.word	0x2000bb3a
 8009f48:	08009c91 	.word	0x08009c91
 8009f4c:	006ddd00 	.word	0x006ddd00

08009f50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7d1b      	ldrb	r3, [r3, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d034      	beq.n	8009fca <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009f64:	2b0a      	cmp	r3, #10
 8009f66:	d030      	beq.n	8009fca <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d02c      	beq.n	8009fca <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fcf9 	bl	8008974 <pbuf_free>
      pcb->refused_data = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fe36 	bl	8009bfe <tcp_segs_free>
    pcb->ooseq = NULL;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f9e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff fe2a 	bl	8009bfe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff fe25 	bl	8009bfe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	669a      	str	r2, [r3, #104]	; 0x68
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d105      	bne.n	8009ff4 <tcp_pcb_remove+0x20>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e013      	b.n	800a01c <tcp_pcb_remove+0x48>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e00c      	b.n	800a016 <tcp_pcb_remove+0x42>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d104      	bne.n	800a010 <tcp_pcb_remove+0x3c>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	60da      	str	r2, [r3, #12]
 800a00e:	e005      	b.n	800a01c <tcp_pcb_remove+0x48>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1ef      	bne.n	8009ffc <tcp_pcb_remove+0x28>
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2200      	movs	r2, #0
 800a020:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a022:	6838      	ldr	r0, [r7, #0]
 800a024:	f7ff ff94 	bl	8009f50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	7d1b      	ldrb	r3, [r3, #20]
 800a02c:	2b0a      	cmp	r3, #10
 800a02e:	d013      	beq.n	800a058 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800a034:	2b01      	cmp	r3, #1
 800a036:	d00f      	beq.n	800a058 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	7e9b      	ldrb	r3, [r3, #26]
 800a03c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800a040:	2b00      	cmp	r3, #0
 800a042:	d009      	beq.n	800a058 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	7e9b      	ldrb	r3, [r3, #26]
 800a048:	f043 0302 	orr.w	r3, r3, #2
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a052:	6838      	ldr	r0, [r7, #0]
 800a054:	f002 fd86 	bl	800cb64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	7d1b      	ldrb	r3, [r3, #20]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d020      	beq.n	800a0a2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a064:	2b00      	cmp	r3, #0
 800a066:	d006      	beq.n	800a076 <tcp_pcb_remove+0xa2>
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <tcp_pcb_remove+0xe4>)
 800a06a:	f240 7253 	movw	r2, #1875	; 0x753
 800a06e:	4913      	ldr	r1, [pc, #76]	; (800a0bc <tcp_pcb_remove+0xe8>)
 800a070:	4813      	ldr	r0, [pc, #76]	; (800a0c0 <tcp_pcb_remove+0xec>)
 800a072:	f006 f8bb 	bl	80101ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d006      	beq.n	800a08c <tcp_pcb_remove+0xb8>
 800a07e:	4b0e      	ldr	r3, [pc, #56]	; (800a0b8 <tcp_pcb_remove+0xe4>)
 800a080:	f240 7254 	movw	r2, #1876	; 0x754
 800a084:	490f      	ldr	r1, [pc, #60]	; (800a0c4 <tcp_pcb_remove+0xf0>)
 800a086:	480e      	ldr	r0, [pc, #56]	; (800a0c0 <tcp_pcb_remove+0xec>)
 800a088:	f006 f8b0 	bl	80101ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <tcp_pcb_remove+0xce>
 800a094:	4b08      	ldr	r3, [pc, #32]	; (800a0b8 <tcp_pcb_remove+0xe4>)
 800a096:	f240 7256 	movw	r2, #1878	; 0x756
 800a09a:	490b      	ldr	r1, [pc, #44]	; (800a0c8 <tcp_pcb_remove+0xf4>)
 800a09c:	4808      	ldr	r0, [pc, #32]	; (800a0c0 <tcp_pcb_remove+0xec>)
 800a09e:	f006 f8a5 	bl	80101ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	08011bd4 	.word	0x08011bd4
 800a0bc:	08011f8c 	.word	0x08011f8c
 800a0c0:	08011c10 	.word	0x08011c10
 800a0c4:	08011fa4 	.word	0x08011fa4
 800a0c8:	08011fc0 	.word	0x08011fc0

0800a0cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <tcp_next_iss+0x24>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <tcp_next_iss+0x28>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4413      	add	r3, r2
 800a0de:	4a04      	ldr	r2, [pc, #16]	; (800a0f0 <tcp_next_iss+0x24>)
 800a0e0:	6013      	str	r3, [r2, #0]
  return iss;
 800a0e2:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <tcp_next_iss+0x24>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bc80      	pop	{r7}
 800a0ee:	4770      	bx	lr
 800a0f0:	20000010 	.word	0x20000010
 800a0f4:	2000bb24 	.word	0x2000bb24

0800a0f8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800a104:	6838      	ldr	r0, [r7, #0]
 800a106:	f004 fd91 	bl	800ec2c <ip4_route>
 800a10a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	e010      	b.n	800a138 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a11a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a11c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d008      	beq.n	800a136 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800a124:	897b      	ldrh	r3, [r7, #10]
 800a126:	3b28      	subs	r3, #40	; 0x28
 800a128:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a12a:	893a      	ldrh	r2, [r7, #8]
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	4293      	cmp	r3, r2
 800a130:	bf28      	it	cs
 800a132:	4613      	movcs	r3, r2
 800a134:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800a136:	88fb      	ldrh	r3, [r7, #6]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a14e:	e011      	b.n	800a174 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d108      	bne.n	800a16e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff f908 	bl	8009378 <tcp_abort>
      pcb = next;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e002      	b.n	800a174 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1ea      	bne.n	800a150 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d02c      	beq.n	800a1ee <tcp_netif_ip_addr_changed+0x6a>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d028      	beq.n	800a1ee <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a19c:	4b16      	ldr	r3, [pc, #88]	; (800a1f8 <tcp_netif_ip_addr_changed+0x74>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff ffcc 	bl	800a140 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a1a8:	4b14      	ldr	r3, [pc, #80]	; (800a1fc <tcp_netif_ip_addr_changed+0x78>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff ffc6 	bl	800a140 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d019      	beq.n	800a1ee <tcp_netif_ip_addr_changed+0x6a>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d015      	beq.n	800a1ee <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <tcp_netif_ip_addr_changed+0x7c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	e00e      	b.n	800a1e8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d103      	bne.n	800a1e4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1ed      	bne.n	800a1ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	2000bb30 	.word	0x2000bb30
 800a1fc:	2000bb28 	.word	0x2000bb28
 800a200:	2000bb2c 	.word	0x2000bb2c

0800a204 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b08b      	sub	sp, #44	; 0x2c
 800a208:	af02      	add	r7, sp, #8
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4a82      	ldr	r2, [pc, #520]	; (800a41c <tcp_input+0x218>)
 800a214:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	895b      	ldrh	r3, [r3, #10]
 800a21a:	2b13      	cmp	r3, #19
 800a21c:	f240 8398 	bls.w	800a950 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a220:	4b7f      	ldr	r3, [pc, #508]	; (800a420 <tcp_input+0x21c>)
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	4a7e      	ldr	r2, [pc, #504]	; (800a420 <tcp_input+0x21c>)
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	4611      	mov	r1, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f004 ff7a 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 838e 	bne.w	800a954 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a238:	4b79      	ldr	r3, [pc, #484]	; (800a420 <tcp_input+0x21c>)
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a240:	2be0      	cmp	r3, #224	; 0xe0
 800a242:	f000 8387 	beq.w	800a954 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800a246:	4b75      	ldr	r3, [pc, #468]	; (800a41c <tcp_input+0x218>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	899b      	ldrh	r3, [r3, #12]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fd f998 	bl	8007584 <lwip_htons>
 800a254:	4603      	mov	r3, r0
 800a256:	0b1b      	lsrs	r3, r3, #12
 800a258:	b29b      	uxth	r3, r3
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a260:	7cbb      	ldrb	r3, [r7, #18]
 800a262:	2b13      	cmp	r3, #19
 800a264:	f240 8378 	bls.w	800a958 <tcp_input+0x754>
 800a268:	7cbb      	ldrb	r3, [r7, #18]
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	891b      	ldrh	r3, [r3, #8]
 800a270:	429a      	cmp	r2, r3
 800a272:	f200 8371 	bhi.w	800a958 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800a276:	7cbb      	ldrb	r3, [r7, #18]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b14      	subs	r3, #20
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	4b69      	ldr	r3, [pc, #420]	; (800a424 <tcp_input+0x220>)
 800a280:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a282:	4b69      	ldr	r3, [pc, #420]	; (800a428 <tcp_input+0x224>)
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	895a      	ldrh	r2, [r3, #10]
 800a28c:	7cbb      	ldrb	r3, [r7, #18]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	429a      	cmp	r2, r3
 800a292:	d30d      	bcc.n	800a2b0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a294:	4b63      	ldr	r3, [pc, #396]	; (800a424 <tcp_input+0x220>)
 800a296:	881a      	ldrh	r2, [r3, #0]
 800a298:	4b64      	ldr	r3, [pc, #400]	; (800a42c <tcp_input+0x228>)
 800a29a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800a29c:	7cbb      	ldrb	r3, [r7, #18]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	425b      	negs	r3, r3
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7fe fb3f 	bl	800892c <pbuf_header>
 800a2ae:	e055      	b.n	800a35c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d105      	bne.n	800a2c4 <tcp_input+0xc0>
 800a2b8:	4b5d      	ldr	r3, [pc, #372]	; (800a430 <tcp_input+0x22c>)
 800a2ba:	22b2      	movs	r2, #178	; 0xb2
 800a2bc:	495d      	ldr	r1, [pc, #372]	; (800a434 <tcp_input+0x230>)
 800a2be:	485e      	ldr	r0, [pc, #376]	; (800a438 <tcp_input+0x234>)
 800a2c0:	f005 ff94 	bl	80101ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800a2c4:	f06f 0113 	mvn.w	r1, #19
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7fe fb2f 	bl	800892c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	895a      	ldrh	r2, [r3, #10]
 800a2d2:	4b56      	ldr	r3, [pc, #344]	; (800a42c <tcp_input+0x228>)
 800a2d4:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800a2d6:	4b53      	ldr	r3, [pc, #332]	; (800a424 <tcp_input+0x220>)
 800a2d8:	881a      	ldrh	r2, [r3, #0]
 800a2da:	4b54      	ldr	r3, [pc, #336]	; (800a42c <tcp_input+0x228>)
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a2e2:	4b52      	ldr	r3, [pc, #328]	; (800a42c <tcp_input+0x228>)
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	425b      	negs	r3, r3
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	b21b      	sxth	r3, r3
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fe fb1c 	bl	800892c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	895b      	ldrh	r3, [r3, #10]
 800a2fa:	8a3a      	ldrh	r2, [r7, #16]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	f200 832d 	bhi.w	800a95c <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4a47      	ldr	r2, [pc, #284]	; (800a428 <tcp_input+0x224>)
 800a30a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	8a3b      	ldrh	r3, [r7, #16]
 800a312:	425b      	negs	r3, r3
 800a314:	b29b      	uxth	r3, r3
 800a316:	b21b      	sxth	r3, r3
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7fe fb06 	bl	800892c <pbuf_header>
    p->tot_len -= opt2len;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	891a      	ldrh	r2, [r3, #8]
 800a324:	8a3b      	ldrh	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	b29a      	uxth	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	895b      	ldrh	r3, [r3, #10]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <tcp_input+0x13e>
 800a336:	4b3e      	ldr	r3, [pc, #248]	; (800a430 <tcp_input+0x22c>)
 800a338:	22cf      	movs	r2, #207	; 0xcf
 800a33a:	4940      	ldr	r1, [pc, #256]	; (800a43c <tcp_input+0x238>)
 800a33c:	483e      	ldr	r0, [pc, #248]	; (800a438 <tcp_input+0x234>)
 800a33e:	f005 ff55 	bl	80101ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	891a      	ldrh	r2, [r3, #8]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	891b      	ldrh	r3, [r3, #8]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d005      	beq.n	800a35c <tcp_input+0x158>
 800a350:	4b37      	ldr	r3, [pc, #220]	; (800a430 <tcp_input+0x22c>)
 800a352:	22d0      	movs	r2, #208	; 0xd0
 800a354:	493a      	ldr	r1, [pc, #232]	; (800a440 <tcp_input+0x23c>)
 800a356:	4838      	ldr	r0, [pc, #224]	; (800a438 <tcp_input+0x234>)
 800a358:	f005 ff48 	bl	80101ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a35c:	4b2f      	ldr	r3, [pc, #188]	; (800a41c <tcp_input+0x218>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	b29b      	uxth	r3, r3
 800a364:	4a2d      	ldr	r2, [pc, #180]	; (800a41c <tcp_input+0x218>)
 800a366:	6814      	ldr	r4, [r2, #0]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fd f90b 	bl	8007584 <lwip_htons>
 800a36e:	4603      	mov	r3, r0
 800a370:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a372:	4b2a      	ldr	r3, [pc, #168]	; (800a41c <tcp_input+0x218>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	885b      	ldrh	r3, [r3, #2]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	4a28      	ldr	r2, [pc, #160]	; (800a41c <tcp_input+0x218>)
 800a37c:	6814      	ldr	r4, [r2, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd f900 	bl	8007584 <lwip_htons>
 800a384:	4603      	mov	r3, r0
 800a386:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a388:	4b24      	ldr	r3, [pc, #144]	; (800a41c <tcp_input+0x218>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	4a23      	ldr	r2, [pc, #140]	; (800a41c <tcp_input+0x218>)
 800a390:	6814      	ldr	r4, [r2, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd f903 	bl	800759e <lwip_htonl>
 800a398:	4603      	mov	r3, r0
 800a39a:	6063      	str	r3, [r4, #4]
 800a39c:	6863      	ldr	r3, [r4, #4]
 800a39e:	4a29      	ldr	r2, [pc, #164]	; (800a444 <tcp_input+0x240>)
 800a3a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a3a2:	4b1e      	ldr	r3, [pc, #120]	; (800a41c <tcp_input+0x218>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	4a1c      	ldr	r2, [pc, #112]	; (800a41c <tcp_input+0x218>)
 800a3aa:	6814      	ldr	r4, [r2, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd f8f6 	bl	800759e <lwip_htonl>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	60a3      	str	r3, [r4, #8]
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	4a23      	ldr	r2, [pc, #140]	; (800a448 <tcp_input+0x244>)
 800a3ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a3bc:	4b17      	ldr	r3, [pc, #92]	; (800a41c <tcp_input+0x218>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	89db      	ldrh	r3, [r3, #14]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	4a15      	ldr	r2, [pc, #84]	; (800a41c <tcp_input+0x218>)
 800a3c6:	6814      	ldr	r4, [r2, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fd f8db 	bl	8007584 <lwip_htons>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a3d2:	4b12      	ldr	r3, [pc, #72]	; (800a41c <tcp_input+0x218>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	899b      	ldrh	r3, [r3, #12]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd f8d2 	bl	8007584 <lwip_htons>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	4b18      	ldr	r3, [pc, #96]	; (800a44c <tcp_input+0x248>)
 800a3ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	891a      	ldrh	r2, [r3, #8]
 800a3f2:	4b16      	ldr	r3, [pc, #88]	; (800a44c <tcp_input+0x248>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bf14      	ite	ne
 800a3fe:	2301      	movne	r3, #1
 800a400:	2300      	moveq	r3, #0
 800a402:	b2db      	uxtb	r3, r3
 800a404:	b29b      	uxth	r3, r3
 800a406:	4413      	add	r3, r2
 800a408:	b29a      	uxth	r2, r3
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <tcp_input+0x24c>)
 800a40c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a412:	4b10      	ldr	r3, [pc, #64]	; (800a454 <tcp_input+0x250>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	61fb      	str	r3, [r7, #28]
 800a418:	e082      	b.n	800a520 <tcp_input+0x31c>
 800a41a:	bf00      	nop
 800a41c:	2000bb4c 	.word	0x2000bb4c
 800a420:	200083d4 	.word	0x200083d4
 800a424:	2000bb50 	.word	0x2000bb50
 800a428:	2000bb54 	.word	0x2000bb54
 800a42c:	2000bb52 	.word	0x2000bb52
 800a430:	08011fd8 	.word	0x08011fd8
 800a434:	0801200c 	.word	0x0801200c
 800a438:	0801201c 	.word	0x0801201c
 800a43c:	08012044 	.word	0x08012044
 800a440:	08012050 	.word	0x08012050
 800a444:	2000bb5c 	.word	0x2000bb5c
 800a448:	2000bb60 	.word	0x2000bb60
 800a44c:	2000bb68 	.word	0x2000bb68
 800a450:	2000bb66 	.word	0x2000bb66
 800a454:	2000bb30 	.word	0x2000bb30
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	7d1b      	ldrb	r3, [r3, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <tcp_input+0x268>
 800a460:	4b6e      	ldr	r3, [pc, #440]	; (800a61c <tcp_input+0x418>)
 800a462:	22e2      	movs	r2, #226	; 0xe2
 800a464:	496e      	ldr	r1, [pc, #440]	; (800a620 <tcp_input+0x41c>)
 800a466:	486f      	ldr	r0, [pc, #444]	; (800a624 <tcp_input+0x420>)
 800a468:	f005 fec0 	bl	80101ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	7d1b      	ldrb	r3, [r3, #20]
 800a470:	2b0a      	cmp	r3, #10
 800a472:	d105      	bne.n	800a480 <tcp_input+0x27c>
 800a474:	4b69      	ldr	r3, [pc, #420]	; (800a61c <tcp_input+0x418>)
 800a476:	22e3      	movs	r2, #227	; 0xe3
 800a478:	496b      	ldr	r1, [pc, #428]	; (800a628 <tcp_input+0x424>)
 800a47a:	486a      	ldr	r0, [pc, #424]	; (800a624 <tcp_input+0x420>)
 800a47c:	f005 feb6 	bl	80101ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	7d1b      	ldrb	r3, [r3, #20]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d105      	bne.n	800a494 <tcp_input+0x290>
 800a488:	4b64      	ldr	r3, [pc, #400]	; (800a61c <tcp_input+0x418>)
 800a48a:	22e4      	movs	r2, #228	; 0xe4
 800a48c:	4967      	ldr	r1, [pc, #412]	; (800a62c <tcp_input+0x428>)
 800a48e:	4865      	ldr	r0, [pc, #404]	; (800a624 <tcp_input+0x420>)
 800a490:	f005 feac 	bl	80101ec <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	8b1a      	ldrh	r2, [r3, #24]
 800a498:	4b65      	ldr	r3, [pc, #404]	; (800a630 <tcp_input+0x42c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d138      	bne.n	800a516 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	8ada      	ldrh	r2, [r3, #22]
 800a4a8:	4b61      	ldr	r3, [pc, #388]	; (800a630 <tcp_input+0x42c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	885b      	ldrh	r3, [r3, #2]
 800a4ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d130      	bne.n	800a516 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <tcp_input+0x430>)
 800a4ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d12a      	bne.n	800a516 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	4b5b      	ldr	r3, [pc, #364]	; (800a634 <tcp_input+0x430>)
 800a4c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d124      	bne.n	800a516 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d105      	bne.n	800a4e2 <tcp_input+0x2de>
 800a4d6:	4b51      	ldr	r3, [pc, #324]	; (800a61c <tcp_input+0x418>)
 800a4d8:	22ec      	movs	r2, #236	; 0xec
 800a4da:	4957      	ldr	r1, [pc, #348]	; (800a638 <tcp_input+0x434>)
 800a4dc:	4851      	ldr	r0, [pc, #324]	; (800a624 <tcp_input+0x420>)
 800a4de:	f005 fe85 	bl	80101ec <iprintf>
      if (prev != NULL) {
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00a      	beq.n	800a4fe <tcp_input+0x2fa>
        prev->next = pcb->next;
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a4f0:	4b52      	ldr	r3, [pc, #328]	; (800a63c <tcp_input+0x438>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a4f8:	4a50      	ldr	r2, [pc, #320]	; (800a63c <tcp_input+0x438>)
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	69fa      	ldr	r2, [r7, #28]
 800a504:	429a      	cmp	r2, r3
 800a506:	d10f      	bne.n	800a528 <tcp_input+0x324>
 800a508:	4b44      	ldr	r3, [pc, #272]	; (800a61c <tcp_input+0x418>)
 800a50a:	22f4      	movs	r2, #244	; 0xf4
 800a50c:	494c      	ldr	r1, [pc, #304]	; (800a640 <tcp_input+0x43c>)
 800a50e:	4845      	ldr	r0, [pc, #276]	; (800a624 <tcp_input+0x420>)
 800a510:	f005 fe6c 	bl	80101ec <iprintf>
      break;
 800a514:	e008      	b.n	800a528 <tcp_input+0x324>
    }
    prev = pcb;
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d198      	bne.n	800a458 <tcp_input+0x254>
 800a526:	e000      	b.n	800a52a <tcp_input+0x326>
      break;
 800a528:	bf00      	nop
  }

  if (pcb == NULL) {
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 808f 	bne.w	800a650 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a532:	4b44      	ldr	r3, [pc, #272]	; (800a644 <tcp_input+0x440>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	61fb      	str	r3, [r7, #28]
 800a538:	e02f      	b.n	800a59a <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	7d1b      	ldrb	r3, [r3, #20]
 800a53e:	2b0a      	cmp	r3, #10
 800a540:	d005      	beq.n	800a54e <tcp_input+0x34a>
 800a542:	4b36      	ldr	r3, [pc, #216]	; (800a61c <tcp_input+0x418>)
 800a544:	22fe      	movs	r2, #254	; 0xfe
 800a546:	4940      	ldr	r1, [pc, #256]	; (800a648 <tcp_input+0x444>)
 800a548:	4836      	ldr	r0, [pc, #216]	; (800a624 <tcp_input+0x420>)
 800a54a:	f005 fe4f 	bl	80101ec <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	8b1a      	ldrh	r2, [r3, #24]
 800a552:	4b37      	ldr	r3, [pc, #220]	; (800a630 <tcp_input+0x42c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d11a      	bne.n	800a594 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	8ada      	ldrh	r2, [r3, #22]
 800a562:	4b33      	ldr	r3, [pc, #204]	; (800a630 <tcp_input+0x42c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	885b      	ldrh	r3, [r3, #2]
 800a568:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d112      	bne.n	800a594 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	4b30      	ldr	r3, [pc, #192]	; (800a634 <tcp_input+0x430>)
 800a574:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a576:	429a      	cmp	r2, r3
 800a578:	d10c      	bne.n	800a594 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	4b2d      	ldr	r3, [pc, #180]	; (800a634 <tcp_input+0x430>)
 800a580:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a582:	429a      	cmp	r2, r3
 800a584:	d106      	bne.n	800a594 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800a586:	69f8      	ldr	r0, [r7, #28]
 800a588:	f000 fb16 	bl	800abb8 <tcp_timewait_input>
        pbuf_free(p);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7fe f9f1 	bl	8008974 <pbuf_free>
        return;
 800a592:	e1e9      	b.n	800a968 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	61fb      	str	r3, [r7, #28]
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1cc      	bne.n	800a53a <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5a4:	4b29      	ldr	r3, [pc, #164]	; (800a64c <tcp_input+0x448>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	e019      	b.n	800a5e0 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	8ada      	ldrh	r2, [r3, #22]
 800a5b0:	4b1f      	ldr	r3, [pc, #124]	; (800a630 <tcp_input+0x42c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	885b      	ldrh	r3, [r3, #2]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d10c      	bne.n	800a5d6 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <tcp_input+0x430>)
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d00f      	beq.n	800a5e8 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00d      	beq.n	800a5ea <tcp_input+0x3e6>
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d009      	beq.n	800a5ea <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e2      	bne.n	800a5ac <tcp_input+0x3a8>
 800a5e6:	e000      	b.n	800a5ea <tcp_input+0x3e6>
            break;
 800a5e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d02f      	beq.n	800a650 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	68da      	ldr	r2, [r3, #12]
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <tcp_input+0x448>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a606:	4a11      	ldr	r2, [pc, #68]	; (800a64c <tcp_input+0x448>)
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f000 f9f3 	bl	800a9f8 <tcp_listen_input>
      pbuf_free(p);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7fe f9ae 	bl	8008974 <pbuf_free>
      return;
 800a618:	e1a6      	b.n	800a968 <tcp_input+0x764>
 800a61a:	bf00      	nop
 800a61c:	08011fd8 	.word	0x08011fd8
 800a620:	08012070 	.word	0x08012070
 800a624:	0801201c 	.word	0x0801201c
 800a628:	08012098 	.word	0x08012098
 800a62c:	080120c4 	.word	0x080120c4
 800a630:	2000bb4c 	.word	0x2000bb4c
 800a634:	200083d4 	.word	0x200083d4
 800a638:	080120ec 	.word	0x080120ec
 800a63c:	2000bb30 	.word	0x2000bb30
 800a640:	08012118 	.word	0x08012118
 800a644:	2000bb34 	.word	0x2000bb34
 800a648:	08012144 	.word	0x08012144
 800a64c:	2000bb2c 	.word	0x2000bb2c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8156 	beq.w	800a904 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a658:	4b94      	ldr	r3, [pc, #592]	; (800a8ac <tcp_input+0x6a8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	891a      	ldrh	r2, [r3, #8]
 800a662:	4b92      	ldr	r3, [pc, #584]	; (800a8ac <tcp_input+0x6a8>)
 800a664:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a666:	4a91      	ldr	r2, [pc, #580]	; (800a8ac <tcp_input+0x6a8>)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a66c:	4b90      	ldr	r3, [pc, #576]	; (800a8b0 <tcp_input+0x6ac>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a8e      	ldr	r2, [pc, #568]	; (800a8ac <tcp_input+0x6a8>)
 800a672:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a674:	4b8f      	ldr	r3, [pc, #572]	; (800a8b4 <tcp_input+0x6b0>)
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a67a:	4b8f      	ldr	r3, [pc, #572]	; (800a8b8 <tcp_input+0x6b4>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a680:	4b8e      	ldr	r3, [pc, #568]	; (800a8bc <tcp_input+0x6b8>)
 800a682:	2200      	movs	r2, #0
 800a684:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a686:	4b8e      	ldr	r3, [pc, #568]	; (800a8c0 <tcp_input+0x6bc>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	f003 0308 	and.w	r3, r3, #8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d006      	beq.n	800a6a0 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	7b5b      	ldrb	r3, [r3, #13]
 800a696:	f043 0301 	orr.w	r3, r3, #1
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d017      	beq.n	800a6d8 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a6a8:	69f8      	ldr	r0, [r7, #28]
 800a6aa:	f7ff fa3f 	bl	8009b2c <tcp_process_refused_data>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	f113 0f0d 	cmn.w	r3, #13
 800a6b4:	d007      	beq.n	800a6c6 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00c      	beq.n	800a6d8 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a6be:	4b81      	ldr	r3, [pc, #516]	; (800a8c4 <tcp_input+0x6c0>)
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d008      	beq.n	800a6d8 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f040 80e2 	bne.w	800a894 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a6d0:	69f8      	ldr	r0, [r7, #28]
 800a6d2:	f002 f9eb 	bl	800caac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a6d6:	e0dd      	b.n	800a894 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 800a6d8:	4a7b      	ldr	r2, [pc, #492]	; (800a8c8 <tcp_input+0x6c4>)
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a6de:	69f8      	ldr	r0, [r7, #28]
 800a6e0:	f000 fad2 	bl	800ac88 <tcp_process>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a6e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6ec:	f113 0f0d 	cmn.w	r3, #13
 800a6f0:	f000 80d2 	beq.w	800a898 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 800a6f4:	4b70      	ldr	r3, [pc, #448]	; (800a8b8 <tcp_input+0x6b4>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d016      	beq.n	800a72e <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d008      	beq.n	800a71c <tcp_input+0x518>
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	6912      	ldr	r2, [r2, #16]
 800a714:	f06f 010d 	mvn.w	r1, #13
 800a718:	4610      	mov	r0, r2
 800a71a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a71c:	69f9      	ldr	r1, [r7, #28]
 800a71e:	486b      	ldr	r0, [pc, #428]	; (800a8cc <tcp_input+0x6c8>)
 800a720:	f7ff fc58 	bl	8009fd4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800a724:	69f9      	ldr	r1, [r7, #28]
 800a726:	2001      	movs	r0, #1
 800a728:	f7fd fb6a 	bl	8007e00 <memp_free>
 800a72c:	e0d7      	b.n	800a8de <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a732:	4b62      	ldr	r3, [pc, #392]	; (800a8bc <tcp_input+0x6b8>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d01b      	beq.n	800a772 <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a73a:	4b60      	ldr	r3, [pc, #384]	; (800a8bc <tcp_input+0x6b8>)
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d009      	beq.n	800a75c <tcp_input+0x558>
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	6910      	ldr	r0, [r2, #16]
 800a750:	89fa      	ldrh	r2, [r7, #14]
 800a752:	69f9      	ldr	r1, [r7, #28]
 800a754:	4798      	blx	r3
 800a756:	4603      	mov	r3, r0
 800a758:	74fb      	strb	r3, [r7, #19]
 800a75a:	e001      	b.n	800a760 <tcp_input+0x55c>
 800a75c:	2300      	movs	r3, #0
 800a75e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a764:	f113 0f0d 	cmn.w	r3, #13
 800a768:	f000 8098 	beq.w	800a89c <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a76c:	4b53      	ldr	r3, [pc, #332]	; (800a8bc <tcp_input+0x6b8>)
 800a76e:	2200      	movs	r2, #0
 800a770:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a772:	69f8      	ldr	r0, [r7, #28]
 800a774:	f000 f90e 	bl	800a994 <tcp_input_delayed_close>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 8090 	bne.w	800a8a0 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a780:	4b4c      	ldr	r3, [pc, #304]	; (800a8b4 <tcp_input+0x6b0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d041      	beq.n	800a80c <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d006      	beq.n	800a79e <tcp_input+0x59a>
 800a790:	4b4f      	ldr	r3, [pc, #316]	; (800a8d0 <tcp_input+0x6cc>)
 800a792:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800a796:	494f      	ldr	r1, [pc, #316]	; (800a8d4 <tcp_input+0x6d0>)
 800a798:	484f      	ldr	r0, [pc, #316]	; (800a8d8 <tcp_input+0x6d4>)
 800a79a:	f005 fd27 	bl	80101ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	7e9b      	ldrb	r3, [r3, #26]
 800a7a2:	f003 0310 	and.w	r3, r3, #16
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d008      	beq.n	800a7bc <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a7aa:	4b42      	ldr	r3, [pc, #264]	; (800a8b4 <tcp_input+0x6b0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe f8e0 	bl	8008974 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a7b4:	69f8      	ldr	r0, [r7, #28]
 800a7b6:	f7fe fddf 	bl	8009378 <tcp_abort>
            goto aborted;
 800a7ba:	e090      	b.n	800a8de <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00c      	beq.n	800a7e0 <tcp_input+0x5dc>
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	6918      	ldr	r0, [r3, #16]
 800a7d0:	4b38      	ldr	r3, [pc, #224]	; (800a8b4 <tcp_input+0x6b0>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	69f9      	ldr	r1, [r7, #28]
 800a7d8:	47a0      	blx	r4
 800a7da:	4603      	mov	r3, r0
 800a7dc:	74fb      	strb	r3, [r7, #19]
 800a7de:	e008      	b.n	800a7f2 <tcp_input+0x5ee>
 800a7e0:	4b34      	ldr	r3, [pc, #208]	; (800a8b4 <tcp_input+0x6b0>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	69f9      	ldr	r1, [r7, #28]
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f7ff fa51 	bl	8009c90 <tcp_recv_null>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a7f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7f6:	f113 0f0d 	cmn.w	r3, #13
 800a7fa:	d053      	beq.n	800a8a4 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a7fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d003      	beq.n	800a80c <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a804:	4b2b      	ldr	r3, [pc, #172]	; (800a8b4 <tcp_input+0x6b0>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a80c:	4b2a      	ldr	r3, [pc, #168]	; (800a8b8 <tcp_input+0x6b4>)
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b00      	cmp	r3, #0
 800a816:	d030      	beq.n	800a87a <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a824:	7b5a      	ldrb	r2, [r3, #13]
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a82a:	f042 0220 	orr.w	r2, r2, #32
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	735a      	strb	r2, [r3, #13]
 800a832:	e022      	b.n	800a87a <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a838:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a83c:	d005      	beq.n	800a84a <tcp_input+0x646>
              pcb->rcv_wnd++;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a842:	3301      	adds	r3, #1
 800a844:	b29a      	uxth	r2, r3
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00b      	beq.n	800a86c <tcp_input+0x668>
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	6918      	ldr	r0, [r3, #16]
 800a85e:	2300      	movs	r3, #0
 800a860:	2200      	movs	r2, #0
 800a862:	69f9      	ldr	r1, [r7, #28]
 800a864:	47a0      	blx	r4
 800a866:	4603      	mov	r3, r0
 800a868:	74fb      	strb	r3, [r7, #19]
 800a86a:	e001      	b.n	800a870 <tcp_input+0x66c>
 800a86c:	2300      	movs	r3, #0
 800a86e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a870:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a874:	f113 0f0d 	cmn.w	r3, #13
 800a878:	d016      	beq.n	800a8a8 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a87a:	4b13      	ldr	r3, [pc, #76]	; (800a8c8 <tcp_input+0x6c4>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a880:	69f8      	ldr	r0, [r7, #28]
 800a882:	f000 f887 	bl	800a994 <tcp_input_delayed_close>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d127      	bne.n	800a8dc <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a88c:	69f8      	ldr	r0, [r7, #28]
 800a88e:	f002 f969 	bl	800cb64 <tcp_output>
 800a892:	e024      	b.n	800a8de <tcp_input+0x6da>
        goto aborted;
 800a894:	bf00      	nop
 800a896:	e022      	b.n	800a8de <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a898:	bf00      	nop
 800a89a:	e020      	b.n	800a8de <tcp_input+0x6da>
              goto aborted;
 800a89c:	bf00      	nop
 800a89e:	e01e      	b.n	800a8de <tcp_input+0x6da>
          goto aborted;
 800a8a0:	bf00      	nop
 800a8a2:	e01c      	b.n	800a8de <tcp_input+0x6da>
            goto aborted;
 800a8a4:	bf00      	nop
 800a8a6:	e01a      	b.n	800a8de <tcp_input+0x6da>
              goto aborted;
 800a8a8:	bf00      	nop
 800a8aa:	e018      	b.n	800a8de <tcp_input+0x6da>
 800a8ac:	2000bb3c 	.word	0x2000bb3c
 800a8b0:	2000bb4c 	.word	0x2000bb4c
 800a8b4:	2000bb6c 	.word	0x2000bb6c
 800a8b8:	2000bb69 	.word	0x2000bb69
 800a8bc:	2000bb64 	.word	0x2000bb64
 800a8c0:	2000bb68 	.word	0x2000bb68
 800a8c4:	2000bb66 	.word	0x2000bb66
 800a8c8:	2000bb70 	.word	0x2000bb70
 800a8cc:	2000bb30 	.word	0x2000bb30
 800a8d0:	08011fd8 	.word	0x08011fd8
 800a8d4:	08012174 	.word	0x08012174
 800a8d8:	0801201c 	.word	0x0801201c
          goto aborted;
 800a8dc:	bf00      	nop
    tcp_input_pcb = NULL;
 800a8de:	4b24      	ldr	r3, [pc, #144]	; (800a970 <tcp_input+0x76c>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a8e4:	4b23      	ldr	r3, [pc, #140]	; (800a974 <tcp_input+0x770>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800a8ea:	4b23      	ldr	r3, [pc, #140]	; (800a978 <tcp_input+0x774>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d039      	beq.n	800a966 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 800a8f2:	4b21      	ldr	r3, [pc, #132]	; (800a978 <tcp_input+0x774>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe f83c 	bl	8008974 <pbuf_free>
      inseg.p = NULL;
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <tcp_input+0x774>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a902:	e030      	b.n	800a966 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a904:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <tcp_input+0x778>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	899b      	ldrh	r3, [r3, #12]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fc fe39 	bl	8007584 <lwip_htons>
 800a912:	4603      	mov	r3, r0
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d115      	bne.n	800a948 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a91c:	4b18      	ldr	r3, [pc, #96]	; (800a980 <tcp_input+0x77c>)
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	4b18      	ldr	r3, [pc, #96]	; (800a984 <tcp_input+0x780>)
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	4b18      	ldr	r3, [pc, #96]	; (800a988 <tcp_input+0x784>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a92c:	4b13      	ldr	r3, [pc, #76]	; (800a97c <tcp_input+0x778>)
 800a92e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a930:	885b      	ldrh	r3, [r3, #2]
 800a932:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a934:	4a11      	ldr	r2, [pc, #68]	; (800a97c <tcp_input+0x778>)
 800a936:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a938:	8812      	ldrh	r2, [r2, #0]
 800a93a:	b292      	uxth	r2, r2
 800a93c:	9201      	str	r2, [sp, #4]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	4b12      	ldr	r3, [pc, #72]	; (800a98c <tcp_input+0x788>)
 800a942:	4a13      	ldr	r2, [pc, #76]	; (800a990 <tcp_input+0x78c>)
 800a944:	f002 fb92 	bl	800d06c <tcp_rst>
    pbuf_free(p);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7fe f813 	bl	8008974 <pbuf_free>
  return;
 800a94e:	e00a      	b.n	800a966 <tcp_input+0x762>
    goto dropped;
 800a950:	bf00      	nop
 800a952:	e004      	b.n	800a95e <tcp_input+0x75a>
    goto dropped;
 800a954:	bf00      	nop
 800a956:	e002      	b.n	800a95e <tcp_input+0x75a>
    goto dropped;
 800a958:	bf00      	nop
 800a95a:	e000      	b.n	800a95e <tcp_input+0x75a>
      goto dropped;
 800a95c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7fe f808 	bl	8008974 <pbuf_free>
 800a964:	e000      	b.n	800a968 <tcp_input+0x764>
  return;
 800a966:	bf00      	nop
}
 800a968:	3724      	adds	r7, #36	; 0x24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd90      	pop	{r4, r7, pc}
 800a96e:	bf00      	nop
 800a970:	2000bb70 	.word	0x2000bb70
 800a974:	2000bb6c 	.word	0x2000bb6c
 800a978:	2000bb3c 	.word	0x2000bb3c
 800a97c:	2000bb4c 	.word	0x2000bb4c
 800a980:	2000bb60 	.word	0x2000bb60
 800a984:	2000bb66 	.word	0x2000bb66
 800a988:	2000bb5c 	.word	0x2000bb5c
 800a98c:	200083e4 	.word	0x200083e4
 800a990:	200083e8 	.word	0x200083e8

0800a994 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800a99c:	4b14      	ldr	r3, [pc, #80]	; (800a9f0 <tcp_input_delayed_close+0x5c>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01d      	beq.n	800a9e4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7e9b      	ldrb	r3, [r3, #26]
 800a9ac:	f003 0310 	and.w	r3, r3, #16
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10d      	bne.n	800a9d0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d008      	beq.n	800a9d0 <tcp_input_delayed_close+0x3c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	6912      	ldr	r2, [r2, #16]
 800a9c8:	f06f 010e 	mvn.w	r1, #14
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	4808      	ldr	r0, [pc, #32]	; (800a9f4 <tcp_input_delayed_close+0x60>)
 800a9d4:	f7ff fafe 	bl	8009fd4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a9d8:	6879      	ldr	r1, [r7, #4]
 800a9da:	2001      	movs	r0, #1
 800a9dc:	f7fd fa10 	bl	8007e00 <memp_free>
    return 1;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	2000bb69 	.word	0x2000bb69
 800a9f4:	2000bb30 	.word	0x2000bb30

0800a9f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aa00:	4b63      	ldr	r3, [pc, #396]	; (800ab90 <tcp_listen_input+0x198>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f040 80bb 	bne.w	800ab84 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aa0e:	4b60      	ldr	r3, [pc, #384]	; (800ab90 <tcp_listen_input+0x198>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d016      	beq.n	800aa48 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa1a:	4b5e      	ldr	r3, [pc, #376]	; (800ab94 <tcp_listen_input+0x19c>)
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	4b5e      	ldr	r3, [pc, #376]	; (800ab98 <tcp_listen_input+0x1a0>)
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	4b5d      	ldr	r3, [pc, #372]	; (800ab9c <tcp_listen_input+0x1a4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa2a:	4b5d      	ldr	r3, [pc, #372]	; (800aba0 <tcp_listen_input+0x1a8>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa2e:	885b      	ldrh	r3, [r3, #2]
 800aa30:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa32:	4a5b      	ldr	r2, [pc, #364]	; (800aba0 <tcp_listen_input+0x1a8>)
 800aa34:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa36:	8812      	ldrh	r2, [r2, #0]
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	9201      	str	r2, [sp, #4]
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	4b59      	ldr	r3, [pc, #356]	; (800aba4 <tcp_listen_input+0x1ac>)
 800aa40:	4a59      	ldr	r2, [pc, #356]	; (800aba8 <tcp_listen_input+0x1b0>)
 800aa42:	f002 fb13 	bl	800d06c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800aa46:	e09f      	b.n	800ab88 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800aa48:	4b51      	ldr	r3, [pc, #324]	; (800ab90 <tcp_listen_input+0x198>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 0302 	and.w	r3, r3, #2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 8099 	beq.w	800ab88 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7d5b      	ldrb	r3, [r3, #21]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff f9f6 	bl	8009e4c <tcp_alloc>
 800aa60:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d111      	bne.n	800aa8c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00a      	beq.n	800aa86 <tcp_listen_input+0x8e>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6910      	ldr	r0, [r2, #16]
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4798      	blx	r3
 800aa80:	4603      	mov	r3, r0
 800aa82:	73bb      	strb	r3, [r7, #14]
      return;
 800aa84:	e081      	b.n	800ab8a <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa86:	23f0      	movs	r3, #240	; 0xf0
 800aa88:	73bb      	strb	r3, [r7, #14]
      return;
 800aa8a:	e07e      	b.n	800ab8a <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aa8c:	4b47      	ldr	r3, [pc, #284]	; (800abac <tcp_listen_input+0x1b4>)
 800aa8e:	695a      	ldr	r2, [r3, #20]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aa94:	4b45      	ldr	r3, [pc, #276]	; (800abac <tcp_listen_input+0x1b4>)
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	8ada      	ldrh	r2, [r3, #22]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aaa4:	4b3e      	ldr	r3, [pc, #248]	; (800aba0 <tcp_listen_input+0x1a8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2203      	movs	r2, #3
 800aab4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aab6:	4b39      	ldr	r3, [pc, #228]	; (800ab9c <tcp_listen_input+0x1a4>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aac8:	6978      	ldr	r0, [r7, #20]
 800aaca:	f7ff faff 	bl	800a0cc <tcp_next_iss>
 800aace:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aae8:	4b2c      	ldr	r3, [pc, #176]	; (800ab9c <tcp_listen_input+0x1a4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	1e5a      	subs	r2, r3, #1
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7a1b      	ldrb	r3, [r3, #8]
 800ab04:	f003 030c 	and.w	r3, r3, #12
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ab0e:	4b28      	ldr	r3, [pc, #160]	; (800abb0 <tcp_listen_input+0x1b8>)
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	60da      	str	r2, [r3, #12]
 800ab16:	4a26      	ldr	r2, [pc, #152]	; (800abb0 <tcp_listen_input+0x1b8>)
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	f002 fcee 	bl	800d4fc <tcp_timer_needed>
 800ab20:	4b24      	ldr	r3, [pc, #144]	; (800abb4 <tcp_listen_input+0x1bc>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ab26:	6978      	ldr	r0, [r7, #20]
 800ab28:	f001 fd0c 	bl	800c544 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <tcp_listen_input+0x1a8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	89db      	ldrh	r3, [r3, #14]
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4610      	mov	r0, r2
 800ab52:	f7ff fad1 	bl	800a0f8 <tcp_eff_send_mss_impl>
 800ab56:	4603      	mov	r3, r0
 800ab58:	461a      	mov	r2, r3
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ab5e:	2112      	movs	r1, #18
 800ab60:	6978      	ldr	r0, [r7, #20]
 800ab62:	f001 fea7 	bl	800c8b4 <tcp_enqueue_flags>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ab6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ab72:	2100      	movs	r1, #0
 800ab74:	6978      	ldr	r0, [r7, #20]
 800ab76:	f7fe fb4d 	bl	8009214 <tcp_abandon>
      return;
 800ab7a:	e006      	b.n	800ab8a <tcp_listen_input+0x192>
    tcp_output(npcb);
 800ab7c:	6978      	ldr	r0, [r7, #20]
 800ab7e:	f001 fff1 	bl	800cb64 <tcp_output>
  return;
 800ab82:	e001      	b.n	800ab88 <tcp_listen_input+0x190>
    return;
 800ab84:	bf00      	nop
 800ab86:	e000      	b.n	800ab8a <tcp_listen_input+0x192>
  return;
 800ab88:	bf00      	nop
}
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	2000bb68 	.word	0x2000bb68
 800ab94:	2000bb60 	.word	0x2000bb60
 800ab98:	2000bb66 	.word	0x2000bb66
 800ab9c:	2000bb5c 	.word	0x2000bb5c
 800aba0:	2000bb4c 	.word	0x2000bb4c
 800aba4:	200083e4 	.word	0x200083e4
 800aba8:	200083e8 	.word	0x200083e8
 800abac:	200083d4 	.word	0x200083d4
 800abb0:	2000bb30 	.word	0x2000bb30
 800abb4:	2000bb38 	.word	0x2000bb38

0800abb8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af02      	add	r7, sp, #8
 800abbe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800abc0:	4b29      	ldr	r3, [pc, #164]	; (800ac68 <tcp_timewait_input+0xb0>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d146      	bne.n	800ac5a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800abcc:	4b26      	ldr	r3, [pc, #152]	; (800ac68 <tcp_timewait_input+0xb0>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 0302 	and.w	r3, r3, #2
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d027      	beq.n	800ac28 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800abd8:	4b24      	ldr	r3, [pc, #144]	; (800ac6c <tcp_timewait_input+0xb4>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	db2a      	blt.n	800ac3c <tcp_timewait_input+0x84>
 800abe6:	4b21      	ldr	r3, [pc, #132]	; (800ac6c <tcp_timewait_input+0xb4>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800abf2:	440b      	add	r3, r1
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dc20      	bgt.n	800ac3c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800abfa:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <tcp_timewait_input+0xb8>)
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <tcp_timewait_input+0xbc>)
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	4b19      	ldr	r3, [pc, #100]	; (800ac6c <tcp_timewait_input+0xb4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac0a:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <tcp_timewait_input+0xc0>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac0e:	885b      	ldrh	r3, [r3, #2]
 800ac10:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac12:	4a19      	ldr	r2, [pc, #100]	; (800ac78 <tcp_timewait_input+0xc0>)
 800ac14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac16:	8812      	ldrh	r2, [r2, #0]
 800ac18:	b292      	uxth	r2, r2
 800ac1a:	9201      	str	r2, [sp, #4]
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <tcp_timewait_input+0xc4>)
 800ac20:	4a17      	ldr	r2, [pc, #92]	; (800ac80 <tcp_timewait_input+0xc8>)
 800ac22:	f002 fa23 	bl	800d06c <tcp_rst>
      return;
 800ac26:	e01b      	b.n	800ac60 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800ac28:	4b0f      	ldr	r3, [pc, #60]	; (800ac68 <tcp_timewait_input+0xb0>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <tcp_timewait_input+0xcc>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ac3c:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <tcp_timewait_input+0xbc>)
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00c      	beq.n	800ac5e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	7e9b      	ldrb	r3, [r3, #26]
 800ac48:	f043 0302 	orr.w	r3, r3, #2
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f001 ff86 	bl	800cb64 <tcp_output>
  }
  return;
 800ac58:	e001      	b.n	800ac5e <tcp_timewait_input+0xa6>
    return;
 800ac5a:	bf00      	nop
 800ac5c:	e000      	b.n	800ac60 <tcp_timewait_input+0xa8>
  return;
 800ac5e:	bf00      	nop
}
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	2000bb68 	.word	0x2000bb68
 800ac6c:	2000bb5c 	.word	0x2000bb5c
 800ac70:	2000bb60 	.word	0x2000bb60
 800ac74:	2000bb66 	.word	0x2000bb66
 800ac78:	2000bb4c 	.word	0x2000bb4c
 800ac7c:	200083e4 	.word	0x200083e4
 800ac80:	200083e8 	.word	0x200083e8
 800ac84:	2000bb24 	.word	0x2000bb24

0800ac88 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ac98:	4b93      	ldr	r3, [pc, #588]	; (800aee8 <tcp_process+0x260>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d04e      	beq.n	800ad42 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7d1b      	ldrb	r3, [r3, #20]
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d108      	bne.n	800acbe <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acb0:	4b8e      	ldr	r3, [pc, #568]	; (800aeec <tcp_process+0x264>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d123      	bne.n	800ad00 <tcp_process+0x78>
        acceptable = 1;
 800acb8:	2301      	movs	r3, #1
 800acba:	76fb      	strb	r3, [r7, #27]
 800acbc:	e020      	b.n	800ad00 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acc2:	4b8b      	ldr	r3, [pc, #556]	; (800aef0 <tcp_process+0x268>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d102      	bne.n	800acd0 <tcp_process+0x48>
        acceptable = 1;
 800acca:	2301      	movs	r3, #1
 800accc:	76fb      	strb	r3, [r7, #27]
 800acce:	e017      	b.n	800ad00 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800acd0:	4b87      	ldr	r3, [pc, #540]	; (800aef0 <tcp_process+0x268>)
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	db10      	blt.n	800ad00 <tcp_process+0x78>
 800acde:	4b84      	ldr	r3, [pc, #528]	; (800aef0 <tcp_process+0x268>)
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800acea:	440b      	add	r3, r1
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dc06      	bgt.n	800ad00 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	7e9b      	ldrb	r3, [r3, #26]
 800acf6:	f043 0302 	orr.w	r3, r3, #2
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ad00:	7efb      	ldrb	r3, [r7, #27]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d01b      	beq.n	800ad3e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7d1b      	ldrb	r3, [r3, #20]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <tcp_process+0x94>
 800ad0e:	4b79      	ldr	r3, [pc, #484]	; (800aef4 <tcp_process+0x26c>)
 800ad10:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ad14:	4978      	ldr	r1, [pc, #480]	; (800aef8 <tcp_process+0x270>)
 800ad16:	4879      	ldr	r0, [pc, #484]	; (800aefc <tcp_process+0x274>)
 800ad18:	f005 fa68 	bl	80101ec <iprintf>
      recv_flags |= TF_RESET;
 800ad1c:	4b78      	ldr	r3, [pc, #480]	; (800af00 <tcp_process+0x278>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f043 0308 	orr.w	r3, r3, #8
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	4b76      	ldr	r3, [pc, #472]	; (800af00 <tcp_process+0x278>)
 800ad28:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7e9b      	ldrb	r3, [r3, #26]
 800ad2e:	f023 0301 	bic.w	r3, r3, #1
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800ad38:	f06f 030d 	mvn.w	r3, #13
 800ad3c:	e348      	b.n	800b3d0 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e346      	b.n	800b3d0 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ad42:	4b69      	ldr	r3, [pc, #420]	; (800aee8 <tcp_process+0x260>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d010      	beq.n	800ad70 <tcp_process+0xe8>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7d1b      	ldrb	r3, [r3, #20]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d00c      	beq.n	800ad70 <tcp_process+0xe8>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	7d1b      	ldrb	r3, [r3, #20]
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d008      	beq.n	800ad70 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7e9b      	ldrb	r3, [r3, #26]
 800ad62:	f043 0302 	orr.w	r3, r3, #2
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e32f      	b.n	800b3d0 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7e9b      	ldrb	r3, [r3, #26]
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d103      	bne.n	800ad84 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ad7c:	4b61      	ldr	r3, [pc, #388]	; (800af04 <tcp_process+0x27c>)
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f001 fbd9 	bl	800c544 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	7d1b      	ldrb	r3, [r3, #20]
 800ad96:	3b02      	subs	r3, #2
 800ad98:	2b07      	cmp	r3, #7
 800ad9a:	f200 8309 	bhi.w	800b3b0 <tcp_process+0x728>
 800ad9e:	a201      	add	r2, pc, #4	; (adr r2, 800ada4 <tcp_process+0x11c>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800adc5 	.word	0x0800adc5
 800ada8:	0800afbb 	.word	0x0800afbb
 800adac:	0800b113 	.word	0x0800b113
 800adb0:	0800b13d 	.word	0x0800b13d
 800adb4:	0800b25f 	.word	0x0800b25f
 800adb8:	0800b113 	.word	0x0800b113
 800adbc:	0800b2eb 	.word	0x0800b2eb
 800adc0:	0800b37b 	.word	0x0800b37b
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800adc4:	4b48      	ldr	r3, [pc, #288]	; (800aee8 <tcp_process+0x260>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	f003 0310 	and.w	r3, r3, #16
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 80ca 	beq.w	800af66 <tcp_process+0x2de>
 800add2:	4b45      	ldr	r3, [pc, #276]	; (800aee8 <tcp_process+0x260>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 80c3 	beq.w	800af66 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	4b41      	ldr	r3, [pc, #260]	; (800aeec <tcp_process+0x264>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	f040 80bb 	bne.w	800af66 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800adf0:	4b3f      	ldr	r3, [pc, #252]	; (800aef0 <tcp_process+0x268>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800ae02:	4b3a      	ldr	r3, [pc, #232]	; (800aeec <tcp_process+0x264>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ae0a:	4b3f      	ldr	r3, [pc, #252]	; (800af08 <tcp_process+0x280>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	89db      	ldrh	r3, [r3, #14]
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ae24:	4b32      	ldr	r3, [pc, #200]	; (800aef0 <tcp_process+0x268>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	1e5a      	subs	r2, r3, #1
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2204      	movs	r2, #4
 800ae32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	f7ff f95a 	bl	800a0f8 <tcp_eff_send_mss_impl>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	f241 121c 	movw	r2, #4380	; 0x111c
 800ae56:	429a      	cmp	r2, r3
 800ae58:	bf38      	it	cc
 800ae5a:	461a      	movcc	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4293      	cmp	r3, r2
 800ae64:	bf28      	it	cs
 800ae66:	4613      	movcs	r3, r2
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <tcp_process+0x200>
 800ae7a:	4b1e      	ldr	r3, [pc, #120]	; (800aef4 <tcp_process+0x26c>)
 800ae7c:	f240 321a 	movw	r2, #794	; 0x31a
 800ae80:	4922      	ldr	r1, [pc, #136]	; (800af0c <tcp_process+0x284>)
 800ae82:	481e      	ldr	r0, [pc, #120]	; (800aefc <tcp_process+0x274>)
 800ae84:	f005 f9b2 	bl	80101ec <iprintf>
      --pcb->snd_queuelen;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae9c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d111      	bne.n	800aec8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aea8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <tcp_process+0x236>
 800aeb0:	4b10      	ldr	r3, [pc, #64]	; (800aef4 <tcp_process+0x26c>)
 800aeb2:	f240 3222 	movw	r2, #802	; 0x322
 800aeb6:	4916      	ldr	r1, [pc, #88]	; (800af10 <tcp_process+0x288>)
 800aeb8:	4810      	ldr	r0, [pc, #64]	; (800aefc <tcp_process+0x274>)
 800aeba:	f005 f997 	bl	80101ec <iprintf>
        pcb->unsent = rseg->next;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	669a      	str	r2, [r3, #104]	; 0x68
 800aec6:	e003      	b.n	800aed0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800aed0:	69f8      	ldr	r0, [r7, #28]
 800aed2:	f7fe fea9 	bl	8009c28 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d11a      	bne.n	800af14 <tcp_process+0x28c>
        pcb->rtime = -1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aee4:	861a      	strh	r2, [r3, #48]	; 0x30
 800aee6:	e01c      	b.n	800af22 <tcp_process+0x29a>
 800aee8:	2000bb68 	.word	0x2000bb68
 800aeec:	2000bb60 	.word	0x2000bb60
 800aef0:	2000bb5c 	.word	0x2000bb5c
 800aef4:	08011fd8 	.word	0x08011fd8
 800aef8:	08012190 	.word	0x08012190
 800aefc:	0801201c 	.word	0x0801201c
 800af00:	2000bb69 	.word	0x2000bb69
 800af04:	2000bb24 	.word	0x2000bb24
 800af08:	2000bb4c 	.word	0x2000bb4c
 800af0c:	080121b0 	.word	0x080121b0
 800af10:	080121c8 	.word	0x080121c8
      } else {
        pcb->rtime = 0;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00a      	beq.n	800af42 <tcp_process+0x2ba>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	6910      	ldr	r0, [r2, #16]
 800af36:	2200      	movs	r2, #0
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	4798      	blx	r3
 800af3c:	4603      	mov	r3, r0
 800af3e:	76bb      	strb	r3, [r7, #26]
 800af40:	e001      	b.n	800af46 <tcp_process+0x2be>
 800af42:	2300      	movs	r3, #0
 800af44:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800af46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800af4a:	f113 0f0d 	cmn.w	r3, #13
 800af4e:	d102      	bne.n	800af56 <tcp_process+0x2ce>
        return ERR_ABRT;
 800af50:	f06f 030c 	mvn.w	r3, #12
 800af54:	e23c      	b.n	800b3d0 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7e9b      	ldrb	r3, [r3, #26]
 800af5a:	f043 0302 	orr.w	r3, r3, #2
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800af64:	e226      	b.n	800b3b4 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800af66:	4b93      	ldr	r3, [pc, #588]	; (800b1b4 <tcp_process+0x52c>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	f003 0310 	and.w	r3, r3, #16
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 8220 	beq.w	800b3b4 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800af74:	4b90      	ldr	r3, [pc, #576]	; (800b1b8 <tcp_process+0x530>)
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	4b90      	ldr	r3, [pc, #576]	; (800b1bc <tcp_process+0x534>)
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	4b90      	ldr	r3, [pc, #576]	; (800b1c0 <tcp_process+0x538>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af84:	4b8f      	ldr	r3, [pc, #572]	; (800b1c4 <tcp_process+0x53c>)
 800af86:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af8c:	4a8d      	ldr	r2, [pc, #564]	; (800b1c4 <tcp_process+0x53c>)
 800af8e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800af90:	8812      	ldrh	r2, [r2, #0]
 800af92:	b292      	uxth	r2, r2
 800af94:	9201      	str	r2, [sp, #4]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	4b8b      	ldr	r3, [pc, #556]	; (800b1c8 <tcp_process+0x540>)
 800af9a:	4a8c      	ldr	r2, [pc, #560]	; (800b1cc <tcp_process+0x544>)
 800af9c:	f002 f866 	bl	800d06c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	f200 8204 	bhi.w	800b3b4 <tcp_process+0x72c>
        pcb->rtime = 0;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f002 f8d0 	bl	800d158 <tcp_rexmit_rto>
    break;
 800afb8:	e1fc      	b.n	800b3b4 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800afba:	4b7e      	ldr	r3, [pc, #504]	; (800b1b4 <tcp_process+0x52c>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	f003 0310 	and.w	r3, r3, #16
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 8091 	beq.w	800b0ea <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800afc8:	4b7b      	ldr	r3, [pc, #492]	; (800b1b8 <tcp_process+0x530>)
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	3b01      	subs	r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	db71      	blt.n	800b0bc <tcp_process+0x434>
 800afd8:	4b77      	ldr	r3, [pc, #476]	; (800b1b8 <tcp_process+0x530>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc6a      	bgt.n	800b0bc <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2204      	movs	r2, #4
 800afea:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00b      	beq.n	800b00c <tcp_process+0x384>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <tcp_process+0x384>
 800affe:	4b74      	ldr	r3, [pc, #464]	; (800b1d0 <tcp_process+0x548>)
 800b000:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b004:	4973      	ldr	r1, [pc, #460]	; (800b1d4 <tcp_process+0x54c>)
 800b006:	4874      	ldr	r0, [pc, #464]	; (800b1d8 <tcp_process+0x550>)
 800b008:	f005 f8f0 	bl	80101ec <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800b014:	23fa      	movs	r3, #250	; 0xfa
 800b016:	76bb      	strb	r3, [r7, #26]
 800b018:	e011      	b.n	800b03e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00a      	beq.n	800b03a <tcp_process+0x3b2>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	6910      	ldr	r0, [r2, #16]
 800b02e:	2200      	movs	r2, #0
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4798      	blx	r3
 800b034:	4603      	mov	r3, r0
 800b036:	76bb      	strb	r3, [r7, #26]
 800b038:	e001      	b.n	800b03e <tcp_process+0x3b6>
 800b03a:	23f0      	movs	r3, #240	; 0xf0
 800b03c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800b03e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800b046:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b04a:	f113 0f0d 	cmn.w	r3, #13
 800b04e:	d002      	beq.n	800b056 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fe f991 	bl	8009378 <tcp_abort>
          }
          return ERR_ABRT;
 800b056:	f06f 030c 	mvn.w	r3, #12
 800b05a:	e1b9      	b.n	800b3d0 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fa3d 	bl	800b4dc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800b062:	4b5e      	ldr	r3, [pc, #376]	; (800b1dc <tcp_process+0x554>)
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <tcp_process+0x3ee>
          recv_acked--;
 800b06a:	4b5c      	ldr	r3, [pc, #368]	; (800b1dc <tcp_process+0x554>)
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	4b5a      	ldr	r3, [pc, #360]	; (800b1dc <tcp_process+0x554>)
 800b074:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	f241 121c 	movw	r2, #4380	; 0x111c
 800b080:	429a      	cmp	r2, r3
 800b082:	bf38      	it	cc
 800b084:	461a      	movcc	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4293      	cmp	r3, r2
 800b08e:	bf28      	it	cs
 800b090:	4613      	movcs	r3, r2
 800b092:	b29a      	uxth	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800b09a:	4b51      	ldr	r3, [pc, #324]	; (800b1e0 <tcp_process+0x558>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	f003 0320 	and.w	r3, r3, #32
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d034      	beq.n	800b110 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	7e9b      	ldrb	r3, [r3, #26]
 800b0aa:	f043 0302 	orr.w	r3, r3, #2
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2207      	movs	r2, #7
 800b0b8:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800b0ba:	e029      	b.n	800b110 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0bc:	4b3e      	ldr	r3, [pc, #248]	; (800b1b8 <tcp_process+0x530>)
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	4b3e      	ldr	r3, [pc, #248]	; (800b1bc <tcp_process+0x534>)
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4b3e      	ldr	r3, [pc, #248]	; (800b1c0 <tcp_process+0x538>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0cc:	4b3d      	ldr	r3, [pc, #244]	; (800b1c4 <tcp_process+0x53c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0d0:	885b      	ldrh	r3, [r3, #2]
 800b0d2:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0d4:	4a3b      	ldr	r2, [pc, #236]	; (800b1c4 <tcp_process+0x53c>)
 800b0d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0d8:	8812      	ldrh	r2, [r2, #0]
 800b0da:	b292      	uxth	r2, r2
 800b0dc:	9201      	str	r2, [sp, #4]
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	4b39      	ldr	r3, [pc, #228]	; (800b1c8 <tcp_process+0x540>)
 800b0e2:	4a3a      	ldr	r2, [pc, #232]	; (800b1cc <tcp_process+0x544>)
 800b0e4:	f001 ffc2 	bl	800d06c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800b0e8:	e166      	b.n	800b3b8 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b0ea:	4b32      	ldr	r3, [pc, #200]	; (800b1b4 <tcp_process+0x52c>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8160 	beq.w	800b3b8 <tcp_process+0x730>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	1e5a      	subs	r2, r3, #1
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <tcp_process+0x538>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	f040 8158 	bne.w	800b3b8 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f002 f85b 	bl	800d1c4 <tcp_rexmit>
    break;
 800b10e:	e153      	b.n	800b3b8 <tcp_process+0x730>
 800b110:	e152      	b.n	800b3b8 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f9e2 	bl	800b4dc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b118:	4b31      	ldr	r3, [pc, #196]	; (800b1e0 <tcp_process+0x558>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	f003 0320 	and.w	r3, r3, #32
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 814b 	beq.w	800b3bc <tcp_process+0x734>
      tcp_ack_now(pcb);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	7e9b      	ldrb	r3, [r3, #26]
 800b12a:	f043 0302 	orr.w	r3, r3, #2
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2207      	movs	r2, #7
 800b138:	751a      	strb	r2, [r3, #20]
    }
    break;
 800b13a:	e13f      	b.n	800b3bc <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f9cd 	bl	800b4dc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b142:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <tcp_process+0x558>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d070      	beq.n	800b230 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b14e:	4b19      	ldr	r3, [pc, #100]	; (800b1b4 <tcp_process+0x52c>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	f003 0310 	and.w	r3, r3, #16
 800b156:	2b00      	cmp	r3, #0
 800b158:	d05f      	beq.n	800b21a <tcp_process+0x592>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b15e:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <tcp_process+0x530>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	429a      	cmp	r2, r3
 800b164:	d159      	bne.n	800b21a <tcp_process+0x592>
          pcb->unsent == NULL) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d155      	bne.n	800b21a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7e9b      	ldrb	r3, [r3, #26]
 800b172:	f043 0302 	orr.w	r3, r3, #2
 800b176:	b2da      	uxtb	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7fe fee7 	bl	8009f50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b182:	4b18      	ldr	r3, [pc, #96]	; (800b1e4 <tcp_process+0x55c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d105      	bne.n	800b198 <tcp_process+0x510>
 800b18c:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <tcp_process+0x55c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	4a14      	ldr	r2, [pc, #80]	; (800b1e4 <tcp_process+0x55c>)
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	e02d      	b.n	800b1f4 <tcp_process+0x56c>
 800b198:	4b12      	ldr	r3, [pc, #72]	; (800b1e4 <tcp_process+0x55c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	617b      	str	r3, [r7, #20]
 800b19e:	e026      	b.n	800b1ee <tcp_process+0x566>
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d11e      	bne.n	800b1e8 <tcp_process+0x560>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	60da      	str	r2, [r3, #12]
 800b1b2:	e01f      	b.n	800b1f4 <tcp_process+0x56c>
 800b1b4:	2000bb68 	.word	0x2000bb68
 800b1b8:	2000bb60 	.word	0x2000bb60
 800b1bc:	2000bb66 	.word	0x2000bb66
 800b1c0:	2000bb5c 	.word	0x2000bb5c
 800b1c4:	2000bb4c 	.word	0x2000bb4c
 800b1c8:	200083e4 	.word	0x200083e4
 800b1cc:	200083e8 	.word	0x200083e8
 800b1d0:	08011fd8 	.word	0x08011fd8
 800b1d4:	080121dc 	.word	0x080121dc
 800b1d8:	0801201c 	.word	0x0801201c
 800b1dc:	2000bb64 	.word	0x2000bb64
 800b1e0:	2000bb69 	.word	0x2000bb69
 800b1e4:	2000bb30 	.word	0x2000bb30
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1d5      	bne.n	800b1a0 <tcp_process+0x518>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	60da      	str	r2, [r3, #12]
 800b1fa:	4b77      	ldr	r3, [pc, #476]	; (800b3d8 <tcp_process+0x750>)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	220a      	movs	r2, #10
 800b204:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b206:	4b75      	ldr	r3, [pc, #468]	; (800b3dc <tcp_process+0x754>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	60da      	str	r2, [r3, #12]
 800b20e:	4a73      	ldr	r2, [pc, #460]	; (800b3dc <tcp_process+0x754>)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	f002 f972 	bl	800d4fc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800b218:	e0d2      	b.n	800b3c0 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	7e9b      	ldrb	r3, [r3, #26]
 800b21e:	f043 0302 	orr.w	r3, r3, #2
 800b222:	b2da      	uxtb	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2208      	movs	r2, #8
 800b22c:	751a      	strb	r2, [r3, #20]
    break;
 800b22e:	e0c7      	b.n	800b3c0 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b230:	4b6b      	ldr	r3, [pc, #428]	; (800b3e0 <tcp_process+0x758>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 0310 	and.w	r3, r3, #16
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 80c1 	beq.w	800b3c0 <tcp_process+0x738>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b242:	4b68      	ldr	r3, [pc, #416]	; (800b3e4 <tcp_process+0x75c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	f040 80ba 	bne.w	800b3c0 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 80b5 	bne.w	800b3c0 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2206      	movs	r2, #6
 800b25a:	751a      	strb	r2, [r3, #20]
    break;
 800b25c:	e0b0      	b.n	800b3c0 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f93c 	bl	800b4dc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b264:	4b60      	ldr	r3, [pc, #384]	; (800b3e8 <tcp_process+0x760>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	f003 0320 	and.w	r3, r3, #32
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80a9 	beq.w	800b3c4 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7e9b      	ldrb	r3, [r3, #26]
 800b276:	f043 0302 	orr.w	r3, r3, #2
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7fe fe65 	bl	8009f50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b286:	4b59      	ldr	r3, [pc, #356]	; (800b3ec <tcp_process+0x764>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d105      	bne.n	800b29c <tcp_process+0x614>
 800b290:	4b56      	ldr	r3, [pc, #344]	; (800b3ec <tcp_process+0x764>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	4a55      	ldr	r2, [pc, #340]	; (800b3ec <tcp_process+0x764>)
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	e013      	b.n	800b2c4 <tcp_process+0x63c>
 800b29c:	4b53      	ldr	r3, [pc, #332]	; (800b3ec <tcp_process+0x764>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	e00c      	b.n	800b2be <tcp_process+0x636>
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d104      	bne.n	800b2b8 <tcp_process+0x630>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	60da      	str	r2, [r3, #12]
 800b2b6:	e005      	b.n	800b2c4 <tcp_process+0x63c>
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	613b      	str	r3, [r7, #16]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1ef      	bne.n	800b2a4 <tcp_process+0x61c>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	60da      	str	r2, [r3, #12]
 800b2ca:	4b43      	ldr	r3, [pc, #268]	; (800b3d8 <tcp_process+0x750>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	220a      	movs	r2, #10
 800b2d4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b2d6:	4b41      	ldr	r3, [pc, #260]	; (800b3dc <tcp_process+0x754>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	4a3f      	ldr	r2, [pc, #252]	; (800b3dc <tcp_process+0x754>)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	f002 f90a 	bl	800d4fc <tcp_timer_needed>
    }
    break;
 800b2e8:	e06c      	b.n	800b3c4 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f8f6 	bl	800b4dc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b2f0:	4b3b      	ldr	r3, [pc, #236]	; (800b3e0 <tcp_process+0x758>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d065      	beq.n	800b3c8 <tcp_process+0x740>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b300:	4b38      	ldr	r3, [pc, #224]	; (800b3e4 <tcp_process+0x75c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d15f      	bne.n	800b3c8 <tcp_process+0x740>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d15b      	bne.n	800b3c8 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7fe fe1d 	bl	8009f50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b316:	4b35      	ldr	r3, [pc, #212]	; (800b3ec <tcp_process+0x764>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d105      	bne.n	800b32c <tcp_process+0x6a4>
 800b320:	4b32      	ldr	r3, [pc, #200]	; (800b3ec <tcp_process+0x764>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	4a31      	ldr	r2, [pc, #196]	; (800b3ec <tcp_process+0x764>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	e013      	b.n	800b354 <tcp_process+0x6cc>
 800b32c:	4b2f      	ldr	r3, [pc, #188]	; (800b3ec <tcp_process+0x764>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	e00c      	b.n	800b34e <tcp_process+0x6c6>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d104      	bne.n	800b348 <tcp_process+0x6c0>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68da      	ldr	r2, [r3, #12]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	60da      	str	r2, [r3, #12]
 800b346:	e005      	b.n	800b354 <tcp_process+0x6cc>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1ef      	bne.n	800b334 <tcp_process+0x6ac>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	60da      	str	r2, [r3, #12]
 800b35a:	4b1f      	ldr	r3, [pc, #124]	; (800b3d8 <tcp_process+0x750>)
 800b35c:	2201      	movs	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	220a      	movs	r2, #10
 800b364:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b366:	4b1d      	ldr	r3, [pc, #116]	; (800b3dc <tcp_process+0x754>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60da      	str	r2, [r3, #12]
 800b36e:	4a1b      	ldr	r2, [pc, #108]	; (800b3dc <tcp_process+0x754>)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	f002 f8c2 	bl	800d4fc <tcp_timer_needed>
    }
    break;
 800b378:	e026      	b.n	800b3c8 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f8ae 	bl	800b4dc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b380:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <tcp_process+0x758>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 0310 	and.w	r3, r3, #16
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d01f      	beq.n	800b3cc <tcp_process+0x744>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b390:	4b14      	ldr	r3, [pc, #80]	; (800b3e4 <tcp_process+0x75c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	429a      	cmp	r2, r3
 800b396:	d119      	bne.n	800b3cc <tcp_process+0x744>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d115      	bne.n	800b3cc <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800b3a0:	4b11      	ldr	r3, [pc, #68]	; (800b3e8 <tcp_process+0x760>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f043 0310 	orr.w	r3, r3, #16
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	; (800b3e8 <tcp_process+0x760>)
 800b3ac:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b3ae:	e00d      	b.n	800b3cc <tcp_process+0x744>
  default:
    break;
 800b3b0:	bf00      	nop
 800b3b2:	e00c      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3b4:	bf00      	nop
 800b3b6:	e00a      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3b8:	bf00      	nop
 800b3ba:	e008      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3bc:	bf00      	nop
 800b3be:	e006      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3c0:	bf00      	nop
 800b3c2:	e004      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3c4:	bf00      	nop
 800b3c6:	e002      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3c8:	bf00      	nop
 800b3ca:	e000      	b.n	800b3ce <tcp_process+0x746>
    break;
 800b3cc:	bf00      	nop
  }
  return ERR_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	2000bb38 	.word	0x2000bb38
 800b3dc:	2000bb34 	.word	0x2000bb34
 800b3e0:	2000bb68 	.word	0x2000bb68
 800b3e4:	2000bb60 	.word	0x2000bb60
 800b3e8:	2000bb69 	.word	0x2000bb69
 800b3ec:	2000bb30 	.word	0x2000bb30

0800b3f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	899b      	ldrh	r3, [r3, #12]
 800b400:	b29b      	uxth	r3, r3
 800b402:	4618      	mov	r0, r3
 800b404:	f7fc f8be 	bl	8007584 <lwip_htons>
 800b408:	4603      	mov	r3, r0
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d027      	beq.n	800b462 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b412:	6838      	ldr	r0, [r7, #0]
 800b414:	f7fe fbf3 	bl	8009bfe <tcp_segs_free>
    next = NULL;
 800b418:	2300      	movs	r3, #0
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	e055      	b.n	800b4ca <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	899b      	ldrh	r3, [r3, #12]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f7fc f8ac 	bl	8007584 <lwip_htons>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00d      	beq.n	800b452 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	899b      	ldrh	r3, [r3, #12]
 800b43c:	b29c      	uxth	r4, r3
 800b43e:	2001      	movs	r0, #1
 800b440:	f7fc f8a0 	bl	8007584 <lwip_htons>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	4322      	orrs	r2, r4
 800b44e:	b292      	uxth	r2, r2
 800b450:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7fe fbe3 	bl	8009c28 <tcp_seg_free>
    while (next &&
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00e      	beq.n	800b486 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	891b      	ldrh	r3, [r3, #8]
 800b46c:	461a      	mov	r2, r3
 800b46e:	4b1a      	ldr	r3, [pc, #104]	; (800b4d8 <tcp_oos_insert_segment+0xe8>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	441a      	add	r2, r3
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	8909      	ldrh	r1, [r1, #8]
 800b47e:	440b      	add	r3, r1
 800b480:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b482:	2b00      	cmp	r3, #0
 800b484:	dacb      	bge.n	800b41e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01e      	beq.n	800b4ca <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	891b      	ldrh	r3, [r3, #8]
 800b490:	461a      	mov	r2, r3
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <tcp_oos_insert_segment+0xe8>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	441a      	add	r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	dd12      	ble.n	800b4ca <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <tcp_oos_insert_segment+0xe8>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	891b      	ldrh	r3, [r3, #8]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	f7fd f8e1 	bl	800868c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	601a      	str	r2, [r3, #0]
}
 800b4d0:	bf00      	nop
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd90      	pop	{r4, r7, pc}
 800b4d8:	2000bb5c 	.word	0x2000bb5c

0800b4dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4de:	b08d      	sub	sp, #52	; 0x34
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7d1b      	ldrb	r3, [r3, #20]
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d806      	bhi.n	800b4fe <tcp_receive+0x22>
 800b4f0:	4b98      	ldr	r3, [pc, #608]	; (800b754 <tcp_receive+0x278>)
 800b4f2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b4f6:	4998      	ldr	r1, [pc, #608]	; (800b758 <tcp_receive+0x27c>)
 800b4f8:	4898      	ldr	r0, [pc, #608]	; (800b75c <tcp_receive+0x280>)
 800b4fa:	f004 fe77 	bl	80101ec <iprintf>

  if (flags & TCP_ACK) {
 800b4fe:	4b98      	ldr	r3, [pc, #608]	; (800b760 <tcp_receive+0x284>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	f003 0310 	and.w	r3, r3, #16
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 82c1 	beq.w	800ba8e <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b512:	461a      	mov	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b518:	4413      	add	r3, r2
 800b51a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b520:	4b90      	ldr	r3, [pc, #576]	; (800b764 <tcp_receive+0x288>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	db1b      	blt.n	800b562 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b52e:	4b8d      	ldr	r3, [pc, #564]	; (800b764 <tcp_receive+0x288>)
 800b530:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b532:	429a      	cmp	r2, r3
 800b534:	d106      	bne.n	800b544 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b53a:	4b8b      	ldr	r3, [pc, #556]	; (800b768 <tcp_receive+0x28c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	2b00      	cmp	r3, #0
 800b542:	db0e      	blt.n	800b562 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b548:	4b87      	ldr	r3, [pc, #540]	; (800b768 <tcp_receive+0x28c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d141      	bne.n	800b5d4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b550:	4b86      	ldr	r3, [pc, #536]	; (800b76c <tcp_receive+0x290>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	89db      	ldrh	r3, [r3, #14]
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b55e:	429a      	cmp	r2, r3
 800b560:	d938      	bls.n	800b5d4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b562:	4b82      	ldr	r3, [pc, #520]	; (800b76c <tcp_receive+0x290>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	89db      	ldrh	r3, [r3, #14]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d205      	bcs.n	800b58c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800b58c:	4b75      	ldr	r3, [pc, #468]	; (800b764 <tcp_receive+0x288>)
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800b594:	4b74      	ldr	r3, [pc, #464]	; (800b768 <tcp_receive+0x28c>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10d      	bne.n	800b5c2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d111      	bne.n	800b5d4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b5c0:	e008      	b.n	800b5d4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b5d4:	4b64      	ldr	r3, [pc, #400]	; (800b768 <tcp_receive+0x28c>)
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dc53      	bgt.n	800b68a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800b5e2:	4b63      	ldr	r3, [pc, #396]	; (800b770 <tcp_receive+0x294>)
 800b5e4:	881b      	ldrh	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d146      	bne.n	800b678 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800b5f4:	4413      	add	r3, r2
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d13d      	bne.n	800b678 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b602:	2b00      	cmp	r3, #0
 800b604:	db38      	blt.n	800b678 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b60a:	4b57      	ldr	r3, [pc, #348]	; (800b768 <tcp_receive+0x28c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d132      	bne.n	800b678 <tcp_receive+0x19c>
              found_dupack = 1;
 800b612:	2301      	movs	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b61c:	2bff      	cmp	r3, #255	; 0xff
 800b61e:	d007      	beq.n	800b630 <tcp_receive+0x154>
                ++pcb->dupacks;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b626:	3301      	adds	r3, #1
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b636:	2b03      	cmp	r3, #3
 800b638:	d916      	bls.n	800b668 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b644:	4413      	add	r3, r2
 800b646:	b29a      	uxth	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b64e:	429a      	cmp	r2, r3
 800b650:	d912      	bls.n	800b678 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b65c:	4413      	add	r3, r2
 800b65e:	b29a      	uxth	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b666:	e007      	b.n	800b678 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d102      	bne.n	800b678 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 fdf6 	bl	800d264 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 816a 	bne.w	800b954 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b688:	e164      	b.n	800b954 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b68a:	4b37      	ldr	r3, [pc, #220]	; (800b768 <tcp_receive+0x28c>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	3b01      	subs	r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	f2c0 8108 	blt.w	800b8ac <tcp_receive+0x3d0>
 800b69c:	4b32      	ldr	r3, [pc, #200]	; (800b768 <tcp_receive+0x28c>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f300 8100 	bgt.w	800b8ac <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7e9b      	ldrb	r3, [r3, #26]
 800b6b0:	f003 0304 	and.w	r3, r3, #4
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00c      	beq.n	800b6d2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	7e9b      	ldrb	r3, [r3, #26]
 800b6bc:	f023 0304 	bic.w	r3, r3, #4
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6e0:	10db      	asrs	r3, r3, #3
 800b6e2:	b21b      	sxth	r3, r3
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	4413      	add	r3, r2
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	b21a      	sxth	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b702:	4b19      	ldr	r3, [pc, #100]	; (800b768 <tcp_receive+0x28c>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7d1b      	ldrb	r3, [r3, #20]
 800b70e:	2b03      	cmp	r3, #3
 800b710:	f240 8095 	bls.w	800b83e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b720:	429a      	cmp	r2, r3
 800b722:	d227      	bcs.n	800b774 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b72e:	4413      	add	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b738:	429a      	cmp	r2, r3
 800b73a:	f240 8080 	bls.w	800b83e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b748:	4413      	add	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b752:	e074      	b.n	800b83e <tcp_receive+0x362>
 800b754:	08011fd8 	.word	0x08011fd8
 800b758:	080121fc 	.word	0x080121fc
 800b75c:	0801201c 	.word	0x0801201c
 800b760:	2000bb68 	.word	0x2000bb68
 800b764:	2000bb5c 	.word	0x2000bb5c
 800b768:	2000bb60 	.word	0x2000bb60
 800b76c:	2000bb4c 	.word	0x2000bb4c
 800b770:	2000bb66 	.word	0x2000bb66
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b77e:	4619      	mov	r1, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b784:	fb01 f303 	mul.w	r3, r1, r3
 800b788:	6879      	ldr	r1, [r7, #4]
 800b78a:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800b78e:	fb93 f3f1 	sdiv	r3, r3, r1
 800b792:	b29b      	uxth	r3, r3
 800b794:	4413      	add	r3, r2
 800b796:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b79e:	8a7a      	ldrh	r2, [r7, #18]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d94c      	bls.n	800b83e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	8a7a      	ldrh	r2, [r7, #18]
 800b7a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800b7ac:	e047      	b.n	800b83e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fd f96d 	bl	8008aa8 <pbuf_clen>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	429c      	cmp	r4, r3
 800b7d2:	d206      	bcs.n	800b7e2 <tcp_receive+0x306>
 800b7d4:	4b70      	ldr	r3, [pc, #448]	; (800b998 <tcp_receive+0x4bc>)
 800b7d6:	f240 429e 	movw	r2, #1182	; 0x49e
 800b7da:	4970      	ldr	r1, [pc, #448]	; (800b99c <tcp_receive+0x4c0>)
 800b7dc:	4870      	ldr	r0, [pc, #448]	; (800b9a0 <tcp_receive+0x4c4>)
 800b7de:	f004 fd05 	bl	80101ec <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fd f95e 	bl	8008aa8 <pbuf_clen>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7f6:	1a9b      	subs	r3, r3, r2
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	891a      	ldrh	r2, [r3, #8]
 800b804:	4b67      	ldr	r3, [pc, #412]	; (800b9a4 <tcp_receive+0x4c8>)
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	4413      	add	r3, r2
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	4b65      	ldr	r3, [pc, #404]	; (800b9a4 <tcp_receive+0x4c8>)
 800b80e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800b810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b812:	f7fe fa09 	bl	8009c28 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00e      	beq.n	800b83e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <tcp_receive+0x362>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <tcp_receive+0x362>
 800b830:	4b59      	ldr	r3, [pc, #356]	; (800b998 <tcp_receive+0x4bc>)
 800b832:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800b836:	495c      	ldr	r1, [pc, #368]	; (800b9a8 <tcp_receive+0x4cc>)
 800b838:	4859      	ldr	r0, [pc, #356]	; (800b9a0 <tcp_receive+0x4c4>)
 800b83a:	f004 fcd7 	bl	80101ec <iprintf>
      while (pcb->unacked != NULL &&
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d022      	beq.n	800b88c <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fb fea5 	bl	800759e <lwip_htonl>
 800b854:	4604      	mov	r4, r0
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b85a:	891b      	ldrh	r3, [r3, #8]
 800b85c:	461d      	mov	r5, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	899b      	ldrh	r3, [r3, #12]
 800b866:	b29b      	uxth	r3, r3
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fb fe8b 	bl	8007584 <lwip_htons>
 800b86e:	4603      	mov	r3, r0
 800b870:	f003 0303 	and.w	r3, r3, #3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <tcp_receive+0x3a0>
 800b878:	2301      	movs	r3, #1
 800b87a:	e000      	b.n	800b87e <tcp_receive+0x3a2>
 800b87c:	2300      	movs	r3, #0
 800b87e:	442b      	add	r3, r5
 800b880:	18e2      	adds	r2, r4, r3
 800b882:	4b4a      	ldr	r3, [pc, #296]	; (800b9ac <tcp_receive+0x4d0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dd90      	ble.n	800b7ae <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b890:	2b00      	cmp	r3, #0
 800b892:	d104      	bne.n	800b89e <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b89a:	861a      	strh	r2, [r3, #48]	; 0x30
 800b89c:	e002      	b.n	800b8a4 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	76da      	strb	r2, [r3, #27]
 800b8aa:	e002      	b.n	800b8b2 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 f8fd 	bl	800caac <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800b8b2:	e04f      	b.n	800b954 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d103      	bne.n	800b8d4 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fd f8e2 	bl	8008aa8 <pbuf_clen>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	429c      	cmp	r4, r3
 800b8e8:	d206      	bcs.n	800b8f8 <tcp_receive+0x41c>
 800b8ea:	4b2b      	ldr	r3, [pc, #172]	; (800b998 <tcp_receive+0x4bc>)
 800b8ec:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b8f0:	492a      	ldr	r1, [pc, #168]	; (800b99c <tcp_receive+0x4c0>)
 800b8f2:	482b      	ldr	r0, [pc, #172]	; (800b9a0 <tcp_receive+0x4c4>)
 800b8f4:	f004 fc7a 	bl	80101ec <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fd f8d3 	bl	8008aa8 <pbuf_clen>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b90c:	1a9b      	subs	r3, r3, r2
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	891a      	ldrh	r2, [r3, #8]
 800b91a:	4b22      	ldr	r3, [pc, #136]	; (800b9a4 <tcp_receive+0x4c8>)
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	4413      	add	r3, r2
 800b920:	b29a      	uxth	r2, r3
 800b922:	4b20      	ldr	r3, [pc, #128]	; (800b9a4 <tcp_receive+0x4c8>)
 800b924:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800b926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b928:	f7fe f97e 	bl	8009c28 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00e      	beq.n	800b954 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <tcp_receive+0x478>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <tcp_receive+0x478>
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <tcp_receive+0x4bc>)
 800b948:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800b94c:	4916      	ldr	r1, [pc, #88]	; (800b9a8 <tcp_receive+0x4cc>)
 800b94e:	4814      	ldr	r0, [pc, #80]	; (800b9a0 <tcp_receive+0x4c4>)
 800b950:	f004 fc4c 	bl	80101ec <iprintf>
    while (pcb->unsent != NULL &&
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d037      	beq.n	800b9cc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b95c:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <tcp_receive+0x4d0>)
 800b95e:	681c      	ldr	r4, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fb fe18 	bl	800759e <lwip_htonl>
 800b96e:	4605      	mov	r5, r0
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b974:	891b      	ldrh	r3, [r3, #8]
 800b976:	461e      	mov	r6, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	899b      	ldrh	r3, [r3, #12]
 800b980:	b29b      	uxth	r3, r3
 800b982:	4618      	mov	r0, r3
 800b984:	f7fb fdfe 	bl	8007584 <lwip_htons>
 800b988:	4603      	mov	r3, r0
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00e      	beq.n	800b9b0 <tcp_receive+0x4d4>
 800b992:	2301      	movs	r3, #1
 800b994:	e00d      	b.n	800b9b2 <tcp_receive+0x4d6>
 800b996:	bf00      	nop
 800b998:	08011fd8 	.word	0x08011fd8
 800b99c:	08012218 	.word	0x08012218
 800b9a0:	0801201c 	.word	0x0801201c
 800b9a4:	2000bb64 	.word	0x2000bb64
 800b9a8:	08012240 	.word	0x08012240
 800b9ac:	2000bb60 	.word	0x2000bb60
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4433      	add	r3, r6
 800b9b4:	442b      	add	r3, r5
 800b9b6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db07      	blt.n	800b9cc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b9bc:	4b8d      	ldr	r3, [pc, #564]	; (800bbf4 <tcp_receive+0x718>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f77f af74 	ble.w	800b8b4 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b9d2:	4b89      	ldr	r3, [pc, #548]	; (800bbf8 <tcp_receive+0x71c>)
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d052      	beq.n	800ba8e <tcp_receive+0x5b2>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ec:	4b81      	ldr	r3, [pc, #516]	; (800bbf4 <tcp_receive+0x718>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	da4b      	bge.n	800ba8e <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b9f6:	4b81      	ldr	r3, [pc, #516]	; (800bbfc <tcp_receive+0x720>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800ba08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ba10:	10db      	asrs	r3, r3, #3
 800ba12:	b21b      	sxth	r3, r3
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba26:	4413      	add	r3, r2
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	b21a      	sxth	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ba30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	da03      	bge.n	800ba40 <tcp_receive+0x564>
        m = -m;
 800ba38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba3a:	425b      	negs	r3, r3
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800ba40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ba48:	109b      	asrs	r3, r3, #2
 800ba4a:	b21b      	sxth	r3, r3
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba5e:	4413      	add	r3, r2
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	b21a      	sxth	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ba6e:	10db      	asrs	r3, r3, #3
 800ba70:	b21b      	sxth	r3, r3
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	4413      	add	r3, r2
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	b21a      	sxth	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ba8e:	4b5c      	ldr	r3, [pc, #368]	; (800bc00 <tcp_receive+0x724>)
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 84f1 	beq.w	800c47a <tcp_receive+0xf9e>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	7d1b      	ldrb	r3, [r3, #20]
 800ba9c:	2b06      	cmp	r3, #6
 800ba9e:	f200 84ec 	bhi.w	800c47a <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baa6:	4b57      	ldr	r3, [pc, #348]	; (800bc04 <tcp_receive+0x728>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	3b01      	subs	r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f2c0 80b8 	blt.w	800bc24 <tcp_receive+0x748>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bab8:	4b51      	ldr	r3, [pc, #324]	; (800bc00 <tcp_receive+0x724>)
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	4619      	mov	r1, r3
 800babe:	4b51      	ldr	r3, [pc, #324]	; (800bc04 <tcp_receive+0x728>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	440b      	add	r3, r1
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	3301      	adds	r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f300 80ab 	bgt.w	800bc24 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bace:	4b4e      	ldr	r3, [pc, #312]	; (800bc08 <tcp_receive+0x72c>)
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bad8:	4b4a      	ldr	r3, [pc, #296]	; (800bc04 <tcp_receive+0x728>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bae0:	4b49      	ldr	r3, [pc, #292]	; (800bc08 <tcp_receive+0x72c>)
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <tcp_receive+0x61a>
 800bae8:	4b48      	ldr	r3, [pc, #288]	; (800bc0c <tcp_receive+0x730>)
 800baea:	f240 523c 	movw	r2, #1340	; 0x53c
 800baee:	4948      	ldr	r1, [pc, #288]	; (800bc10 <tcp_receive+0x734>)
 800baf0:	4848      	ldr	r0, [pc, #288]	; (800bc14 <tcp_receive+0x738>)
 800baf2:	f004 fb7b 	bl	80101ec <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800baf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bafc:	4293      	cmp	r3, r2
 800bafe:	dd06      	ble.n	800bb0e <tcp_receive+0x632>
 800bb00:	4b42      	ldr	r3, [pc, #264]	; (800bc0c <tcp_receive+0x730>)
 800bb02:	f240 523d 	movw	r2, #1341	; 0x53d
 800bb06:	4944      	ldr	r1, [pc, #272]	; (800bc18 <tcp_receive+0x73c>)
 800bb08:	4842      	ldr	r0, [pc, #264]	; (800bc14 <tcp_receive+0x738>)
 800bb0a:	f004 fb6f 	bl	80101ec <iprintf>
      if (inseg.p->len < off) {
 800bb0e:	4b3e      	ldr	r3, [pc, #248]	; (800bc08 <tcp_receive+0x72c>)
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	895b      	ldrh	r3, [r3, #10]
 800bb14:	461a      	mov	r2, r3
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	dd3e      	ble.n	800bb9a <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bb1c:	4b3a      	ldr	r3, [pc, #232]	; (800bc08 <tcp_receive+0x72c>)
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	891b      	ldrh	r3, [r3, #8]
 800bb22:	461a      	mov	r2, r3
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	4293      	cmp	r3, r2
 800bb28:	dd06      	ble.n	800bb38 <tcp_receive+0x65c>
 800bb2a:	4b38      	ldr	r3, [pc, #224]	; (800bc0c <tcp_receive+0x730>)
 800bb2c:	f240 523f 	movw	r2, #1343	; 0x53f
 800bb30:	493a      	ldr	r1, [pc, #232]	; (800bc1c <tcp_receive+0x740>)
 800bb32:	4838      	ldr	r0, [pc, #224]	; (800bc14 <tcp_receive+0x738>)
 800bb34:	f004 fb5a 	bl	80101ec <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bb38:	4b33      	ldr	r3, [pc, #204]	; (800bc08 <tcp_receive+0x72c>)
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	891a      	ldrh	r2, [r3, #8]
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800bb46:	e00e      	b.n	800bb66 <tcp_receive+0x68a>
          off -= p->len;
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	895b      	ldrh	r3, [r3, #10]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	1a9b      	subs	r3, r3, r2
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	8a3a      	ldrh	r2, [r7, #16]
 800bb58:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	895b      	ldrh	r3, [r3, #10]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	dcea      	bgt.n	800bb48 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	425b      	negs	r3, r3
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	b21b      	sxth	r3, r3
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	69b8      	ldr	r0, [r7, #24]
 800bb80:	f7fc fed4 	bl	800892c <pbuf_header>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d01c      	beq.n	800bbc4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800bb8a:	4b20      	ldr	r3, [pc, #128]	; (800bc0c <tcp_receive+0x730>)
 800bb8c:	f240 524c 	movw	r2, #1356	; 0x54c
 800bb90:	4923      	ldr	r1, [pc, #140]	; (800bc20 <tcp_receive+0x744>)
 800bb92:	4820      	ldr	r0, [pc, #128]	; (800bc14 <tcp_receive+0x738>)
 800bb94:	f004 fb2a 	bl	80101ec <iprintf>
 800bb98:	e014      	b.n	800bbc4 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800bb9a:	4b1b      	ldr	r3, [pc, #108]	; (800bc08 <tcp_receive+0x72c>)
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba0:	b292      	uxth	r2, r2
 800bba2:	4252      	negs	r2, r2
 800bba4:	b292      	uxth	r2, r2
 800bba6:	b212      	sxth	r2, r2
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fc febe 	bl	800892c <pbuf_header>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d006      	beq.n	800bbc4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800bbb6:	4b15      	ldr	r3, [pc, #84]	; (800bc0c <tcp_receive+0x730>)
 800bbb8:	f240 5251 	movw	r2, #1361	; 0x551
 800bbbc:	4918      	ldr	r1, [pc, #96]	; (800bc20 <tcp_receive+0x744>)
 800bbbe:	4815      	ldr	r0, [pc, #84]	; (800bc14 <tcp_receive+0x738>)
 800bbc0:	f004 fb14 	bl	80101ec <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800bbc4:	4b10      	ldr	r3, [pc, #64]	; (800bc08 <tcp_receive+0x72c>)
 800bbc6:	891a      	ldrh	r2, [r3, #8]
 800bbc8:	4b0e      	ldr	r3, [pc, #56]	; (800bc04 <tcp_receive+0x728>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	b299      	uxth	r1, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	1acb      	subs	r3, r1, r3
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	4413      	add	r3, r2
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	4b0a      	ldr	r3, [pc, #40]	; (800bc08 <tcp_receive+0x72c>)
 800bbde:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe4:	4a07      	ldr	r2, [pc, #28]	; (800bc04 <tcp_receive+0x728>)
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	4b07      	ldr	r3, [pc, #28]	; (800bc08 <tcp_receive+0x72c>)
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	4a05      	ldr	r2, [pc, #20]	; (800bc04 <tcp_receive+0x728>)
 800bbee:	6812      	ldr	r2, [r2, #0]
 800bbf0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bbf2:	e025      	b.n	800bc40 <tcp_receive+0x764>
 800bbf4:	2000bb60 	.word	0x2000bb60
 800bbf8:	2000bb64 	.word	0x2000bb64
 800bbfc:	2000bb24 	.word	0x2000bb24
 800bc00:	2000bb66 	.word	0x2000bb66
 800bc04:	2000bb5c 	.word	0x2000bb5c
 800bc08:	2000bb3c 	.word	0x2000bb3c
 800bc0c:	08011fd8 	.word	0x08011fd8
 800bc10:	08012260 	.word	0x08012260
 800bc14:	0801201c 	.word	0x0801201c
 800bc18:	08012270 	.word	0x08012270
 800bc1c:	08012280 	.word	0x08012280
 800bc20:	08012290 	.word	0x08012290
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bc24:	4b87      	ldr	r3, [pc, #540]	; (800be44 <tcp_receive+0x968>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	da06      	bge.n	800bc40 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	7e9b      	ldrb	r3, [r3, #26]
 800bc36:	f043 0302 	orr.w	r3, r3, #2
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc40:	4b80      	ldr	r3, [pc, #512]	; (800be44 <tcp_receive+0x968>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f2c0 8410 	blt.w	800c470 <tcp_receive+0xf94>
 800bc50:	4b7c      	ldr	r3, [pc, #496]	; (800be44 <tcp_receive+0x968>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc5c:	440b      	add	r3, r1
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	3301      	adds	r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f300 8404 	bgt.w	800c470 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc6c:	4b75      	ldr	r3, [pc, #468]	; (800be44 <tcp_receive+0x968>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	f040 8287 	bne.w	800c184 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bc76:	4b74      	ldr	r3, [pc, #464]	; (800be48 <tcp_receive+0x96c>)
 800bc78:	891c      	ldrh	r4, [r3, #8]
 800bc7a:	4b73      	ldr	r3, [pc, #460]	; (800be48 <tcp_receive+0x96c>)
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	899b      	ldrh	r3, [r3, #12]
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fb fc7e 	bl	8007584 <lwip_htons>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <tcp_receive+0x7ba>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e000      	b.n	800bc98 <tcp_receive+0x7bc>
 800bc96:	2300      	movs	r3, #0
 800bc98:	4423      	add	r3, r4
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	4b6b      	ldr	r3, [pc, #428]	; (800be4c <tcp_receive+0x970>)
 800bc9e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bca4:	4b69      	ldr	r3, [pc, #420]	; (800be4c <tcp_receive+0x970>)
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d26e      	bcs.n	800bd8a <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bcac:	4b66      	ldr	r3, [pc, #408]	; (800be48 <tcp_receive+0x96c>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	899b      	ldrh	r3, [r3, #12]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fb fc65 	bl	8007584 <lwip_htons>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f003 0301 	and.w	r3, r3, #1
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d01b      	beq.n	800bcfc <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bcc4:	4b60      	ldr	r3, [pc, #384]	; (800be48 <tcp_receive+0x96c>)
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	899b      	ldrh	r3, [r3, #12]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcd0:	b29c      	uxth	r4, r3
 800bcd2:	4b5d      	ldr	r3, [pc, #372]	; (800be48 <tcp_receive+0x96c>)
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	899b      	ldrh	r3, [r3, #12]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fb fc52 	bl	8007584 <lwip_htons>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fb fc4b 	bl	8007584 <lwip_htons>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b55      	ldr	r3, [pc, #340]	; (800be48 <tcp_receive+0x96c>)
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4322      	orrs	r2, r4
 800bcf8:	b292      	uxth	r2, r2
 800bcfa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd00:	4b51      	ldr	r3, [pc, #324]	; (800be48 <tcp_receive+0x96c>)
 800bd02:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd04:	4b50      	ldr	r3, [pc, #320]	; (800be48 <tcp_receive+0x96c>)
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	899b      	ldrh	r3, [r3, #12]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fb fc39 	bl	8007584 <lwip_htons>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d005      	beq.n	800bd28 <tcp_receive+0x84c>
            inseg.len -= 1;
 800bd1c:	4b4a      	ldr	r3, [pc, #296]	; (800be48 <tcp_receive+0x96c>)
 800bd1e:	891b      	ldrh	r3, [r3, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	4b48      	ldr	r3, [pc, #288]	; (800be48 <tcp_receive+0x96c>)
 800bd26:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bd28:	4b47      	ldr	r3, [pc, #284]	; (800be48 <tcp_receive+0x96c>)
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	4a46      	ldr	r2, [pc, #280]	; (800be48 <tcp_receive+0x96c>)
 800bd2e:	8912      	ldrh	r2, [r2, #8]
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fc fcaa 	bl	800868c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bd38:	4b43      	ldr	r3, [pc, #268]	; (800be48 <tcp_receive+0x96c>)
 800bd3a:	891c      	ldrh	r4, [r3, #8]
 800bd3c:	4b42      	ldr	r3, [pc, #264]	; (800be48 <tcp_receive+0x96c>)
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	899b      	ldrh	r3, [r3, #12]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fb fc1d 	bl	8007584 <lwip_htons>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <tcp_receive+0x87c>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e000      	b.n	800bd5a <tcp_receive+0x87e>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4423      	add	r3, r4
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	4b3b      	ldr	r3, [pc, #236]	; (800be4c <tcp_receive+0x970>)
 800bd60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd62:	4b3a      	ldr	r3, [pc, #232]	; (800be4c <tcp_receive+0x970>)
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	4b36      	ldr	r3, [pc, #216]	; (800be44 <tcp_receive+0x968>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	441a      	add	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd76:	440b      	add	r3, r1
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d006      	beq.n	800bd8a <tcp_receive+0x8ae>
 800bd7c:	4b34      	ldr	r3, [pc, #208]	; (800be50 <tcp_receive+0x974>)
 800bd7e:	f240 527e 	movw	r2, #1406	; 0x57e
 800bd82:	4934      	ldr	r1, [pc, #208]	; (800be54 <tcp_receive+0x978>)
 800bd84:	4834      	ldr	r0, [pc, #208]	; (800be58 <tcp_receive+0x97c>)
 800bd86:	f004 fa31 	bl	80101ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80e1 	beq.w	800bf56 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bd94:	4b2c      	ldr	r3, [pc, #176]	; (800be48 <tcp_receive+0x96c>)
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	899b      	ldrh	r3, [r3, #12]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fb fbf1 	bl	8007584 <lwip_htons>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d010      	beq.n	800bdce <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bdac:	e00a      	b.n	800bdc4 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800bdbe:	68b8      	ldr	r0, [r7, #8]
 800bdc0:	f7fd ff32 	bl	8009c28 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1f0      	bne.n	800bdae <tcp_receive+0x8d2>
 800bdcc:	e0c3      	b.n	800bf56 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bdd4:	e04f      	b.n	800be76 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	899b      	ldrh	r3, [r3, #12]
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fb fbd0 	bl	8007584 <lwip_htons>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d03b      	beq.n	800be66 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bdee:	4b16      	ldr	r3, [pc, #88]	; (800be48 <tcp_receive+0x96c>)
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	899b      	ldrh	r3, [r3, #12]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fb fbc4 	bl	8007584 <lwip_htons>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800be02:	2b00      	cmp	r3, #0
 800be04:	d12f      	bne.n	800be66 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800be06:	4b10      	ldr	r3, [pc, #64]	; (800be48 <tcp_receive+0x96c>)
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	899b      	ldrh	r3, [r3, #12]
 800be0c:	b29c      	uxth	r4, r3
 800be0e:	2001      	movs	r0, #1
 800be10:	f7fb fbb8 	bl	8007584 <lwip_htons>
 800be14:	4603      	mov	r3, r0
 800be16:	461a      	mov	r2, r3
 800be18:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <tcp_receive+0x96c>)
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	4322      	orrs	r2, r4
 800be1e:	b292      	uxth	r2, r2
 800be20:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800be22:	4b09      	ldr	r3, [pc, #36]	; (800be48 <tcp_receive+0x96c>)
 800be24:	891c      	ldrh	r4, [r3, #8]
 800be26:	4b08      	ldr	r3, [pc, #32]	; (800be48 <tcp_receive+0x96c>)
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	899b      	ldrh	r3, [r3, #12]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fb fba8 	bl	8007584 <lwip_htons>
 800be34:	4603      	mov	r3, r0
 800be36:	f003 0303 	and.w	r3, r3, #3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00e      	beq.n	800be5c <tcp_receive+0x980>
 800be3e:	2301      	movs	r3, #1
 800be40:	e00d      	b.n	800be5e <tcp_receive+0x982>
 800be42:	bf00      	nop
 800be44:	2000bb5c 	.word	0x2000bb5c
 800be48:	2000bb3c 	.word	0x2000bb3c
 800be4c:	2000bb66 	.word	0x2000bb66
 800be50:	08011fd8 	.word	0x08011fd8
 800be54:	080122a4 	.word	0x080122a4
 800be58:	0801201c 	.word	0x0801201c
 800be5c:	2300      	movs	r3, #0
 800be5e:	4423      	add	r3, r4
 800be60:	b29a      	uxth	r2, r3
 800be62:	4b95      	ldr	r3, [pc, #596]	; (800c0b8 <tcp_receive+0xbdc>)
 800be64:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800be70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be72:	f7fd fed9 	bl	8009c28 <tcp_seg_free>
            while (next &&
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00e      	beq.n	800be9a <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800be7c:	4b8e      	ldr	r3, [pc, #568]	; (800c0b8 <tcp_receive+0xbdc>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	4b8e      	ldr	r3, [pc, #568]	; (800c0bc <tcp_receive+0xbe0>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	441a      	add	r2, r3
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be90:	8909      	ldrh	r1, [r1, #8]
 800be92:	440b      	add	r3, r1
 800be94:	1ad3      	subs	r3, r2, r3
            while (next &&
 800be96:	2b00      	cmp	r3, #0
 800be98:	da9d      	bge.n	800bdd6 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800be9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d057      	beq.n	800bf50 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800bea0:	4b85      	ldr	r3, [pc, #532]	; (800c0b8 <tcp_receive+0xbdc>)
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	461a      	mov	r2, r3
 800bea6:	4b85      	ldr	r3, [pc, #532]	; (800c0bc <tcp_receive+0xbe0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	441a      	add	r2, r3
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	dd4b      	ble.n	800bf50 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	4b7e      	ldr	r3, [pc, #504]	; (800c0bc <tcp_receive+0xbe0>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	b29a      	uxth	r2, r3
 800beca:	4b7d      	ldr	r3, [pc, #500]	; (800c0c0 <tcp_receive+0xbe4>)
 800becc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bece:	4b7c      	ldr	r3, [pc, #496]	; (800c0c0 <tcp_receive+0xbe4>)
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	899b      	ldrh	r3, [r3, #12]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fb fb54 	bl	8007584 <lwip_htons>
 800bedc:	4603      	mov	r3, r0
 800bede:	f003 0302 	and.w	r3, r3, #2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d005      	beq.n	800bef2 <tcp_receive+0xa16>
                inseg.len -= 1;
 800bee6:	4b76      	ldr	r3, [pc, #472]	; (800c0c0 <tcp_receive+0xbe4>)
 800bee8:	891b      	ldrh	r3, [r3, #8]
 800beea:	3b01      	subs	r3, #1
 800beec:	b29a      	uxth	r2, r3
 800beee:	4b74      	ldr	r3, [pc, #464]	; (800c0c0 <tcp_receive+0xbe4>)
 800bef0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bef2:	4b73      	ldr	r3, [pc, #460]	; (800c0c0 <tcp_receive+0xbe4>)
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	4a72      	ldr	r2, [pc, #456]	; (800c0c0 <tcp_receive+0xbe4>)
 800bef8:	8912      	ldrh	r2, [r2, #8]
 800befa:	4611      	mov	r1, r2
 800befc:	4618      	mov	r0, r3
 800befe:	f7fc fbc5 	bl	800868c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bf02:	4b6f      	ldr	r3, [pc, #444]	; (800c0c0 <tcp_receive+0xbe4>)
 800bf04:	891c      	ldrh	r4, [r3, #8]
 800bf06:	4b6e      	ldr	r3, [pc, #440]	; (800c0c0 <tcp_receive+0xbe4>)
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	899b      	ldrh	r3, [r3, #12]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fb fb38 	bl	8007584 <lwip_htons>
 800bf14:	4603      	mov	r3, r0
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <tcp_receive+0xa46>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <tcp_receive+0xa48>
 800bf22:	2300      	movs	r3, #0
 800bf24:	4423      	add	r3, r4
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	4b63      	ldr	r3, [pc, #396]	; (800c0b8 <tcp_receive+0xbdc>)
 800bf2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bf2c:	4b62      	ldr	r3, [pc, #392]	; (800c0b8 <tcp_receive+0xbdc>)
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b62      	ldr	r3, [pc, #392]	; (800c0bc <tcp_receive+0xbe0>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	441a      	add	r2, r3
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d006      	beq.n	800bf50 <tcp_receive+0xa74>
 800bf42:	4b60      	ldr	r3, [pc, #384]	; (800c0c4 <tcp_receive+0xbe8>)
 800bf44:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800bf48:	495f      	ldr	r1, [pc, #380]	; (800c0c8 <tcp_receive+0xbec>)
 800bf4a:	4860      	ldr	r0, [pc, #384]	; (800c0cc <tcp_receive+0xbf0>)
 800bf4c:	f004 f94e 	bl	80101ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf54:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bf56:	4b58      	ldr	r3, [pc, #352]	; (800c0b8 <tcp_receive+0xbdc>)
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	4b57      	ldr	r3, [pc, #348]	; (800c0bc <tcp_receive+0xbe0>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	441a      	add	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf6a:	4b53      	ldr	r3, [pc, #332]	; (800c0b8 <tcp_receive+0xbdc>)
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d206      	bcs.n	800bf80 <tcp_receive+0xaa4>
 800bf72:	4b54      	ldr	r3, [pc, #336]	; (800c0c4 <tcp_receive+0xbe8>)
 800bf74:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bf78:	4955      	ldr	r1, [pc, #340]	; (800c0d0 <tcp_receive+0xbf4>)
 800bf7a:	4854      	ldr	r0, [pc, #336]	; (800c0cc <tcp_receive+0xbf0>)
 800bf7c:	f004 f936 	bl	80101ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf84:	4b4c      	ldr	r3, [pc, #304]	; (800c0b8 <tcp_receive+0xbdc>)
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7fd f9fd 	bl	8009390 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bf96:	4b4a      	ldr	r3, [pc, #296]	; (800c0c0 <tcp_receive+0xbe4>)
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	891b      	ldrh	r3, [r3, #8]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d006      	beq.n	800bfae <tcp_receive+0xad2>
          recv_data = inseg.p;
 800bfa0:	4b47      	ldr	r3, [pc, #284]	; (800c0c0 <tcp_receive+0xbe4>)
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	4a4b      	ldr	r2, [pc, #300]	; (800c0d4 <tcp_receive+0xbf8>)
 800bfa6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bfa8:	4b45      	ldr	r3, [pc, #276]	; (800c0c0 <tcp_receive+0xbe4>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bfae:	4b44      	ldr	r3, [pc, #272]	; (800c0c0 <tcp_receive+0xbe4>)
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	899b      	ldrh	r3, [r3, #12]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fb fae4 	bl	8007584 <lwip_htons>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f000 80b4 	beq.w	800c130 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bfc8:	4b43      	ldr	r3, [pc, #268]	; (800c0d8 <tcp_receive+0xbfc>)
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	f043 0320 	orr.w	r3, r3, #32
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	4b41      	ldr	r3, [pc, #260]	; (800c0d8 <tcp_receive+0xbfc>)
 800bfd4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bfd6:	e0ab      	b.n	800c130 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfdc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	4a35      	ldr	r2, [pc, #212]	; (800c0bc <tcp_receive+0xbe0>)
 800bfe8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	891b      	ldrh	r3, [r3, #8]
 800bfee:	461c      	mov	r4, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	899b      	ldrh	r3, [r3, #12]
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fb fac3 	bl	8007584 <lwip_htons>
 800bffe:	4603      	mov	r3, r0
 800c000:	f003 0303 	and.w	r3, r3, #3
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <tcp_receive+0xb30>
 800c008:	2301      	movs	r3, #1
 800c00a:	e000      	b.n	800c00e <tcp_receive+0xb32>
 800c00c:	2300      	movs	r3, #0
 800c00e:	191a      	adds	r2, r3, r4
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	441a      	add	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c01e:	461c      	mov	r4, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	891b      	ldrh	r3, [r3, #8]
 800c024:	461d      	mov	r5, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	899b      	ldrh	r3, [r3, #12]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fb faa8 	bl	8007584 <lwip_htons>
 800c034:	4603      	mov	r3, r0
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <tcp_receive+0xb66>
 800c03e:	2301      	movs	r3, #1
 800c040:	e000      	b.n	800c044 <tcp_receive+0xb68>
 800c042:	2300      	movs	r3, #0
 800c044:	442b      	add	r3, r5
 800c046:	429c      	cmp	r4, r3
 800c048:	d206      	bcs.n	800c058 <tcp_receive+0xb7c>
 800c04a:	4b1e      	ldr	r3, [pc, #120]	; (800c0c4 <tcp_receive+0xbe8>)
 800c04c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800c050:	4922      	ldr	r1, [pc, #136]	; (800c0dc <tcp_receive+0xc00>)
 800c052:	481e      	ldr	r0, [pc, #120]	; (800c0cc <tcp_receive+0xbf0>)
 800c054:	f004 f8ca 	bl	80101ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	891b      	ldrh	r3, [r3, #8]
 800c05c:	461c      	mov	r4, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	899b      	ldrh	r3, [r3, #12]
 800c064:	b29b      	uxth	r3, r3
 800c066:	4618      	mov	r0, r3
 800c068:	f7fb fa8c 	bl	8007584 <lwip_htons>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <tcp_receive+0xb9e>
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <tcp_receive+0xba0>
 800c07a:	2300      	movs	r3, #0
 800c07c:	1919      	adds	r1, r3, r4
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c082:	b28b      	uxth	r3, r1
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7fd f97f 	bl	8009390 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	891b      	ldrh	r3, [r3, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d028      	beq.n	800c0ee <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c09c:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <tcp_receive+0xbf8>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d01d      	beq.n	800c0e0 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800c0a4:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <tcp_receive+0xbf8>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	f7fc fd38 	bl	8008b24 <pbuf_cat>
 800c0b4:	e018      	b.n	800c0e8 <tcp_receive+0xc0c>
 800c0b6:	bf00      	nop
 800c0b8:	2000bb66 	.word	0x2000bb66
 800c0bc:	2000bb5c 	.word	0x2000bb5c
 800c0c0:	2000bb3c 	.word	0x2000bb3c
 800c0c4:	08011fd8 	.word	0x08011fd8
 800c0c8:	080122dc 	.word	0x080122dc
 800c0cc:	0801201c 	.word	0x0801201c
 800c0d0:	08012318 	.word	0x08012318
 800c0d4:	2000bb6c 	.word	0x2000bb6c
 800c0d8:	2000bb69 	.word	0x2000bb69
 800c0dc:	08012338 	.word	0x08012338
            } else {
              recv_data = cseg->p;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	4a71      	ldr	r2, [pc, #452]	; (800c2ac <tcp_receive+0xdd0>)
 800c0e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	899b      	ldrh	r3, [r3, #12]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fb fa44 	bl	8007584 <lwip_htons>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00d      	beq.n	800c122 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c106:	4b6a      	ldr	r3, [pc, #424]	; (800c2b0 <tcp_receive+0xdd4>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	f043 0320 	orr.w	r3, r3, #32
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	4b67      	ldr	r3, [pc, #412]	; (800c2b0 <tcp_receive+0xdd4>)
 800c112:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	7d1b      	ldrb	r3, [r3, #20]
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d102      	bne.n	800c122 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2207      	movs	r2, #7
 800c120:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7fd fd7c 	bl	8009c28 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c144:	429a      	cmp	r2, r3
 800c146:	f43f af47 	beq.w	800bfd8 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	7e9b      	ldrb	r3, [r3, #26]
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00e      	beq.n	800c174 <tcp_receive+0xc98>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	7e9b      	ldrb	r3, [r3, #26]
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	769a      	strb	r2, [r3, #26]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	7e9b      	ldrb	r3, [r3, #26]
 800c168:	f043 0302 	orr.w	r3, r3, #2
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c172:	e181      	b.n	800c478 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	7e9b      	ldrb	r3, [r3, #26]
 800c178:	f043 0301 	orr.w	r3, r3, #1
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c182:	e179      	b.n	800c478 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fc91 	bl	800caac <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c192:	4848      	ldr	r0, [pc, #288]	; (800c2b4 <tcp_receive+0xdd8>)
 800c194:	f7fd fd60 	bl	8009c58 <tcp_seg_copy>
 800c198:	4602      	mov	r2, r0
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800c19e:	e16b      	b.n	800c478 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1aa:	e150      	b.n	800c44e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	4b41      	ldr	r3, [pc, #260]	; (800c2b8 <tcp_receive+0xddc>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d11d      	bne.n	800c1f6 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c1ba:	4b3e      	ldr	r3, [pc, #248]	; (800c2b4 <tcp_receive+0xdd8>)
 800c1bc:	891a      	ldrh	r2, [r3, #8]
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	f240 8148 	bls.w	800c458 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800c1c8:	483a      	ldr	r0, [pc, #232]	; (800c2b4 <tcp_receive+0xdd8>)
 800c1ca:	f7fd fd45 	bl	8009c58 <tcp_seg_copy>
 800c1ce:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 8142 	beq.w	800c45c <tcp_receive+0xf80>
                  if (prev != NULL) {
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e002      	b.n	800c1ec <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c1ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff f8fe 	bl	800b3f0 <tcp_oos_insert_segment>
                }
                break;
 800c1f4:	e132      	b.n	800c45c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d117      	bne.n	800c22c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c1fc:	4b2e      	ldr	r3, [pc, #184]	; (800c2b8 <tcp_receive+0xddc>)
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	da57      	bge.n	800c2bc <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800c20c:	4829      	ldr	r0, [pc, #164]	; (800c2b4 <tcp_receive+0xdd8>)
 800c20e:	f7fd fd23 	bl	8009c58 <tcp_seg_copy>
 800c212:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f000 8122 	beq.w	800c460 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800c222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7ff f8e3 	bl	800b3f0 <tcp_oos_insert_segment>
                  }
                  break;
 800c22a:	e119      	b.n	800c460 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800c22c:	4b22      	ldr	r3, [pc, #136]	; (800c2b8 <tcp_receive+0xddc>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	3b01      	subs	r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	db3e      	blt.n	800c2bc <tcp_receive+0xde0>
 800c23e:	4b1e      	ldr	r3, [pc, #120]	; (800c2b8 <tcp_receive+0xddc>)
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	3301      	adds	r3, #1
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dc35      	bgt.n	800c2bc <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800c250:	4818      	ldr	r0, [pc, #96]	; (800c2b4 <tcp_receive+0xdd8>)
 800c252:	f7fd fd01 	bl	8009c58 <tcp_seg_copy>
 800c256:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f000 8102 	beq.w	800c464 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c268:	8912      	ldrh	r2, [r2, #8]
 800c26a:	441a      	add	r2, r3
 800c26c:	4b12      	ldr	r3, [pc, #72]	; (800c2b8 <tcp_receive+0xddc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	dd12      	ble.n	800c29c <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c276:	4b10      	ldr	r3, [pc, #64]	; (800c2b8 <tcp_receive+0xddc>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b29b      	uxth	r3, r3
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	b29a      	uxth	r2, r3
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	891b      	ldrh	r3, [r3, #8]
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f7fc f9f8 	bl	800868c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f7ff f8a3 	bl	800b3f0 <tcp_oos_insert_segment>
                  }
                  break;
 800c2aa:	e0db      	b.n	800c464 <tcp_receive+0xf88>
 800c2ac:	2000bb6c 	.word	0x2000bb6c
 800c2b0:	2000bb69 	.word	0x2000bb69
 800c2b4:	2000bb3c 	.word	0x2000bb3c
 800c2b8:	2000bb5c 	.word	0x2000bb5c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 80bf 	bne.w	800c444 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c2c6:	4b7c      	ldr	r3, [pc, #496]	; (800c4b8 <tcp_receive+0xfdc>)
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f340 80b6 	ble.w	800c444 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	899b      	ldrh	r3, [r3, #12]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fb f94f 	bl	8007584 <lwip_htons>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f040 80bb 	bne.w	800c468 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c2f2:	4872      	ldr	r0, [pc, #456]	; (800c4bc <tcp_receive+0xfe0>)
 800c2f4:	f7fd fcb0 	bl	8009c58 <tcp_seg_copy>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	f000 80b2 	beq.w	800c46c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c310:	8912      	ldrh	r2, [r2, #8]
 800c312:	441a      	add	r2, r3
 800c314:	4b68      	ldr	r3, [pc, #416]	; (800c4b8 <tcp_receive+0xfdc>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dd12      	ble.n	800c344 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c31e:	4b66      	ldr	r3, [pc, #408]	; (800c4b8 <tcp_receive+0xfdc>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	b29a      	uxth	r2, r3
 800c324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	b29a      	uxth	r2, r3
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	891b      	ldrh	r3, [r3, #8]
 800c33c:	4619      	mov	r1, r3
 800c33e:	4610      	mov	r0, r2
 800c340:	f7fc f9a4 	bl	800868c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c344:	4b5e      	ldr	r3, [pc, #376]	; (800c4c0 <tcp_receive+0xfe4>)
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	4b5b      	ldr	r3, [pc, #364]	; (800c4b8 <tcp_receive+0xfdc>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	441a      	add	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c358:	440b      	add	r3, r1
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f340 8085 	ble.w	800c46c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	899b      	ldrh	r3, [r3, #12]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fb f909 	bl	8007584 <lwip_htons>
 800c372:	4603      	mov	r3, r0
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01e      	beq.n	800c3ba <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	899b      	ldrh	r3, [r3, #12]
 800c384:	b29b      	uxth	r3, r3
 800c386:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c38a:	b29c      	uxth	r4, r3
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	899b      	ldrh	r3, [r3, #12]
 800c394:	b29b      	uxth	r3, r3
 800c396:	4618      	mov	r0, r3
 800c398:	f7fb f8f4 	bl	8007584 <lwip_htons>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fb f8ed 	bl	8007584 <lwip_htons>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	4322      	orrs	r2, r4
 800c3b6:	b292      	uxth	r2, r2
 800c3b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b299      	uxth	r1, r3
 800c3c8:	4b3b      	ldr	r3, [pc, #236]	; (800c4b8 <tcp_receive+0xfdc>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	1a8a      	subs	r2, r1, r2
 800c3d4:	b292      	uxth	r2, r2
 800c3d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	891b      	ldrh	r3, [r3, #8]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	f7fc f950 	bl	800868c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	891c      	ldrh	r4, [r3, #8]
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	899b      	ldrh	r3, [r3, #12]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fb f8c1 	bl	8007584 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	f003 0303 	and.w	r3, r3, #3
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <tcp_receive+0xf34>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <tcp_receive+0xf36>
 800c410:	2300      	movs	r3, #0
 800c412:	4423      	add	r3, r4
 800c414:	b29a      	uxth	r2, r3
 800c416:	4b2a      	ldr	r3, [pc, #168]	; (800c4c0 <tcp_receive+0xfe4>)
 800c418:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c41a:	4b29      	ldr	r3, [pc, #164]	; (800c4c0 <tcp_receive+0xfe4>)
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	4b25      	ldr	r3, [pc, #148]	; (800c4b8 <tcp_receive+0xfdc>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	441a      	add	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c42e:	440b      	add	r3, r1
 800c430:	429a      	cmp	r2, r3
 800c432:	d01b      	beq.n	800c46c <tcp_receive+0xf90>
 800c434:	4b23      	ldr	r3, [pc, #140]	; (800c4c4 <tcp_receive+0xfe8>)
 800c436:	f240 627a 	movw	r2, #1658	; 0x67a
 800c43a:	4923      	ldr	r1, [pc, #140]	; (800c4c8 <tcp_receive+0xfec>)
 800c43c:	4823      	ldr	r0, [pc, #140]	; (800c4cc <tcp_receive+0xff0>)
 800c43e:	f003 fed5 	bl	80101ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c442:	e013      	b.n	800c46c <tcp_receive+0xf90>
              }
            }
            prev = next;
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c450:	2b00      	cmp	r3, #0
 800c452:	f47f aeab 	bne.w	800c1ac <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800c456:	e00f      	b.n	800c478 <tcp_receive+0xf9c>
                break;
 800c458:	bf00      	nop
 800c45a:	e00d      	b.n	800c478 <tcp_receive+0xf9c>
                break;
 800c45c:	bf00      	nop
 800c45e:	e00b      	b.n	800c478 <tcp_receive+0xf9c>
                  break;
 800c460:	bf00      	nop
 800c462:	e009      	b.n	800c478 <tcp_receive+0xf9c>
                  break;
 800c464:	bf00      	nop
 800c466:	e007      	b.n	800c478 <tcp_receive+0xf9c>
                  break;
 800c468:	bf00      	nop
 800c46a:	e005      	b.n	800c478 <tcp_receive+0xf9c>
                break;
 800c46c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800c46e:	e003      	b.n	800c478 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fb1b 	bl	800caac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c476:	e01a      	b.n	800c4ae <tcp_receive+0xfd2>
 800c478:	e019      	b.n	800c4ae <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c47a:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <tcp_receive+0xfdc>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	db0a      	blt.n	800c49e <tcp_receive+0xfc2>
 800c488:	4b0b      	ldr	r3, [pc, #44]	; (800c4b8 <tcp_receive+0xfdc>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c494:	440b      	add	r3, r1
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	3301      	adds	r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dd07      	ble.n	800c4ae <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	7e9b      	ldrb	r3, [r3, #26]
 800c4a2:	f043 0302 	orr.w	r3, r3, #2
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800c4ac:	e7ff      	b.n	800c4ae <tcp_receive+0xfd2>
 800c4ae:	bf00      	nop
 800c4b0:	3734      	adds	r7, #52	; 0x34
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000bb5c 	.word	0x2000bb5c
 800c4bc:	2000bb3c 	.word	0x2000bb3c
 800c4c0:	2000bb66 	.word	0x2000bb66
 800c4c4:	08011fd8 	.word	0x08011fd8
 800c4c8:	080122a4 	.word	0x080122a4
 800c4cc:	0801201c 	.word	0x0801201c

0800c4d0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c4d6:	4b17      	ldr	r3, [pc, #92]	; (800c534 <tcp_getoptbyte+0x64>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d005      	beq.n	800c4ea <tcp_getoptbyte+0x1a>
 800c4de:	4b16      	ldr	r3, [pc, #88]	; (800c538 <tcp_getoptbyte+0x68>)
 800c4e0:	881a      	ldrh	r2, [r3, #0]
 800c4e2:	4b16      	ldr	r3, [pc, #88]	; (800c53c <tcp_getoptbyte+0x6c>)
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d20e      	bcs.n	800c508 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c4ea:	4b15      	ldr	r3, [pc, #84]	; (800c540 <tcp_getoptbyte+0x70>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3314      	adds	r3, #20
 800c4f0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800c4f2:	4b11      	ldr	r3, [pc, #68]	; (800c538 <tcp_getoptbyte+0x68>)
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	b291      	uxth	r1, r2
 800c4fa:	4a0f      	ldr	r2, [pc, #60]	; (800c538 <tcp_getoptbyte+0x68>)
 800c4fc:	8011      	strh	r1, [r2, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	4413      	add	r3, r2
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	e010      	b.n	800c52a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c508:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <tcp_getoptbyte+0x68>)
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	b291      	uxth	r1, r2
 800c510:	4a09      	ldr	r2, [pc, #36]	; (800c538 <tcp_getoptbyte+0x68>)
 800c512:	8011      	strh	r1, [r2, #0]
 800c514:	b2da      	uxtb	r2, r3
 800c516:	4b09      	ldr	r3, [pc, #36]	; (800c53c <tcp_getoptbyte+0x6c>)
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800c520:	4b04      	ldr	r3, [pc, #16]	; (800c534 <tcp_getoptbyte+0x64>)
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	4413      	add	r3, r2
 800c528:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	bc80      	pop	{r7}
 800c532:	4770      	bx	lr
 800c534:	2000bb54 	.word	0x2000bb54
 800c538:	2000bb58 	.word	0x2000bb58
 800c53c:	2000bb52 	.word	0x2000bb52
 800c540:	2000bb4c 	.word	0x2000bb4c

0800c544 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c54c:	4b2e      	ldr	r3, [pc, #184]	; (800c608 <tcp_parseopt+0xc4>)
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d055      	beq.n	800c600 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c554:	4b2d      	ldr	r3, [pc, #180]	; (800c60c <tcp_parseopt+0xc8>)
 800c556:	2200      	movs	r2, #0
 800c558:	801a      	strh	r2, [r3, #0]
 800c55a:	e045      	b.n	800c5e8 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800c55c:	f7ff ffb8 	bl	800c4d0 <tcp_getoptbyte>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b02      	cmp	r3, #2
 800c568:	d006      	beq.n	800c578 <tcp_parseopt+0x34>
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	dc2b      	bgt.n	800c5c6 <tcp_parseopt+0x82>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d041      	beq.n	800c5f6 <tcp_parseopt+0xb2>
 800c572:	2b01      	cmp	r3, #1
 800c574:	d127      	bne.n	800c5c6 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800c576:	e037      	b.n	800c5e8 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c578:	f7ff ffaa 	bl	800c4d0 <tcp_getoptbyte>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d13b      	bne.n	800c5fa <tcp_parseopt+0xb6>
 800c582:	4b22      	ldr	r3, [pc, #136]	; (800c60c <tcp_parseopt+0xc8>)
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	3301      	adds	r3, #1
 800c588:	4a1f      	ldr	r2, [pc, #124]	; (800c608 <tcp_parseopt+0xc4>)
 800c58a:	8812      	ldrh	r2, [r2, #0]
 800c58c:	4293      	cmp	r3, r2
 800c58e:	da34      	bge.n	800c5fa <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c590:	f7ff ff9e 	bl	800c4d0 <tcp_getoptbyte>
 800c594:	4603      	mov	r3, r0
 800c596:	b29b      	uxth	r3, r3
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800c59c:	f7ff ff98 	bl	800c4d0 <tcp_getoptbyte>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	89bb      	ldrh	r3, [r7, #12]
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c5aa:	89bb      	ldrh	r3, [r7, #12]
 800c5ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c5b0:	d804      	bhi.n	800c5bc <tcp_parseopt+0x78>
 800c5b2:	89bb      	ldrh	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <tcp_parseopt+0x78>
 800c5b8:	89ba      	ldrh	r2, [r7, #12]
 800c5ba:	e001      	b.n	800c5c0 <tcp_parseopt+0x7c>
 800c5bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800c5c4:	e010      	b.n	800c5e8 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800c5c6:	f7ff ff83 	bl	800c4d0 <tcp_getoptbyte>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800c5ce:	7afb      	ldrb	r3, [r7, #11]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d914      	bls.n	800c5fe <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <tcp_parseopt+0xc8>)
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	4413      	add	r3, r2
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	3b02      	subs	r3, #2
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	4b09      	ldr	r3, [pc, #36]	; (800c60c <tcp_parseopt+0xc8>)
 800c5e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c5e8:	4b08      	ldr	r3, [pc, #32]	; (800c60c <tcp_parseopt+0xc8>)
 800c5ea:	881a      	ldrh	r2, [r3, #0]
 800c5ec:	4b06      	ldr	r3, [pc, #24]	; (800c608 <tcp_parseopt+0xc4>)
 800c5ee:	881b      	ldrh	r3, [r3, #0]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d3b3      	bcc.n	800c55c <tcp_parseopt+0x18>
 800c5f4:	e004      	b.n	800c600 <tcp_parseopt+0xbc>
        return;
 800c5f6:	bf00      	nop
 800c5f8:	e002      	b.n	800c600 <tcp_parseopt+0xbc>
          return;
 800c5fa:	bf00      	nop
 800c5fc:	e000      	b.n	800c600 <tcp_parseopt+0xbc>
          return;
 800c5fe:	bf00      	nop
      }
    }
  }
}
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	2000bb50 	.word	0x2000bb50
 800c60c:	2000bb58 	.word	0x2000bb58

0800c610 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c610:	b480      	push	{r7}
 800c612:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c614:	4b05      	ldr	r3, [pc, #20]	; (800c62c <tcp_trigger_input_pcb_close+0x1c>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f043 0310 	orr.w	r3, r3, #16
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	4b03      	ldr	r3, [pc, #12]	; (800c62c <tcp_trigger_input_pcb_close+0x1c>)
 800c620:	701a      	strb	r2, [r3, #0]
}
 800c622:	bf00      	nop
 800c624:	46bd      	mov	sp, r7
 800c626:	bc80      	pop	{r7}
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	2000bb69 	.word	0x2000bb69

0800c630 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	607b      	str	r3, [r7, #4]
 800c63a:	460b      	mov	r3, r1
 800c63c:	817b      	strh	r3, [r7, #10]
 800c63e:	4613      	mov	r3, r2
 800c640:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c642:	897a      	ldrh	r2, [r7, #10]
 800c644:	893b      	ldrh	r3, [r7, #8]
 800c646:	4413      	add	r3, r2
 800c648:	b29b      	uxth	r3, r3
 800c64a:	3314      	adds	r3, #20
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	2200      	movs	r2, #0
 800c650:	4619      	mov	r1, r3
 800c652:	2001      	movs	r0, #1
 800c654:	f7fb fe16 	bl	8008284 <pbuf_alloc>
 800c658:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d056      	beq.n	800c70e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c660:	897b      	ldrh	r3, [r7, #10]
 800c662:	3313      	adds	r3, #19
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	8952      	ldrh	r2, [r2, #10]
 800c668:	4293      	cmp	r3, r2
 800c66a:	db05      	blt.n	800c678 <tcp_output_alloc_header+0x48>
 800c66c:	4b2a      	ldr	r3, [pc, #168]	; (800c718 <tcp_output_alloc_header+0xe8>)
 800c66e:	2272      	movs	r2, #114	; 0x72
 800c670:	492a      	ldr	r1, [pc, #168]	; (800c71c <tcp_output_alloc_header+0xec>)
 800c672:	482b      	ldr	r0, [pc, #172]	; (800c720 <tcp_output_alloc_header+0xf0>)
 800c674:	f003 fdba 	bl	80101ec <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8adb      	ldrh	r3, [r3, #22]
 800c682:	4618      	mov	r0, r3
 800c684:	f7fa ff7e 	bl	8007584 <lwip_htons>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8b1b      	ldrh	r3, [r3, #24]
 800c694:	4618      	mov	r0, r3
 800c696:	f7fa ff75 	bl	8007584 <lwip_htons>
 800c69a:	4603      	mov	r3, r0
 800c69c:	461a      	mov	r2, r3
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fa ff76 	bl	800759e <lwip_htonl>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800c6b8:	897b      	ldrh	r3, [r7, #10]
 800c6ba:	089b      	lsrs	r3, r3, #2
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	3305      	adds	r3, #5
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	031b      	lsls	r3, r3, #12
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	f043 0310 	orr.w	r3, r3, #16
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fa ff59 	bl	8007584 <lwip_htons>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fa ff50 	bl	8007584 <lwip_htons>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	741a      	strb	r2, [r3, #16]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	749a      	strb	r2, [r3, #18]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c708:	441a      	add	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c70e:	697b      	ldr	r3, [r7, #20]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	08012360 	.word	0x08012360
 800c71c:	08012394 	.word	0x08012394
 800c720:	080123c4 	.word	0x080123c4

0800c724 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c724:	b590      	push	{r4, r7, lr}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c730:	2b00      	cmp	r3, #0
 800c732:	d02d      	beq.n	800c790 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e002      	b.n	800c742 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1f8      	bne.n	800c73c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	899b      	ldrh	r3, [r3, #12]
 800c750:	b29b      	uxth	r3, r3
 800c752:	4618      	mov	r0, r3
 800c754:	f7fa ff16 	bl	8007584 <lwip_htons>
 800c758:	4603      	mov	r3, r0
 800c75a:	f003 0307 	and.w	r3, r3, #7
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d116      	bne.n	800c790 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	899b      	ldrh	r3, [r3, #12]
 800c768:	b29c      	uxth	r4, r3
 800c76a:	2001      	movs	r0, #1
 800c76c:	f7fa ff0a 	bl	8007584 <lwip_htons>
 800c770:	4603      	mov	r3, r0
 800c772:	461a      	mov	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	4322      	orrs	r2, r4
 800c77a:	b292      	uxth	r2, r2
 800c77c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7e9b      	ldrb	r3, [r3, #26]
 800c782:	f043 0320 	orr.w	r3, r3, #32
 800c786:	b2da      	uxtb	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	e004      	b.n	800c79a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c790:	2101      	movs	r1, #1
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f88e 	bl	800c8b4 <tcp_enqueue_flags>
 800c798:	4603      	mov	r3, r0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd90      	pop	{r4, r7, pc}
	...

0800c7a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800c7a4:	b590      	push	{r4, r7, lr}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c7b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c7c2:	2003      	movs	r0, #3
 800c7c4:	f7fb faca 	bl	8007d5c <memp_malloc>
 800c7c8:	6138      	str	r0, [r7, #16]
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c7d0:	68b8      	ldr	r0, [r7, #8]
 800c7d2:	f7fc f8cf 	bl	8008974 <pbuf_free>
    return NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e061      	b.n	800c89e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c7e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	891a      	ldrh	r2, [r3, #8]
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d205      	bcs.n	800c806 <tcp_create_segment+0x62>
 800c7fa:	4b2b      	ldr	r3, [pc, #172]	; (800c8a8 <tcp_create_segment+0x104>)
 800c7fc:	22ba      	movs	r2, #186	; 0xba
 800c7fe:	492b      	ldr	r1, [pc, #172]	; (800c8ac <tcp_create_segment+0x108>)
 800c800:	482b      	ldr	r0, [pc, #172]	; (800c8b0 <tcp_create_segment+0x10c>)
 800c802:	f003 fcf3 	bl	80101ec <iprintf>
  seg->len = p->tot_len - optlen;
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	891a      	ldrh	r2, [r3, #8]
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	b29a      	uxth	r2, r3
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800c816:	2114      	movs	r1, #20
 800c818:	68b8      	ldr	r0, [r7, #8]
 800c81a:	f7fc f887 	bl	800892c <pbuf_header>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c824:	6938      	ldr	r0, [r7, #16]
 800c826:	f7fd f9ff 	bl	8009c28 <tcp_seg_free>
    return NULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e037      	b.n	800c89e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	8ada      	ldrh	r2, [r3, #22]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	68dc      	ldr	r4, [r3, #12]
 800c840:	4610      	mov	r0, r2
 800c842:	f7fa fe9f 	bl	8007584 <lwip_htons>
 800c846:	4603      	mov	r3, r0
 800c848:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	8b1a      	ldrh	r2, [r3, #24]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	68dc      	ldr	r4, [r3, #12]
 800c852:	4610      	mov	r0, r2
 800c854:	f7fa fe96 	bl	8007584 <lwip_htons>
 800c858:	4603      	mov	r3, r0
 800c85a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	68dc      	ldr	r4, [r3, #12]
 800c860:	6838      	ldr	r0, [r7, #0]
 800c862:	f7fa fe9c 	bl	800759e <lwip_htonl>
 800c866:	4603      	mov	r3, r0
 800c868:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
 800c86c:	089b      	lsrs	r3, r3, #2
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	b29b      	uxth	r3, r3
 800c872:	3305      	adds	r3, #5
 800c874:	b29b      	uxth	r3, r3
 800c876:	031b      	lsls	r3, r3, #12
 800c878:	b29a      	uxth	r2, r3
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	4313      	orrs	r3, r2
 800c880:	b29a      	uxth	r2, r3
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	68dc      	ldr	r4, [r3, #12]
 800c886:	4610      	mov	r0, r2
 800c888:	f7fa fe7c 	bl	8007584 <lwip_htons>
 800c88c:	4603      	mov	r3, r0
 800c88e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	749a      	strb	r2, [r3, #18]
 800c898:	2200      	movs	r2, #0
 800c89a:	74da      	strb	r2, [r3, #19]
  return seg;
 800c89c:	693b      	ldr	r3, [r7, #16]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd90      	pop	{r4, r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	08012360 	.word	0x08012360
 800c8ac:	080123ec 	.word	0x080123ec
 800c8b0:	080123c4 	.word	0x080123c4

0800c8b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08a      	sub	sp, #40	; 0x28
 800c8b8:	af02      	add	r7, sp, #8
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	f003 0303 	and.w	r3, r3, #3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <tcp_enqueue_flags+0x2c>
 800c8d2:	4b6f      	ldr	r3, [pc, #444]	; (800ca90 <tcp_enqueue_flags+0x1dc>)
 800c8d4:	f240 321a 	movw	r2, #794	; 0x31a
 800c8d8:	496e      	ldr	r1, [pc, #440]	; (800ca94 <tcp_enqueue_flags+0x1e0>)
 800c8da:	486f      	ldr	r0, [pc, #444]	; (800ca98 <tcp_enqueue_flags+0x1e4>)
 800c8dc:	f003 fc86 	bl	80101ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8e6:	2b08      	cmp	r3, #8
 800c8e8:	d806      	bhi.n	800c8f8 <tcp_enqueue_flags+0x44>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8f0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d90e      	bls.n	800c916 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800c8f8:	78fb      	ldrb	r3, [r7, #3]
 800c8fa:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d109      	bne.n	800c916 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7e9b      	ldrb	r3, [r3, #26]
 800c906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800c910:	f04f 33ff 	mov.w	r3, #4294967295
 800c914:	e0b7      	b.n	800ca86 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800c916:	78fb      	ldrb	r3, [r7, #3]
 800c918:	f003 0302 	and.w	r3, r3, #2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800c920:	2301      	movs	r3, #1
 800c922:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c924:	7ffb      	ldrb	r3, [r7, #31]
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	f003 0304 	and.w	r3, r3, #4
 800c92e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	b29b      	uxth	r3, r3
 800c934:	2200      	movs	r2, #0
 800c936:	4619      	mov	r1, r3
 800c938:	2000      	movs	r0, #0
 800c93a:	f7fb fca3 	bl	8008284 <pbuf_alloc>
 800c93e:	6138      	str	r0, [r7, #16]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d109      	bne.n	800c95a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7e9b      	ldrb	r3, [r3, #26]
 800c94a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
 800c958:	e095      	b.n	800ca86 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	895a      	ldrh	r2, [r3, #10]
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	b29b      	uxth	r3, r3
 800c962:	429a      	cmp	r2, r3
 800c964:	d206      	bcs.n	800c974 <tcp_enqueue_flags+0xc0>
 800c966:	4b4a      	ldr	r3, [pc, #296]	; (800ca90 <tcp_enqueue_flags+0x1dc>)
 800c968:	f44f 7250 	mov.w	r2, #832	; 0x340
 800c96c:	494b      	ldr	r1, [pc, #300]	; (800ca9c <tcp_enqueue_flags+0x1e8>)
 800c96e:	484a      	ldr	r0, [pc, #296]	; (800ca98 <tcp_enqueue_flags+0x1e4>)
 800c970:	f003 fc3c 	bl	80101ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	7ffb      	ldrb	r3, [r7, #31]
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	460b      	mov	r3, r1
 800c980:	6939      	ldr	r1, [r7, #16]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff ff0e 	bl	800c7a4 <tcp_create_segment>
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d109      	bne.n	800c9a4 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	7e9b      	ldrb	r3, [r3, #26]
 800c994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c99e:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a2:	e070      	b.n	800ca86 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f003 0303 	and.w	r3, r3, #3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d006      	beq.n	800c9be <tcp_enqueue_flags+0x10a>
 800c9b0:	4b37      	ldr	r3, [pc, #220]	; (800ca90 <tcp_enqueue_flags+0x1dc>)
 800c9b2:	f240 3249 	movw	r2, #841	; 0x349
 800c9b6:	493a      	ldr	r1, [pc, #232]	; (800caa0 <tcp_enqueue_flags+0x1ec>)
 800c9b8:	4837      	ldr	r0, [pc, #220]	; (800ca98 <tcp_enqueue_flags+0x1e4>)
 800c9ba:	f003 fc17 	bl	80101ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	891b      	ldrh	r3, [r3, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d006      	beq.n	800c9d4 <tcp_enqueue_flags+0x120>
 800c9c6:	4b32      	ldr	r3, [pc, #200]	; (800ca90 <tcp_enqueue_flags+0x1dc>)
 800c9c8:	f240 324a 	movw	r2, #842	; 0x34a
 800c9cc:	4935      	ldr	r1, [pc, #212]	; (800caa4 <tcp_enqueue_flags+0x1f0>)
 800c9ce:	4832      	ldr	r0, [pc, #200]	; (800ca98 <tcp_enqueue_flags+0x1e4>)
 800c9d0:	f003 fc0c 	bl	80101ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d103      	bne.n	800c9e4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	669a      	str	r2, [r3, #104]	; 0x68
 800c9e2:	e00d      	b.n	800ca00 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9e8:	61bb      	str	r3, [r7, #24]
 800c9ea:	e002      	b.n	800c9f2 <tcp_enqueue_flags+0x13e>
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	61bb      	str	r3, [r7, #24]
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1f8      	bne.n	800c9ec <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ca08:	78fb      	ldrb	r3, [r7, #3]
 800ca0a:	f003 0302 	and.w	r3, r3, #2
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d104      	bne.n	800ca1c <tcp_enqueue_flags+0x168>
 800ca12:	78fb      	ldrb	r3, [r7, #3]
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ca26:	78fb      	ldrb	r3, [r7, #3]
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d006      	beq.n	800ca3e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7e9b      	ldrb	r3, [r3, #26]
 800ca34:	f043 0320 	orr.w	r3, r3, #32
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fc f830 	bl	8008aa8 <pbuf_clen>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca52:	4413      	add	r3, r2
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00e      	beq.n	800ca84 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <tcp_enqueue_flags+0x1d0>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <tcp_enqueue_flags+0x1d0>
 800ca76:	4b06      	ldr	r3, [pc, #24]	; (800ca90 <tcp_enqueue_flags+0x1dc>)
 800ca78:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ca7c:	490a      	ldr	r1, [pc, #40]	; (800caa8 <tcp_enqueue_flags+0x1f4>)
 800ca7e:	4806      	ldr	r0, [pc, #24]	; (800ca98 <tcp_enqueue_flags+0x1e4>)
 800ca80:	f003 fbb4 	bl	80101ec <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3720      	adds	r7, #32
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	08012360 	.word	0x08012360
 800ca94:	08012664 	.word	0x08012664
 800ca98:	080123c4 	.word	0x080123c4
 800ca9c:	080126bc 	.word	0x080126bc
 800caa0:	080126f8 	.word	0x080126f8
 800caa4:	08012710 	.word	0x08012710
 800caa8:	0801273c 	.word	0x0801273c

0800caac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800caac:	b590      	push	{r4, r7, lr}
 800caae:	b08b      	sub	sp, #44	; 0x2c
 800cab0:	af04      	add	r7, sp, #16
 800cab2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cab8:	7dbb      	ldrb	r3, [r7, #22]
 800caba:	b29c      	uxth	r4, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fa fd6c 	bl	800759e <lwip_htonl>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2200      	movs	r2, #0
 800caca:	4621      	mov	r1, r4
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff fdaf 	bl	800c630 <tcp_output_alloc_header>
 800cad2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d109      	bne.n	800caee <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7e9b      	ldrb	r3, [r3, #26]
 800cade:	f043 0303 	orr.w	r3, r3, #3
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cae8:	f06f 0301 	mvn.w	r3, #1
 800caec:	e036      	b.n	800cb5c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	4618      	mov	r0, r3
 800caf4:	f002 f89a 	bl	800ec2c <ip4_route>
 800caf8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d102      	bne.n	800cb06 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800cb00:	23fc      	movs	r3, #252	; 0xfc
 800cb02:	75fb      	strb	r3, [r7, #23]
 800cb04:	e012      	b.n	800cb2c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800cb06:	6879      	ldr	r1, [r7, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	1d18      	adds	r0, r3, #4
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7a9c      	ldrb	r4, [r3, #10]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7a5b      	ldrb	r3, [r3, #9]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	9202      	str	r2, [sp, #8]
 800cb18:	2206      	movs	r2, #6
 800cb1a:	9201      	str	r2, [sp, #4]
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	4623      	mov	r3, r4
 800cb20:	4602      	mov	r2, r0
 800cb22:	6938      	ldr	r0, [r7, #16]
 800cb24:	f002 fa2c 	bl	800ef80 <ip4_output_if>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800cb2c:	6938      	ldr	r0, [r7, #16]
 800cb2e:	f7fb ff21 	bl	8008974 <pbuf_free>

  if (err != ERR_OK) {
 800cb32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d007      	beq.n	800cb4a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	7e9b      	ldrb	r3, [r3, #26]
 800cb3e:	f043 0303 	orr.w	r3, r3, #3
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	769a      	strb	r2, [r3, #26]
 800cb48:	e006      	b.n	800cb58 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	7e9b      	ldrb	r3, [r3, #26]
 800cb4e:	f023 0303 	bic.w	r3, r3, #3
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800cb58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	371c      	adds	r7, #28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd90      	pop	{r4, r7, pc}

0800cb64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cb64:	b5b0      	push	{r4, r5, r7, lr}
 800cb66:	b08a      	sub	sp, #40	; 0x28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	7d1b      	ldrb	r3, [r3, #20]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d106      	bne.n	800cb82 <tcp_output+0x1e>
 800cb74:	4b99      	ldr	r3, [pc, #612]	; (800cddc <tcp_output+0x278>)
 800cb76:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800cb7a:	4999      	ldr	r1, [pc, #612]	; (800cde0 <tcp_output+0x27c>)
 800cb7c:	4899      	ldr	r0, [pc, #612]	; (800cde4 <tcp_output+0x280>)
 800cb7e:	f003 fb35 	bl	80101ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cb82:	4b99      	ldr	r3, [pc, #612]	; (800cde8 <tcp_output+0x284>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d101      	bne.n	800cb90 <tcp_output+0x2c>
    return ERR_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e1cb      	b.n	800cf28 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	bf28      	it	cs
 800cba0:	4613      	movcs	r3, r2
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7e9b      	ldrb	r3, [r3, #26]
 800cbb0:	f003 0302 	and.w	r3, r3, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d017      	beq.n	800cbe8 <tcp_output+0x84>
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00f      	beq.n	800cbde <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fa fcea 	bl	800759e <lwip_htonl>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbd4:	8912      	ldrh	r2, [r2, #8]
 800cbd6:	4413      	add	r3, r2
     (seg == NULL ||
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d204      	bcs.n	800cbe8 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff ff64 	bl	800caac <tcp_send_empty_ack>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	e19f      	b.n	800cf28 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d007      	beq.n	800cc04 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800cbf4:	e002      	b.n	800cbfc <tcp_output+0x98>
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	623b      	str	r3, [r7, #32]
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1f8      	bne.n	800cbf6 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3304      	adds	r3, #4
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f002 f80f 	bl	800ec2c <ip4_route>
 800cc0e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d102      	bne.n	800cc1c <tcp_output+0xb8>
    return ERR_RTE;
 800cc16:	f06f 0303 	mvn.w	r3, #3
 800cc1a:	e185      	b.n	800cf28 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <tcp_output+0xc6>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d111      	bne.n	800cc4e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <tcp_output+0xd2>
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	3304      	adds	r3, #4
 800cc34:	e000      	b.n	800cc38 <tcp_output+0xd4>
 800cc36:	2300      	movs	r3, #0
 800cc38:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d102      	bne.n	800cc46 <tcp_output+0xe2>
      return ERR_RTE;
 800cc40:	f06f 0303 	mvn.w	r3, #3
 800cc44:	e170      	b.n	800cf28 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 813f 	beq.w	800ced4 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800cc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fa fc9e 	bl	800759e <lwip_htonl>
 800cc62:	4602      	mov	r2, r0
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc6c:	8912      	ldrh	r2, [r2, #8]
 800cc6e:	4413      	add	r3, r2
  if (seg != NULL &&
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	f080 812e 	bcs.w	800ced4 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 812a 	beq.w	800ced4 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc86:	461a      	mov	r2, r3
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	f040 8122 	bne.w	800ced4 <tcp_output+0x370>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f040 811d 	bne.w	800ced4 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f040 812c 	bne.w	800cefe <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800ccb6:	e122      	b.n	800cefe <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	899b      	ldrh	r3, [r3, #12]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fa fc5f 	bl	8007584 <lwip_htons>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f003 0304 	and.w	r3, r3, #4
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <tcp_output+0x17a>
 800ccd0:	4b42      	ldr	r3, [pc, #264]	; (800cddc <tcp_output+0x278>)
 800ccd2:	f240 4245 	movw	r2, #1093	; 0x445
 800ccd6:	4945      	ldr	r1, [pc, #276]	; (800cdec <tcp_output+0x288>)
 800ccd8:	4842      	ldr	r0, [pc, #264]	; (800cde4 <tcp_output+0x280>)
 800ccda:	f003 fa87 	bl	80101ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d01f      	beq.n	800cd26 <tcp_output+0x1c2>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7e9b      	ldrb	r3, [r3, #26]
 800ccea:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d119      	bne.n	800cd26 <tcp_output+0x1c2>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <tcp_output+0x1ae>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d110      	bne.n	800cd26 <tcp_output+0x1c2>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd08:	891a      	ldrh	r2, [r3, #8]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d209      	bcs.n	800cd26 <tcp_output+0x1c2>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d004      	beq.n	800cd26 <tcp_output+0x1c2>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd22:	2b08      	cmp	r3, #8
 800cd24:	d901      	bls.n	800cd2a <tcp_output+0x1c6>
 800cd26:	2301      	movs	r3, #1
 800cd28:	e000      	b.n	800cd2c <tcp_output+0x1c8>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d106      	bne.n	800cd3e <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7e9b      	ldrb	r3, [r3, #26]
 800cd34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 80e2 	beq.w	800cf02 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7d1b      	ldrb	r3, [r3, #20]
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d00d      	beq.n	800cd62 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	899b      	ldrh	r3, [r3, #12]
 800cd4c:	b29c      	uxth	r4, r3
 800cd4e:	2010      	movs	r0, #16
 800cd50:	f7fa fc18 	bl	8007584 <lwip_htons>
 800cd54:	4603      	mov	r3, r0
 800cd56:	461a      	mov	r2, r3
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	4322      	orrs	r2, r4
 800cd5e:	b292      	uxth	r2, r2
 800cd60:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800cd62:	697a      	ldr	r2, [r7, #20]
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd68:	f000 f8e2 	bl	800cf30 <tcp_output_segment>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d009      	beq.n	800cd8c <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7e9b      	ldrb	r3, [r3, #26]
 800cd7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	769a      	strb	r2, [r3, #26]
      return err;
 800cd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8a:	e0cd      	b.n	800cf28 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7d1b      	ldrb	r3, [r3, #20]
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d006      	beq.n	800cdaa <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7e9b      	ldrb	r3, [r3, #26]
 800cda0:	f023 0303 	bic.w	r3, r3, #3
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fa fbf4 	bl	800759e <lwip_htonl>
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdba:	891b      	ldrh	r3, [r3, #8]
 800cdbc:	461d      	mov	r5, r3
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	899b      	ldrh	r3, [r3, #12]
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fa fbdc 	bl	8007584 <lwip_htons>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	f003 0303 	and.w	r3, r3, #3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <tcp_output+0x28c>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e00b      	b.n	800cdf2 <tcp_output+0x28e>
 800cdda:	bf00      	nop
 800cddc:	08012360 	.word	0x08012360
 800cde0:	08012764 	.word	0x08012764
 800cde4:	080123c4 	.word	0x080123c4
 800cde8:	2000bb70 	.word	0x2000bb70
 800cdec:	0801278c 	.word	0x0801278c
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	442b      	add	r3, r5
 800cdf4:	4423      	add	r3, r4
 800cdf6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da02      	bge.n	800ce0a <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	891b      	ldrh	r3, [r3, #8]
 800ce0e:	461c      	mov	r4, r3
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	899b      	ldrh	r3, [r3, #12]
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fa fbb3 	bl	8007584 <lwip_htons>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f003 0303 	and.w	r3, r3, #3
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <tcp_output+0x2c8>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e000      	b.n	800ce2e <tcp_output+0x2ca>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	4423      	add	r3, r4
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d049      	beq.n	800cec8 <tcp_output+0x364>
      seg->next = NULL;
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	2200      	movs	r2, #0
 800ce38:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d105      	bne.n	800ce4e <tcp_output+0x2ea>
        pcb->unacked = seg;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce46:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	623b      	str	r3, [r7, #32]
 800ce4c:	e03f      	b.n	800cece <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fa fba2 	bl	800759e <lwip_htonl>
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fa fb9b 	bl	800759e <lwip_htonl>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	1ae3      	subs	r3, r4, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	da24      	bge.n	800ceba <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	336c      	adds	r3, #108	; 0x6c
 800ce74:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ce76:	e002      	b.n	800ce7e <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d011      	beq.n	800ceaa <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fa fb85 	bl	800759e <lwip_htonl>
 800ce94:	4604      	mov	r4, r0
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fa fb7e 	bl	800759e <lwip_htonl>
 800cea2:	4603      	mov	r3, r0
 800cea4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	dbe6      	blt.n	800ce78 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	e009      	b.n	800cece <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cebe:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	623b      	str	r3, [r7, #32]
 800cec6:	e002      	b.n	800cece <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ceca:	f7fc fead 	bl	8009c28 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ced2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d015      	beq.n	800cf06 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fa fb5c 	bl	800759e <lwip_htonl>
 800cee6:	4602      	mov	r2, r0
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef0:	8912      	ldrh	r2, [r2, #8]
 800cef2:	4413      	add	r3, r2
  while (seg != NULL &&
 800cef4:	69ba      	ldr	r2, [r7, #24]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	f4bf aede 	bcs.w	800ccb8 <tcp_output+0x154>
  }
output_done:
 800cefc:	e003      	b.n	800cf06 <tcp_output+0x3a2>
    goto output_done;
 800cefe:	bf00      	nop
 800cf00:	e002      	b.n	800cf08 <tcp_output+0x3a4>
      break;
 800cf02:	bf00      	nop
 800cf04:	e000      	b.n	800cf08 <tcp_output+0x3a4>
output_done:
 800cf06:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	7e9b      	ldrb	r3, [r3, #26]
 800cf1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3728      	adds	r7, #40	; 0x28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bdb0      	pop	{r4, r5, r7, pc}

0800cf30 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cf30:	b5b0      	push	{r4, r5, r7, lr}
 800cf32:	b08c      	sub	sp, #48	; 0x30
 800cf34:	af04      	add	r7, sp, #16
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	89db      	ldrh	r3, [r3, #14]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d001      	beq.n	800cf4a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	e08a      	b.n	800d060 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	68dc      	ldr	r4, [r3, #12]
 800cf52:	4610      	mov	r0, r2
 800cf54:	f7fa fb23 	bl	800759e <lwip_htonl>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	68dc      	ldr	r4, [r3, #12]
 800cf64:	4610      	mov	r0, r2
 800cf66:	f7fa fb0d 	bl	8007584 <lwip_htons>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cf76:	441a      	add	r2, r3
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	3314      	adds	r3, #20
 800cf82:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	7a9b      	ldrb	r3, [r3, #10]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d014      	beq.n	800cfba <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	3304      	adds	r3, #4
 800cf94:	4619      	mov	r1, r3
 800cf96:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cf9a:	f7fd f8ad 	bl	800a0f8 <tcp_eff_send_mss_impl>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cfa2:	8b7b      	ldrh	r3, [r7, #26]
 800cfa4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fa faf8 	bl	800759e <lwip_htonl>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	da02      	bge.n	800cfca <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10c      	bne.n	800cfec <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800cfd2:	4b25      	ldr	r3, [pc, #148]	; (800d068 <tcp_output_segment+0x138>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fa fadc 	bl	800759e <lwip_htonl>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	68da      	ldr	r2, [r3, #12]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	8959      	ldrh	r1, [r3, #10]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	8b3a      	ldrh	r2, [r7, #24]
 800d006:	1a8a      	subs	r2, r1, r2
 800d008:	b292      	uxth	r2, r2
 800d00a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	8919      	ldrh	r1, [r3, #8]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	8b3a      	ldrh	r2, [r7, #24]
 800d018:	1a8a      	subs	r2, r1, r2
 800d01a:	b292      	uxth	r2, r2
 800d01c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	68d2      	ldr	r2, [r2, #12]
 800d026:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	741a      	strb	r2, [r3, #16]
 800d030:	2200      	movs	r2, #0
 800d032:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6858      	ldr	r0, [r3, #4]
 800d038:	68b9      	ldr	r1, [r7, #8]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	1d1c      	adds	r4, r3, #4
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	7a9d      	ldrb	r5, [r3, #10]
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	7a5b      	ldrb	r3, [r3, #9]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	9202      	str	r2, [sp, #8]
 800d04a:	2206      	movs	r2, #6
 800d04c:	9201      	str	r2, [sp, #4]
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	462b      	mov	r3, r5
 800d052:	4622      	mov	r2, r4
 800d054:	f001 ff94 	bl	800ef80 <ip4_output_if>
 800d058:	4603      	mov	r3, r0
 800d05a:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800d05c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bdb0      	pop	{r4, r5, r7, pc}
 800d068:	2000bb24 	.word	0x2000bb24

0800d06c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08c      	sub	sp, #48	; 0x30
 800d070:	af04      	add	r7, sp, #16
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d07a:	2200      	movs	r2, #0
 800d07c:	2114      	movs	r1, #20
 800d07e:	2001      	movs	r0, #1
 800d080:	f7fb f900 	bl	8008284 <pbuf_alloc>
 800d084:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d05b      	beq.n	800d144 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	895b      	ldrh	r3, [r3, #10]
 800d090:	2b13      	cmp	r3, #19
 800d092:	d806      	bhi.n	800d0a2 <tcp_rst+0x36>
 800d094:	4b2d      	ldr	r3, [pc, #180]	; (800d14c <tcp_rst+0xe0>)
 800d096:	f240 524c 	movw	r2, #1356	; 0x54c
 800d09a:	492d      	ldr	r1, [pc, #180]	; (800d150 <tcp_rst+0xe4>)
 800d09c:	482d      	ldr	r0, [pc, #180]	; (800d154 <tcp_rst+0xe8>)
 800d09e:	f003 f8a5 	bl	80101ec <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800d0a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fa fa6a 	bl	8007584 <lwip_htons>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800d0b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fa fa62 	bl	8007584 <lwip_htons>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7fa fa68 	bl	800759e <lwip_htonl>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800d0d4:	68b8      	ldr	r0, [r7, #8]
 800d0d6:	f7fa fa62 	bl	800759e <lwip_htonl>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d0e0:	f245 0014 	movw	r0, #20500	; 0x5014
 800d0e4:	f7fa fa4e 	bl	8007584 <lwip_htons>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f042 0208 	orr.w	r2, r2, #8
 800d0f8:	739a      	strb	r2, [r3, #14]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800d100:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	2200      	movs	r2, #0
 800d106:	741a      	strb	r2, [r3, #16]
 800d108:	2200      	movs	r2, #0
 800d10a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	2200      	movs	r2, #0
 800d110:	749a      	strb	r2, [r3, #18]
 800d112:	2200      	movs	r2, #0
 800d114:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800d116:	6838      	ldr	r0, [r7, #0]
 800d118:	f001 fd88 	bl	800ec2c <ip4_route>
 800d11c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	9302      	str	r3, [sp, #8]
 800d128:	2306      	movs	r3, #6
 800d12a:	9301      	str	r3, [sp, #4]
 800d12c:	2300      	movs	r3, #0
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	23ff      	movs	r3, #255	; 0xff
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	6879      	ldr	r1, [r7, #4]
 800d136:	69f8      	ldr	r0, [r7, #28]
 800d138:	f001 ff22 	bl	800ef80 <ip4_output_if>
  }
  pbuf_free(p);
 800d13c:	69f8      	ldr	r0, [r7, #28]
 800d13e:	f7fb fc19 	bl	8008974 <pbuf_free>
 800d142:	e000      	b.n	800d146 <tcp_rst+0xda>
    return;
 800d144:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	08012360 	.word	0x08012360
 800d150:	08012394 	.word	0x08012394
 800d154:	080123c4 	.word	0x080123c4

0800d158 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d029      	beq.n	800d1bc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	e002      	b.n	800d176 <tcp_rexmit_rto+0x1e>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1f8      	bne.n	800d170 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d19a:	2bff      	cmp	r3, #255	; 0xff
 800d19c:	d007      	beq.n	800d1ae <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff fcd5 	bl	800cb64 <tcp_output>
 800d1ba:	e000      	b.n	800d1be <tcp_rexmit_rto+0x66>
    return;
 800d1bc:	bf00      	nop
}
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d1c4:	b590      	push	{r4, r7, lr}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d043      	beq.n	800d25c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3368      	adds	r3, #104	; 0x68
 800d1e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d1e8:	e002      	b.n	800d1f0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d011      	beq.n	800d21c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	4618      	mov	r0, r3
 800d202:	f7fa f9cc 	bl	800759e <lwip_htonl>
 800d206:	4604      	mov	r4, r0
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fa f9c5 	bl	800759e <lwip_htonl>
 800d214:	4603      	mov	r3, r0
 800d216:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d218:	2b00      	cmp	r3, #0
 800d21a:	dbe6      	blt.n	800d1ea <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d103      	bne.n	800d23a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d240:	2bff      	cmp	r3, #255	; 0xff
 800d242:	d007      	beq.n	800d254 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d24a:	3301      	adds	r3, #1
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	635a      	str	r2, [r3, #52]	; 0x34
 800d25a:	e000      	b.n	800d25e <tcp_rexmit+0x9a>
    return;
 800d25c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	bd90      	pop	{r4, r7, pc}

0800d264 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d041      	beq.n	800d2f8 <tcp_rexmit_fast+0x94>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7e9b      	ldrb	r3, [r3, #26]
 800d278:	f003 0304 	and.w	r3, r3, #4
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d13b      	bne.n	800d2f8 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff ff9f 	bl	800d1c4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d292:	4293      	cmp	r3, r2
 800d294:	bf28      	it	cs
 800d296:	4613      	movcs	r3, r2
 800d298:	b29b      	uxth	r3, r3
 800d29a:	0fda      	lsrs	r2, r3, #31
 800d29c:	4413      	add	r3, r2
 800d29e:	105b      	asrs	r3, r3, #1
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d206      	bcs.n	800d2c8 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2be:	005b      	lsls	r3, r3, #1
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	0049      	lsls	r1, r1, #1
 800d2d6:	440b      	add	r3, r1
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	4413      	add	r3, r2
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	7e9b      	ldrb	r3, [r3, #26]
 800d2e8:	f043 0304 	orr.w	r3, r3, #4
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800d2f8:	bf00      	nop
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08a      	sub	sp, #40	; 0x28
 800d304:	af04      	add	r7, sp, #16
 800d306:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d30c:	3b01      	subs	r3, #1
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fa f945 	bl	800759e <lwip_htonl>
 800d314:	4603      	mov	r3, r0
 800d316:	2200      	movs	r2, #0
 800d318:	2100      	movs	r1, #0
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7ff f988 	bl	800c630 <tcp_output_alloc_header>
 800d320:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d102      	bne.n	800d32e <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d328:	f04f 33ff 	mov.w	r3, #4294967295
 800d32c:	e021      	b.n	800d372 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3304      	adds	r3, #4
 800d332:	4618      	mov	r0, r3
 800d334:	f001 fc7a 	bl	800ec2c <ip4_route>
 800d338:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d102      	bne.n	800d346 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800d340:	23fc      	movs	r3, #252	; 0xfc
 800d342:	75fb      	strb	r3, [r7, #23]
 800d344:	e010      	b.n	800d368 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	1d1a      	adds	r2, r3, #4
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	7a98      	ldrb	r0, [r3, #10]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	9302      	str	r3, [sp, #8]
 800d354:	2306      	movs	r3, #6
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	2300      	movs	r3, #0
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	4603      	mov	r3, r0
 800d35e:	6938      	ldr	r0, [r7, #16]
 800d360:	f001 fe0e 	bl	800ef80 <ip4_output_if>
 800d364:	4603      	mov	r3, r0
 800d366:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d368:	6938      	ldr	r0, [r7, #16]
 800d36a:	f7fb fb03 	bl	8008974 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d37a:	b590      	push	{r4, r7, lr}
 800d37c:	b08f      	sub	sp, #60	; 0x3c
 800d37e:	af04      	add	r7, sp, #16
 800d380:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d386:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d102      	bne.n	800d394 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d392:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	e085      	b.n	800d4aa <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d39e:	6a3b      	ldr	r3, [r7, #32]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	899b      	ldrh	r3, [r3, #12]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fa f8ec 	bl	8007584 <lwip_htons>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d005      	beq.n	800d3c2 <tcp_zero_window_probe+0x48>
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	891b      	ldrh	r3, [r3, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <tcp_zero_window_probe+0x48>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e000      	b.n	800d3c4 <tcp_zero_window_probe+0x4a>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d3c6:	7ffb      	ldrb	r3, [r7, #31]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bf0c      	ite	eq
 800d3cc:	2301      	moveq	r3, #1
 800d3ce:	2300      	movne	r3, #0
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	8bba      	ldrh	r2, [r7, #28]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7ff f926 	bl	800c630 <tcp_output_alloc_header>
 800d3e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d102      	bne.n	800d3f2 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f0:	e05b      	b.n	800d4aa <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d3f8:	7ffb      	ldrb	r3, [r7, #31]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00e      	beq.n	800d41c <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	899b      	ldrh	r3, [r3, #12]
 800d402:	b29b      	uxth	r3, r3
 800d404:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d408:	b29c      	uxth	r4, r3
 800d40a:	2011      	movs	r0, #17
 800d40c:	f7fa f8ba 	bl	8007584 <lwip_htons>
 800d410:	4603      	mov	r3, r0
 800d412:	4323      	orrs	r3, r4
 800d414:	b29a      	uxth	r2, r3
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	819a      	strh	r2, [r3, #12]
 800d41a:	e010      	b.n	800d43e <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	3314      	adds	r3, #20
 800d422:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	6858      	ldr	r0, [r3, #4]
 800d428:	6a3b      	ldr	r3, [r7, #32]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	891a      	ldrh	r2, [r3, #8]
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	891b      	ldrh	r3, [r3, #8]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	b29b      	uxth	r3, r3
 800d436:	2201      	movs	r2, #1
 800d438:	6939      	ldr	r1, [r7, #16]
 800d43a:	f7fb fc95 	bl	8008d68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	4618      	mov	r0, r3
 800d446:	f7fa f8aa 	bl	800759e <lwip_htonl>
 800d44a:	4603      	mov	r3, r0
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	da02      	bge.n	800d462 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	3304      	adds	r3, #4
 800d466:	4618      	mov	r0, r3
 800d468:	f001 fbe0 	bl	800ec2c <ip4_route>
 800d46c:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d103      	bne.n	800d47c <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800d474:	23fc      	movs	r3, #252	; 0xfc
 800d476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d47a:	e011      	b.n	800d4a0 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d47c:	6879      	ldr	r1, [r7, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	1d1a      	adds	r2, r3, #4
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	7a98      	ldrb	r0, [r3, #10]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	9302      	str	r3, [sp, #8]
 800d48a:	2306      	movs	r3, #6
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	2300      	movs	r3, #0
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	4603      	mov	r3, r0
 800d494:	69b8      	ldr	r0, [r7, #24]
 800d496:	f001 fd73 	bl	800ef80 <ip4_output_if>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800d4a0:	69b8      	ldr	r0, [r7, #24]
 800d4a2:	f7fb fa67 	bl	8008974 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d4a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	372c      	adds	r7, #44	; 0x2c
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd90      	pop	{r4, r7, pc}
	...

0800d4b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d4bc:	f7fb fcd4 	bl	8008e68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d4c0:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <tcpip_tcp_timer+0x38>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <tcpip_tcp_timer+0x1c>
 800d4c8:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <tcpip_tcp_timer+0x3c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	4908      	ldr	r1, [pc, #32]	; (800d4f4 <tcpip_tcp_timer+0x40>)
 800d4d4:	20fa      	movs	r0, #250	; 0xfa
 800d4d6:	f000 f86f 	bl	800d5b8 <sys_timeout>
 800d4da:	e003      	b.n	800d4e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d4dc:	4b06      	ldr	r3, [pc, #24]	; (800d4f8 <tcpip_tcp_timer+0x44>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]
  }
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	2000bb30 	.word	0x2000bb30
 800d4f0:	2000bb34 	.word	0x2000bb34
 800d4f4:	0800d4b5 	.word	0x0800d4b5
 800d4f8:	2000bb7c 	.word	0x2000bb7c

0800d4fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <tcp_timer_needed+0x30>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10f      	bne.n	800d528 <tcp_timer_needed+0x2c>
 800d508:	4b09      	ldr	r3, [pc, #36]	; (800d530 <tcp_timer_needed+0x34>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d103      	bne.n	800d518 <tcp_timer_needed+0x1c>
 800d510:	4b08      	ldr	r3, [pc, #32]	; (800d534 <tcp_timer_needed+0x38>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d007      	beq.n	800d528 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <tcp_timer_needed+0x30>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d51e:	2200      	movs	r2, #0
 800d520:	4905      	ldr	r1, [pc, #20]	; (800d538 <tcp_timer_needed+0x3c>)
 800d522:	20fa      	movs	r0, #250	; 0xfa
 800d524:	f000 f848 	bl	800d5b8 <sys_timeout>
  }
}
 800d528:	bf00      	nop
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	2000bb7c 	.word	0x2000bb7c
 800d530:	2000bb30 	.word	0x2000bb30
 800d534:	2000bb34 	.word	0x2000bb34
 800d538:	0800d4b5 	.word	0x0800d4b5

0800d53c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	4903      	ldr	r1, [pc, #12]	; (800d564 <cyclic_timer+0x28>)
 800d556:	4618      	mov	r0, r3
 800d558:	f000 f82e 	bl	800d5b8 <sys_timeout>
}
 800d55c:	bf00      	nop
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	0800d53d 	.word	0x0800d53d

0800d568 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d56e:	2301      	movs	r3, #1
 800d570:	607b      	str	r3, [r7, #4]
 800d572:	e00e      	b.n	800d592 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800d574:	4a0d      	ldr	r2, [pc, #52]	; (800d5ac <sys_timeouts_init+0x44>)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	4a0a      	ldr	r2, [pc, #40]	; (800d5ac <sys_timeouts_init+0x44>)
 800d582:	4413      	add	r3, r2
 800d584:	461a      	mov	r2, r3
 800d586:	490a      	ldr	r1, [pc, #40]	; (800d5b0 <sys_timeouts_init+0x48>)
 800d588:	f000 f816 	bl	800d5b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3301      	adds	r3, #1
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b02      	cmp	r3, #2
 800d596:	d9ed      	bls.n	800d574 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800d598:	f7f6 ff14 	bl	80043c4 <sys_now>
 800d59c:	4603      	mov	r3, r0
 800d59e:	4a05      	ldr	r2, [pc, #20]	; (800d5b4 <sys_timeouts_init+0x4c>)
 800d5a0:	6013      	str	r3, [r2, #0]
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	08013068 	.word	0x08013068
 800d5b0:	0800d53d 	.word	0x0800d53d
 800d5b4:	2000bb78 	.word	0x2000bb78

0800d5b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d5c4:	200a      	movs	r0, #10
 800d5c6:	f7fa fbc9 	bl	8007d5c <memp_malloc>
 800d5ca:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10a      	bne.n	800d5e8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f040 8084 	bne.w	800d6e2 <sys_timeout+0x12a>
 800d5da:	4b44      	ldr	r3, [pc, #272]	; (800d6ec <sys_timeout+0x134>)
 800d5dc:	22d4      	movs	r2, #212	; 0xd4
 800d5de:	4944      	ldr	r1, [pc, #272]	; (800d6f0 <sys_timeout+0x138>)
 800d5e0:	4844      	ldr	r0, [pc, #272]	; (800d6f4 <sys_timeout+0x13c>)
 800d5e2:	f002 fe03 	bl	80101ec <iprintf>
    return;
 800d5e6:	e07c      	b.n	800d6e2 <sys_timeout+0x12a>
  }

  now = sys_now();
 800d5e8:	f7f6 feec 	bl	80043c4 <sys_now>
 800d5ec:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800d5ee:	4b42      	ldr	r3, [pc, #264]	; (800d6f8 <sys_timeout+0x140>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d105      	bne.n	800d602 <sys_timeout+0x4a>
    diff = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800d5fa:	4a40      	ldr	r2, [pc, #256]	; (800d6fc <sys_timeout+0x144>)
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	6013      	str	r3, [r2, #0]
 800d600:	e004      	b.n	800d60c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800d602:	4b3e      	ldr	r3, [pc, #248]	; (800d6fc <sys_timeout+0x144>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2200      	movs	r2, #0
 800d610:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	441a      	add	r2, r3
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d628:	4b33      	ldr	r3, [pc, #204]	; (800d6f8 <sys_timeout+0x140>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d103      	bne.n	800d638 <sys_timeout+0x80>
    next_timeout = timeout;
 800d630:	4a31      	ldr	r2, [pc, #196]	; (800d6f8 <sys_timeout+0x140>)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	6013      	str	r3, [r2, #0]
    return;
 800d636:	e055      	b.n	800d6e4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800d638:	4b2f      	ldr	r3, [pc, #188]	; (800d6f8 <sys_timeout+0x140>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	429a      	cmp	r2, r3
 800d642:	d20f      	bcs.n	800d664 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800d644:	4b2c      	ldr	r3, [pc, #176]	; (800d6f8 <sys_timeout+0x140>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6859      	ldr	r1, [r3, #4]
 800d64a:	4b2b      	ldr	r3, [pc, #172]	; (800d6f8 <sys_timeout+0x140>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	1a8a      	subs	r2, r1, r2
 800d652:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800d654:	4b28      	ldr	r3, [pc, #160]	; (800d6f8 <sys_timeout+0x140>)
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d65c:	4a26      	ldr	r2, [pc, #152]	; (800d6f8 <sys_timeout+0x140>)
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	e03f      	b.n	800d6e4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d664:	4b24      	ldr	r3, [pc, #144]	; (800d6f8 <sys_timeout+0x140>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	61fb      	str	r3, [r7, #28]
 800d66a:	e036      	b.n	800d6da <sys_timeout+0x122>
      timeout->time -= t->time;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	1ad2      	subs	r2, r2, r3
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d006      	beq.n	800d690 <sys_timeout+0xd8>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d921      	bls.n	800d6d4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d009      	beq.n	800d6ac <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6859      	ldr	r1, [r3, #4]
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	1a8a      	subs	r2, r1, r2
 800d6a8:	605a      	str	r2, [r3, #4]
 800d6aa:	e00b      	b.n	800d6c4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d206      	bcs.n	800d6c4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800d6b6:	4b10      	ldr	r3, [pc, #64]	; (800d6f8 <sys_timeout+0x140>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	685a      	ldr	r2, [r3, #4]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	441a      	add	r2, r3
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	601a      	str	r2, [r3, #0]
        break;
 800d6d2:	e007      	b.n	800d6e4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	61fb      	str	r3, [r7, #28]
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d1c5      	bne.n	800d66c <sys_timeout+0xb4>
 800d6e0:	e000      	b.n	800d6e4 <sys_timeout+0x12c>
    return;
 800d6e2:	bf00      	nop
      }
    }
  }
}
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	080127a4 	.word	0x080127a4
 800d6f0:	080127d8 	.word	0x080127d8
 800d6f4:	08012818 	.word	0x08012818
 800d6f8:	2000bb74 	.word	0x2000bb74
 800d6fc:	2000bb78 	.word	0x2000bb78

0800d700 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800d706:	4b24      	ldr	r3, [pc, #144]	; (800d798 <sys_check_timeouts+0x98>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d03f      	beq.n	800d78e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800d70e:	f7f6 fe59 	bl	80043c4 <sys_now>
 800d712:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800d714:	4b21      	ldr	r3, [pc, #132]	; (800d79c <sys_check_timeouts+0x9c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800d722:	4b1d      	ldr	r3, [pc, #116]	; (800d798 <sys_check_timeouts+0x98>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d02c      	beq.n	800d788 <sys_check_timeouts+0x88>
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	697a      	ldr	r2, [r7, #20]
 800d734:	429a      	cmp	r2, r3
 800d736:	d327      	bcc.n	800d788 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800d738:	2301      	movs	r3, #1
 800d73a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	685a      	ldr	r2, [r3, #4]
 800d740:	4b16      	ldr	r3, [pc, #88]	; (800d79c <sys_check_timeouts+0x9c>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4413      	add	r3, r2
 800d746:	4a15      	ldr	r2, [pc, #84]	; (800d79c <sys_check_timeouts+0x9c>)
 800d748:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a0f      	ldr	r2, [pc, #60]	; (800d798 <sys_check_timeouts+0x98>)
 800d75a:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d768:	68b9      	ldr	r1, [r7, #8]
 800d76a:	200a      	movs	r0, #10
 800d76c:	f7fa fb48 	bl	8007e00 <memp_free>
        if (handler != NULL) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d008      	beq.n	800d788 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800d776:	480a      	ldr	r0, [pc, #40]	; (800d7a0 <sys_check_timeouts+0xa0>)
 800d778:	f002 fc8e 	bl	8010098 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6838      	ldr	r0, [r7, #0]
 800d780:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800d782:	4807      	ldr	r0, [pc, #28]	; (800d7a0 <sys_check_timeouts+0xa0>)
 800d784:	f002 fc97 	bl	80100b6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800d788:	7cfb      	ldrb	r3, [r7, #19]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1c7      	bne.n	800d71e <sys_check_timeouts+0x1e>
  }
}
 800d78e:	bf00      	nop
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	2000bb74 	.word	0x2000bb74
 800d79c:	2000bb78 	.word	0x2000bb78
 800d7a0:	200083d0 	.word	0x200083d0

0800d7a4 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800d7aa:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <sys_timeouts_sleeptime+0x44>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d102      	bne.n	800d7b8 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800d7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b6:	e013      	b.n	800d7e0 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800d7b8:	f7f6 fe04 	bl	80043c4 <sys_now>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <sys_timeouts_sleeptime+0x48>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800d7c6:	4b08      	ldr	r3, [pc, #32]	; (800d7e8 <sys_timeouts_sleeptime+0x44>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d901      	bls.n	800d7d6 <sys_timeouts_sleeptime+0x32>
    return 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e004      	b.n	800d7e0 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800d7d6:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <sys_timeouts_sleeptime+0x44>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	1ad3      	subs	r3, r2, r3
  }
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	2000bb74 	.word	0x2000bb74
 800d7ec:	2000bb78 	.word	0x2000bb78

0800d7f0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800d7fa:	4b0f      	ldr	r3, [pc, #60]	; (800d838 <sys_timeouts_mbox_fetch+0x48>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d105      	bne.n	800d80e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d802:	2200      	movs	r2, #0
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f002 fbcc 	bl	800ffa4 <sys_arch_mbox_fetch>
    return;
 800d80c:	e011      	b.n	800d832 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800d80e:	f7ff ffc9 	bl	800d7a4 <sys_timeouts_sleeptime>
 800d812:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d008      	beq.n	800d82c <sys_timeouts_mbox_fetch+0x3c>
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f002 fbc0 	bl	800ffa4 <sys_arch_mbox_fetch>
 800d824:	4603      	mov	r3, r0
 800d826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82a:	d102      	bne.n	800d832 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d82c:	f7ff ff68 	bl	800d700 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d830:	e7e3      	b.n	800d7fa <sys_timeouts_mbox_fetch+0xa>
  }
}
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	2000bb74 	.word	0x2000bb74

0800d83c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d840:	bf00      	nop
 800d842:	46bd      	mov	sp, r7
 800d844:	bc80      	pop	{r7}
 800d846:	4770      	bx	lr

0800d848 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d856:	79fb      	ldrb	r3, [r7, #7]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d018      	beq.n	800d88e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d013      	beq.n	800d88a <udp_input_local_match+0x42>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00f      	beq.n	800d88a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d86a:	4b13      	ldr	r3, [pc, #76]	; (800d8b8 <udp_input_local_match+0x70>)
 800d86c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d00a      	beq.n	800d88a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <udp_input_local_match+0x70>)
 800d87a:	695b      	ldr	r3, [r3, #20]
 800d87c:	405a      	eors	r2, r3
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	3308      	adds	r3, #8
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d886:	2b00      	cmp	r3, #0
 800d888:	d110      	bne.n	800d8ac <udp_input_local_match+0x64>
          return 1;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e00f      	b.n	800d8ae <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d009      	beq.n	800d8a8 <udp_input_local_match+0x60>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d005      	beq.n	800d8a8 <udp_input_local_match+0x60>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <udp_input_local_match+0x70>)
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d101      	bne.n	800d8ac <udp_input_local_match+0x64>
      return 1;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e000      	b.n	800d8ae <udp_input_local_match+0x66>
    }
  }

  return 0;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bc80      	pop	{r7}
 800d8b6:	4770      	bx	lr
 800d8b8:	200083d4 	.word	0x200083d4

0800d8bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d8bc:	b590      	push	{r4, r7, lr}
 800d8be:	b08d      	sub	sp, #52	; 0x34
 800d8c0:	af02      	add	r7, sp, #8
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	895b      	ldrh	r3, [r3, #10]
 800d8ce:	2b07      	cmp	r3, #7
 800d8d0:	d803      	bhi.n	800d8da <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7fb f84e 	bl	8008974 <pbuf_free>
    goto end;
 800d8d8:	e0c6      	b.n	800da68 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d8e0:	4b63      	ldr	r3, [pc, #396]	; (800da70 <udp_input+0x1b4>)
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	4a62      	ldr	r2, [pc, #392]	; (800da70 <udp_input+0x1b4>)
 800d8e6:	6812      	ldr	r2, [r2, #0]
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f001 fc1a 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7f9 fe42 	bl	8007584 <lwip_htons>
 800d900:	4603      	mov	r3, r0
 800d902:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	885b      	ldrh	r3, [r3, #2]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f9 fe3a 	bl	8007584 <lwip_htons>
 800d910:	4603      	mov	r3, r0
 800d912:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d914:	2300      	movs	r3, #0
 800d916:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d918:	2300      	movs	r3, #0
 800d91a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d91c:	2300      	movs	r3, #0
 800d91e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d920:	4b54      	ldr	r3, [pc, #336]	; (800da74 <udp_input+0x1b8>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
 800d926:	e03b      	b.n	800d9a0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	8a5b      	ldrh	r3, [r3, #18]
 800d92c:	89fa      	ldrh	r2, [r7, #14]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d131      	bne.n	800d996 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d932:	7cfb      	ldrb	r3, [r7, #19]
 800d934:	461a      	mov	r2, r3
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d93a:	f7ff ff85 	bl	800d848 <udp_input_local_match>
 800d93e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d940:	2b00      	cmp	r3, #0
 800d942:	d028      	beq.n	800d996 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	7c1b      	ldrb	r3, [r3, #16]
 800d948:	f003 0304 	and.w	r3, r3, #4
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d104      	bne.n	800d95a <udp_input+0x9e>
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800d956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d958:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	8a9b      	ldrh	r3, [r3, #20]
 800d95e:	8a3a      	ldrh	r2, [r7, #16]
 800d960:	429a      	cmp	r2, r3
 800d962:	d118      	bne.n	800d996 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d005      	beq.n	800d978 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	4b3f      	ldr	r3, [pc, #252]	; (800da70 <udp_input+0x1b4>)
 800d972:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d974:	429a      	cmp	r2, r3
 800d976:	d10e      	bne.n	800d996 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d014      	beq.n	800d9a8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	68da      	ldr	r2, [r3, #12]
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d986:	4b3b      	ldr	r3, [pc, #236]	; (800da74 <udp_input+0x1b8>)
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d98e:	4a39      	ldr	r2, [pc, #228]	; (800da74 <udp_input+0x1b8>)
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d994:	e008      	b.n	800d9a8 <udp_input+0xec>
      }
    }

    prev = pcb;
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1c0      	bne.n	800d928 <udp_input+0x6c>
 800d9a6:	e000      	b.n	800d9aa <udp_input+0xee>
        break;
 800d9a8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <udp_input+0xf8>
    pcb = uncon_pcb;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d002      	beq.n	800d9c0 <udp_input+0x104>
    for_us = 1;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	76fb      	strb	r3, [r7, #27]
 800d9be:	e00a      	b.n	800d9d6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	4b2a      	ldr	r3, [pc, #168]	; (800da70 <udp_input+0x1b4>)
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	bf0c      	ite	eq
 800d9ce:	2301      	moveq	r3, #1
 800d9d0:	2300      	movne	r3, #0
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d9d6:	7efb      	ldrb	r3, [r7, #27]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d042      	beq.n	800da62 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800d9dc:	f06f 0107 	mvn.w	r1, #7
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7fa ffa3 	bl	800892c <pbuf_header>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800d9ec:	4b22      	ldr	r3, [pc, #136]	; (800da78 <udp_input+0x1bc>)
 800d9ee:	f240 1255 	movw	r2, #341	; 0x155
 800d9f2:	4922      	ldr	r1, [pc, #136]	; (800da7c <udp_input+0x1c0>)
 800d9f4:	4822      	ldr	r0, [pc, #136]	; (800da80 <udp_input+0x1c4>)
 800d9f6:	f002 fbf9 	bl	80101ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7fa ffba 	bl	8008974 <pbuf_free>
      goto end;
 800da00:	e032      	b.n	800da68 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	2b00      	cmp	r3, #0
 800da06:	d012      	beq.n	800da2e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00a      	beq.n	800da26 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	699c      	ldr	r4, [r3, #24]
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	69d8      	ldr	r0, [r3, #28]
 800da18:	8a3b      	ldrh	r3, [r7, #16]
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	4b19      	ldr	r3, [pc, #100]	; (800da84 <udp_input+0x1c8>)
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800da24:	e021      	b.n	800da6a <udp_input+0x1ae>
        pbuf_free(p);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7fa ffa4 	bl	8008974 <pbuf_free>
        goto end;
 800da2c:	e01c      	b.n	800da68 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800da2e:	7cfb      	ldrb	r3, [r7, #19]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d112      	bne.n	800da5a <udp_input+0x19e>
 800da34:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <udp_input+0x1b4>)
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da3c:	2be0      	cmp	r3, #224	; 0xe0
 800da3e:	d00c      	beq.n	800da5a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800da40:	4b0b      	ldr	r3, [pc, #44]	; (800da70 <udp_input+0x1b4>)
 800da42:	899b      	ldrh	r3, [r3, #12]
 800da44:	3308      	adds	r3, #8
 800da46:	b29b      	uxth	r3, r3
 800da48:	b21b      	sxth	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7fa ff7f 	bl	8008950 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800da52:	2103      	movs	r1, #3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f001 f861 	bl	800eb1c <icmp_dest_unreach>
      pbuf_free(p);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7fa ff8a 	bl	8008974 <pbuf_free>
  return;
 800da60:	e003      	b.n	800da6a <udp_input+0x1ae>
    pbuf_free(p);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7fa ff86 	bl	8008974 <pbuf_free>
  return;
 800da68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800da6a:	372c      	adds	r7, #44	; 0x2c
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd90      	pop	{r4, r7, pc}
 800da70:	200083d4 	.word	0x200083d4
 800da74:	2000bb80 	.word	0x2000bb80
 800da78:	08012840 	.word	0x08012840
 800da7c:	08012870 	.word	0x08012870
 800da80:	08012884 	.word	0x08012884
 800da84:	200083e4 	.word	0x200083e4

0800da88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d01e      	beq.n	800dad6 <udp_netif_ip_addr_changed+0x4e>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d01a      	beq.n	800dad6 <udp_netif_ip_addr_changed+0x4e>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d017      	beq.n	800dad6 <udp_netif_ip_addr_changed+0x4e>
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d013      	beq.n	800dad6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800daae:	4b0c      	ldr	r3, [pc, #48]	; (800dae0 <udp_netif_ip_addr_changed+0x58>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	e00c      	b.n	800dad0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d103      	bne.n	800daca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1ef      	bne.n	800dab6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dad6:	bf00      	nop
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	bc80      	pop	{r7}
 800dade:	4770      	bx	lr
 800dae0:	2000bb80 	.word	0x2000bb80

0800dae4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800daec:	4915      	ldr	r1, [pc, #84]	; (800db44 <etharp_free_entry+0x60>)
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	4613      	mov	r3, r2
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	4413      	add	r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	440b      	add	r3, r1
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d013      	beq.n	800db28 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800db00:	4910      	ldr	r1, [pc, #64]	; (800db44 <etharp_free_entry+0x60>)
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	4613      	mov	r3, r2
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	4413      	add	r3, r2
 800db0a:	00db      	lsls	r3, r3, #3
 800db0c:	440b      	add	r3, r1
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4618      	mov	r0, r3
 800db12:	f7fa ff2f 	bl	8008974 <pbuf_free>
    arp_table[i].q = NULL;
 800db16:	490b      	ldr	r1, [pc, #44]	; (800db44 <etharp_free_entry+0x60>)
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4613      	mov	r3, r2
 800db1c:	005b      	lsls	r3, r3, #1
 800db1e:	4413      	add	r3, r2
 800db20:	00db      	lsls	r3, r3, #3
 800db22:	440b      	add	r3, r1
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800db28:	4906      	ldr	r1, [pc, #24]	; (800db44 <etharp_free_entry+0x60>)
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	4613      	mov	r3, r2
 800db2e:	005b      	lsls	r3, r3, #1
 800db30:	4413      	add	r3, r2
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	440b      	add	r3, r1
 800db36:	3314      	adds	r3, #20
 800db38:	2200      	movs	r2, #0
 800db3a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	2000bb84 	.word	0x2000bb84

0800db48 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db4e:	2300      	movs	r3, #0
 800db50:	71fb      	strb	r3, [r7, #7]
 800db52:	e096      	b.n	800dc82 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800db54:	79fa      	ldrb	r2, [r7, #7]
 800db56:	494f      	ldr	r1, [pc, #316]	; (800dc94 <etharp_tmr+0x14c>)
 800db58:	4613      	mov	r3, r2
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	4413      	add	r3, r2
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	440b      	add	r3, r1
 800db62:	3314      	adds	r3, #20
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800db68:	79bb      	ldrb	r3, [r7, #6]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 8086 	beq.w	800dc7c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800db70:	79fa      	ldrb	r2, [r7, #7]
 800db72:	4948      	ldr	r1, [pc, #288]	; (800dc94 <etharp_tmr+0x14c>)
 800db74:	4613      	mov	r3, r2
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	4413      	add	r3, r2
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	440b      	add	r3, r1
 800db7e:	3312      	adds	r3, #18
 800db80:	881b      	ldrh	r3, [r3, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	b298      	uxth	r0, r3
 800db86:	4943      	ldr	r1, [pc, #268]	; (800dc94 <etharp_tmr+0x14c>)
 800db88:	4613      	mov	r3, r2
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	4413      	add	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	440b      	add	r3, r1
 800db92:	3312      	adds	r3, #18
 800db94:	4602      	mov	r2, r0
 800db96:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800db98:	79fa      	ldrb	r2, [r7, #7]
 800db9a:	493e      	ldr	r1, [pc, #248]	; (800dc94 <etharp_tmr+0x14c>)
 800db9c:	4613      	mov	r3, r2
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	4413      	add	r3, r2
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	440b      	add	r3, r1
 800dba6:	3312      	adds	r3, #18
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dbae:	d215      	bcs.n	800dbdc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dbb0:	79fa      	ldrb	r2, [r7, #7]
 800dbb2:	4938      	ldr	r1, [pc, #224]	; (800dc94 <etharp_tmr+0x14c>)
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	4413      	add	r3, r2
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	440b      	add	r3, r1
 800dbbe:	3314      	adds	r3, #20
 800dbc0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d10f      	bne.n	800dbe6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dbc6:	79fa      	ldrb	r2, [r7, #7]
 800dbc8:	4932      	ldr	r1, [pc, #200]	; (800dc94 <etharp_tmr+0x14c>)
 800dbca:	4613      	mov	r3, r2
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4413      	add	r3, r2
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	440b      	add	r3, r1
 800dbd4:	3312      	adds	r3, #18
 800dbd6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d904      	bls.n	800dbe6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800dbdc:	79fb      	ldrb	r3, [r7, #7]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff ff80 	bl	800dae4 <etharp_free_entry>
 800dbe4:	e04a      	b.n	800dc7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dbe6:	79fa      	ldrb	r2, [r7, #7]
 800dbe8:	492a      	ldr	r1, [pc, #168]	; (800dc94 <etharp_tmr+0x14c>)
 800dbea:	4613      	mov	r3, r2
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	4413      	add	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3314      	adds	r3, #20
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b03      	cmp	r3, #3
 800dbfa:	d10a      	bne.n	800dc12 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dbfc:	79fa      	ldrb	r2, [r7, #7]
 800dbfe:	4925      	ldr	r1, [pc, #148]	; (800dc94 <etharp_tmr+0x14c>)
 800dc00:	4613      	mov	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	440b      	add	r3, r1
 800dc0a:	3314      	adds	r3, #20
 800dc0c:	2204      	movs	r2, #4
 800dc0e:	701a      	strb	r2, [r3, #0]
 800dc10:	e034      	b.n	800dc7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dc12:	79fa      	ldrb	r2, [r7, #7]
 800dc14:	491f      	ldr	r1, [pc, #124]	; (800dc94 <etharp_tmr+0x14c>)
 800dc16:	4613      	mov	r3, r2
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	4413      	add	r3, r2
 800dc1c:	00db      	lsls	r3, r3, #3
 800dc1e:	440b      	add	r3, r1
 800dc20:	3314      	adds	r3, #20
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d10a      	bne.n	800dc3e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dc28:	79fa      	ldrb	r2, [r7, #7]
 800dc2a:	491a      	ldr	r1, [pc, #104]	; (800dc94 <etharp_tmr+0x14c>)
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	4413      	add	r3, r2
 800dc32:	00db      	lsls	r3, r3, #3
 800dc34:	440b      	add	r3, r1
 800dc36:	3314      	adds	r3, #20
 800dc38:	2202      	movs	r2, #2
 800dc3a:	701a      	strb	r2, [r3, #0]
 800dc3c:	e01e      	b.n	800dc7c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dc3e:	79fa      	ldrb	r2, [r7, #7]
 800dc40:	4914      	ldr	r1, [pc, #80]	; (800dc94 <etharp_tmr+0x14c>)
 800dc42:	4613      	mov	r3, r2
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	4413      	add	r3, r2
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	440b      	add	r3, r1
 800dc4c:	3314      	adds	r3, #20
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d113      	bne.n	800dc7c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dc54:	79fa      	ldrb	r2, [r7, #7]
 800dc56:	490f      	ldr	r1, [pc, #60]	; (800dc94 <etharp_tmr+0x14c>)
 800dc58:	4613      	mov	r3, r2
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	4413      	add	r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	440b      	add	r3, r1
 800dc62:	3308      	adds	r3, #8
 800dc64:	6818      	ldr	r0, [r3, #0]
 800dc66:	79fa      	ldrb	r2, [r7, #7]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	4413      	add	r3, r2
 800dc6e:	00db      	lsls	r3, r3, #3
 800dc70:	4a08      	ldr	r2, [pc, #32]	; (800dc94 <etharp_tmr+0x14c>)
 800dc72:	4413      	add	r3, r2
 800dc74:	3304      	adds	r3, #4
 800dc76:	4619      	mov	r1, r3
 800dc78:	f000 fe38 	bl	800e8ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc7c:	79fb      	ldrb	r3, [r7, #7]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	71fb      	strb	r3, [r7, #7]
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	2b09      	cmp	r3, #9
 800dc86:	f67f af65 	bls.w	800db54 <etharp_tmr+0xc>
      }
    }
  }
}
 800dc8a:	bf00      	nop
 800dc8c:	bf00      	nop
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	2000bb84 	.word	0x2000bb84

0800dc98 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	460b      	mov	r3, r1
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dca6:	230a      	movs	r3, #10
 800dca8:	77fb      	strb	r3, [r7, #31]
 800dcaa:	230a      	movs	r3, #10
 800dcac:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800dcae:	230a      	movs	r3, #10
 800dcb0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800dcb6:	230a      	movs	r3, #10
 800dcb8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	833b      	strh	r3, [r7, #24]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	82fb      	strh	r3, [r7, #22]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	773b      	strb	r3, [r7, #28]
 800dcca:	e093      	b.n	800ddf4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800dccc:	7f3a      	ldrb	r2, [r7, #28]
 800dcce:	4990      	ldr	r1, [pc, #576]	; (800df10 <etharp_find_entry+0x278>)
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	440b      	add	r3, r1
 800dcda:	3314      	adds	r3, #20
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dce0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dce4:	2b0a      	cmp	r3, #10
 800dce6:	d105      	bne.n	800dcf4 <etharp_find_entry+0x5c>
 800dce8:	7cfb      	ldrb	r3, [r7, #19]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d102      	bne.n	800dcf4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800dcee:	7f3b      	ldrb	r3, [r7, #28]
 800dcf0:	777b      	strb	r3, [r7, #29]
 800dcf2:	e07c      	b.n	800ddee <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dcf4:	7cfb      	ldrb	r3, [r7, #19]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d079      	beq.n	800ddee <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dcfa:	7cfb      	ldrb	r3, [r7, #19]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d009      	beq.n	800dd14 <etharp_find_entry+0x7c>
 800dd00:	7cfb      	ldrb	r3, [r7, #19]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d806      	bhi.n	800dd14 <etharp_find_entry+0x7c>
 800dd06:	4b83      	ldr	r3, [pc, #524]	; (800df14 <etharp_find_entry+0x27c>)
 800dd08:	f240 1225 	movw	r2, #293	; 0x125
 800dd0c:	4982      	ldr	r1, [pc, #520]	; (800df18 <etharp_find_entry+0x280>)
 800dd0e:	4883      	ldr	r0, [pc, #524]	; (800df1c <etharp_find_entry+0x284>)
 800dd10:	f002 fa6c 	bl	80101ec <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00f      	beq.n	800dd3a <etharp_find_entry+0xa2>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6819      	ldr	r1, [r3, #0]
 800dd1e:	7f3a      	ldrb	r2, [r7, #28]
 800dd20:	487b      	ldr	r0, [pc, #492]	; (800df10 <etharp_find_entry+0x278>)
 800dd22:	4613      	mov	r3, r2
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	4413      	add	r3, r2
 800dd28:	00db      	lsls	r3, r3, #3
 800dd2a:	4403      	add	r3, r0
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4299      	cmp	r1, r3
 800dd32:	d102      	bne.n	800dd3a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dd34:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dd38:	e0e5      	b.n	800df06 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dd3a:	7cfb      	ldrb	r3, [r7, #19]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d13b      	bne.n	800ddb8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dd40:	7f3a      	ldrb	r2, [r7, #28]
 800dd42:	4973      	ldr	r1, [pc, #460]	; (800df10 <etharp_find_entry+0x278>)
 800dd44:	4613      	mov	r3, r2
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	4413      	add	r3, r2
 800dd4a:	00db      	lsls	r3, r3, #3
 800dd4c:	440b      	add	r3, r1
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d018      	beq.n	800dd86 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800dd54:	7f3a      	ldrb	r2, [r7, #28]
 800dd56:	496e      	ldr	r1, [pc, #440]	; (800df10 <etharp_find_entry+0x278>)
 800dd58:	4613      	mov	r3, r2
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	4413      	add	r3, r2
 800dd5e:	00db      	lsls	r3, r3, #3
 800dd60:	440b      	add	r3, r1
 800dd62:	3312      	adds	r3, #18
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	8b3a      	ldrh	r2, [r7, #24]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d840      	bhi.n	800ddee <etharp_find_entry+0x156>
            old_queue = i;
 800dd6c:	7f3b      	ldrb	r3, [r7, #28]
 800dd6e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800dd70:	7f3a      	ldrb	r2, [r7, #28]
 800dd72:	4967      	ldr	r1, [pc, #412]	; (800df10 <etharp_find_entry+0x278>)
 800dd74:	4613      	mov	r3, r2
 800dd76:	005b      	lsls	r3, r3, #1
 800dd78:	4413      	add	r3, r2
 800dd7a:	00db      	lsls	r3, r3, #3
 800dd7c:	440b      	add	r3, r1
 800dd7e:	3312      	adds	r3, #18
 800dd80:	881b      	ldrh	r3, [r3, #0]
 800dd82:	833b      	strh	r3, [r7, #24]
 800dd84:	e033      	b.n	800ddee <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dd86:	7f3a      	ldrb	r2, [r7, #28]
 800dd88:	4961      	ldr	r1, [pc, #388]	; (800df10 <etharp_find_entry+0x278>)
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	4413      	add	r3, r2
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	440b      	add	r3, r1
 800dd94:	3312      	adds	r3, #18
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	8afa      	ldrh	r2, [r7, #22]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d827      	bhi.n	800ddee <etharp_find_entry+0x156>
            old_pending = i;
 800dd9e:	7f3b      	ldrb	r3, [r7, #28]
 800dda0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800dda2:	7f3a      	ldrb	r2, [r7, #28]
 800dda4:	495a      	ldr	r1, [pc, #360]	; (800df10 <etharp_find_entry+0x278>)
 800dda6:	4613      	mov	r3, r2
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	4413      	add	r3, r2
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	440b      	add	r3, r1
 800ddb0:	3312      	adds	r3, #18
 800ddb2:	881b      	ldrh	r3, [r3, #0]
 800ddb4:	82fb      	strh	r3, [r7, #22]
 800ddb6:	e01a      	b.n	800ddee <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ddb8:	7cfb      	ldrb	r3, [r7, #19]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d917      	bls.n	800ddee <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ddbe:	7f3a      	ldrb	r2, [r7, #28]
 800ddc0:	4953      	ldr	r1, [pc, #332]	; (800df10 <etharp_find_entry+0x278>)
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	005b      	lsls	r3, r3, #1
 800ddc6:	4413      	add	r3, r2
 800ddc8:	00db      	lsls	r3, r3, #3
 800ddca:	440b      	add	r3, r1
 800ddcc:	3312      	adds	r3, #18
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	8aba      	ldrh	r2, [r7, #20]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d80b      	bhi.n	800ddee <etharp_find_entry+0x156>
            old_stable = i;
 800ddd6:	7f3b      	ldrb	r3, [r7, #28]
 800ddd8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ddda:	7f3a      	ldrb	r2, [r7, #28]
 800dddc:	494c      	ldr	r1, [pc, #304]	; (800df10 <etharp_find_entry+0x278>)
 800ddde:	4613      	mov	r3, r2
 800dde0:	005b      	lsls	r3, r3, #1
 800dde2:	4413      	add	r3, r2
 800dde4:	00db      	lsls	r3, r3, #3
 800dde6:	440b      	add	r3, r1
 800dde8:	3312      	adds	r3, #18
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ddee:	7f3b      	ldrb	r3, [r7, #28]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	773b      	strb	r3, [r7, #28]
 800ddf4:	7f3b      	ldrb	r3, [r7, #28]
 800ddf6:	2b09      	cmp	r3, #9
 800ddf8:	f67f af68 	bls.w	800dccc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ddfc:	7afb      	ldrb	r3, [r7, #11]
 800ddfe:	f003 0302 	and.w	r3, r3, #2
 800de02:	2b00      	cmp	r3, #0
 800de04:	d108      	bne.n	800de18 <etharp_find_entry+0x180>
 800de06:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de0a:	2b0a      	cmp	r3, #10
 800de0c:	d107      	bne.n	800de1e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800de18:	f04f 33ff 	mov.w	r3, #4294967295
 800de1c:	e073      	b.n	800df06 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800de1e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de22:	2b09      	cmp	r3, #9
 800de24:	dc02      	bgt.n	800de2c <etharp_find_entry+0x194>
    i = empty;
 800de26:	7f7b      	ldrb	r3, [r7, #29]
 800de28:	773b      	strb	r3, [r7, #28]
 800de2a:	e036      	b.n	800de9a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800de2c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800de30:	2b09      	cmp	r3, #9
 800de32:	dc13      	bgt.n	800de5c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800de34:	7fbb      	ldrb	r3, [r7, #30]
 800de36:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800de38:	7f3a      	ldrb	r2, [r7, #28]
 800de3a:	4935      	ldr	r1, [pc, #212]	; (800df10 <etharp_find_entry+0x278>)
 800de3c:	4613      	mov	r3, r2
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	4413      	add	r3, r2
 800de42:	00db      	lsls	r3, r3, #3
 800de44:	440b      	add	r3, r1
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d018      	beq.n	800de7e <etharp_find_entry+0x1e6>
 800de4c:	4b31      	ldr	r3, [pc, #196]	; (800df14 <etharp_find_entry+0x27c>)
 800de4e:	f240 126f 	movw	r2, #367	; 0x16f
 800de52:	4933      	ldr	r1, [pc, #204]	; (800df20 <etharp_find_entry+0x288>)
 800de54:	4831      	ldr	r0, [pc, #196]	; (800df1c <etharp_find_entry+0x284>)
 800de56:	f002 f9c9 	bl	80101ec <iprintf>
 800de5a:	e010      	b.n	800de7e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800de5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de60:	2b09      	cmp	r3, #9
 800de62:	dc02      	bgt.n	800de6a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800de64:	7ffb      	ldrb	r3, [r7, #31]
 800de66:	773b      	strb	r3, [r7, #28]
 800de68:	e009      	b.n	800de7e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800de6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de6e:	2b09      	cmp	r3, #9
 800de70:	dc02      	bgt.n	800de78 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800de72:	7efb      	ldrb	r3, [r7, #27]
 800de74:	773b      	strb	r3, [r7, #28]
 800de76:	e002      	b.n	800de7e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800de78:	f04f 33ff 	mov.w	r3, #4294967295
 800de7c:	e043      	b.n	800df06 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800de7e:	7f3b      	ldrb	r3, [r7, #28]
 800de80:	2b09      	cmp	r3, #9
 800de82:	d906      	bls.n	800de92 <etharp_find_entry+0x1fa>
 800de84:	4b23      	ldr	r3, [pc, #140]	; (800df14 <etharp_find_entry+0x27c>)
 800de86:	f240 1281 	movw	r2, #385	; 0x181
 800de8a:	4926      	ldr	r1, [pc, #152]	; (800df24 <etharp_find_entry+0x28c>)
 800de8c:	4823      	ldr	r0, [pc, #140]	; (800df1c <etharp_find_entry+0x284>)
 800de8e:	f002 f9ad 	bl	80101ec <iprintf>
    etharp_free_entry(i);
 800de92:	7f3b      	ldrb	r3, [r7, #28]
 800de94:	4618      	mov	r0, r3
 800de96:	f7ff fe25 	bl	800dae4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800de9a:	7f3b      	ldrb	r3, [r7, #28]
 800de9c:	2b09      	cmp	r3, #9
 800de9e:	d906      	bls.n	800deae <etharp_find_entry+0x216>
 800dea0:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <etharp_find_entry+0x27c>)
 800dea2:	f240 1285 	movw	r2, #389	; 0x185
 800dea6:	491f      	ldr	r1, [pc, #124]	; (800df24 <etharp_find_entry+0x28c>)
 800dea8:	481c      	ldr	r0, [pc, #112]	; (800df1c <etharp_find_entry+0x284>)
 800deaa:	f002 f99f 	bl	80101ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800deae:	7f3a      	ldrb	r2, [r7, #28]
 800deb0:	4917      	ldr	r1, [pc, #92]	; (800df10 <etharp_find_entry+0x278>)
 800deb2:	4613      	mov	r3, r2
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	4413      	add	r3, r2
 800deb8:	00db      	lsls	r3, r3, #3
 800deba:	440b      	add	r3, r1
 800debc:	3314      	adds	r3, #20
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d006      	beq.n	800ded2 <etharp_find_entry+0x23a>
 800dec4:	4b13      	ldr	r3, [pc, #76]	; (800df14 <etharp_find_entry+0x27c>)
 800dec6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800deca:	4917      	ldr	r1, [pc, #92]	; (800df28 <etharp_find_entry+0x290>)
 800decc:	4813      	ldr	r0, [pc, #76]	; (800df1c <etharp_find_entry+0x284>)
 800dece:	f002 f98d 	bl	80101ec <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00a      	beq.n	800deee <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ded8:	7f3a      	ldrb	r2, [r7, #28]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6819      	ldr	r1, [r3, #0]
 800dede:	480c      	ldr	r0, [pc, #48]	; (800df10 <etharp_find_entry+0x278>)
 800dee0:	4613      	mov	r3, r2
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4413      	add	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	4403      	add	r3, r0
 800deea:	3304      	adds	r3, #4
 800deec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800deee:	7f3a      	ldrb	r2, [r7, #28]
 800def0:	4907      	ldr	r1, [pc, #28]	; (800df10 <etharp_find_entry+0x278>)
 800def2:	4613      	mov	r3, r2
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	4413      	add	r3, r2
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	440b      	add	r3, r1
 800defc:	3312      	adds	r3, #18
 800defe:	2200      	movs	r2, #0
 800df00:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800df02:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3720      	adds	r7, #32
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	2000bb84 	.word	0x2000bb84
 800df14:	080128dc 	.word	0x080128dc
 800df18:	08012914 	.word	0x08012914
 800df1c:	08012954 	.word	0x08012954
 800df20:	0801297c 	.word	0x0801297c
 800df24:	08012994 	.word	0x08012994
 800df28:	080129a8 	.word	0x080129a8

0800df2c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b088      	sub	sp, #32
 800df30:	af02      	add	r7, sp, #8
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
 800df38:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df40:	2b06      	cmp	r3, #6
 800df42:	d006      	beq.n	800df52 <etharp_update_arp_entry+0x26>
 800df44:	4b48      	ldr	r3, [pc, #288]	; (800e068 <etharp_update_arp_entry+0x13c>)
 800df46:	f240 12ab 	movw	r2, #427	; 0x1ab
 800df4a:	4948      	ldr	r1, [pc, #288]	; (800e06c <etharp_update_arp_entry+0x140>)
 800df4c:	4848      	ldr	r0, [pc, #288]	; (800e070 <etharp_update_arp_entry+0x144>)
 800df4e:	f002 f94d 	bl	80101ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d012      	beq.n	800df7e <etharp_update_arp_entry+0x52>
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00e      	beq.n	800df7e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68f9      	ldr	r1, [r7, #12]
 800df66:	4618      	mov	r0, r3
 800df68:	f001 f8dc 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800df6c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d105      	bne.n	800df7e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800df7a:	2be0      	cmp	r3, #224	; 0xe0
 800df7c:	d102      	bne.n	800df84 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df7e:	f06f 030f 	mvn.w	r3, #15
 800df82:	e06c      	b.n	800e05e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800df84:	78fb      	ldrb	r3, [r7, #3]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	4619      	mov	r1, r3
 800df8a:	68b8      	ldr	r0, [r7, #8]
 800df8c:	f7ff fe84 	bl	800dc98 <etharp_find_entry>
 800df90:	4603      	mov	r3, r0
 800df92:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800df94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da02      	bge.n	800dfa2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800df9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfa0:	e05d      	b.n	800e05e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dfa2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dfa6:	4933      	ldr	r1, [pc, #204]	; (800e074 <etharp_update_arp_entry+0x148>)
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	4413      	add	r3, r2
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	440b      	add	r3, r1
 800dfb2:	3314      	adds	r3, #20
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dfb8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dfbc:	492d      	ldr	r1, [pc, #180]	; (800e074 <etharp_update_arp_entry+0x148>)
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	440b      	add	r3, r1
 800dfc8:	3308      	adds	r3, #8
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dfce:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	3308      	adds	r3, #8
 800dfdc:	4a25      	ldr	r2, [pc, #148]	; (800e074 <etharp_update_arp_entry+0x148>)
 800dfde:	4413      	add	r3, r2
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	2206      	movs	r2, #6
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f002 f8ea 	bl	80101c0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dfec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dff0:	4920      	ldr	r1, [pc, #128]	; (800e074 <etharp_update_arp_entry+0x148>)
 800dff2:	4613      	mov	r3, r2
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	4413      	add	r3, r2
 800dff8:	00db      	lsls	r3, r3, #3
 800dffa:	440b      	add	r3, r1
 800dffc:	3312      	adds	r3, #18
 800dffe:	2200      	movs	r2, #0
 800e000:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e002:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e006:	491b      	ldr	r1, [pc, #108]	; (800e074 <etharp_update_arp_entry+0x148>)
 800e008:	4613      	mov	r3, r2
 800e00a:	005b      	lsls	r3, r3, #1
 800e00c:	4413      	add	r3, r2
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	440b      	add	r3, r1
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d021      	beq.n	800e05c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e018:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e01c:	4915      	ldr	r1, [pc, #84]	; (800e074 <etharp_update_arp_entry+0x148>)
 800e01e:	4613      	mov	r3, r2
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	4413      	add	r3, r2
 800e024:	00db      	lsls	r3, r3, #3
 800e026:	440b      	add	r3, r1
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e02c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e030:	4910      	ldr	r1, [pc, #64]	; (800e074 <etharp_update_arp_entry+0x148>)
 800e032:	4613      	mov	r3, r2
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	4413      	add	r3, r2
 800e038:	00db      	lsls	r3, r3, #3
 800e03a:	440b      	add	r3, r1
 800e03c:	2200      	movs	r2, #0
 800e03e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800e046:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6939      	ldr	r1, [r7, #16]
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f001 ff0d 	bl	800fe70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e056:	6938      	ldr	r0, [r7, #16]
 800e058:	f7fa fc8c 	bl	8008974 <pbuf_free>
  }
  return ERR_OK;
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	080128dc 	.word	0x080128dc
 800e06c:	080129d4 	.word	0x080129d4
 800e070:	08012954 	.word	0x08012954
 800e074:	2000bb84 	.word	0x2000bb84

0800e078 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e080:	2300      	movs	r3, #0
 800e082:	73fb      	strb	r3, [r7, #15]
 800e084:	e01f      	b.n	800e0c6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800e086:	7bfa      	ldrb	r2, [r7, #15]
 800e088:	4913      	ldr	r1, [pc, #76]	; (800e0d8 <etharp_cleanup_netif+0x60>)
 800e08a:	4613      	mov	r3, r2
 800e08c:	005b      	lsls	r3, r3, #1
 800e08e:	4413      	add	r3, r2
 800e090:	00db      	lsls	r3, r3, #3
 800e092:	440b      	add	r3, r1
 800e094:	3314      	adds	r3, #20
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e09a:	7bbb      	ldrb	r3, [r7, #14]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00f      	beq.n	800e0c0 <etharp_cleanup_netif+0x48>
 800e0a0:	7bfa      	ldrb	r2, [r7, #15]
 800e0a2:	490d      	ldr	r1, [pc, #52]	; (800e0d8 <etharp_cleanup_netif+0x60>)
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	4413      	add	r3, r2
 800e0aa:	00db      	lsls	r3, r3, #3
 800e0ac:	440b      	add	r3, r1
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d103      	bne.n	800e0c0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7ff fd12 	bl	800dae4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	73fb      	strb	r3, [r7, #15]
 800e0c6:	7bfb      	ldrb	r3, [r7, #15]
 800e0c8:	2b09      	cmp	r3, #9
 800e0ca:	d9dc      	bls.n	800e086 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	bf00      	nop
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	2000bb84 	.word	0x2000bb84

0800e0dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e0dc:	b5b0      	push	{r4, r5, r7, lr}
 800e0de:	b08a      	sub	sp, #40	; 0x28
 800e0e0:	af04      	add	r7, sp, #16
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d107      	bne.n	800e0fc <etharp_input+0x20>
 800e0ec:	4b3d      	ldr	r3, [pc, #244]	; (800e1e4 <etharp_input+0x108>)
 800e0ee:	f44f 7222 	mov.w	r2, #648	; 0x288
 800e0f2:	493d      	ldr	r1, [pc, #244]	; (800e1e8 <etharp_input+0x10c>)
 800e0f4:	483d      	ldr	r0, [pc, #244]	; (800e1ec <etharp_input+0x110>)
 800e0f6:	f002 f879 	bl	80101ec <iprintf>
 800e0fa:	e06f      	b.n	800e1dc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	b29b      	uxth	r3, r3
 800e108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e10c:	d10c      	bne.n	800e128 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800e112:	2b06      	cmp	r3, #6
 800e114:	d108      	bne.n	800e128 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e11a:	2b04      	cmp	r3, #4
 800e11c:	d104      	bne.n	800e128 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	885b      	ldrh	r3, [r3, #2]
 800e122:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e124:	2b08      	cmp	r3, #8
 800e126:	d003      	beq.n	800e130 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7fa fc23 	bl	8008974 <pbuf_free>
    return;
 800e12e:	e055      	b.n	800e1dc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	330e      	adds	r3, #14
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	3318      	adds	r3, #24
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	3304      	adds	r3, #4
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d102      	bne.n	800e150 <etharp_input+0x74>
    for_us = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	75fb      	strb	r3, [r7, #23]
 800e14e:	e009      	b.n	800e164 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	3304      	adds	r3, #4
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	429a      	cmp	r2, r3
 800e15a:	bf0c      	ite	eq
 800e15c:	2301      	moveq	r3, #1
 800e15e:	2300      	movne	r3, #0
 800e160:	b2db      	uxtb	r3, r3
 800e162:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	f103 0208 	add.w	r2, r3, #8
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <etharp_input+0x98>
 800e170:	2301      	movs	r3, #1
 800e172:	e000      	b.n	800e176 <etharp_input+0x9a>
 800e174:	2302      	movs	r3, #2
 800e176:	f107 010c 	add.w	r1, r7, #12
 800e17a:	6838      	ldr	r0, [r7, #0]
 800e17c:	f7ff fed6 	bl	800df2c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	88db      	ldrh	r3, [r3, #6]
 800e184:	b29b      	uxth	r3, r3
 800e186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e18a:	d003      	beq.n	800e194 <etharp_input+0xb8>
 800e18c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e190:	d01e      	beq.n	800e1d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800e192:	e020      	b.n	800e1d6 <etharp_input+0xfa>
    if (for_us) {
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01c      	beq.n	800e1d4 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	3208      	adds	r2, #8
      etharp_raw(netif,
 800e1b4:	2102      	movs	r1, #2
 800e1b6:	9103      	str	r1, [sp, #12]
 800e1b8:	f107 010c 	add.w	r1, r7, #12
 800e1bc:	9102      	str	r1, [sp, #8]
 800e1be:	9201      	str	r2, [sp, #4]
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	4622      	mov	r2, r4
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	6838      	ldr	r0, [r7, #0]
 800e1ca:	f000 fae1 	bl	800e790 <etharp_raw>
    break;
 800e1ce:	e001      	b.n	800e1d4 <etharp_input+0xf8>
    break;
 800e1d0:	bf00      	nop
 800e1d2:	e000      	b.n	800e1d6 <etharp_input+0xfa>
    break;
 800e1d4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7fa fbcc 	bl	8008974 <pbuf_free>
}
 800e1dc:	3718      	adds	r7, #24
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	080128dc 	.word	0x080128dc
 800e1e8:	08012a2c 	.word	0x08012a2c
 800e1ec:	08012954 	.word	0x08012954

0800e1f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e1fe:	79fa      	ldrb	r2, [r7, #7]
 800e200:	4944      	ldr	r1, [pc, #272]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e202:	4613      	mov	r3, r2
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	4413      	add	r3, r2
 800e208:	00db      	lsls	r3, r3, #3
 800e20a:	440b      	add	r3, r1
 800e20c:	3314      	adds	r3, #20
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d806      	bhi.n	800e222 <etharp_output_to_arp_index+0x32>
 800e214:	4b40      	ldr	r3, [pc, #256]	; (800e318 <etharp_output_to_arp_index+0x128>)
 800e216:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e21a:	4940      	ldr	r1, [pc, #256]	; (800e31c <etharp_output_to_arp_index+0x12c>)
 800e21c:	4840      	ldr	r0, [pc, #256]	; (800e320 <etharp_output_to_arp_index+0x130>)
 800e21e:	f001 ffe5 	bl	80101ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e222:	79fa      	ldrb	r2, [r7, #7]
 800e224:	493b      	ldr	r1, [pc, #236]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e226:	4613      	mov	r3, r2
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	4413      	add	r3, r2
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	440b      	add	r3, r1
 800e230:	3314      	adds	r3, #20
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b02      	cmp	r3, #2
 800e236:	d153      	bne.n	800e2e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e238:	79fa      	ldrb	r2, [r7, #7]
 800e23a:	4936      	ldr	r1, [pc, #216]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e23c:	4613      	mov	r3, r2
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	4413      	add	r3, r2
 800e242:	00db      	lsls	r3, r3, #3
 800e244:	440b      	add	r3, r1
 800e246:	3312      	adds	r3, #18
 800e248:	881b      	ldrh	r3, [r3, #0]
 800e24a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e24e:	d919      	bls.n	800e284 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e250:	79fa      	ldrb	r2, [r7, #7]
 800e252:	4613      	mov	r3, r2
 800e254:	005b      	lsls	r3, r3, #1
 800e256:	4413      	add	r3, r2
 800e258:	00db      	lsls	r3, r3, #3
 800e25a:	4a2e      	ldr	r2, [pc, #184]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e25c:	4413      	add	r3, r2
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f000 fb42 	bl	800e8ec <etharp_request>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d138      	bne.n	800e2e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e26e:	79fa      	ldrb	r2, [r7, #7]
 800e270:	4928      	ldr	r1, [pc, #160]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e272:	4613      	mov	r3, r2
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	4413      	add	r3, r2
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	440b      	add	r3, r1
 800e27c:	3314      	adds	r3, #20
 800e27e:	2203      	movs	r2, #3
 800e280:	701a      	strb	r2, [r3, #0]
 800e282:	e02d      	b.n	800e2e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e284:	79fa      	ldrb	r2, [r7, #7]
 800e286:	4923      	ldr	r1, [pc, #140]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e288:	4613      	mov	r3, r2
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	4413      	add	r3, r2
 800e28e:	00db      	lsls	r3, r3, #3
 800e290:	440b      	add	r3, r1
 800e292:	3312      	adds	r3, #18
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e29a:	d321      	bcc.n	800e2e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e29c:	79fa      	ldrb	r2, [r7, #7]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	4413      	add	r3, r2
 800e2a4:	00db      	lsls	r3, r3, #3
 800e2a6:	4a1b      	ldr	r2, [pc, #108]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e2a8:	4413      	add	r3, r2
 800e2aa:	1d19      	adds	r1, r3, #4
 800e2ac:	79fa      	ldrb	r2, [r7, #7]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	4413      	add	r3, r2
 800e2b4:	00db      	lsls	r3, r3, #3
 800e2b6:	3308      	adds	r3, #8
 800e2b8:	4a16      	ldr	r2, [pc, #88]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e2ba:	4413      	add	r3, r2
 800e2bc:	3304      	adds	r3, #4
 800e2be:	461a      	mov	r2, r3
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 faf1 	bl	800e8a8 <etharp_request_dst>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d109      	bne.n	800e2e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e2cc:	79fa      	ldrb	r2, [r7, #7]
 800e2ce:	4911      	ldr	r1, [pc, #68]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	440b      	add	r3, r1
 800e2da:	3314      	adds	r3, #20
 800e2dc:	2203      	movs	r2, #3
 800e2de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800e2e6:	79fa      	ldrb	r2, [r7, #7]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	005b      	lsls	r3, r3, #1
 800e2ec:	4413      	add	r3, r2
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	4a08      	ldr	r2, [pc, #32]	; (800e314 <etharp_output_to_arp_index+0x124>)
 800e2f4:	4413      	add	r3, r2
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2fc:	9200      	str	r2, [sp, #0]
 800e2fe:	460a      	mov	r2, r1
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f001 fdb4 	bl	800fe70 <ethernet_output>
 800e308:	4603      	mov	r3, r0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	2000bb84 	.word	0x2000bb84
 800e318:	080128dc 	.word	0x080128dc
 800e31c:	08012a4c 	.word	0x08012a4c
 800e320:	08012954 	.word	0x08012954

0800e324 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08a      	sub	sp, #40	; 0x28
 800e328:	af02      	add	r7, sp, #8
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <etharp_output+0x24>
 800e33a:	4b69      	ldr	r3, [pc, #420]	; (800e4e0 <etharp_output+0x1bc>)
 800e33c:	f240 321b 	movw	r2, #795	; 0x31b
 800e340:	4968      	ldr	r1, [pc, #416]	; (800e4e4 <etharp_output+0x1c0>)
 800e342:	4869      	ldr	r0, [pc, #420]	; (800e4e8 <etharp_output+0x1c4>)
 800e344:	f001 ff52 	bl	80101ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d106      	bne.n	800e35c <etharp_output+0x38>
 800e34e:	4b64      	ldr	r3, [pc, #400]	; (800e4e0 <etharp_output+0x1bc>)
 800e350:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e354:	4965      	ldr	r1, [pc, #404]	; (800e4ec <etharp_output+0x1c8>)
 800e356:	4864      	ldr	r0, [pc, #400]	; (800e4e8 <etharp_output+0x1c4>)
 800e358:	f001 ff48 	bl	80101ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <etharp_output+0x4c>
 800e362:	4b5f      	ldr	r3, [pc, #380]	; (800e4e0 <etharp_output+0x1bc>)
 800e364:	f240 321d 	movw	r2, #797	; 0x31d
 800e368:	4961      	ldr	r1, [pc, #388]	; (800e4f0 <etharp_output+0x1cc>)
 800e36a:	485f      	ldr	r0, [pc, #380]	; (800e4e8 <etharp_output+0x1c4>)
 800e36c:	f001 ff3e 	bl	80101ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	68f9      	ldr	r1, [r7, #12]
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fed4 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e382:	4b5c      	ldr	r3, [pc, #368]	; (800e4f4 <etharp_output+0x1d0>)
 800e384:	61fb      	str	r3, [r7, #28]
 800e386:	e09b      	b.n	800e4c0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e390:	2be0      	cmp	r3, #224	; 0xe0
 800e392:	d118      	bne.n	800e3c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e394:	2301      	movs	r3, #1
 800e396:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e398:	2300      	movs	r3, #0
 800e39a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e39c:	235e      	movs	r3, #94	; 0x5e
 800e39e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3302      	adds	r3, #2
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	3303      	adds	r3, #3
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e3be:	f107 0310 	add.w	r3, r7, #16
 800e3c2:	61fb      	str	r3, [r7, #28]
 800e3c4:	e07c      	b.n	800e4c0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	405a      	eors	r2, r3
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4013      	ands	r3, r2
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d012      	beq.n	800e404 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e3e4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d00b      	beq.n	800e404 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	330c      	adds	r3, #12
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d003      	beq.n	800e3fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	330c      	adds	r3, #12
 800e3fa:	61bb      	str	r3, [r7, #24]
 800e3fc:	e002      	b.n	800e404 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e3fe:	f06f 0303 	mvn.w	r3, #3
 800e402:	e069      	b.n	800e4d8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e404:	4b3c      	ldr	r3, [pc, #240]	; (800e4f8 <etharp_output+0x1d4>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	4619      	mov	r1, r3
 800e40a:	4a3c      	ldr	r2, [pc, #240]	; (800e4fc <etharp_output+0x1d8>)
 800e40c:	460b      	mov	r3, r1
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	440b      	add	r3, r1
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	4413      	add	r3, r2
 800e416:	3314      	adds	r3, #20
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d917      	bls.n	800e44e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b35      	ldr	r3, [pc, #212]	; (800e4f8 <etharp_output+0x1d4>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	4618      	mov	r0, r3
 800e428:	4934      	ldr	r1, [pc, #208]	; (800e4fc <etharp_output+0x1d8>)
 800e42a:	4603      	mov	r3, r0
 800e42c:	005b      	lsls	r3, r3, #1
 800e42e:	4403      	add	r3, r0
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	440b      	add	r3, r1
 800e434:	3304      	adds	r3, #4
 800e436:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e438:	429a      	cmp	r2, r3
 800e43a:	d108      	bne.n	800e44e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e43c:	4b2e      	ldr	r3, [pc, #184]	; (800e4f8 <etharp_output+0x1d4>)
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	461a      	mov	r2, r3
 800e442:	68b9      	ldr	r1, [r7, #8]
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7ff fed3 	bl	800e1f0 <etharp_output_to_arp_index>
 800e44a:	4603      	mov	r3, r0
 800e44c:	e044      	b.n	800e4d8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e44e:	2300      	movs	r3, #0
 800e450:	75fb      	strb	r3, [r7, #23]
 800e452:	e02a      	b.n	800e4aa <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e454:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e458:	4928      	ldr	r1, [pc, #160]	; (800e4fc <etharp_output+0x1d8>)
 800e45a:	4613      	mov	r3, r2
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	4413      	add	r3, r2
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	440b      	add	r3, r1
 800e464:	3314      	adds	r3, #20
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d918      	bls.n	800e49e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	6819      	ldr	r1, [r3, #0]
 800e470:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e474:	4821      	ldr	r0, [pc, #132]	; (800e4fc <etharp_output+0x1d8>)
 800e476:	4613      	mov	r3, r2
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	4413      	add	r3, r2
 800e47c:	00db      	lsls	r3, r3, #3
 800e47e:	4403      	add	r3, r0
 800e480:	3304      	adds	r3, #4
 800e482:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e484:	4299      	cmp	r1, r3
 800e486:	d10a      	bne.n	800e49e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800e488:	7dfa      	ldrb	r2, [r7, #23]
 800e48a:	4b1b      	ldr	r3, [pc, #108]	; (800e4f8 <etharp_output+0x1d4>)
 800e48c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	461a      	mov	r2, r3
 800e492:	68b9      	ldr	r1, [r7, #8]
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff feab 	bl	800e1f0 <etharp_output_to_arp_index>
 800e49a:	4603      	mov	r3, r0
 800e49c:	e01c      	b.n	800e4d8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	75fb      	strb	r3, [r7, #23]
 800e4aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4ae:	2b09      	cmp	r3, #9
 800e4b0:	ddd0      	ble.n	800e454 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	69b9      	ldr	r1, [r7, #24]
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f000 f822 	bl	800e500 <etharp_query>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	e00b      	b.n	800e4d8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800e4c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	68b9      	ldr	r1, [r7, #8]
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f001 fccd 	bl	800fe70 <ethernet_output>
 800e4d6:	4603      	mov	r3, r0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3720      	adds	r7, #32
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	080128dc 	.word	0x080128dc
 800e4e4:	08012a2c 	.word	0x08012a2c
 800e4e8:	08012954 	.word	0x08012954
 800e4ec:	08012a7c 	.word	0x08012a7c
 800e4f0:	08012a1c 	.word	0x08012a1c
 800e4f4:	08013084 	.word	0x08013084
 800e4f8:	2000bc74 	.word	0x2000bc74
 800e4fc:	2000bb84 	.word	0x2000bb84

0800e500 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b08c      	sub	sp, #48	; 0x30
 800e504:	af02      	add	r7, sp, #8
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	3329      	adds	r3, #41	; 0x29
 800e510:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e512:	23ff      	movs	r3, #255	; 0xff
 800e514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68f9      	ldr	r1, [r7, #12]
 800e522:	4618      	mov	r0, r3
 800e524:	f000 fdfe 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10c      	bne.n	800e548 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e536:	2be0      	cmp	r3, #224	; 0xe0
 800e538:	d006      	beq.n	800e548 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d102      	bne.n	800e54e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e548:	f06f 030f 	mvn.w	r3, #15
 800e54c:	e10e      	b.n	800e76c <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	2101      	movs	r1, #1
 800e552:	68b8      	ldr	r0, [r7, #8]
 800e554:	f7ff fba0 	bl	800dc98 <etharp_find_entry>
 800e558:	4603      	mov	r3, r0
 800e55a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800e55c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e560:	2b00      	cmp	r3, #0
 800e562:	da02      	bge.n	800e56a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800e564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e568:	e100      	b.n	800e76c <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e56a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e56e:	4981      	ldr	r1, [pc, #516]	; (800e774 <etharp_query+0x274>)
 800e570:	4613      	mov	r3, r2
 800e572:	005b      	lsls	r3, r3, #1
 800e574:	4413      	add	r3, r2
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	440b      	add	r3, r1
 800e57a:	3314      	adds	r3, #20
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d117      	bne.n	800e5b2 <etharp_query+0xb2>
    is_new_entry = 1;
 800e582:	2301      	movs	r3, #1
 800e584:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e586:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e58a:	497a      	ldr	r1, [pc, #488]	; (800e774 <etharp_query+0x274>)
 800e58c:	4613      	mov	r3, r2
 800e58e:	005b      	lsls	r3, r3, #1
 800e590:	4413      	add	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	440b      	add	r3, r1
 800e596:	3314      	adds	r3, #20
 800e598:	2201      	movs	r2, #1
 800e59a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e59c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e5a0:	4974      	ldr	r1, [pc, #464]	; (800e774 <etharp_query+0x274>)
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	4413      	add	r3, r2
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	440b      	add	r3, r1
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e5b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e5b6:	496f      	ldr	r1, [pc, #444]	; (800e774 <etharp_query+0x274>)
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	4413      	add	r3, r2
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	440b      	add	r3, r1
 800e5c2:	3314      	adds	r3, #20
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d012      	beq.n	800e5f0 <etharp_query+0xf0>
 800e5ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e5ce:	4969      	ldr	r1, [pc, #420]	; (800e774 <etharp_query+0x274>)
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	4413      	add	r3, r2
 800e5d6:	00db      	lsls	r3, r3, #3
 800e5d8:	440b      	add	r3, r1
 800e5da:	3314      	adds	r3, #20
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d806      	bhi.n	800e5f0 <etharp_query+0xf0>
 800e5e2:	4b65      	ldr	r3, [pc, #404]	; (800e778 <etharp_query+0x278>)
 800e5e4:	f240 32c7 	movw	r2, #967	; 0x3c7
 800e5e8:	4964      	ldr	r1, [pc, #400]	; (800e77c <etharp_query+0x27c>)
 800e5ea:	4865      	ldr	r0, [pc, #404]	; (800e780 <etharp_query+0x280>)
 800e5ec:	f001 fdfe 	bl	80101ec <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e5f0:	6a3b      	ldr	r3, [r7, #32]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d102      	bne.n	800e5fc <etharp_query+0xfc>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10c      	bne.n	800e616 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e5fc:	68b9      	ldr	r1, [r7, #8]
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f000 f974 	bl	800e8ec <etharp_request>
 800e604:	4603      	mov	r3, r0
 800e606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d102      	bne.n	800e616 <etharp_query+0x116>
      return result;
 800e610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e614:	e0aa      	b.n	800e76c <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d106      	bne.n	800e62a <etharp_query+0x12a>
 800e61c:	4b56      	ldr	r3, [pc, #344]	; (800e778 <etharp_query+0x278>)
 800e61e:	f240 32db 	movw	r2, #987	; 0x3db
 800e622:	4958      	ldr	r1, [pc, #352]	; (800e784 <etharp_query+0x284>)
 800e624:	4856      	ldr	r0, [pc, #344]	; (800e780 <etharp_query+0x280>)
 800e626:	f001 fde1 	bl	80101ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e62a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e62e:	4951      	ldr	r1, [pc, #324]	; (800e774 <etharp_query+0x274>)
 800e630:	4613      	mov	r3, r2
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	4413      	add	r3, r2
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	440b      	add	r3, r1
 800e63a:	3314      	adds	r3, #20
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d918      	bls.n	800e674 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800e642:	7cfa      	ldrb	r2, [r7, #19]
 800e644:	4b50      	ldr	r3, [pc, #320]	; (800e788 <etharp_query+0x288>)
 800e646:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e648:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e64c:	4613      	mov	r3, r2
 800e64e:	005b      	lsls	r3, r3, #1
 800e650:	4413      	add	r3, r2
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	3308      	adds	r3, #8
 800e656:	4a47      	ldr	r2, [pc, #284]	; (800e774 <etharp_query+0x274>)
 800e658:	4413      	add	r3, r2
 800e65a:	3304      	adds	r3, #4
 800e65c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e660:	9200      	str	r2, [sp, #0]
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	6879      	ldr	r1, [r7, #4]
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	f001 fc02 	bl	800fe70 <ethernet_output>
 800e66c:	4603      	mov	r3, r0
 800e66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e672:	e079      	b.n	800e768 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e674:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e678:	493e      	ldr	r1, [pc, #248]	; (800e774 <etharp_query+0x274>)
 800e67a:	4613      	mov	r3, r2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4413      	add	r3, r2
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	440b      	add	r3, r1
 800e684:	3314      	adds	r3, #20
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d16d      	bne.n	800e768 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e68c:	2300      	movs	r3, #0
 800e68e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e694:	e01a      	b.n	800e6cc <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	895a      	ldrh	r2, [r3, #10]
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	891b      	ldrh	r3, [r3, #8]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d10a      	bne.n	800e6b8 <etharp_query+0x1b8>
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d006      	beq.n	800e6b8 <etharp_query+0x1b8>
 800e6aa:	4b33      	ldr	r3, [pc, #204]	; (800e778 <etharp_query+0x278>)
 800e6ac:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e6b0:	4936      	ldr	r1, [pc, #216]	; (800e78c <etharp_query+0x28c>)
 800e6b2:	4833      	ldr	r0, [pc, #204]	; (800e780 <etharp_query+0x280>)
 800e6b4:	f001 fd9a 	bl	80101ec <iprintf>
      if (p->type != PBUF_ROM) {
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	7b1b      	ldrb	r3, [r3, #12]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d002      	beq.n	800e6c6 <etharp_query+0x1c6>
        copy_needed = 1;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	61bb      	str	r3, [r7, #24]
        break;
 800e6c4:	e005      	b.n	800e6d2 <etharp_query+0x1d2>
      }
      p = p->next;
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e1      	bne.n	800e696 <etharp_query+0x196>
    }
    if (copy_needed) {
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d017      	beq.n	800e708 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	891b      	ldrh	r3, [r3, #8]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	4619      	mov	r1, r3
 800e6e0:	2002      	movs	r0, #2
 800e6e2:	f7f9 fdcf 	bl	8008284 <pbuf_alloc>
 800e6e6:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d011      	beq.n	800e712 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	69f8      	ldr	r0, [r7, #28]
 800e6f2:	f7fa fa6d 	bl	8008bd0 <pbuf_copy>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00a      	beq.n	800e712 <etharp_query+0x212>
          pbuf_free(p);
 800e6fc:	69f8      	ldr	r0, [r7, #28]
 800e6fe:	f7fa f939 	bl	8008974 <pbuf_free>
          p = NULL;
 800e702:	2300      	movs	r3, #0
 800e704:	61fb      	str	r3, [r7, #28]
 800e706:	e004      	b.n	800e712 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e70c:	69f8      	ldr	r0, [r7, #28]
 800e70e:	f7fa f9e1 	bl	8008ad4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d024      	beq.n	800e762 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e718:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e71c:	4915      	ldr	r1, [pc, #84]	; (800e774 <etharp_query+0x274>)
 800e71e:	4613      	mov	r3, r2
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	4413      	add	r3, r2
 800e724:	00db      	lsls	r3, r3, #3
 800e726:	440b      	add	r3, r1
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00b      	beq.n	800e746 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800e72e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e732:	4910      	ldr	r1, [pc, #64]	; (800e774 <etharp_query+0x274>)
 800e734:	4613      	mov	r3, r2
 800e736:	005b      	lsls	r3, r3, #1
 800e738:	4413      	add	r3, r2
 800e73a:	00db      	lsls	r3, r3, #3
 800e73c:	440b      	add	r3, r1
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4618      	mov	r0, r3
 800e742:	f7fa f917 	bl	8008974 <pbuf_free>
      }
      arp_table[i].q = p;
 800e746:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e74a:	490a      	ldr	r1, [pc, #40]	; (800e774 <etharp_query+0x274>)
 800e74c:	4613      	mov	r3, r2
 800e74e:	005b      	lsls	r3, r3, #1
 800e750:	4413      	add	r3, r2
 800e752:	00db      	lsls	r3, r3, #3
 800e754:	440b      	add	r3, r1
 800e756:	69fa      	ldr	r2, [r7, #28]
 800e758:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e75a:	2300      	movs	r3, #0
 800e75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e760:	e002      	b.n	800e768 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e762:	23ff      	movs	r3, #255	; 0xff
 800e764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e768:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3728      	adds	r7, #40	; 0x28
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	2000bb84 	.word	0x2000bb84
 800e778:	080128dc 	.word	0x080128dc
 800e77c:	08012a88 	.word	0x08012a88
 800e780:	08012954 	.word	0x08012954
 800e784:	08012a7c 	.word	0x08012a7c
 800e788:	2000bc74 	.word	0x2000bc74
 800e78c:	08012ab0 	.word	0x08012ab0

0800e790 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08a      	sub	sp, #40	; 0x28
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d106      	bne.n	800e7b6 <etharp_raw+0x26>
 800e7a8:	4b3a      	ldr	r3, [pc, #232]	; (800e894 <etharp_raw+0x104>)
 800e7aa:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800e7ae:	493a      	ldr	r1, [pc, #232]	; (800e898 <etharp_raw+0x108>)
 800e7b0:	483a      	ldr	r0, [pc, #232]	; (800e89c <etharp_raw+0x10c>)
 800e7b2:	f001 fd1b 	bl	80101ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	211c      	movs	r1, #28
 800e7ba:	2002      	movs	r0, #2
 800e7bc:	f7f9 fd62 	bl	8008284 <pbuf_alloc>
 800e7c0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7cc:	e05d      	b.n	800e88a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	895b      	ldrh	r3, [r3, #10]
 800e7d2:	2b1b      	cmp	r3, #27
 800e7d4:	d806      	bhi.n	800e7e4 <etharp_raw+0x54>
 800e7d6:	4b2f      	ldr	r3, [pc, #188]	; (800e894 <etharp_raw+0x104>)
 800e7d8:	f240 4263 	movw	r2, #1123	; 0x463
 800e7dc:	4930      	ldr	r1, [pc, #192]	; (800e8a0 <etharp_raw+0x110>)
 800e7de:	482f      	ldr	r0, [pc, #188]	; (800e89c <etharp_raw+0x10c>)
 800e7e0:	f001 fd04 	bl	80101ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e7ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7f8 fec9 	bl	8007584 <lwip_htons>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e800:	2b06      	cmp	r3, #6
 800e802:	d006      	beq.n	800e812 <etharp_raw+0x82>
 800e804:	4b23      	ldr	r3, [pc, #140]	; (800e894 <etharp_raw+0x104>)
 800e806:	f240 426a 	movw	r2, #1130	; 0x46a
 800e80a:	4926      	ldr	r1, [pc, #152]	; (800e8a4 <etharp_raw+0x114>)
 800e80c:	4823      	ldr	r0, [pc, #140]	; (800e89c <etharp_raw+0x10c>)
 800e80e:	f001 fced 	bl	80101ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	3308      	adds	r3, #8
 800e816:	2206      	movs	r2, #6
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f001 fcd0 	bl	80101c0 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	3312      	adds	r3, #18
 800e824:	2206      	movs	r2, #6
 800e826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e828:	4618      	mov	r0, r3
 800e82a:	f001 fcc9 	bl	80101c0 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	330e      	adds	r3, #14
 800e832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e834:	6812      	ldr	r2, [r2, #0]
 800e836:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	3318      	adds	r3, #24
 800e83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e83e:	6812      	ldr	r2, [r2, #0]
 800e840:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2200      	movs	r2, #0
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	2200      	movs	r2, #0
 800e84a:	f042 0201 	orr.w	r2, r2, #1
 800e84e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	2200      	movs	r2, #0
 800e854:	f042 0208 	orr.w	r2, r2, #8
 800e858:	709a      	strb	r2, [r3, #2]
 800e85a:	2200      	movs	r2, #0
 800e85c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	2206      	movs	r2, #6
 800e862:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2204      	movs	r2, #4
 800e868:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e86a:	f640 0306 	movw	r3, #2054	; 0x806
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	69b9      	ldr	r1, [r7, #24]
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f001 fafa 	bl	800fe70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e87c:	69b8      	ldr	r0, [r7, #24]
 800e87e:	f7fa f879 	bl	8008974 <pbuf_free>
  p = NULL;
 800e882:	2300      	movs	r3, #0
 800e884:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e886:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3720      	adds	r7, #32
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	080128dc 	.word	0x080128dc
 800e898:	08012a2c 	.word	0x08012a2c
 800e89c:	08012954 	.word	0x08012954
 800e8a0:	08012acc 	.word	0x08012acc
 800e8a4:	08012b00 	.word	0x08012b00

0800e8a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b088      	sub	sp, #32
 800e8ac:	af04      	add	r7, sp, #16
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	9203      	str	r2, [sp, #12]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	9202      	str	r2, [sp, #8]
 800e8cc:	4a06      	ldr	r2, [pc, #24]	; (800e8e8 <etharp_request_dst+0x40>)
 800e8ce:	9201      	str	r2, [sp, #4]
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f7ff ff5a 	bl	800e790 <etharp_raw>
 800e8dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	0801308c 	.word	0x0801308c

0800e8ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e8f6:	4a05      	ldr	r2, [pc, #20]	; (800e90c <etharp_request+0x20>)
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7ff ffd4 	bl	800e8a8 <etharp_request_dst>
 800e900:	4603      	mov	r3, r0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	08013084 	.word	0x08013084

0800e910 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08e      	sub	sp, #56	; 0x38
 800e914:	af04      	add	r7, sp, #16
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e91a:	4b7a      	ldr	r3, [pc, #488]	; (800eb04 <icmp_input+0x1f4>)
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	b29b      	uxth	r3, r3
 800e926:	f003 030f 	and.w	r3, r3, #15
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e932:	2b13      	cmp	r3, #19
 800e934:	f240 80d1 	bls.w	800eada <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	895b      	ldrh	r3, [r3, #10]
 800e93c:	2b03      	cmp	r3, #3
 800e93e:	f240 80ce 	bls.w	800eade <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e94c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e950:	2b00      	cmp	r3, #0
 800e952:	f000 80bb 	beq.w	800eacc <icmp_input+0x1bc>
 800e956:	2b08      	cmp	r3, #8
 800e958:	f040 80bb 	bne.w	800ead2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800e95c:	4b6a      	ldr	r3, [pc, #424]	; (800eb08 <icmp_input+0x1f8>)
 800e95e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e960:	4b68      	ldr	r3, [pc, #416]	; (800eb04 <icmp_input+0x1f4>)
 800e962:	695b      	ldr	r3, [r3, #20]
 800e964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e968:	2be0      	cmp	r3, #224	; 0xe0
 800e96a:	f000 80bf 	beq.w	800eaec <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e96e:	4b65      	ldr	r3, [pc, #404]	; (800eb04 <icmp_input+0x1f4>)
 800e970:	695b      	ldr	r3, [r3, #20]
 800e972:	4a64      	ldr	r2, [pc, #400]	; (800eb04 <icmp_input+0x1f4>)
 800e974:	6812      	ldr	r2, [r2, #0]
 800e976:	4611      	mov	r1, r2
 800e978:	4618      	mov	r0, r3
 800e97a:	f000 fbd3 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	f040 80b5 	bne.w	800eaf0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	891b      	ldrh	r3, [r3, #8]
 800e98a:	2b07      	cmp	r3, #7
 800e98c:	f240 80a9 	bls.w	800eae2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e992:	330e      	adds	r3, #14
 800e994:	b29b      	uxth	r3, r3
 800e996:	b21b      	sxth	r3, r3
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7f9 ffc6 	bl	800892c <pbuf_header>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d046      	beq.n	800ea34 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	891a      	ldrh	r2, [r3, #8]
 800e9aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9ac:	4413      	add	r3, r2
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	2002      	movs	r0, #2
 800e9b6:	f7f9 fc65 	bl	8008284 <pbuf_alloc>
 800e9ba:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 8098 	beq.w	800eaf4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	895b      	ldrh	r3, [r3, #10]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d203      	bcs.n	800e9da <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e9d2:	69b8      	ldr	r0, [r7, #24]
 800e9d4:	f7f9 ffce 	bl	8008974 <pbuf_free>
        goto icmperr;
 800e9d8:	e08d      	b.n	800eaf6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f001 fbec 	bl	80101c0 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e9e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9ea:	425b      	negs	r3, r3
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	b21b      	sxth	r3, r3
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	69b8      	ldr	r0, [r7, #24]
 800e9f4:	f7f9 ff9a 	bl	800892c <pbuf_header>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e9fe:	4b43      	ldr	r3, [pc, #268]	; (800eb0c <icmp_input+0x1fc>)
 800ea00:	22af      	movs	r2, #175	; 0xaf
 800ea02:	4943      	ldr	r1, [pc, #268]	; (800eb10 <icmp_input+0x200>)
 800ea04:	4843      	ldr	r0, [pc, #268]	; (800eb14 <icmp_input+0x204>)
 800ea06:	f001 fbf1 	bl	80101ec <iprintf>
        pbuf_free(r);
 800ea0a:	69b8      	ldr	r0, [r7, #24]
 800ea0c:	f7f9 ffb2 	bl	8008974 <pbuf_free>
        goto icmperr;
 800ea10:	e071      	b.n	800eaf6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800ea12:	6879      	ldr	r1, [r7, #4]
 800ea14:	69b8      	ldr	r0, [r7, #24]
 800ea16:	f7fa f8db 	bl	8008bd0 <pbuf_copy>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d003      	beq.n	800ea28 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800ea20:	69b8      	ldr	r0, [r7, #24]
 800ea22:	f7f9 ffa7 	bl	8008974 <pbuf_free>
        goto icmperr;
 800ea26:	e066      	b.n	800eaf6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7f9 ffa3 	bl	8008974 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	607b      	str	r3, [r7, #4]
 800ea32:	e015      	b.n	800ea60 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ea34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea36:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800ea3a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ea3e:	33f2      	adds	r3, #242	; 0xf2
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	b21b      	sxth	r3, r3
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7f9 ff70 	bl	800892c <pbuf_header>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d006      	beq.n	800ea60 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ea52:	4b2e      	ldr	r3, [pc, #184]	; (800eb0c <icmp_input+0x1fc>)
 800ea54:	22c0      	movs	r2, #192	; 0xc0
 800ea56:	4930      	ldr	r1, [pc, #192]	; (800eb18 <icmp_input+0x208>)
 800ea58:	482e      	ldr	r0, [pc, #184]	; (800eb14 <icmp_input+0x204>)
 800ea5a:	f001 fbc7 	bl	80101ec <iprintf>
        goto icmperr;
 800ea5e:	e04a      	b.n	800eaf6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ea66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7f9 ff5d 	bl	800892c <pbuf_header>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d12b      	bne.n	800ead0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ea86:	4b1f      	ldr	r3, [pc, #124]	; (800eb04 <icmp_input+0x1f4>)
 800ea88:	691a      	ldr	r2, [r3, #16]
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2200      	movs	r2, #0
 800ea92:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2200      	movs	r2, #0
 800ea98:	709a      	strb	r2, [r3, #2]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	22ff      	movs	r2, #255	; 0xff
 800eaa2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	729a      	strb	r2, [r3, #10]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	9302      	str	r3, [sp, #8]
 800eab2:	2301      	movs	r3, #1
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	2300      	movs	r3, #0
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	23ff      	movs	r3, #255	; 0xff
 800eabc:	2200      	movs	r2, #0
 800eabe:	69f9      	ldr	r1, [r7, #28]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 fa5d 	bl	800ef80 <ip4_output_if>
 800eac6:	4603      	mov	r3, r0
 800eac8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800eaca:	e001      	b.n	800ead0 <icmp_input+0x1c0>
    break;
 800eacc:	bf00      	nop
 800eace:	e000      	b.n	800ead2 <icmp_input+0x1c2>
    break;
 800ead0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7f9 ff4e 	bl	8008974 <pbuf_free>
  return;
 800ead8:	e011      	b.n	800eafe <icmp_input+0x1ee>
    goto lenerr;
 800eada:	bf00      	nop
 800eadc:	e002      	b.n	800eae4 <icmp_input+0x1d4>
    goto lenerr;
 800eade:	bf00      	nop
 800eae0:	e000      	b.n	800eae4 <icmp_input+0x1d4>
      goto lenerr;
 800eae2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7f9 ff45 	bl	8008974 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eaea:	e008      	b.n	800eafe <icmp_input+0x1ee>
      goto icmperr;
 800eaec:	bf00      	nop
 800eaee:	e002      	b.n	800eaf6 <icmp_input+0x1e6>
      goto icmperr;
 800eaf0:	bf00      	nop
 800eaf2:	e000      	b.n	800eaf6 <icmp_input+0x1e6>
        goto icmperr;
 800eaf4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7f9 ff3c 	bl	8008974 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eafc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800eafe:	3728      	adds	r7, #40	; 0x28
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	200083d4 	.word	0x200083d4
 800eb08:	200083e8 	.word	0x200083e8
 800eb0c:	08012b44 	.word	0x08012b44
 800eb10:	08012b7c 	.word	0x08012b7c
 800eb14:	08012bb4 	.word	0x08012bb4
 800eb18:	08012bdc 	.word	0x08012bdc

0800eb1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	2103      	movs	r1, #3
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f814 	bl	800eb5c <icmp_send_response>
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800eb48:	78fb      	ldrb	r3, [r7, #3]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	210b      	movs	r1, #11
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f804 	bl	800eb5c <icmp_send_response>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08c      	sub	sp, #48	; 0x30
 800eb60:	af04      	add	r7, sp, #16
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
 800eb68:	4613      	mov	r3, r2
 800eb6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2124      	movs	r1, #36	; 0x24
 800eb70:	2001      	movs	r0, #1
 800eb72:	f7f9 fb87 	bl	8008284 <pbuf_alloc>
 800eb76:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d04c      	beq.n	800ec18 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	895b      	ldrh	r3, [r3, #10]
 800eb82:	2b23      	cmp	r3, #35	; 0x23
 800eb84:	d806      	bhi.n	800eb94 <icmp_send_response+0x38>
 800eb86:	4b26      	ldr	r3, [pc, #152]	; (800ec20 <icmp_send_response+0xc4>)
 800eb88:	f240 1261 	movw	r2, #353	; 0x161
 800eb8c:	4925      	ldr	r1, [pc, #148]	; (800ec24 <icmp_send_response+0xc8>)
 800eb8e:	4826      	ldr	r0, [pc, #152]	; (800ec28 <icmp_send_response+0xcc>)
 800eb90:	f001 fb2c 	bl	80101ec <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	78fa      	ldrb	r2, [r7, #3]
 800eba4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	78ba      	ldrb	r2, [r7, #2]
 800ebaa:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	711a      	strb	r2, [r3, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	719a      	strb	r2, [r3, #6]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	f103 0008 	add.w	r0, r3, #8
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	221c      	movs	r2, #28
 800ebce:	4619      	mov	r1, r3
 800ebd0:	f001 faf6 	bl	80101c0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ebda:	f107 030c 	add.w	r3, r7, #12
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f000 f824 	bl	800ec2c <ip4_route>
 800ebe4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d011      	beq.n	800ec10 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	709a      	strb	r2, [r3, #2]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ebf6:	f107 020c 	add.w	r2, r7, #12
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	9302      	str	r3, [sp, #8]
 800ebfe:	2301      	movs	r3, #1
 800ec00:	9301      	str	r3, [sp, #4]
 800ec02:	2300      	movs	r3, #0
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	23ff      	movs	r3, #255	; 0xff
 800ec08:	2100      	movs	r1, #0
 800ec0a:	69f8      	ldr	r0, [r7, #28]
 800ec0c:	f000 f9b8 	bl	800ef80 <ip4_output_if>
  }
  pbuf_free(q);
 800ec10:	69f8      	ldr	r0, [r7, #28]
 800ec12:	f7f9 feaf 	bl	8008974 <pbuf_free>
 800ec16:	e000      	b.n	800ec1a <icmp_send_response+0xbe>
    return;
 800ec18:	bf00      	nop
}
 800ec1a:	3720      	adds	r7, #32
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	08012b44 	.word	0x08012b44
 800ec24:	08012c10 	.word	0x08012c10
 800ec28:	08012bb4 	.word	0x08012bb4

0800ec2c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ec34:	4b30      	ldr	r3, [pc, #192]	; (800ecf8 <ip4_route+0xcc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60fb      	str	r3, [r7, #12]
 800ec3a:	e036      	b.n	800ecaa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec42:	f003 0301 	and.w	r3, r3, #1
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d02b      	beq.n	800eca4 <ip4_route+0x78>
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec52:	089b      	lsrs	r3, r3, #2
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d022      	beq.n	800eca4 <ip4_route+0x78>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3304      	adds	r3, #4
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d01d      	beq.n	800eca4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	3304      	adds	r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	405a      	eors	r2, r3
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	3308      	adds	r3, #8
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	e033      	b.n	800ecec <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec8a:	f003 0302 	and.w	r3, r3, #2
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d108      	bne.n	800eca4 <ip4_route+0x78>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	330c      	adds	r3, #12
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d101      	bne.n	800eca4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	e023      	b.n	800ecec <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	60fb      	str	r3, [r7, #12]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1c5      	bne.n	800ec3c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ecb0:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <ip4_route+0xd0>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d015      	beq.n	800ece4 <ip4_route+0xb8>
 800ecb8:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <ip4_route+0xd0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ecc0:	f003 0301 	and.w	r3, r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00d      	beq.n	800ece4 <ip4_route+0xb8>
 800ecc8:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <ip4_route+0xd0>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ecd0:	f003 0304 	and.w	r3, r3, #4
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d005      	beq.n	800ece4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800ecd8:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <ip4_route+0xd0>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ece4:	2300      	movs	r3, #0
 800ece6:	e001      	b.n	800ecec <ip4_route+0xc0>
  }

  return netif_default;
 800ece8:	4b04      	ldr	r3, [pc, #16]	; (800ecfc <ip4_route+0xd0>)
 800ecea:	681b      	ldr	r3, [r3, #0]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bc80      	pop	{r7}
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	2000bb18 	.word	0x2000bb18
 800ecfc:	2000bb1c 	.word	0x2000bb1c

0800ed00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	091b      	lsrs	r3, r3, #4
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b04      	cmp	r3, #4
 800ed1a:	d004      	beq.n	800ed26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7f9 fe29 	bl	8008974 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	e124      	b.n	800ef70 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	f003 030f 	and.w	r3, r3, #15
 800ed30:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800ed32:	897b      	ldrh	r3, [r7, #10]
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	885b      	ldrh	r3, [r3, #2]
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f8 fc20 	bl	8007584 <lwip_htons>
 800ed44:	4603      	mov	r3, r0
 800ed46:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	891b      	ldrh	r3, [r3, #8]
 800ed4c:	893a      	ldrh	r2, [r7, #8]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d204      	bcs.n	800ed5c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800ed52:	893b      	ldrh	r3, [r7, #8]
 800ed54:	4619      	mov	r1, r3
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7f9 fc98 	bl	800868c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	895b      	ldrh	r3, [r3, #10]
 800ed60:	897a      	ldrh	r2, [r7, #10]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d807      	bhi.n	800ed76 <ip4_input+0x76>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	891b      	ldrh	r3, [r3, #8]
 800ed6a:	893a      	ldrh	r2, [r7, #8]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d802      	bhi.n	800ed76 <ip4_input+0x76>
 800ed70:	897b      	ldrh	r3, [r7, #10]
 800ed72:	2b13      	cmp	r3, #19
 800ed74:	d804      	bhi.n	800ed80 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7f9 fdfc 	bl	8008974 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e0f7      	b.n	800ef70 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	4a7c      	ldr	r2, [pc, #496]	; (800ef78 <ip4_input+0x278>)
 800ed86:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	4a7a      	ldr	r2, [pc, #488]	; (800ef78 <ip4_input+0x278>)
 800ed8e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed90:	4b79      	ldr	r3, [pc, #484]	; (800ef78 <ip4_input+0x278>)
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed98:	2be0      	cmp	r3, #224	; 0xe0
 800ed9a:	d112      	bne.n	800edc2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d007      	beq.n	800edbc <ip4_input+0xbc>
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	3304      	adds	r3, #4
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d002      	beq.n	800edbc <ip4_input+0xbc>
      netif = inp;
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	613b      	str	r3, [r7, #16]
 800edba:	e041      	b.n	800ee40 <ip4_input+0x140>
    } else {
      netif = NULL;
 800edbc:	2300      	movs	r3, #0
 800edbe:	613b      	str	r3, [r7, #16]
 800edc0:	e03e      	b.n	800ee40 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800edc2:	2301      	movs	r3, #1
 800edc4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800edd0:	f003 0301 	and.w	r3, r3, #1
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d014      	beq.n	800ee04 <ip4_input+0x104>
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	3304      	adds	r3, #4
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00f      	beq.n	800ee04 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ede4:	4b64      	ldr	r3, [pc, #400]	; (800ef78 <ip4_input+0x278>)
 800ede6:	695a      	ldr	r2, [r3, #20]
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	3304      	adds	r3, #4
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d026      	beq.n	800ee40 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800edf2:	4b61      	ldr	r3, [pc, #388]	; (800ef78 <ip4_input+0x278>)
 800edf4:	695b      	ldr	r3, [r3, #20]
 800edf6:	6939      	ldr	r1, [r7, #16]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 f993 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800edfe:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d11d      	bne.n	800ee40 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00d      	beq.n	800ee26 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ee0a:	4b5b      	ldr	r3, [pc, #364]	; (800ef78 <ip4_input+0x278>)
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	2b7f      	cmp	r3, #127	; 0x7f
 800ee12:	d102      	bne.n	800ee1a <ip4_input+0x11a>
          netif = NULL;
 800ee14:	2300      	movs	r3, #0
 800ee16:	613b      	str	r3, [r7, #16]
          break;
 800ee18:	e012      	b.n	800ee40 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800ee1e:	4b57      	ldr	r3, [pc, #348]	; (800ef7c <ip4_input+0x27c>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	613b      	str	r3, [r7, #16]
 800ee24:	e002      	b.n	800ee2c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800ee2c:	693a      	ldr	r2, [r7, #16]
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d102      	bne.n	800ee3a <ip4_input+0x13a>
        netif = netif->next;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1c4      	bne.n	800edca <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ee40:	4b4d      	ldr	r3, [pc, #308]	; (800ef78 <ip4_input+0x278>)
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 f96c 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d105      	bne.n	800ee5e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ee52:	4b49      	ldr	r3, [pc, #292]	; (800ef78 <ip4_input+0x278>)
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ee5a:	2be0      	cmp	r3, #224	; 0xe0
 800ee5c:	d104      	bne.n	800ee68 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7f9 fd88 	bl	8008974 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	e083      	b.n	800ef70 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d104      	bne.n	800ee78 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7f9 fd80 	bl	8008974 <pbuf_free>
    return ERR_OK;
 800ee74:	2300      	movs	r3, #0
 800ee76:	e07b      	b.n	800ef70 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	88db      	ldrh	r3, [r3, #6]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ee84:	4013      	ands	r3, r2
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00b      	beq.n	800eea2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fc8e 	bl	800f7ac <ip4_reass>
 800ee90:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <ip4_input+0x19c>
      return ERR_OK;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e069      	b.n	800ef70 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eea2:	4a35      	ldr	r2, [pc, #212]	; (800ef78 <ip4_input+0x278>)
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eea8:	4a33      	ldr	r2, [pc, #204]	; (800ef78 <ip4_input+0x278>)
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eeae:	4a32      	ldr	r2, [pc, #200]	; (800ef78 <ip4_input+0x278>)
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	f003 030f 	and.w	r3, r3, #15
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	4b2c      	ldr	r3, [pc, #176]	; (800ef78 <ip4_input+0x278>)
 800eec6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800eec8:	897b      	ldrh	r3, [r7, #10]
 800eeca:	425b      	negs	r3, r3
 800eecc:	b29b      	uxth	r3, r3
 800eece:	b21b      	sxth	r3, r3
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7f9 fd2a 	bl	800892c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	7a5b      	ldrb	r3, [r3, #9]
 800eedc:	2b11      	cmp	r3, #17
 800eede:	d006      	beq.n	800eeee <ip4_input+0x1ee>
 800eee0:	2b11      	cmp	r3, #17
 800eee2:	dc13      	bgt.n	800ef0c <ip4_input+0x20c>
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d00c      	beq.n	800ef02 <ip4_input+0x202>
 800eee8:	2b06      	cmp	r3, #6
 800eeea:	d005      	beq.n	800eef8 <ip4_input+0x1f8>
 800eeec:	e00e      	b.n	800ef0c <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800eeee:	6839      	ldr	r1, [r7, #0]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7fe fce3 	bl	800d8bc <udp_input>
      break;
 800eef6:	e028      	b.n	800ef4a <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800eef8:	6839      	ldr	r1, [r7, #0]
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7fb f982 	bl	800a204 <tcp_input>
      break;
 800ef00:	e023      	b.n	800ef4a <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ef02:	6839      	ldr	r1, [r7, #0]
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7ff fd03 	bl	800e910 <icmp_input>
      break;
 800ef0a:	e01e      	b.n	800ef4a <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ef0c:	4b1a      	ldr	r3, [pc, #104]	; (800ef78 <ip4_input+0x278>)
 800ef0e:	695b      	ldr	r3, [r3, #20]
 800ef10:	6939      	ldr	r1, [r7, #16]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 f906 	bl	800f124 <ip4_addr_isbroadcast_u32>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d112      	bne.n	800ef44 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef1e:	4b16      	ldr	r3, [pc, #88]	; (800ef78 <ip4_input+0x278>)
 800ef20:	695b      	ldr	r3, [r3, #20]
 800ef22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ef26:	2be0      	cmp	r3, #224	; 0xe0
 800ef28:	d00c      	beq.n	800ef44 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ef2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7f9 fd0d 	bl	8008950 <pbuf_header_force>
        p->payload = iphdr;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	697a      	ldr	r2, [r7, #20]
 800ef3a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ef3c:	2102      	movs	r1, #2
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff fdec 	bl	800eb1c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7f9 fd15 	bl	8008974 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	; (800ef78 <ip4_input+0x278>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ef50:	4b09      	ldr	r3, [pc, #36]	; (800ef78 <ip4_input+0x278>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ef56:	4b08      	ldr	r3, [pc, #32]	; (800ef78 <ip4_input+0x278>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ef5c:	4b06      	ldr	r3, [pc, #24]	; (800ef78 <ip4_input+0x278>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ef62:	4b05      	ldr	r3, [pc, #20]	; (800ef78 <ip4_input+0x278>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ef68:	4b03      	ldr	r3, [pc, #12]	; (800ef78 <ip4_input+0x278>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3718      	adds	r7, #24
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	200083d4 	.word	0x200083d4
 800ef7c:	2000bb18 	.word	0x2000bb18

0800ef80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b08a      	sub	sp, #40	; 0x28
 800ef84:	af04      	add	r7, sp, #16
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d009      	beq.n	800efac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <ip4_output_if+0x26>
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d102      	bne.n	800efac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	3304      	adds	r3, #4
 800efaa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800efac:	78fa      	ldrb	r2, [r7, #3]
 800efae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb0:	9302      	str	r3, [sp, #8]
 800efb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800efb6:	9301      	str	r3, [sp, #4]
 800efb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	4613      	mov	r3, r2
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	6979      	ldr	r1, [r7, #20]
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 f805 	bl	800efd4 <ip4_output_if_src>
 800efca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b088      	sub	sp, #32
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	89db      	ldrh	r3, [r3, #14]
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d006      	beq.n	800eff8 <ip4_output_if_src+0x24>
 800efea:	4b48      	ldr	r3, [pc, #288]	; (800f10c <ip4_output_if_src+0x138>)
 800efec:	f240 3233 	movw	r2, #819	; 0x333
 800eff0:	4947      	ldr	r1, [pc, #284]	; (800f110 <ip4_output_if_src+0x13c>)
 800eff2:	4848      	ldr	r0, [pc, #288]	; (800f114 <ip4_output_if_src+0x140>)
 800eff4:	f001 f8fa 	bl	80101ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d060      	beq.n	800f0c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800effe:	2314      	movs	r3, #20
 800f000:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800f002:	2114      	movs	r1, #20
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f7f9 fc91 	bl	800892c <pbuf_header>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d002      	beq.n	800f016 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f010:	f06f 0301 	mvn.w	r3, #1
 800f014:	e075      	b.n	800f102 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	895b      	ldrh	r3, [r3, #10]
 800f020:	2b13      	cmp	r3, #19
 800f022:	d806      	bhi.n	800f032 <ip4_output_if_src+0x5e>
 800f024:	4b39      	ldr	r3, [pc, #228]	; (800f10c <ip4_output_if_src+0x138>)
 800f026:	f44f 7258 	mov.w	r2, #864	; 0x360
 800f02a:	493b      	ldr	r1, [pc, #236]	; (800f118 <ip4_output_if_src+0x144>)
 800f02c:	4839      	ldr	r0, [pc, #228]	; (800f114 <ip4_output_if_src+0x140>)
 800f02e:	f001 f8dd 	bl	80101ec <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	78fa      	ldrb	r2, [r7, #3]
 800f036:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f03e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f048:	8b7b      	ldrh	r3, [r7, #26]
 800f04a:	089b      	lsrs	r3, r3, #2
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f054:	b2da      	uxtb	r2, r3
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f060:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	891b      	ldrh	r3, [r3, #8]
 800f066:	4618      	mov	r0, r3
 800f068:	f7f8 fa8c 	bl	8007584 <lwip_htons>
 800f06c:	4603      	mov	r3, r0
 800f06e:	461a      	mov	r2, r3
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	2200      	movs	r2, #0
 800f078:	719a      	strb	r2, [r3, #6]
 800f07a:	2200      	movs	r2, #0
 800f07c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f07e:	4b27      	ldr	r3, [pc, #156]	; (800f11c <ip4_output_if_src+0x148>)
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	f7f8 fa7e 	bl	8007584 <lwip_htons>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f090:	4b22      	ldr	r3, [pc, #136]	; (800f11c <ip4_output_if_src+0x148>)
 800f092:	881b      	ldrh	r3, [r3, #0]
 800f094:	3301      	adds	r3, #1
 800f096:	b29a      	uxth	r2, r3
 800f098:	4b20      	ldr	r3, [pc, #128]	; (800f11c <ip4_output_if_src+0x148>)
 800f09a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d104      	bne.n	800f0ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f0a2:	4b1f      	ldr	r3, [pc, #124]	; (800f120 <ip4_output_if_src+0x14c>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	60da      	str	r2, [r3, #12]
 800f0aa:	e003      	b.n	800f0b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	69fb      	ldr	r3, [r7, #28]
 800f0b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	729a      	strb	r2, [r3, #10]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	72da      	strb	r2, [r3, #11]
 800f0be:	e008      	b.n	800f0d2 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f0cc:	f107 0314 	add.w	r3, r7, #20
 800f0d0:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00c      	beq.n	800f0f4 <ip4_output_if_src+0x120>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	891a      	ldrh	r2, [r3, #8]
 800f0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d906      	bls.n	800f0f4 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f000 fd0a 	bl	800fb04 <ip4_frag>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	e006      	b.n	800f102 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	68f9      	ldr	r1, [r7, #12]
 800f0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0fe:	4798      	blx	r3
 800f100:	4603      	mov	r3, r0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3720      	adds	r7, #32
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	08012c3c 	.word	0x08012c3c
 800f110:	08012c70 	.word	0x08012c70
 800f114:	08012c7c 	.word	0x08012c7c
 800f118:	08012ca4 	.word	0x08012ca4
 800f11c:	2000bc76 	.word	0x2000bc76
 800f120:	08013080 	.word	0x08013080

0800f124 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f138:	d002      	beq.n	800f140 <ip4_addr_isbroadcast_u32+0x1c>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f140:	2301      	movs	r3, #1
 800f142:	e02a      	b.n	800f19a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f14a:	f003 0302 	and.w	r3, r3, #2
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f152:	2300      	movs	r3, #0
 800f154:	e021      	b.n	800f19a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	3304      	adds	r3, #4
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d101      	bne.n	800f166 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f162:	2300      	movs	r3, #0
 800f164:	e019      	b.n	800f19a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	3304      	adds	r3, #4
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	405a      	eors	r2, r3
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	3308      	adds	r3, #8
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4013      	ands	r3, r2
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10d      	bne.n	800f198 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	3308      	adds	r3, #8
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	43da      	mvns	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	3308      	adds	r3, #8
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f190:	429a      	cmp	r2, r3
 800f192:	d101      	bne.n	800f198 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f194:	2301      	movs	r3, #1
 800f196:	e000      	b.n	800f19a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f198:	2300      	movs	r3, #0
  }
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3714      	adds	r7, #20
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bc80      	pop	{r7}
 800f1a2:	4770      	bx	lr

0800f1a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f1ae:	4b12      	ldr	r3, [pc, #72]	; (800f1f8 <ip_reass_tmr+0x54>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f1b4:	e018      	b.n	800f1e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	7fdb      	ldrb	r3, [r3, #31]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <ip_reass_tmr+0x32>
      r->timer--;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	7fdb      	ldrb	r3, [r3, #31]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	60fb      	str	r3, [r7, #12]
 800f1d4:	e008      	b.n	800f1e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f1e0:	68b9      	ldr	r1, [r7, #8]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 f80a 	bl	800f1fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1e3      	bne.n	800f1b6 <ip_reass_tmr+0x12>
     }
   }
}
 800f1ee:	bf00      	nop
 800f1f0:	bf00      	nop
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	2000bc78 	.word	0x2000bc78

0800f1fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b088      	sub	sp, #32
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d105      	bne.n	800f21e <ip_reass_free_complete_datagram+0x22>
 800f212:	4b45      	ldr	r3, [pc, #276]	; (800f328 <ip_reass_free_complete_datagram+0x12c>)
 800f214:	22ab      	movs	r2, #171	; 0xab
 800f216:	4945      	ldr	r1, [pc, #276]	; (800f32c <ip_reass_free_complete_datagram+0x130>)
 800f218:	4845      	ldr	r0, [pc, #276]	; (800f330 <ip_reass_free_complete_datagram+0x134>)
 800f21a:	f000 ffe7 	bl	80101ec <iprintf>
  if (prev != NULL) {
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00a      	beq.n	800f23a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d005      	beq.n	800f23a <ip_reass_free_complete_datagram+0x3e>
 800f22e:	4b3e      	ldr	r3, [pc, #248]	; (800f328 <ip_reass_free_complete_datagram+0x12c>)
 800f230:	22ad      	movs	r2, #173	; 0xad
 800f232:	4940      	ldr	r1, [pc, #256]	; (800f334 <ip_reass_free_complete_datagram+0x138>)
 800f234:	483e      	ldr	r0, [pc, #248]	; (800f330 <ip_reass_free_complete_datagram+0x134>)
 800f236:	f000 ffd9 	bl	80101ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	889b      	ldrh	r3, [r3, #4]
 800f246:	b29b      	uxth	r3, r3
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d12a      	bne.n	800f2a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	6858      	ldr	r0, [r3, #4]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	3308      	adds	r3, #8
 800f262:	2214      	movs	r2, #20
 800f264:	4619      	mov	r1, r3
 800f266:	f000 ffab 	bl	80101c0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f26a:	2101      	movs	r1, #1
 800f26c:	69b8      	ldr	r0, [r7, #24]
 800f26e:	f7ff fc65 	bl	800eb3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f272:	69b8      	ldr	r0, [r7, #24]
 800f274:	f7f9 fc18 	bl	8008aa8 <pbuf_clen>
 800f278:	4603      	mov	r3, r0
 800f27a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f27c:	8bfa      	ldrh	r2, [r7, #30]
 800f27e:	8a7b      	ldrh	r3, [r7, #18]
 800f280:	4413      	add	r3, r2
 800f282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f286:	db05      	blt.n	800f294 <ip_reass_free_complete_datagram+0x98>
 800f288:	4b27      	ldr	r3, [pc, #156]	; (800f328 <ip_reass_free_complete_datagram+0x12c>)
 800f28a:	22bc      	movs	r2, #188	; 0xbc
 800f28c:	492a      	ldr	r1, [pc, #168]	; (800f338 <ip_reass_free_complete_datagram+0x13c>)
 800f28e:	4828      	ldr	r0, [pc, #160]	; (800f330 <ip_reass_free_complete_datagram+0x134>)
 800f290:	f000 ffac 	bl	80101ec <iprintf>
    pbufs_freed += clen;
 800f294:	8bfa      	ldrh	r2, [r7, #30]
 800f296:	8a7b      	ldrh	r3, [r7, #18]
 800f298:	4413      	add	r3, r2
 800f29a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f29c:	69b8      	ldr	r0, [r7, #24]
 800f29e:	f7f9 fb69 	bl	8008974 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f2a8:	e01f      	b.n	800f2ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f7f9 fbf4 	bl	8008aa8 <pbuf_clen>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f2c4:	8bfa      	ldrh	r2, [r7, #30]
 800f2c6:	8a7b      	ldrh	r3, [r7, #18]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ce:	db05      	blt.n	800f2dc <ip_reass_free_complete_datagram+0xe0>
 800f2d0:	4b15      	ldr	r3, [pc, #84]	; (800f328 <ip_reass_free_complete_datagram+0x12c>)
 800f2d2:	22cc      	movs	r2, #204	; 0xcc
 800f2d4:	4918      	ldr	r1, [pc, #96]	; (800f338 <ip_reass_free_complete_datagram+0x13c>)
 800f2d6:	4816      	ldr	r0, [pc, #88]	; (800f330 <ip_reass_free_complete_datagram+0x134>)
 800f2d8:	f000 ff88 	bl	80101ec <iprintf>
    pbufs_freed += clen;
 800f2dc:	8bfa      	ldrh	r2, [r7, #30]
 800f2de:	8a7b      	ldrh	r3, [r7, #18]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7f9 fb45 	bl	8008974 <pbuf_free>
  while (p != NULL) {
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1dc      	bne.n	800f2aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 f8c2 	bl	800f47c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800f2f8:	4b10      	ldr	r3, [pc, #64]	; (800f33c <ip_reass_free_complete_datagram+0x140>)
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	8bfa      	ldrh	r2, [r7, #30]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d905      	bls.n	800f30e <ip_reass_free_complete_datagram+0x112>
 800f302:	4b09      	ldr	r3, [pc, #36]	; (800f328 <ip_reass_free_complete_datagram+0x12c>)
 800f304:	22d2      	movs	r2, #210	; 0xd2
 800f306:	490e      	ldr	r1, [pc, #56]	; (800f340 <ip_reass_free_complete_datagram+0x144>)
 800f308:	4809      	ldr	r0, [pc, #36]	; (800f330 <ip_reass_free_complete_datagram+0x134>)
 800f30a:	f000 ff6f 	bl	80101ec <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800f30e:	4b0b      	ldr	r3, [pc, #44]	; (800f33c <ip_reass_free_complete_datagram+0x140>)
 800f310:	881a      	ldrh	r2, [r3, #0]
 800f312:	8bfb      	ldrh	r3, [r7, #30]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	b29a      	uxth	r2, r3
 800f318:	4b08      	ldr	r3, [pc, #32]	; (800f33c <ip_reass_free_complete_datagram+0x140>)
 800f31a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f31c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3720      	adds	r7, #32
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	08012cd4 	.word	0x08012cd4
 800f32c:	08012d10 	.word	0x08012d10
 800f330:	08012d1c 	.word	0x08012d1c
 800f334:	08012d44 	.word	0x08012d44
 800f338:	08012d58 	.word	0x08012d58
 800f33c:	2000bc7c 	.word	0x2000bc7c
 800f340:	08012d78 	.word	0x08012d78

0800f344 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08a      	sub	sp, #40	; 0x28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f34e:	2300      	movs	r3, #0
 800f350:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f356:	2300      	movs	r3, #0
 800f358:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f35e:	2300      	movs	r3, #0
 800f360:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f362:	4b28      	ldr	r3, [pc, #160]	; (800f404 <ip_reass_remove_oldest_datagram+0xc0>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f368:	e030      	b.n	800f3cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36c:	695a      	ldr	r2, [r3, #20]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	429a      	cmp	r2, r3
 800f374:	d10c      	bne.n	800f390 <ip_reass_remove_oldest_datagram+0x4c>
 800f376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f378:	699a      	ldr	r2, [r3, #24]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	691b      	ldr	r3, [r3, #16]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d106      	bne.n	800f390 <ip_reass_remove_oldest_datagram+0x4c>
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	899a      	ldrh	r2, [r3, #12]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	889b      	ldrh	r3, [r3, #4]
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d014      	beq.n	800f3ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	3301      	adds	r3, #1
 800f394:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d104      	bne.n	800f3a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	61bb      	str	r3, [r7, #24]
 800f3a4:	e009      	b.n	800f3ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a8:	7fda      	ldrb	r2, [r3, #31]
 800f3aa:	6a3b      	ldr	r3, [r7, #32]
 800f3ac:	7fdb      	ldrb	r3, [r3, #31]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d803      	bhi.n	800f3ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d1cb      	bne.n	800f36a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d008      	beq.n	800f3ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f3d8:	69b9      	ldr	r1, [r7, #24]
 800f3da:	6a38      	ldr	r0, [r7, #32]
 800f3dc:	f7ff ff0e 	bl	800f1fc <ip_reass_free_complete_datagram>
 800f3e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f3ea:	697a      	ldr	r2, [r7, #20]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	da02      	bge.n	800f3f8 <ip_reass_remove_oldest_datagram+0xb4>
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	dcac      	bgt.n	800f352 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f3f8:	697b      	ldr	r3, [r7, #20]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3728      	adds	r7, #40	; 0x28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	2000bc78 	.word	0x2000bc78

0800f408 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f412:	2004      	movs	r0, #4
 800f414:	f7f8 fca2 	bl	8007d5c <memp_malloc>
 800f418:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d110      	bne.n	800f442 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f420:	6839      	ldr	r1, [r7, #0]
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7ff ff8e 	bl	800f344 <ip_reass_remove_oldest_datagram>
 800f428:	4602      	mov	r2, r0
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	4293      	cmp	r3, r2
 800f42e:	dc03      	bgt.n	800f438 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f430:	2004      	movs	r0, #4
 800f432:	f7f8 fc93 	bl	8007d5c <memp_malloc>
 800f436:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	e016      	b.n	800f470 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f442:	2220      	movs	r2, #32
 800f444:	2100      	movs	r1, #0
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f000 fec8 	bl	80101dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2203      	movs	r2, #3
 800f450:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f452:	4b09      	ldr	r3, [pc, #36]	; (800f478 <ip_reass_enqueue_new_datagram+0x70>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f45a:	4a07      	ldr	r2, [pc, #28]	; (800f478 <ip_reass_enqueue_new_datagram+0x70>)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	3308      	adds	r3, #8
 800f464:	2214      	movs	r2, #20
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 fea9 	bl	80101c0 <memcpy>
  return ipr;
 800f46e:	68fb      	ldr	r3, [r7, #12]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	2000bc78 	.word	0x2000bc78

0800f47c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f486:	4b10      	ldr	r3, [pc, #64]	; (800f4c8 <ip_reass_dequeue_datagram+0x4c>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d104      	bne.n	800f49a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a0c      	ldr	r2, [pc, #48]	; (800f4c8 <ip_reass_dequeue_datagram+0x4c>)
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	e00d      	b.n	800f4b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d106      	bne.n	800f4ae <ip_reass_dequeue_datagram+0x32>
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <ip_reass_dequeue_datagram+0x50>)
 800f4a2:	f240 1245 	movw	r2, #325	; 0x145
 800f4a6:	490a      	ldr	r1, [pc, #40]	; (800f4d0 <ip_reass_dequeue_datagram+0x54>)
 800f4a8:	480a      	ldr	r0, [pc, #40]	; (800f4d4 <ip_reass_dequeue_datagram+0x58>)
 800f4aa:	f000 fe9f 	bl	80101ec <iprintf>
    prev->next = ipr->next;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	2004      	movs	r0, #4
 800f4ba:	f7f8 fca1 	bl	8007e00 <memp_free>
}
 800f4be:	bf00      	nop
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	2000bc78 	.word	0x2000bc78
 800f4cc:	08012cd4 	.word	0x08012cd4
 800f4d0:	08012d94 	.word	0x08012d94
 800f4d4:	08012d1c 	.word	0x08012d1c

0800f4d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b08c      	sub	sp, #48	; 0x30
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7f8 f843 	bl	8007584 <lwip_htons>
 800f4fe:	4603      	mov	r3, r0
 800f500:	461a      	mov	r2, r3
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	b29b      	uxth	r3, r3
 800f508:	f003 030f 	and.w	r3, r3, #15
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	b29b      	uxth	r3, r3
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	88db      	ldrh	r3, [r3, #6]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7f8 f831 	bl	8007584 <lwip_htons>
 800f522:	4603      	mov	r3, r0
 800f524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f528:	b29b      	uxth	r3, r3
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f536:	2200      	movs	r2, #0
 800f538:	701a      	strb	r2, [r3, #0]
 800f53a:	2200      	movs	r2, #0
 800f53c:	705a      	strb	r2, [r3, #1]
 800f53e:	2200      	movs	r2, #0
 800f540:	709a      	strb	r2, [r3, #2]
 800f542:	2200      	movs	r2, #0
 800f544:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f548:	8b3a      	ldrh	r2, [r7, #24]
 800f54a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800f54c:	8b3a      	ldrh	r2, [r7, #24]
 800f54e:	8b7b      	ldrh	r3, [r7, #26]
 800f550:	4413      	add	r3, r2
 800f552:	b29a      	uxth	r2, r3
 800f554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f556:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	627b      	str	r3, [r7, #36]	; 0x24
 800f55e:	e061      	b.n	800f624 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800f566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f568:	889b      	ldrh	r3, [r3, #4]
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	889b      	ldrh	r3, [r3, #4]
 800f570:	b29b      	uxth	r3, r3
 800f572:	429a      	cmp	r2, r3
 800f574:	d232      	bcs.n	800f5dc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f57a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d01f      	beq.n	800f5c2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f584:	889b      	ldrh	r3, [r3, #4]
 800f586:	b29a      	uxth	r2, r3
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	88db      	ldrh	r3, [r3, #6]
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	429a      	cmp	r2, r3
 800f590:	f0c0 80e3 	bcc.w	800f75a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	88db      	ldrh	r3, [r3, #6]
 800f598:	b29a      	uxth	r2, r3
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	889b      	ldrh	r3, [r3, #4]
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	f200 80da 	bhi.w	800f75a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ae:	88db      	ldrh	r3, [r3, #6]
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	889b      	ldrh	r3, [r3, #4]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d037      	beq.n	800f62c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f5c0:	e034      	b.n	800f62c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800f5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c4:	88db      	ldrh	r3, [r3, #6]
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	889b      	ldrh	r3, [r3, #4]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	f200 80c5 	bhi.w	800f75e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	605a      	str	r2, [r3, #4]
      break;
 800f5da:	e027      	b.n	800f62c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800f5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5de:	889b      	ldrh	r3, [r3, #4]
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	889b      	ldrh	r3, [r3, #4]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	f000 80ba 	beq.w	800f762 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f0:	889b      	ldrh	r3, [r3, #4]
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	88db      	ldrh	r3, [r3, #6]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	f0c0 80b3 	bcc.w	800f766 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f602:	2b00      	cmp	r3, #0
 800f604:	d009      	beq.n	800f61a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	88db      	ldrh	r3, [r3, #6]
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	889b      	ldrh	r3, [r3, #4]
 800f610:	b29b      	uxth	r3, r3
 800f612:	429a      	cmp	r2, r3
 800f614:	d001      	beq.n	800f61a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f616:	2300      	movs	r3, #0
 800f618:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	2b00      	cmp	r3, #0
 800f628:	d19a      	bne.n	800f560 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800f62a:	e000      	b.n	800f62e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800f62c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	2b00      	cmp	r3, #0
 800f632:	d12d      	bne.n	800f690 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	2b00      	cmp	r3, #0
 800f638:	d01c      	beq.n	800f674 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63c:	88db      	ldrh	r3, [r3, #6]
 800f63e:	b29a      	uxth	r2, r3
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	889b      	ldrh	r3, [r3, #4]
 800f644:	b29b      	uxth	r3, r3
 800f646:	429a      	cmp	r2, r3
 800f648:	d906      	bls.n	800f658 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800f64a:	4b51      	ldr	r3, [pc, #324]	; (800f790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f64c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f650:	4950      	ldr	r1, [pc, #320]	; (800f794 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f652:	4851      	ldr	r0, [pc, #324]	; (800f798 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f654:	f000 fdca 	bl	80101ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	88db      	ldrh	r3, [r3, #6]
 800f662:	b29a      	uxth	r2, r3
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	889b      	ldrh	r3, [r3, #4]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d010      	beq.n	800f690 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	623b      	str	r3, [r7, #32]
 800f672:	e00d      	b.n	800f690 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d006      	beq.n	800f68a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800f67c:	4b44      	ldr	r3, [pc, #272]	; (800f790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f67e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800f682:	4946      	ldr	r1, [pc, #280]	; (800f79c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f684:	4844      	ldr	r0, [pc, #272]	; (800f798 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f686:	f000 fdb1 	bl	80101ec <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d105      	bne.n	800f6a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	7f9b      	ldrb	r3, [r3, #30]
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d059      	beq.n	800f756 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800f6a2:	6a3b      	ldr	r3, [r7, #32]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d04f      	beq.n	800f748 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d006      	beq.n	800f6be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	889b      	ldrh	r3, [r3, #4]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d002      	beq.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	623b      	str	r3, [r7, #32]
 800f6c2:	e041      	b.n	800f748 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f6ce:	e012      	b.n	800f6f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d8:	88db      	ldrh	r3, [r3, #6]
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	889b      	ldrh	r3, [r3, #4]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d002      	beq.n	800f6ec <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	623b      	str	r3, [r7, #32]
            break;
 800f6ea:	e007      	b.n	800f6fc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1e9      	bne.n	800f6d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f6fc:	6a3b      	ldr	r3, [r7, #32]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d022      	beq.n	800f748 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d106      	bne.n	800f718 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800f70a:	4b21      	ldr	r3, [pc, #132]	; (800f790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f70c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800f710:	4923      	ldr	r1, [pc, #140]	; (800f7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f712:	4821      	ldr	r0, [pc, #132]	; (800f798 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f714:	f000 fd6a 	bl	80101ec <iprintf>
          LWIP_ASSERT("sanity check",
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f720:	429a      	cmp	r2, r3
 800f722:	d106      	bne.n	800f732 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800f724:	4b1a      	ldr	r3, [pc, #104]	; (800f790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f726:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f72a:	491d      	ldr	r1, [pc, #116]	; (800f7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f72c:	481a      	ldr	r0, [pc, #104]	; (800f798 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f72e:	f000 fd5d 	bl	80101ec <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d006      	beq.n	800f748 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800f73a:	4b15      	ldr	r3, [pc, #84]	; (800f790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f73c:	f240 12d7 	movw	r2, #471	; 0x1d7
 800f740:	4918      	ldr	r1, [pc, #96]	; (800f7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f742:	4815      	ldr	r0, [pc, #84]	; (800f798 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f744:	f000 fd52 	bl	80101ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	bf14      	ite	ne
 800f74e:	2301      	movne	r3, #1
 800f750:	2300      	moveq	r3, #0
 800f752:	b2db      	uxtb	r3, r3
 800f754:	e018      	b.n	800f788 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f756:	2300      	movs	r3, #0
 800f758:	e016      	b.n	800f788 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800f75a:	bf00      	nop
 800f75c:	e004      	b.n	800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800f75e:	bf00      	nop
 800f760:	e002      	b.n	800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f762:	bf00      	nop
 800f764:	e000      	b.n	800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f766:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f768:	68b8      	ldr	r0, [r7, #8]
 800f76a:	f7f9 f99d 	bl	8008aa8 <pbuf_clen>
 800f76e:	4603      	mov	r3, r0
 800f770:	461a      	mov	r2, r3
 800f772:	4b0d      	ldr	r3, [pc, #52]	; (800f7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f774:	881b      	ldrh	r3, [r3, #0]
 800f776:	1a9b      	subs	r3, r3, r2
 800f778:	b29a      	uxth	r2, r3
 800f77a:	4b0b      	ldr	r3, [pc, #44]	; (800f7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f77c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800f77e:	68b8      	ldr	r0, [r7, #8]
 800f780:	f7f9 f8f8 	bl	8008974 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f784:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3730      	adds	r7, #48	; 0x30
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	08012cd4 	.word	0x08012cd4
 800f794:	08012db0 	.word	0x08012db0
 800f798:	08012d1c 	.word	0x08012d1c
 800f79c:	08012dd0 	.word	0x08012dd0
 800f7a0:	08012e08 	.word	0x08012e08
 800f7a4:	08012e18 	.word	0x08012e18
 800f7a8:	2000bc7c 	.word	0x2000bc7c

0800f7ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08e      	sub	sp, #56	; 0x38
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	f003 030f 	and.w	r3, r3, #15
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	2b14      	cmp	r3, #20
 800f7c6:	f040 8131 	bne.w	800fa2c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	88db      	ldrh	r3, [r3, #6]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7f7 fed7 	bl	8007584 <lwip_htons>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	885b      	ldrh	r3, [r3, #2]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f7 fecb 	bl	8007584 <lwip_htons>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	b29b      	uxth	r3, r3
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7f9 f94e 	bl	8008aa8 <pbuf_clen>
 800f80c:	4603      	mov	r3, r0
 800f80e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f810:	4b8e      	ldr	r3, [pc, #568]	; (800fa4c <ip4_reass+0x2a0>)
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	461a      	mov	r2, r3
 800f816:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f818:	4413      	add	r3, r2
 800f81a:	2b0a      	cmp	r3, #10
 800f81c:	dd10      	ble.n	800f840 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f81e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f820:	4619      	mov	r1, r3
 800f822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f824:	f7ff fd8e 	bl	800f344 <ip_reass_remove_oldest_datagram>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 8100 	beq.w	800fa30 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f830:	4b86      	ldr	r3, [pc, #536]	; (800fa4c <ip4_reass+0x2a0>)
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f838:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f83a:	2b0a      	cmp	r3, #10
 800f83c:	f300 80f8 	bgt.w	800fa30 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f840:	4b83      	ldr	r3, [pc, #524]	; (800fa50 <ip4_reass+0x2a4>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	633b      	str	r3, [r7, #48]	; 0x30
 800f846:	e015      	b.n	800f874 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	695a      	ldr	r2, [r3, #20]
 800f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	429a      	cmp	r2, r3
 800f852:	d10c      	bne.n	800f86e <ip4_reass+0xc2>
 800f854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f856:	699a      	ldr	r2, [r3, #24]
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d106      	bne.n	800f86e <ip4_reass+0xc2>
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	899a      	ldrh	r2, [r3, #12]
 800f864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f866:	889b      	ldrh	r3, [r3, #4]
 800f868:	b29b      	uxth	r3, r3
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d006      	beq.n	800f87c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	633b      	str	r3, [r7, #48]	; 0x30
 800f874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1e6      	bne.n	800f848 <ip4_reass+0x9c>
 800f87a:	e000      	b.n	800f87e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f87c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	2b00      	cmp	r3, #0
 800f882:	d109      	bne.n	800f898 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f886:	4619      	mov	r1, r3
 800f888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f88a:	f7ff fdbd 	bl	800f408 <ip_reass_enqueue_new_datagram>
 800f88e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	2b00      	cmp	r3, #0
 800f894:	d11c      	bne.n	800f8d0 <ip4_reass+0x124>
      goto nullreturn;
 800f896:	e0d0      	b.n	800fa3a <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89a:	88db      	ldrh	r3, [r3, #6]
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f7 fe70 	bl	8007584 <lwip_htons>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d110      	bne.n	800f8d0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b0:	89db      	ldrh	r3, [r3, #14]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f7 fe66 	bl	8007584 <lwip_htons>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d006      	beq.n	800f8d0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	3308      	adds	r3, #8
 800f8c6:	2214      	movs	r2, #20
 800f8c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f000 fc78 	bl	80101c0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d2:	88db      	ldrh	r3, [r3, #6]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	f003 0320 	and.w	r3, r3, #32
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	bf0c      	ite	eq
 800f8de:	2301      	moveq	r3, #1
 800f8e0:	2300      	movne	r3, #0
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00e      	beq.n	800f90a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800f8ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8f0:	4413      	add	r3, r2
 800f8f2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f8f4:	8b7a      	ldrh	r2, [r7, #26]
 800f8f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	f0c0 809b 	bcc.w	800fa34 <ip4_reass+0x288>
 800f8fe:	8b7b      	ldrh	r3, [r7, #26]
 800f900:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f904:	4293      	cmp	r3, r2
 800f906:	f200 8095 	bhi.w	800fa34 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f90a:	69fa      	ldr	r2, [r7, #28]
 800f90c:	6879      	ldr	r1, [r7, #4]
 800f90e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f910:	f7ff fde2 	bl	800f4d8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f914:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91c:	f000 808c 	beq.w	800fa38 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f920:	4b4a      	ldr	r3, [pc, #296]	; (800fa4c <ip4_reass+0x2a0>)
 800f922:	881a      	ldrh	r2, [r3, #0]
 800f924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f926:	4413      	add	r3, r2
 800f928:	b29a      	uxth	r2, r3
 800f92a:	4b48      	ldr	r3, [pc, #288]	; (800fa4c <ip4_reass+0x2a0>)
 800f92c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00d      	beq.n	800f950 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800f934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f938:	4413      	add	r3, r2
 800f93a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	8a7a      	ldrh	r2, [r7, #18]
 800f940:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f944:	7f9b      	ldrb	r3, [r3, #30]
 800f946:	f043 0301 	orr.w	r3, r3, #1
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2b01      	cmp	r3, #1
 800f954:	d168      	bne.n	800fa28 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800f956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f958:	8b9b      	ldrh	r3, [r3, #28]
 800f95a:	3314      	adds	r3, #20
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f976:	3308      	adds	r3, #8
 800f978:	2214      	movs	r2, #20
 800f97a:	4619      	mov	r1, r3
 800f97c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f97e:	f000 fc1f 	bl	80101c0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f984:	8b9b      	ldrh	r3, [r3, #28]
 800f986:	4618      	mov	r0, r3
 800f988:	f7f7 fdfc 	bl	8007584 <lwip_htons>
 800f98c:	4603      	mov	r3, r0
 800f98e:	461a      	mov	r2, r3
 800f990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f992:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f996:	2200      	movs	r2, #0
 800f998:	719a      	strb	r2, [r3, #6]
 800f99a:	2200      	movs	r2, #0
 800f99c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	729a      	strb	r2, [r3, #10]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f9ae:	e00e      	b.n	800f9ce <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800f9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f9b6:	f06f 0113 	mvn.w	r1, #19
 800f9ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9bc:	f7f8 ffb6 	bl	800892c <pbuf_header>
      pbuf_cat(p, r);
 800f9c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7f9 f8ae 	bl	8008b24 <pbuf_cat>
      r = iprh->next_pbuf;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d1ed      	bne.n	800f9b0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f9d4:	4b1e      	ldr	r3, [pc, #120]	; (800fa50 <ip4_reass+0x2a4>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d102      	bne.n	800f9e4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9e2:	e010      	b.n	800fa06 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f9e4:	4b1a      	ldr	r3, [pc, #104]	; (800fa50 <ip4_reass+0x2a4>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ea:	e007      	b.n	800f9fc <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d006      	beq.n	800fa04 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1f4      	bne.n	800f9ec <ip4_reass+0x240>
 800fa02:	e000      	b.n	800fa06 <ip4_reass+0x25a>
          break;
 800fa04:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fa06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa0a:	f7ff fd37 	bl	800f47c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7f9 f84a 	bl	8008aa8 <pbuf_clen>
 800fa14:	4603      	mov	r3, r0
 800fa16:	461a      	mov	r2, r3
 800fa18:	4b0c      	ldr	r3, [pc, #48]	; (800fa4c <ip4_reass+0x2a0>)
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	1a9b      	subs	r3, r3, r2
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	4b0a      	ldr	r3, [pc, #40]	; (800fa4c <ip4_reass+0x2a0>)
 800fa22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	e00c      	b.n	800fa42 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e00a      	b.n	800fa42 <ip4_reass+0x296>
    goto nullreturn;
 800fa2c:	bf00      	nop
 800fa2e:	e004      	b.n	800fa3a <ip4_reass+0x28e>
      goto nullreturn;
 800fa30:	bf00      	nop
 800fa32:	e002      	b.n	800fa3a <ip4_reass+0x28e>
      goto nullreturn;
 800fa34:	bf00      	nop
 800fa36:	e000      	b.n	800fa3a <ip4_reass+0x28e>
    goto nullreturn;
 800fa38:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7f8 ff9a 	bl	8008974 <pbuf_free>
  return NULL;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3738      	adds	r7, #56	; 0x38
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	2000bc7c 	.word	0x2000bc7c
 800fa50:	2000bc78 	.word	0x2000bc78

0800fa54 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800fa58:	2005      	movs	r0, #5
 800fa5a:	f7f8 f97f 	bl	8007d5c <memp_malloc>
 800fa5e:	4603      	mov	r3, r0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d106      	bne.n	800fa80 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fa72:	4b07      	ldr	r3, [pc, #28]	; (800fa90 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fa74:	f240 22ae 	movw	r2, #686	; 0x2ae
 800fa78:	4906      	ldr	r1, [pc, #24]	; (800fa94 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fa7a:	4807      	ldr	r0, [pc, #28]	; (800fa98 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fa7c:	f000 fbb6 	bl	80101ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fa80:	6879      	ldr	r1, [r7, #4]
 800fa82:	2005      	movs	r0, #5
 800fa84:	f7f8 f9bc 	bl	8007e00 <memp_free>
}
 800fa88:	bf00      	nop
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	08012cd4 	.word	0x08012cd4
 800fa94:	08012e3c 	.word	0x08012e3c
 800fa98:	08012d1c 	.word	0x08012d1c

0800fa9c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <ipfrag_free_pbuf_custom+0x20>
 800faae:	4b11      	ldr	r3, [pc, #68]	; (800faf4 <ipfrag_free_pbuf_custom+0x58>)
 800fab0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800fab4:	4910      	ldr	r1, [pc, #64]	; (800faf8 <ipfrag_free_pbuf_custom+0x5c>)
 800fab6:	4811      	ldr	r0, [pc, #68]	; (800fafc <ipfrag_free_pbuf_custom+0x60>)
 800fab8:	f000 fb98 	bl	80101ec <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d006      	beq.n	800fad2 <ipfrag_free_pbuf_custom+0x36>
 800fac4:	4b0b      	ldr	r3, [pc, #44]	; (800faf4 <ipfrag_free_pbuf_custom+0x58>)
 800fac6:	f240 22b9 	movw	r2, #697	; 0x2b9
 800faca:	490d      	ldr	r1, [pc, #52]	; (800fb00 <ipfrag_free_pbuf_custom+0x64>)
 800facc:	480b      	ldr	r0, [pc, #44]	; (800fafc <ipfrag_free_pbuf_custom+0x60>)
 800face:	f000 fb8d 	bl	80101ec <iprintf>
  if (pcr->original != NULL) {
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d004      	beq.n	800fae4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	695b      	ldr	r3, [r3, #20]
 800fade:	4618      	mov	r0, r3
 800fae0:	f7f8 ff48 	bl	8008974 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f7ff ffbd 	bl	800fa64 <ip_frag_free_pbuf_custom_ref>
}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	08012cd4 	.word	0x08012cd4
 800faf8:	08012e48 	.word	0x08012e48
 800fafc:	08012d1c 	.word	0x08012d1c
 800fb00:	08012e54 	.word	0x08012e54

0800fb04 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b092      	sub	sp, #72	; 0x48
 800fb08:	af02      	add	r7, sp, #8
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fb10:	2300      	movs	r3, #0
 800fb12:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fb18:	3b14      	subs	r3, #20
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	da00      	bge.n	800fb20 <ip4_frag+0x1c>
 800fb1e:	3307      	adds	r3, #7
 800fb20:	10db      	asrs	r3, r3, #3
 800fb22:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fb24:	2314      	movs	r3, #20
 800fb26:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800fb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb30:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 030f 	and.w	r3, r3, #15
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	2b14      	cmp	r3, #20
 800fb3e:	d009      	beq.n	800fb54 <ip4_frag+0x50>
 800fb40:	4b7a      	ldr	r3, [pc, #488]	; (800fd2c <ip4_frag+0x228>)
 800fb42:	f240 22e1 	movw	r2, #737	; 0x2e1
 800fb46:	497a      	ldr	r1, [pc, #488]	; (800fd30 <ip4_frag+0x22c>)
 800fb48:	487a      	ldr	r0, [pc, #488]	; (800fd34 <ip4_frag+0x230>)
 800fb4a:	f000 fb4f 	bl	80101ec <iprintf>
 800fb4e:	f06f 0305 	mvn.w	r3, #5
 800fb52:	e0e6      	b.n	800fd22 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb56:	88db      	ldrh	r3, [r3, #6]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7f7 fd12 	bl	8007584 <lwip_htons>
 800fb60:	4603      	mov	r3, r0
 800fb62:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800fb64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb6a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800fb6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d009      	beq.n	800fb8a <ip4_frag+0x86>
 800fb76:	4b6d      	ldr	r3, [pc, #436]	; (800fd2c <ip4_frag+0x228>)
 800fb78:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fb7c:	496e      	ldr	r1, [pc, #440]	; (800fd38 <ip4_frag+0x234>)
 800fb7e:	486d      	ldr	r0, [pc, #436]	; (800fd34 <ip4_frag+0x230>)
 800fb80:	f000 fb34 	bl	80101ec <iprintf>
 800fb84:	f06f 0305 	mvn.w	r3, #5
 800fb88:	e0cb      	b.n	800fd22 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	891b      	ldrh	r3, [r3, #8]
 800fb8e:	3b14      	subs	r3, #20
 800fb90:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800fb92:	e0bd      	b.n	800fd10 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800fb94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fb96:	00da      	lsls	r2, r3, #3
 800fb98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	bfa8      	it	ge
 800fb9e:	4613      	movge	r3, r2
 800fba0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fba2:	2200      	movs	r2, #0
 800fba4:	2114      	movs	r1, #20
 800fba6:	2002      	movs	r0, #2
 800fba8:	f7f8 fb6c 	bl	8008284 <pbuf_alloc>
 800fbac:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 80b3 	beq.w	800fd1c <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	895b      	ldrh	r3, [r3, #10]
 800fbba:	2b13      	cmp	r3, #19
 800fbbc:	d806      	bhi.n	800fbcc <ip4_frag+0xc8>
 800fbbe:	4b5b      	ldr	r3, [pc, #364]	; (800fd2c <ip4_frag+0x228>)
 800fbc0:	f44f 7242 	mov.w	r2, #776	; 0x308
 800fbc4:	495d      	ldr	r1, [pc, #372]	; (800fd3c <ip4_frag+0x238>)
 800fbc6:	485b      	ldr	r0, [pc, #364]	; (800fd34 <ip4_frag+0x230>)
 800fbc8:	f000 fb10 	bl	80101ec <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	2214      	movs	r2, #20
 800fbd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f000 faf3 	bl	80101c0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800fbe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbe2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800fbe4:	e04f      	b.n	800fc86 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	895a      	ldrh	r2, [r3, #10]
 800fbea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fbf0:	8b7a      	ldrh	r2, [r7, #26]
 800fbf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	bf28      	it	cs
 800fbf8:	4613      	movcs	r3, r2
 800fbfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fbfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d105      	bne.n	800fc0e <ip4_frag+0x10a>
        poff = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]
        continue;
 800fc0c:	e03b      	b.n	800fc86 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fc0e:	f7ff ff21 	bl	800fa54 <ip_frag_alloc_pbuf_custom_ref>
 800fc12:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d103      	bne.n	800fc22 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800fc1a:	6a38      	ldr	r0, [r7, #32]
 800fc1c:	f7f8 feaa 	bl	8008974 <pbuf_free>
        goto memerr;
 800fc20:	e07d      	b.n	800fd1e <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc22:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc2a:	4413      	add	r3, r2
 800fc2c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800fc2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fc30:	9201      	str	r2, [sp, #4]
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	4603      	mov	r3, r0
 800fc36:	2202      	movs	r2, #2
 800fc38:	2004      	movs	r0, #4
 800fc3a:	f7f8 fcbd 	bl	80085b8 <pbuf_alloced_custom>
 800fc3e:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d106      	bne.n	800fc54 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fc46:	6978      	ldr	r0, [r7, #20]
 800fc48:	f7ff ff0c 	bl	800fa64 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fc4c:	6a38      	ldr	r0, [r7, #32]
 800fc4e:	f7f8 fe91 	bl	8008974 <pbuf_free>
        goto memerr;
 800fc52:	e064      	b.n	800fd1e <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7f8 ff3d 	bl	8008ad4 <pbuf_ref>
      pcr->original = p;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	4a37      	ldr	r2, [pc, #220]	; (800fd40 <ip4_frag+0x23c>)
 800fc64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fc66:	6939      	ldr	r1, [r7, #16]
 800fc68:	6a38      	ldr	r0, [r7, #32]
 800fc6a:	f7f8 ff5b 	bl	8008b24 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800fc6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fc70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800fc76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d004      	beq.n	800fc86 <ip4_frag+0x182>
        poff = 0;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fc86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1ac      	bne.n	800fbe6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800fc8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc90:	4413      	add	r3, r2
 800fc92:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fc98:	f1a3 0213 	sub.w	r2, r3, #19
 800fc9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	bfcc      	ite	gt
 800fca2:	2301      	movgt	r3, #1
 800fca4:	2300      	movle	r3, #0
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fcaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fcac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcb0:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d103      	bne.n	800fcc0 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800fcb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fcbe:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fcc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7f7 fc5e 	bl	8007584 <lwip_htons>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	461a      	mov	r2, r3
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fcd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcd2:	3314      	adds	r3, #20
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7f7 fc54 	bl	8007584 <lwip_htons>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	461a      	mov	r2, r3
 800fce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	2200      	movs	r2, #0
 800fce8:	729a      	strb	r2, [r3, #10]
 800fcea:	2200      	movs	r2, #0
 800fcec:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	695b      	ldr	r3, [r3, #20]
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	6a39      	ldr	r1, [r7, #32]
 800fcf6:	68b8      	ldr	r0, [r7, #8]
 800fcf8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fcfa:	6a38      	ldr	r0, [r7, #32]
 800fcfc:	f7f8 fe3a 	bl	8008974 <pbuf_free>
    left -= fragsize;
 800fd00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800fd08:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fd0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fd0c:	4413      	add	r3, r2
 800fd0e:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800fd10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f47f af3e 	bne.w	800fb94 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e002      	b.n	800fd22 <ip4_frag+0x21e>
      goto memerr;
 800fd1c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fd1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3740      	adds	r7, #64	; 0x40
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	08012cd4 	.word	0x08012cd4
 800fd30:	08012e60 	.word	0x08012e60
 800fd34:	08012d1c 	.word	0x08012d1c
 800fd38:	08012e88 	.word	0x08012e88
 800fd3c:	08012ea4 	.word	0x08012ea4
 800fd40:	0800fa9d 	.word	0x0800fa9d

0800fd44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800fd4e:	230e      	movs	r3, #14
 800fd50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	895b      	ldrh	r3, [r3, #10]
 800fd56:	2b0e      	cmp	r3, #14
 800fd58:	d977      	bls.n	800fe4a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	7b1a      	ldrb	r2, [r3, #12]
 800fd64:	7b5b      	ldrb	r3, [r3, #13]
 800fd66:	021b      	lsls	r3, r3, #8
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d023      	beq.n	800fdc0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d10f      	bne.n	800fda0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	785b      	ldrb	r3, [r3, #1]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11b      	bne.n	800fdc0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fd8c:	2b5e      	cmp	r3, #94	; 0x5e
 800fd8e:	d117      	bne.n	800fdc0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7b5b      	ldrb	r3, [r3, #13]
 800fd94:	f043 0310 	orr.w	r3, r3, #16
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	735a      	strb	r2, [r3, #13]
 800fd9e:	e00f      	b.n	800fdc0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	2206      	movs	r2, #6
 800fda4:	4931      	ldr	r1, [pc, #196]	; (800fe6c <ethernet_input+0x128>)
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 f9fa 	bl	80101a0 <memcmp>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d106      	bne.n	800fdc0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	7b5b      	ldrb	r3, [r3, #13]
 800fdb6:	f043 0308 	orr.w	r3, r3, #8
 800fdba:	b2da      	uxtb	r2, r3
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fdc0:	89fb      	ldrh	r3, [r7, #14]
 800fdc2:	2b08      	cmp	r3, #8
 800fdc4:	d003      	beq.n	800fdce <ethernet_input+0x8a>
 800fdc6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fdca:	d01e      	beq.n	800fe0a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fdcc:	e046      	b.n	800fe5c <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fdd4:	f003 0308 	and.w	r3, r3, #8
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d038      	beq.n	800fe4e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	895b      	ldrh	r3, [r3, #10]
 800fde0:	461a      	mov	r2, r3
 800fde2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	db33      	blt.n	800fe52 <ethernet_input+0x10e>
 800fdea:	8afb      	ldrh	r3, [r7, #22]
 800fdec:	425b      	negs	r3, r3
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	b21b      	sxth	r3, r3
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7f8 fd99 	bl	800892c <pbuf_header>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d128      	bne.n	800fe52 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800fe00:	6839      	ldr	r1, [r7, #0]
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7fe ff7c 	bl	800ed00 <ip4_input>
      break;
 800fe08:	e01d      	b.n	800fe46 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe10:	f003 0308 	and.w	r3, r3, #8
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d01e      	beq.n	800fe56 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	895b      	ldrh	r3, [r3, #10]
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	db19      	blt.n	800fe5a <ethernet_input+0x116>
 800fe26:	8afb      	ldrh	r3, [r7, #22]
 800fe28:	425b      	negs	r3, r3
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	b21b      	sxth	r3, r3
 800fe2e:	4619      	mov	r1, r3
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7f8 fd7b 	bl	800892c <pbuf_header>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d10e      	bne.n	800fe5a <ethernet_input+0x116>
        etharp_input(p, netif);
 800fe3c:	6839      	ldr	r1, [r7, #0]
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7fe f94c 	bl	800e0dc <etharp_input>
      break;
 800fe44:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	e00c      	b.n	800fe64 <ethernet_input+0x120>
    goto free_and_return;
 800fe4a:	bf00      	nop
 800fe4c:	e006      	b.n	800fe5c <ethernet_input+0x118>
        goto free_and_return;
 800fe4e:	bf00      	nop
 800fe50:	e004      	b.n	800fe5c <ethernet_input+0x118>
        goto free_and_return;
 800fe52:	bf00      	nop
 800fe54:	e002      	b.n	800fe5c <ethernet_input+0x118>
        goto free_and_return;
 800fe56:	bf00      	nop
 800fe58:	e000      	b.n	800fe5c <ethernet_input+0x118>
        goto free_and_return;
 800fe5a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7f8 fd89 	bl	8008974 <pbuf_free>
  return ERR_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3718      	adds	r7, #24
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	08013084 	.word	0x08013084

0800fe70 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
 800fe7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fe7e:	8c3b      	ldrh	r3, [r7, #32]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7f7 fb7f 	bl	8007584 <lwip_htons>
 800fe86:	4603      	mov	r3, r0
 800fe88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800fe8a:	210e      	movs	r1, #14
 800fe8c:	68b8      	ldr	r0, [r7, #8]
 800fe8e:	f7f8 fd4d 	bl	800892c <pbuf_header>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d125      	bne.n	800fee4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	8afa      	ldrh	r2, [r7, #22]
 800fea2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	2206      	movs	r2, #6
 800fea8:	6839      	ldr	r1, [r7, #0]
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 f988 	bl	80101c0 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	3306      	adds	r3, #6
 800feb4:	2206      	movs	r2, #6
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	f000 f981 	bl	80101c0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fec4:	2b06      	cmp	r3, #6
 800fec6:	d006      	beq.n	800fed6 <ethernet_output+0x66>
 800fec8:	4b0a      	ldr	r3, [pc, #40]	; (800fef4 <ethernet_output+0x84>)
 800feca:	f240 122b 	movw	r2, #299	; 0x12b
 800fece:	490a      	ldr	r1, [pc, #40]	; (800fef8 <ethernet_output+0x88>)
 800fed0:	480a      	ldr	r0, [pc, #40]	; (800fefc <ethernet_output+0x8c>)
 800fed2:	f000 f98b 	bl	80101ec <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	699b      	ldr	r3, [r3, #24]
 800feda:	68b9      	ldr	r1, [r7, #8]
 800fedc:	68f8      	ldr	r0, [r7, #12]
 800fede:	4798      	blx	r3
 800fee0:	4603      	mov	r3, r0
 800fee2:	e002      	b.n	800feea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fee4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fee6:	f06f 0301 	mvn.w	r3, #1
}
 800feea:	4618      	mov	r0, r3
 800feec:	3718      	adds	r7, #24
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	08012ec4 	.word	0x08012ec4
 800fef8:	08012efc 	.word	0x08012efc
 800fefc:	08012f30 	.word	0x08012f30

0800ff00 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	60bb      	str	r3, [r7, #8]
 800ff0e:	2304      	movs	r3, #4
 800ff10:	60fb      	str	r3, [r7, #12]
 800ff12:	2300      	movs	r3, #0
 800ff14:	613b      	str	r3, [r7, #16]
 800ff16:	2300      	movs	r3, #0
 800ff18:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ff1a:	f107 0308 	add.w	r3, r7, #8
 800ff1e:	2100      	movs	r1, #0
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7f4 fd09 	bl	8004938 <osMessageCreate>
 800ff26:	4602      	mov	r2, r0
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <sys_mbox_new+0x3a>
    return ERR_MEM;
 800ff34:	f04f 33ff 	mov.w	r3, #4294967295
 800ff38:	e000      	b.n	800ff3c <sys_mbox_new+0x3c>

  return ERR_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800ff4e:	bf00      	nop
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	6839      	ldr	r1, [r7, #0]
 800ff56:	f04f 32ff 	mov.w	r2, #4294967295
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7f4 fd14 	bl	8004988 <osMessagePut>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d1f4      	bne.n	800ff50 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800ff66:	bf00      	nop
 800ff68:	bf00      	nop
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	2200      	movs	r2, #0
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7f4 fd00 	bl	8004988 <osMessagePut>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d102      	bne.n	800ff94 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	73fb      	strb	r3, [r7, #15]
 800ff92:	e001      	b.n	800ff98 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800ff94:	23ff      	movs	r3, #255	; 0xff
 800ff96:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800ff98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08c      	sub	sp, #48	; 0x30
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	61f8      	str	r0, [r7, #28]
 800ffac:	61b9      	str	r1, [r7, #24]
 800ffae:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800ffb0:	f7f4 fb00 	bl	80045b4 <osKernelSysTick>
 800ffb4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d017      	beq.n	800ffec <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	6819      	ldr	r1, [r3, #0]
 800ffc0:	f107 0320 	add.w	r3, r7, #32
 800ffc4:	697a      	ldr	r2, [r7, #20]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7f4 fd1e 	bl	8004a08 <osMessageGet>

    if(event.status == osEventMessage)
 800ffcc:	6a3b      	ldr	r3, [r7, #32]
 800ffce:	2b10      	cmp	r3, #16
 800ffd0:	d109      	bne.n	800ffe6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800ffda:	f7f4 faeb 	bl	80045b4 <osKernelSysTick>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	e019      	b.n	801001a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800ffe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffea:	e016      	b.n	801001a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	6819      	ldr	r1, [r3, #0]
 800fff0:	463b      	mov	r3, r7
 800fff2:	f04f 32ff 	mov.w	r2, #4294967295
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7f4 fd06 	bl	8004a08 <osMessageGet>
 800fffc:	f107 0320 	add.w	r3, r7, #32
 8010000:	463a      	mov	r2, r7
 8010002:	ca07      	ldmia	r2, {r0, r1, r2}
 8010004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8010008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000a:	461a      	mov	r2, r3
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8010010:	f7f4 fad0 	bl	80045b4 <osKernelSysTick>
 8010014:	4602      	mov	r2, r0
 8010016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010018:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801001a:	4618      	mov	r0, r3
 801001c:	3730      	adds	r7, #48	; 0x30
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <sys_mbox_valid+0x14>
    return 0;
 8010032:	2300      	movs	r3, #0
 8010034:	e000      	b.n	8010038 <sys_mbox_valid+0x16>
  else
    return 1;
 8010036:	2301      	movs	r3, #1
}
 8010038:	4618      	mov	r0, r3
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	bc80      	pop	{r7}
 8010040:	4770      	bx	lr
	...

08010044 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010048:	4803      	ldr	r0, [pc, #12]	; (8010058 <sys_init+0x14>)
 801004a:	f7f4 fb23 	bl	8004694 <osMutexCreate>
 801004e:	4603      	mov	r3, r0
 8010050:	4a02      	ldr	r2, [pc, #8]	; (801005c <sys_init+0x18>)
 8010052:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010054:	bf00      	nop
 8010056:	bd80      	pop	{r7, pc}
 8010058:	08013094 	.word	0x08013094
 801005c:	2000bc84 	.word	0x2000bc84

08010060 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010068:	2300      	movs	r3, #0
 801006a:	60bb      	str	r3, [r7, #8]
 801006c:	2300      	movs	r3, #0
 801006e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010070:	f107 0308 	add.w	r3, r7, #8
 8010074:	4618      	mov	r0, r3
 8010076:	f7f4 fb0d 	bl	8004694 <osMutexCreate>
 801007a:	4602      	mov	r2, r0
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d102      	bne.n	801008e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010088:	f04f 33ff 	mov.w	r3, #4294967295
 801008c:	e000      	b.n	8010090 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f04f 31ff 	mov.w	r1, #4294967295
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7f4 fb0b 	bl	80046c4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80100ae:	bf00      	nop
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b082      	sub	sp, #8
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7f4 fb4c 	bl	8004760 <osMutexRelease>
}
 80100c8:	bf00      	nop
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b08c      	sub	sp, #48	; 0x30
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
 80100dc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80100de:	f107 0314 	add.w	r3, r7, #20
 80100e2:	2200      	movs	r2, #0
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	605a      	str	r2, [r3, #4]
 80100e8:	609a      	str	r2, [r3, #8]
 80100ea:	60da      	str	r2, [r3, #12]
 80100ec:	611a      	str	r2, [r3, #16]
 80100ee:	615a      	str	r2, [r3, #20]
 80100f0:	619a      	str	r2, [r3, #24]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	617b      	str	r3, [r7, #20]
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	61bb      	str	r3, [r7, #24]
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	b21b      	sxth	r3, r3
 80100fe:	83bb      	strh	r3, [r7, #28]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8010104:	f107 0314 	add.w	r3, r7, #20
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	4618      	mov	r0, r3
 801010c:	f7f4 fa62 	bl	80045d4 <osThreadCreate>
 8010110:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010112:	4618      	mov	r0, r3
 8010114:	3730      	adds	r7, #48	; 0x30
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
	...

0801011c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010120:	4b04      	ldr	r3, [pc, #16]	; (8010134 <sys_arch_protect+0x18>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f04f 31ff 	mov.w	r1, #4294967295
 8010128:	4618      	mov	r0, r3
 801012a:	f7f4 facb 	bl	80046c4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801012e:	2301      	movs	r3, #1
}
 8010130:	4618      	mov	r0, r3
 8010132:	bd80      	pop	{r7, pc}
 8010134:	2000bc84 	.word	0x2000bc84

08010138 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010140:	4b04      	ldr	r3, [pc, #16]	; (8010154 <sys_arch_unprotect+0x1c>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4618      	mov	r0, r3
 8010146:	f7f4 fb0b 	bl	8004760 <osMutexRelease>
}
 801014a:	bf00      	nop
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	2000bc84 	.word	0x2000bc84

08010158 <__libc_init_array>:
 8010158:	b570      	push	{r4, r5, r6, lr}
 801015a:	2600      	movs	r6, #0
 801015c:	4d0c      	ldr	r5, [pc, #48]	; (8010190 <__libc_init_array+0x38>)
 801015e:	4c0d      	ldr	r4, [pc, #52]	; (8010194 <__libc_init_array+0x3c>)
 8010160:	1b64      	subs	r4, r4, r5
 8010162:	10a4      	asrs	r4, r4, #2
 8010164:	42a6      	cmp	r6, r4
 8010166:	d109      	bne.n	801017c <__libc_init_array+0x24>
 8010168:	f000 ffd4 	bl	8011114 <_init>
 801016c:	2600      	movs	r6, #0
 801016e:	4d0a      	ldr	r5, [pc, #40]	; (8010198 <__libc_init_array+0x40>)
 8010170:	4c0a      	ldr	r4, [pc, #40]	; (801019c <__libc_init_array+0x44>)
 8010172:	1b64      	subs	r4, r4, r5
 8010174:	10a4      	asrs	r4, r4, #2
 8010176:	42a6      	cmp	r6, r4
 8010178:	d105      	bne.n	8010186 <__libc_init_array+0x2e>
 801017a:	bd70      	pop	{r4, r5, r6, pc}
 801017c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010180:	4798      	blx	r3
 8010182:	3601      	adds	r6, #1
 8010184:	e7ee      	b.n	8010164 <__libc_init_array+0xc>
 8010186:	f855 3b04 	ldr.w	r3, [r5], #4
 801018a:	4798      	blx	r3
 801018c:	3601      	adds	r6, #1
 801018e:	e7f2      	b.n	8010176 <__libc_init_array+0x1e>
 8010190:	0801313c 	.word	0x0801313c
 8010194:	0801313c 	.word	0x0801313c
 8010198:	0801313c 	.word	0x0801313c
 801019c:	08013140 	.word	0x08013140

080101a0 <memcmp>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	3901      	subs	r1, #1
 80101a4:	4402      	add	r2, r0
 80101a6:	4290      	cmp	r0, r2
 80101a8:	d101      	bne.n	80101ae <memcmp+0xe>
 80101aa:	2000      	movs	r0, #0
 80101ac:	e005      	b.n	80101ba <memcmp+0x1a>
 80101ae:	7803      	ldrb	r3, [r0, #0]
 80101b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80101b4:	42a3      	cmp	r3, r4
 80101b6:	d001      	beq.n	80101bc <memcmp+0x1c>
 80101b8:	1b18      	subs	r0, r3, r4
 80101ba:	bd10      	pop	{r4, pc}
 80101bc:	3001      	adds	r0, #1
 80101be:	e7f2      	b.n	80101a6 <memcmp+0x6>

080101c0 <memcpy>:
 80101c0:	440a      	add	r2, r1
 80101c2:	4291      	cmp	r1, r2
 80101c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80101c8:	d100      	bne.n	80101cc <memcpy+0xc>
 80101ca:	4770      	bx	lr
 80101cc:	b510      	push	{r4, lr}
 80101ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101d2:	4291      	cmp	r1, r2
 80101d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101d8:	d1f9      	bne.n	80101ce <memcpy+0xe>
 80101da:	bd10      	pop	{r4, pc}

080101dc <memset>:
 80101dc:	4603      	mov	r3, r0
 80101de:	4402      	add	r2, r0
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d100      	bne.n	80101e6 <memset+0xa>
 80101e4:	4770      	bx	lr
 80101e6:	f803 1b01 	strb.w	r1, [r3], #1
 80101ea:	e7f9      	b.n	80101e0 <memset+0x4>

080101ec <iprintf>:
 80101ec:	b40f      	push	{r0, r1, r2, r3}
 80101ee:	4b0a      	ldr	r3, [pc, #40]	; (8010218 <iprintf+0x2c>)
 80101f0:	b513      	push	{r0, r1, r4, lr}
 80101f2:	681c      	ldr	r4, [r3, #0]
 80101f4:	b124      	cbz	r4, 8010200 <iprintf+0x14>
 80101f6:	69a3      	ldr	r3, [r4, #24]
 80101f8:	b913      	cbnz	r3, 8010200 <iprintf+0x14>
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 f866 	bl	80102cc <__sinit>
 8010200:	ab05      	add	r3, sp, #20
 8010202:	4620      	mov	r0, r4
 8010204:	9a04      	ldr	r2, [sp, #16]
 8010206:	68a1      	ldr	r1, [r4, #8]
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	f000 f9bb 	bl	8010584 <_vfiprintf_r>
 801020e:	b002      	add	sp, #8
 8010210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010214:	b004      	add	sp, #16
 8010216:	4770      	bx	lr
 8010218:	20000014 	.word	0x20000014

0801021c <std>:
 801021c:	2300      	movs	r3, #0
 801021e:	b510      	push	{r4, lr}
 8010220:	4604      	mov	r4, r0
 8010222:	e9c0 3300 	strd	r3, r3, [r0]
 8010226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801022a:	6083      	str	r3, [r0, #8]
 801022c:	8181      	strh	r1, [r0, #12]
 801022e:	6643      	str	r3, [r0, #100]	; 0x64
 8010230:	81c2      	strh	r2, [r0, #14]
 8010232:	6183      	str	r3, [r0, #24]
 8010234:	4619      	mov	r1, r3
 8010236:	2208      	movs	r2, #8
 8010238:	305c      	adds	r0, #92	; 0x5c
 801023a:	f7ff ffcf 	bl	80101dc <memset>
 801023e:	4b05      	ldr	r3, [pc, #20]	; (8010254 <std+0x38>)
 8010240:	6224      	str	r4, [r4, #32]
 8010242:	6263      	str	r3, [r4, #36]	; 0x24
 8010244:	4b04      	ldr	r3, [pc, #16]	; (8010258 <std+0x3c>)
 8010246:	62a3      	str	r3, [r4, #40]	; 0x28
 8010248:	4b04      	ldr	r3, [pc, #16]	; (801025c <std+0x40>)
 801024a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801024c:	4b04      	ldr	r3, [pc, #16]	; (8010260 <std+0x44>)
 801024e:	6323      	str	r3, [r4, #48]	; 0x30
 8010250:	bd10      	pop	{r4, pc}
 8010252:	bf00      	nop
 8010254:	08010b31 	.word	0x08010b31
 8010258:	08010b53 	.word	0x08010b53
 801025c:	08010b8b 	.word	0x08010b8b
 8010260:	08010baf 	.word	0x08010baf

08010264 <_cleanup_r>:
 8010264:	4901      	ldr	r1, [pc, #4]	; (801026c <_cleanup_r+0x8>)
 8010266:	f000 b8af 	b.w	80103c8 <_fwalk_reent>
 801026a:	bf00      	nop
 801026c:	08010e81 	.word	0x08010e81

08010270 <__sfmoreglue>:
 8010270:	2268      	movs	r2, #104	; 0x68
 8010272:	b570      	push	{r4, r5, r6, lr}
 8010274:	1e4d      	subs	r5, r1, #1
 8010276:	4355      	muls	r5, r2
 8010278:	460e      	mov	r6, r1
 801027a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801027e:	f000 f8e5 	bl	801044c <_malloc_r>
 8010282:	4604      	mov	r4, r0
 8010284:	b140      	cbz	r0, 8010298 <__sfmoreglue+0x28>
 8010286:	2100      	movs	r1, #0
 8010288:	e9c0 1600 	strd	r1, r6, [r0]
 801028c:	300c      	adds	r0, #12
 801028e:	60a0      	str	r0, [r4, #8]
 8010290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010294:	f7ff ffa2 	bl	80101dc <memset>
 8010298:	4620      	mov	r0, r4
 801029a:	bd70      	pop	{r4, r5, r6, pc}

0801029c <__sfp_lock_acquire>:
 801029c:	4801      	ldr	r0, [pc, #4]	; (80102a4 <__sfp_lock_acquire+0x8>)
 801029e:	f000 b8b3 	b.w	8010408 <__retarget_lock_acquire_recursive>
 80102a2:	bf00      	nop
 80102a4:	2000bc89 	.word	0x2000bc89

080102a8 <__sfp_lock_release>:
 80102a8:	4801      	ldr	r0, [pc, #4]	; (80102b0 <__sfp_lock_release+0x8>)
 80102aa:	f000 b8ae 	b.w	801040a <__retarget_lock_release_recursive>
 80102ae:	bf00      	nop
 80102b0:	2000bc89 	.word	0x2000bc89

080102b4 <__sinit_lock_acquire>:
 80102b4:	4801      	ldr	r0, [pc, #4]	; (80102bc <__sinit_lock_acquire+0x8>)
 80102b6:	f000 b8a7 	b.w	8010408 <__retarget_lock_acquire_recursive>
 80102ba:	bf00      	nop
 80102bc:	2000bc8a 	.word	0x2000bc8a

080102c0 <__sinit_lock_release>:
 80102c0:	4801      	ldr	r0, [pc, #4]	; (80102c8 <__sinit_lock_release+0x8>)
 80102c2:	f000 b8a2 	b.w	801040a <__retarget_lock_release_recursive>
 80102c6:	bf00      	nop
 80102c8:	2000bc8a 	.word	0x2000bc8a

080102cc <__sinit>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	4604      	mov	r4, r0
 80102d0:	f7ff fff0 	bl	80102b4 <__sinit_lock_acquire>
 80102d4:	69a3      	ldr	r3, [r4, #24]
 80102d6:	b11b      	cbz	r3, 80102e0 <__sinit+0x14>
 80102d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102dc:	f7ff bff0 	b.w	80102c0 <__sinit_lock_release>
 80102e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80102e4:	6523      	str	r3, [r4, #80]	; 0x50
 80102e6:	4b13      	ldr	r3, [pc, #76]	; (8010334 <__sinit+0x68>)
 80102e8:	4a13      	ldr	r2, [pc, #76]	; (8010338 <__sinit+0x6c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80102ee:	42a3      	cmp	r3, r4
 80102f0:	bf08      	it	eq
 80102f2:	2301      	moveq	r3, #1
 80102f4:	4620      	mov	r0, r4
 80102f6:	bf08      	it	eq
 80102f8:	61a3      	streq	r3, [r4, #24]
 80102fa:	f000 f81f 	bl	801033c <__sfp>
 80102fe:	6060      	str	r0, [r4, #4]
 8010300:	4620      	mov	r0, r4
 8010302:	f000 f81b 	bl	801033c <__sfp>
 8010306:	60a0      	str	r0, [r4, #8]
 8010308:	4620      	mov	r0, r4
 801030a:	f000 f817 	bl	801033c <__sfp>
 801030e:	2200      	movs	r2, #0
 8010310:	2104      	movs	r1, #4
 8010312:	60e0      	str	r0, [r4, #12]
 8010314:	6860      	ldr	r0, [r4, #4]
 8010316:	f7ff ff81 	bl	801021c <std>
 801031a:	2201      	movs	r2, #1
 801031c:	2109      	movs	r1, #9
 801031e:	68a0      	ldr	r0, [r4, #8]
 8010320:	f7ff ff7c 	bl	801021c <std>
 8010324:	2202      	movs	r2, #2
 8010326:	2112      	movs	r1, #18
 8010328:	68e0      	ldr	r0, [r4, #12]
 801032a:	f7ff ff77 	bl	801021c <std>
 801032e:	2301      	movs	r3, #1
 8010330:	61a3      	str	r3, [r4, #24]
 8010332:	e7d1      	b.n	80102d8 <__sinit+0xc>
 8010334:	0801309c 	.word	0x0801309c
 8010338:	08010265 	.word	0x08010265

0801033c <__sfp>:
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033e:	4607      	mov	r7, r0
 8010340:	f7ff ffac 	bl	801029c <__sfp_lock_acquire>
 8010344:	4b1e      	ldr	r3, [pc, #120]	; (80103c0 <__sfp+0x84>)
 8010346:	681e      	ldr	r6, [r3, #0]
 8010348:	69b3      	ldr	r3, [r6, #24]
 801034a:	b913      	cbnz	r3, 8010352 <__sfp+0x16>
 801034c:	4630      	mov	r0, r6
 801034e:	f7ff ffbd 	bl	80102cc <__sinit>
 8010352:	3648      	adds	r6, #72	; 0x48
 8010354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010358:	3b01      	subs	r3, #1
 801035a:	d503      	bpl.n	8010364 <__sfp+0x28>
 801035c:	6833      	ldr	r3, [r6, #0]
 801035e:	b30b      	cbz	r3, 80103a4 <__sfp+0x68>
 8010360:	6836      	ldr	r6, [r6, #0]
 8010362:	e7f7      	b.n	8010354 <__sfp+0x18>
 8010364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010368:	b9d5      	cbnz	r5, 80103a0 <__sfp+0x64>
 801036a:	4b16      	ldr	r3, [pc, #88]	; (80103c4 <__sfp+0x88>)
 801036c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010370:	60e3      	str	r3, [r4, #12]
 8010372:	6665      	str	r5, [r4, #100]	; 0x64
 8010374:	f000 f847 	bl	8010406 <__retarget_lock_init_recursive>
 8010378:	f7ff ff96 	bl	80102a8 <__sfp_lock_release>
 801037c:	2208      	movs	r2, #8
 801037e:	4629      	mov	r1, r5
 8010380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010388:	6025      	str	r5, [r4, #0]
 801038a:	61a5      	str	r5, [r4, #24]
 801038c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010390:	f7ff ff24 	bl	80101dc <memset>
 8010394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801039c:	4620      	mov	r0, r4
 801039e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a0:	3468      	adds	r4, #104	; 0x68
 80103a2:	e7d9      	b.n	8010358 <__sfp+0x1c>
 80103a4:	2104      	movs	r1, #4
 80103a6:	4638      	mov	r0, r7
 80103a8:	f7ff ff62 	bl	8010270 <__sfmoreglue>
 80103ac:	4604      	mov	r4, r0
 80103ae:	6030      	str	r0, [r6, #0]
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d1d5      	bne.n	8010360 <__sfp+0x24>
 80103b4:	f7ff ff78 	bl	80102a8 <__sfp_lock_release>
 80103b8:	230c      	movs	r3, #12
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	e7ee      	b.n	801039c <__sfp+0x60>
 80103be:	bf00      	nop
 80103c0:	0801309c 	.word	0x0801309c
 80103c4:	ffff0001 	.word	0xffff0001

080103c8 <_fwalk_reent>:
 80103c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103cc:	4606      	mov	r6, r0
 80103ce:	4688      	mov	r8, r1
 80103d0:	2700      	movs	r7, #0
 80103d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80103d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103da:	f1b9 0901 	subs.w	r9, r9, #1
 80103de:	d505      	bpl.n	80103ec <_fwalk_reent+0x24>
 80103e0:	6824      	ldr	r4, [r4, #0]
 80103e2:	2c00      	cmp	r4, #0
 80103e4:	d1f7      	bne.n	80103d6 <_fwalk_reent+0xe>
 80103e6:	4638      	mov	r0, r7
 80103e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ec:	89ab      	ldrh	r3, [r5, #12]
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d907      	bls.n	8010402 <_fwalk_reent+0x3a>
 80103f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103f6:	3301      	adds	r3, #1
 80103f8:	d003      	beq.n	8010402 <_fwalk_reent+0x3a>
 80103fa:	4629      	mov	r1, r5
 80103fc:	4630      	mov	r0, r6
 80103fe:	47c0      	blx	r8
 8010400:	4307      	orrs	r7, r0
 8010402:	3568      	adds	r5, #104	; 0x68
 8010404:	e7e9      	b.n	80103da <_fwalk_reent+0x12>

08010406 <__retarget_lock_init_recursive>:
 8010406:	4770      	bx	lr

08010408 <__retarget_lock_acquire_recursive>:
 8010408:	4770      	bx	lr

0801040a <__retarget_lock_release_recursive>:
 801040a:	4770      	bx	lr

0801040c <sbrk_aligned>:
 801040c:	b570      	push	{r4, r5, r6, lr}
 801040e:	4e0e      	ldr	r6, [pc, #56]	; (8010448 <sbrk_aligned+0x3c>)
 8010410:	460c      	mov	r4, r1
 8010412:	6831      	ldr	r1, [r6, #0]
 8010414:	4605      	mov	r5, r0
 8010416:	b911      	cbnz	r1, 801041e <sbrk_aligned+0x12>
 8010418:	f000 fb7a 	bl	8010b10 <_sbrk_r>
 801041c:	6030      	str	r0, [r6, #0]
 801041e:	4621      	mov	r1, r4
 8010420:	4628      	mov	r0, r5
 8010422:	f000 fb75 	bl	8010b10 <_sbrk_r>
 8010426:	1c43      	adds	r3, r0, #1
 8010428:	d00a      	beq.n	8010440 <sbrk_aligned+0x34>
 801042a:	1cc4      	adds	r4, r0, #3
 801042c:	f024 0403 	bic.w	r4, r4, #3
 8010430:	42a0      	cmp	r0, r4
 8010432:	d007      	beq.n	8010444 <sbrk_aligned+0x38>
 8010434:	1a21      	subs	r1, r4, r0
 8010436:	4628      	mov	r0, r5
 8010438:	f000 fb6a 	bl	8010b10 <_sbrk_r>
 801043c:	3001      	adds	r0, #1
 801043e:	d101      	bne.n	8010444 <sbrk_aligned+0x38>
 8010440:	f04f 34ff 	mov.w	r4, #4294967295
 8010444:	4620      	mov	r0, r4
 8010446:	bd70      	pop	{r4, r5, r6, pc}
 8010448:	2000bc90 	.word	0x2000bc90

0801044c <_malloc_r>:
 801044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010450:	1ccd      	adds	r5, r1, #3
 8010452:	f025 0503 	bic.w	r5, r5, #3
 8010456:	3508      	adds	r5, #8
 8010458:	2d0c      	cmp	r5, #12
 801045a:	bf38      	it	cc
 801045c:	250c      	movcc	r5, #12
 801045e:	2d00      	cmp	r5, #0
 8010460:	4607      	mov	r7, r0
 8010462:	db01      	blt.n	8010468 <_malloc_r+0x1c>
 8010464:	42a9      	cmp	r1, r5
 8010466:	d905      	bls.n	8010474 <_malloc_r+0x28>
 8010468:	230c      	movs	r3, #12
 801046a:	2600      	movs	r6, #0
 801046c:	603b      	str	r3, [r7, #0]
 801046e:	4630      	mov	r0, r6
 8010470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010474:	4e2e      	ldr	r6, [pc, #184]	; (8010530 <_malloc_r+0xe4>)
 8010476:	f000 fdc5 	bl	8011004 <__malloc_lock>
 801047a:	6833      	ldr	r3, [r6, #0]
 801047c:	461c      	mov	r4, r3
 801047e:	bb34      	cbnz	r4, 80104ce <_malloc_r+0x82>
 8010480:	4629      	mov	r1, r5
 8010482:	4638      	mov	r0, r7
 8010484:	f7ff ffc2 	bl	801040c <sbrk_aligned>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	4604      	mov	r4, r0
 801048c:	d14d      	bne.n	801052a <_malloc_r+0xde>
 801048e:	6834      	ldr	r4, [r6, #0]
 8010490:	4626      	mov	r6, r4
 8010492:	2e00      	cmp	r6, #0
 8010494:	d140      	bne.n	8010518 <_malloc_r+0xcc>
 8010496:	6823      	ldr	r3, [r4, #0]
 8010498:	4631      	mov	r1, r6
 801049a:	4638      	mov	r0, r7
 801049c:	eb04 0803 	add.w	r8, r4, r3
 80104a0:	f000 fb36 	bl	8010b10 <_sbrk_r>
 80104a4:	4580      	cmp	r8, r0
 80104a6:	d13a      	bne.n	801051e <_malloc_r+0xd2>
 80104a8:	6821      	ldr	r1, [r4, #0]
 80104aa:	3503      	adds	r5, #3
 80104ac:	1a6d      	subs	r5, r5, r1
 80104ae:	f025 0503 	bic.w	r5, r5, #3
 80104b2:	3508      	adds	r5, #8
 80104b4:	2d0c      	cmp	r5, #12
 80104b6:	bf38      	it	cc
 80104b8:	250c      	movcc	r5, #12
 80104ba:	4638      	mov	r0, r7
 80104bc:	4629      	mov	r1, r5
 80104be:	f7ff ffa5 	bl	801040c <sbrk_aligned>
 80104c2:	3001      	adds	r0, #1
 80104c4:	d02b      	beq.n	801051e <_malloc_r+0xd2>
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	442b      	add	r3, r5
 80104ca:	6023      	str	r3, [r4, #0]
 80104cc:	e00e      	b.n	80104ec <_malloc_r+0xa0>
 80104ce:	6822      	ldr	r2, [r4, #0]
 80104d0:	1b52      	subs	r2, r2, r5
 80104d2:	d41e      	bmi.n	8010512 <_malloc_r+0xc6>
 80104d4:	2a0b      	cmp	r2, #11
 80104d6:	d916      	bls.n	8010506 <_malloc_r+0xba>
 80104d8:	1961      	adds	r1, r4, r5
 80104da:	42a3      	cmp	r3, r4
 80104dc:	6025      	str	r5, [r4, #0]
 80104de:	bf18      	it	ne
 80104e0:	6059      	strne	r1, [r3, #4]
 80104e2:	6863      	ldr	r3, [r4, #4]
 80104e4:	bf08      	it	eq
 80104e6:	6031      	streq	r1, [r6, #0]
 80104e8:	5162      	str	r2, [r4, r5]
 80104ea:	604b      	str	r3, [r1, #4]
 80104ec:	4638      	mov	r0, r7
 80104ee:	f104 060b 	add.w	r6, r4, #11
 80104f2:	f000 fd8d 	bl	8011010 <__malloc_unlock>
 80104f6:	f026 0607 	bic.w	r6, r6, #7
 80104fa:	1d23      	adds	r3, r4, #4
 80104fc:	1af2      	subs	r2, r6, r3
 80104fe:	d0b6      	beq.n	801046e <_malloc_r+0x22>
 8010500:	1b9b      	subs	r3, r3, r6
 8010502:	50a3      	str	r3, [r4, r2]
 8010504:	e7b3      	b.n	801046e <_malloc_r+0x22>
 8010506:	6862      	ldr	r2, [r4, #4]
 8010508:	42a3      	cmp	r3, r4
 801050a:	bf0c      	ite	eq
 801050c:	6032      	streq	r2, [r6, #0]
 801050e:	605a      	strne	r2, [r3, #4]
 8010510:	e7ec      	b.n	80104ec <_malloc_r+0xa0>
 8010512:	4623      	mov	r3, r4
 8010514:	6864      	ldr	r4, [r4, #4]
 8010516:	e7b2      	b.n	801047e <_malloc_r+0x32>
 8010518:	4634      	mov	r4, r6
 801051a:	6876      	ldr	r6, [r6, #4]
 801051c:	e7b9      	b.n	8010492 <_malloc_r+0x46>
 801051e:	230c      	movs	r3, #12
 8010520:	4638      	mov	r0, r7
 8010522:	603b      	str	r3, [r7, #0]
 8010524:	f000 fd74 	bl	8011010 <__malloc_unlock>
 8010528:	e7a1      	b.n	801046e <_malloc_r+0x22>
 801052a:	6025      	str	r5, [r4, #0]
 801052c:	e7de      	b.n	80104ec <_malloc_r+0xa0>
 801052e:	bf00      	nop
 8010530:	2000bc8c 	.word	0x2000bc8c

08010534 <__sfputc_r>:
 8010534:	6893      	ldr	r3, [r2, #8]
 8010536:	b410      	push	{r4}
 8010538:	3b01      	subs	r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	6093      	str	r3, [r2, #8]
 801053e:	da07      	bge.n	8010550 <__sfputc_r+0x1c>
 8010540:	6994      	ldr	r4, [r2, #24]
 8010542:	42a3      	cmp	r3, r4
 8010544:	db01      	blt.n	801054a <__sfputc_r+0x16>
 8010546:	290a      	cmp	r1, #10
 8010548:	d102      	bne.n	8010550 <__sfputc_r+0x1c>
 801054a:	bc10      	pop	{r4}
 801054c:	f000 bb34 	b.w	8010bb8 <__swbuf_r>
 8010550:	6813      	ldr	r3, [r2, #0]
 8010552:	1c58      	adds	r0, r3, #1
 8010554:	6010      	str	r0, [r2, #0]
 8010556:	7019      	strb	r1, [r3, #0]
 8010558:	4608      	mov	r0, r1
 801055a:	bc10      	pop	{r4}
 801055c:	4770      	bx	lr

0801055e <__sfputs_r>:
 801055e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010560:	4606      	mov	r6, r0
 8010562:	460f      	mov	r7, r1
 8010564:	4614      	mov	r4, r2
 8010566:	18d5      	adds	r5, r2, r3
 8010568:	42ac      	cmp	r4, r5
 801056a:	d101      	bne.n	8010570 <__sfputs_r+0x12>
 801056c:	2000      	movs	r0, #0
 801056e:	e007      	b.n	8010580 <__sfputs_r+0x22>
 8010570:	463a      	mov	r2, r7
 8010572:	4630      	mov	r0, r6
 8010574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010578:	f7ff ffdc 	bl	8010534 <__sfputc_r>
 801057c:	1c43      	adds	r3, r0, #1
 801057e:	d1f3      	bne.n	8010568 <__sfputs_r+0xa>
 8010580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010584 <_vfiprintf_r>:
 8010584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010588:	460d      	mov	r5, r1
 801058a:	4614      	mov	r4, r2
 801058c:	4698      	mov	r8, r3
 801058e:	4606      	mov	r6, r0
 8010590:	b09d      	sub	sp, #116	; 0x74
 8010592:	b118      	cbz	r0, 801059c <_vfiprintf_r+0x18>
 8010594:	6983      	ldr	r3, [r0, #24]
 8010596:	b90b      	cbnz	r3, 801059c <_vfiprintf_r+0x18>
 8010598:	f7ff fe98 	bl	80102cc <__sinit>
 801059c:	4b89      	ldr	r3, [pc, #548]	; (80107c4 <_vfiprintf_r+0x240>)
 801059e:	429d      	cmp	r5, r3
 80105a0:	d11b      	bne.n	80105da <_vfiprintf_r+0x56>
 80105a2:	6875      	ldr	r5, [r6, #4]
 80105a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105a6:	07d9      	lsls	r1, r3, #31
 80105a8:	d405      	bmi.n	80105b6 <_vfiprintf_r+0x32>
 80105aa:	89ab      	ldrh	r3, [r5, #12]
 80105ac:	059a      	lsls	r2, r3, #22
 80105ae:	d402      	bmi.n	80105b6 <_vfiprintf_r+0x32>
 80105b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105b2:	f7ff ff29 	bl	8010408 <__retarget_lock_acquire_recursive>
 80105b6:	89ab      	ldrh	r3, [r5, #12]
 80105b8:	071b      	lsls	r3, r3, #28
 80105ba:	d501      	bpl.n	80105c0 <_vfiprintf_r+0x3c>
 80105bc:	692b      	ldr	r3, [r5, #16]
 80105be:	b9eb      	cbnz	r3, 80105fc <_vfiprintf_r+0x78>
 80105c0:	4629      	mov	r1, r5
 80105c2:	4630      	mov	r0, r6
 80105c4:	f000 fb5c 	bl	8010c80 <__swsetup_r>
 80105c8:	b1c0      	cbz	r0, 80105fc <_vfiprintf_r+0x78>
 80105ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105cc:	07dc      	lsls	r4, r3, #31
 80105ce:	d50e      	bpl.n	80105ee <_vfiprintf_r+0x6a>
 80105d0:	f04f 30ff 	mov.w	r0, #4294967295
 80105d4:	b01d      	add	sp, #116	; 0x74
 80105d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105da:	4b7b      	ldr	r3, [pc, #492]	; (80107c8 <_vfiprintf_r+0x244>)
 80105dc:	429d      	cmp	r5, r3
 80105de:	d101      	bne.n	80105e4 <_vfiprintf_r+0x60>
 80105e0:	68b5      	ldr	r5, [r6, #8]
 80105e2:	e7df      	b.n	80105a4 <_vfiprintf_r+0x20>
 80105e4:	4b79      	ldr	r3, [pc, #484]	; (80107cc <_vfiprintf_r+0x248>)
 80105e6:	429d      	cmp	r5, r3
 80105e8:	bf08      	it	eq
 80105ea:	68f5      	ldreq	r5, [r6, #12]
 80105ec:	e7da      	b.n	80105a4 <_vfiprintf_r+0x20>
 80105ee:	89ab      	ldrh	r3, [r5, #12]
 80105f0:	0598      	lsls	r0, r3, #22
 80105f2:	d4ed      	bmi.n	80105d0 <_vfiprintf_r+0x4c>
 80105f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105f6:	f7ff ff08 	bl	801040a <__retarget_lock_release_recursive>
 80105fa:	e7e9      	b.n	80105d0 <_vfiprintf_r+0x4c>
 80105fc:	2300      	movs	r3, #0
 80105fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010600:	2320      	movs	r3, #32
 8010602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010606:	2330      	movs	r3, #48	; 0x30
 8010608:	f04f 0901 	mov.w	r9, #1
 801060c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010610:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80107d0 <_vfiprintf_r+0x24c>
 8010614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010618:	4623      	mov	r3, r4
 801061a:	469a      	mov	sl, r3
 801061c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010620:	b10a      	cbz	r2, 8010626 <_vfiprintf_r+0xa2>
 8010622:	2a25      	cmp	r2, #37	; 0x25
 8010624:	d1f9      	bne.n	801061a <_vfiprintf_r+0x96>
 8010626:	ebba 0b04 	subs.w	fp, sl, r4
 801062a:	d00b      	beq.n	8010644 <_vfiprintf_r+0xc0>
 801062c:	465b      	mov	r3, fp
 801062e:	4622      	mov	r2, r4
 8010630:	4629      	mov	r1, r5
 8010632:	4630      	mov	r0, r6
 8010634:	f7ff ff93 	bl	801055e <__sfputs_r>
 8010638:	3001      	adds	r0, #1
 801063a:	f000 80aa 	beq.w	8010792 <_vfiprintf_r+0x20e>
 801063e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010640:	445a      	add	r2, fp
 8010642:	9209      	str	r2, [sp, #36]	; 0x24
 8010644:	f89a 3000 	ldrb.w	r3, [sl]
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 80a2 	beq.w	8010792 <_vfiprintf_r+0x20e>
 801064e:	2300      	movs	r3, #0
 8010650:	f04f 32ff 	mov.w	r2, #4294967295
 8010654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010658:	f10a 0a01 	add.w	sl, sl, #1
 801065c:	9304      	str	r3, [sp, #16]
 801065e:	9307      	str	r3, [sp, #28]
 8010660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010664:	931a      	str	r3, [sp, #104]	; 0x68
 8010666:	4654      	mov	r4, sl
 8010668:	2205      	movs	r2, #5
 801066a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066e:	4858      	ldr	r0, [pc, #352]	; (80107d0 <_vfiprintf_r+0x24c>)
 8010670:	f000 fcba 	bl	8010fe8 <memchr>
 8010674:	9a04      	ldr	r2, [sp, #16]
 8010676:	b9d8      	cbnz	r0, 80106b0 <_vfiprintf_r+0x12c>
 8010678:	06d1      	lsls	r1, r2, #27
 801067a:	bf44      	itt	mi
 801067c:	2320      	movmi	r3, #32
 801067e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010682:	0713      	lsls	r3, r2, #28
 8010684:	bf44      	itt	mi
 8010686:	232b      	movmi	r3, #43	; 0x2b
 8010688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801068c:	f89a 3000 	ldrb.w	r3, [sl]
 8010690:	2b2a      	cmp	r3, #42	; 0x2a
 8010692:	d015      	beq.n	80106c0 <_vfiprintf_r+0x13c>
 8010694:	4654      	mov	r4, sl
 8010696:	2000      	movs	r0, #0
 8010698:	f04f 0c0a 	mov.w	ip, #10
 801069c:	9a07      	ldr	r2, [sp, #28]
 801069e:	4621      	mov	r1, r4
 80106a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106a4:	3b30      	subs	r3, #48	; 0x30
 80106a6:	2b09      	cmp	r3, #9
 80106a8:	d94e      	bls.n	8010748 <_vfiprintf_r+0x1c4>
 80106aa:	b1b0      	cbz	r0, 80106da <_vfiprintf_r+0x156>
 80106ac:	9207      	str	r2, [sp, #28]
 80106ae:	e014      	b.n	80106da <_vfiprintf_r+0x156>
 80106b0:	eba0 0308 	sub.w	r3, r0, r8
 80106b4:	fa09 f303 	lsl.w	r3, r9, r3
 80106b8:	4313      	orrs	r3, r2
 80106ba:	46a2      	mov	sl, r4
 80106bc:	9304      	str	r3, [sp, #16]
 80106be:	e7d2      	b.n	8010666 <_vfiprintf_r+0xe2>
 80106c0:	9b03      	ldr	r3, [sp, #12]
 80106c2:	1d19      	adds	r1, r3, #4
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	9103      	str	r1, [sp, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	bfbb      	ittet	lt
 80106cc:	425b      	neglt	r3, r3
 80106ce:	f042 0202 	orrlt.w	r2, r2, #2
 80106d2:	9307      	strge	r3, [sp, #28]
 80106d4:	9307      	strlt	r3, [sp, #28]
 80106d6:	bfb8      	it	lt
 80106d8:	9204      	strlt	r2, [sp, #16]
 80106da:	7823      	ldrb	r3, [r4, #0]
 80106dc:	2b2e      	cmp	r3, #46	; 0x2e
 80106de:	d10c      	bne.n	80106fa <_vfiprintf_r+0x176>
 80106e0:	7863      	ldrb	r3, [r4, #1]
 80106e2:	2b2a      	cmp	r3, #42	; 0x2a
 80106e4:	d135      	bne.n	8010752 <_vfiprintf_r+0x1ce>
 80106e6:	9b03      	ldr	r3, [sp, #12]
 80106e8:	3402      	adds	r4, #2
 80106ea:	1d1a      	adds	r2, r3, #4
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	9203      	str	r2, [sp, #12]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	bfb8      	it	lt
 80106f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80106f8:	9305      	str	r3, [sp, #20]
 80106fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80107d4 <_vfiprintf_r+0x250>
 80106fe:	2203      	movs	r2, #3
 8010700:	4650      	mov	r0, sl
 8010702:	7821      	ldrb	r1, [r4, #0]
 8010704:	f000 fc70 	bl	8010fe8 <memchr>
 8010708:	b140      	cbz	r0, 801071c <_vfiprintf_r+0x198>
 801070a:	2340      	movs	r3, #64	; 0x40
 801070c:	eba0 000a 	sub.w	r0, r0, sl
 8010710:	fa03 f000 	lsl.w	r0, r3, r0
 8010714:	9b04      	ldr	r3, [sp, #16]
 8010716:	3401      	adds	r4, #1
 8010718:	4303      	orrs	r3, r0
 801071a:	9304      	str	r3, [sp, #16]
 801071c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010720:	2206      	movs	r2, #6
 8010722:	482d      	ldr	r0, [pc, #180]	; (80107d8 <_vfiprintf_r+0x254>)
 8010724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010728:	f000 fc5e 	bl	8010fe8 <memchr>
 801072c:	2800      	cmp	r0, #0
 801072e:	d03f      	beq.n	80107b0 <_vfiprintf_r+0x22c>
 8010730:	4b2a      	ldr	r3, [pc, #168]	; (80107dc <_vfiprintf_r+0x258>)
 8010732:	bb1b      	cbnz	r3, 801077c <_vfiprintf_r+0x1f8>
 8010734:	9b03      	ldr	r3, [sp, #12]
 8010736:	3307      	adds	r3, #7
 8010738:	f023 0307 	bic.w	r3, r3, #7
 801073c:	3308      	adds	r3, #8
 801073e:	9303      	str	r3, [sp, #12]
 8010740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010742:	443b      	add	r3, r7
 8010744:	9309      	str	r3, [sp, #36]	; 0x24
 8010746:	e767      	b.n	8010618 <_vfiprintf_r+0x94>
 8010748:	460c      	mov	r4, r1
 801074a:	2001      	movs	r0, #1
 801074c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010750:	e7a5      	b.n	801069e <_vfiprintf_r+0x11a>
 8010752:	2300      	movs	r3, #0
 8010754:	f04f 0c0a 	mov.w	ip, #10
 8010758:	4619      	mov	r1, r3
 801075a:	3401      	adds	r4, #1
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	4620      	mov	r0, r4
 8010760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010764:	3a30      	subs	r2, #48	; 0x30
 8010766:	2a09      	cmp	r2, #9
 8010768:	d903      	bls.n	8010772 <_vfiprintf_r+0x1ee>
 801076a:	2b00      	cmp	r3, #0
 801076c:	d0c5      	beq.n	80106fa <_vfiprintf_r+0x176>
 801076e:	9105      	str	r1, [sp, #20]
 8010770:	e7c3      	b.n	80106fa <_vfiprintf_r+0x176>
 8010772:	4604      	mov	r4, r0
 8010774:	2301      	movs	r3, #1
 8010776:	fb0c 2101 	mla	r1, ip, r1, r2
 801077a:	e7f0      	b.n	801075e <_vfiprintf_r+0x1da>
 801077c:	ab03      	add	r3, sp, #12
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	462a      	mov	r2, r5
 8010782:	4630      	mov	r0, r6
 8010784:	4b16      	ldr	r3, [pc, #88]	; (80107e0 <_vfiprintf_r+0x25c>)
 8010786:	a904      	add	r1, sp, #16
 8010788:	f3af 8000 	nop.w
 801078c:	4607      	mov	r7, r0
 801078e:	1c78      	adds	r0, r7, #1
 8010790:	d1d6      	bne.n	8010740 <_vfiprintf_r+0x1bc>
 8010792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010794:	07d9      	lsls	r1, r3, #31
 8010796:	d405      	bmi.n	80107a4 <_vfiprintf_r+0x220>
 8010798:	89ab      	ldrh	r3, [r5, #12]
 801079a:	059a      	lsls	r2, r3, #22
 801079c:	d402      	bmi.n	80107a4 <_vfiprintf_r+0x220>
 801079e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107a0:	f7ff fe33 	bl	801040a <__retarget_lock_release_recursive>
 80107a4:	89ab      	ldrh	r3, [r5, #12]
 80107a6:	065b      	lsls	r3, r3, #25
 80107a8:	f53f af12 	bmi.w	80105d0 <_vfiprintf_r+0x4c>
 80107ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107ae:	e711      	b.n	80105d4 <_vfiprintf_r+0x50>
 80107b0:	ab03      	add	r3, sp, #12
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	462a      	mov	r2, r5
 80107b6:	4630      	mov	r0, r6
 80107b8:	4b09      	ldr	r3, [pc, #36]	; (80107e0 <_vfiprintf_r+0x25c>)
 80107ba:	a904      	add	r1, sp, #16
 80107bc:	f000 f882 	bl	80108c4 <_printf_i>
 80107c0:	e7e4      	b.n	801078c <_vfiprintf_r+0x208>
 80107c2:	bf00      	nop
 80107c4:	080130c0 	.word	0x080130c0
 80107c8:	080130e0 	.word	0x080130e0
 80107cc:	080130a0 	.word	0x080130a0
 80107d0:	08013100 	.word	0x08013100
 80107d4:	08013106 	.word	0x08013106
 80107d8:	0801310a 	.word	0x0801310a
 80107dc:	00000000 	.word	0x00000000
 80107e0:	0801055f 	.word	0x0801055f

080107e4 <_printf_common>:
 80107e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e8:	4616      	mov	r6, r2
 80107ea:	4699      	mov	r9, r3
 80107ec:	688a      	ldr	r2, [r1, #8]
 80107ee:	690b      	ldr	r3, [r1, #16]
 80107f0:	4607      	mov	r7, r0
 80107f2:	4293      	cmp	r3, r2
 80107f4:	bfb8      	it	lt
 80107f6:	4613      	movlt	r3, r2
 80107f8:	6033      	str	r3, [r6, #0]
 80107fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107fe:	460c      	mov	r4, r1
 8010800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010804:	b10a      	cbz	r2, 801080a <_printf_common+0x26>
 8010806:	3301      	adds	r3, #1
 8010808:	6033      	str	r3, [r6, #0]
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	0699      	lsls	r1, r3, #26
 801080e:	bf42      	ittt	mi
 8010810:	6833      	ldrmi	r3, [r6, #0]
 8010812:	3302      	addmi	r3, #2
 8010814:	6033      	strmi	r3, [r6, #0]
 8010816:	6825      	ldr	r5, [r4, #0]
 8010818:	f015 0506 	ands.w	r5, r5, #6
 801081c:	d106      	bne.n	801082c <_printf_common+0x48>
 801081e:	f104 0a19 	add.w	sl, r4, #25
 8010822:	68e3      	ldr	r3, [r4, #12]
 8010824:	6832      	ldr	r2, [r6, #0]
 8010826:	1a9b      	subs	r3, r3, r2
 8010828:	42ab      	cmp	r3, r5
 801082a:	dc28      	bgt.n	801087e <_printf_common+0x9a>
 801082c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010830:	1e13      	subs	r3, r2, #0
 8010832:	6822      	ldr	r2, [r4, #0]
 8010834:	bf18      	it	ne
 8010836:	2301      	movne	r3, #1
 8010838:	0692      	lsls	r2, r2, #26
 801083a:	d42d      	bmi.n	8010898 <_printf_common+0xb4>
 801083c:	4649      	mov	r1, r9
 801083e:	4638      	mov	r0, r7
 8010840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010844:	47c0      	blx	r8
 8010846:	3001      	adds	r0, #1
 8010848:	d020      	beq.n	801088c <_printf_common+0xa8>
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	68e5      	ldr	r5, [r4, #12]
 801084e:	f003 0306 	and.w	r3, r3, #6
 8010852:	2b04      	cmp	r3, #4
 8010854:	bf18      	it	ne
 8010856:	2500      	movne	r5, #0
 8010858:	6832      	ldr	r2, [r6, #0]
 801085a:	f04f 0600 	mov.w	r6, #0
 801085e:	68a3      	ldr	r3, [r4, #8]
 8010860:	bf08      	it	eq
 8010862:	1aad      	subeq	r5, r5, r2
 8010864:	6922      	ldr	r2, [r4, #16]
 8010866:	bf08      	it	eq
 8010868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801086c:	4293      	cmp	r3, r2
 801086e:	bfc4      	itt	gt
 8010870:	1a9b      	subgt	r3, r3, r2
 8010872:	18ed      	addgt	r5, r5, r3
 8010874:	341a      	adds	r4, #26
 8010876:	42b5      	cmp	r5, r6
 8010878:	d11a      	bne.n	80108b0 <_printf_common+0xcc>
 801087a:	2000      	movs	r0, #0
 801087c:	e008      	b.n	8010890 <_printf_common+0xac>
 801087e:	2301      	movs	r3, #1
 8010880:	4652      	mov	r2, sl
 8010882:	4649      	mov	r1, r9
 8010884:	4638      	mov	r0, r7
 8010886:	47c0      	blx	r8
 8010888:	3001      	adds	r0, #1
 801088a:	d103      	bne.n	8010894 <_printf_common+0xb0>
 801088c:	f04f 30ff 	mov.w	r0, #4294967295
 8010890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010894:	3501      	adds	r5, #1
 8010896:	e7c4      	b.n	8010822 <_printf_common+0x3e>
 8010898:	2030      	movs	r0, #48	; 0x30
 801089a:	18e1      	adds	r1, r4, r3
 801089c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108a0:	1c5a      	adds	r2, r3, #1
 80108a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108a6:	4422      	add	r2, r4
 80108a8:	3302      	adds	r3, #2
 80108aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108ae:	e7c5      	b.n	801083c <_printf_common+0x58>
 80108b0:	2301      	movs	r3, #1
 80108b2:	4622      	mov	r2, r4
 80108b4:	4649      	mov	r1, r9
 80108b6:	4638      	mov	r0, r7
 80108b8:	47c0      	blx	r8
 80108ba:	3001      	adds	r0, #1
 80108bc:	d0e6      	beq.n	801088c <_printf_common+0xa8>
 80108be:	3601      	adds	r6, #1
 80108c0:	e7d9      	b.n	8010876 <_printf_common+0x92>
	...

080108c4 <_printf_i>:
 80108c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108c8:	7e0f      	ldrb	r7, [r1, #24]
 80108ca:	4691      	mov	r9, r2
 80108cc:	2f78      	cmp	r7, #120	; 0x78
 80108ce:	4680      	mov	r8, r0
 80108d0:	460c      	mov	r4, r1
 80108d2:	469a      	mov	sl, r3
 80108d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80108d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80108da:	d807      	bhi.n	80108ec <_printf_i+0x28>
 80108dc:	2f62      	cmp	r7, #98	; 0x62
 80108de:	d80a      	bhi.n	80108f6 <_printf_i+0x32>
 80108e0:	2f00      	cmp	r7, #0
 80108e2:	f000 80d9 	beq.w	8010a98 <_printf_i+0x1d4>
 80108e6:	2f58      	cmp	r7, #88	; 0x58
 80108e8:	f000 80a4 	beq.w	8010a34 <_printf_i+0x170>
 80108ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108f4:	e03a      	b.n	801096c <_printf_i+0xa8>
 80108f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108fa:	2b15      	cmp	r3, #21
 80108fc:	d8f6      	bhi.n	80108ec <_printf_i+0x28>
 80108fe:	a101      	add	r1, pc, #4	; (adr r1, 8010904 <_printf_i+0x40>)
 8010900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010904:	0801095d 	.word	0x0801095d
 8010908:	08010971 	.word	0x08010971
 801090c:	080108ed 	.word	0x080108ed
 8010910:	080108ed 	.word	0x080108ed
 8010914:	080108ed 	.word	0x080108ed
 8010918:	080108ed 	.word	0x080108ed
 801091c:	08010971 	.word	0x08010971
 8010920:	080108ed 	.word	0x080108ed
 8010924:	080108ed 	.word	0x080108ed
 8010928:	080108ed 	.word	0x080108ed
 801092c:	080108ed 	.word	0x080108ed
 8010930:	08010a7f 	.word	0x08010a7f
 8010934:	080109a1 	.word	0x080109a1
 8010938:	08010a61 	.word	0x08010a61
 801093c:	080108ed 	.word	0x080108ed
 8010940:	080108ed 	.word	0x080108ed
 8010944:	08010aa1 	.word	0x08010aa1
 8010948:	080108ed 	.word	0x080108ed
 801094c:	080109a1 	.word	0x080109a1
 8010950:	080108ed 	.word	0x080108ed
 8010954:	080108ed 	.word	0x080108ed
 8010958:	08010a69 	.word	0x08010a69
 801095c:	682b      	ldr	r3, [r5, #0]
 801095e:	1d1a      	adds	r2, r3, #4
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	602a      	str	r2, [r5, #0]
 8010964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801096c:	2301      	movs	r3, #1
 801096e:	e0a4      	b.n	8010aba <_printf_i+0x1f6>
 8010970:	6820      	ldr	r0, [r4, #0]
 8010972:	6829      	ldr	r1, [r5, #0]
 8010974:	0606      	lsls	r6, r0, #24
 8010976:	f101 0304 	add.w	r3, r1, #4
 801097a:	d50a      	bpl.n	8010992 <_printf_i+0xce>
 801097c:	680e      	ldr	r6, [r1, #0]
 801097e:	602b      	str	r3, [r5, #0]
 8010980:	2e00      	cmp	r6, #0
 8010982:	da03      	bge.n	801098c <_printf_i+0xc8>
 8010984:	232d      	movs	r3, #45	; 0x2d
 8010986:	4276      	negs	r6, r6
 8010988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801098c:	230a      	movs	r3, #10
 801098e:	485e      	ldr	r0, [pc, #376]	; (8010b08 <_printf_i+0x244>)
 8010990:	e019      	b.n	80109c6 <_printf_i+0x102>
 8010992:	680e      	ldr	r6, [r1, #0]
 8010994:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010998:	602b      	str	r3, [r5, #0]
 801099a:	bf18      	it	ne
 801099c:	b236      	sxthne	r6, r6
 801099e:	e7ef      	b.n	8010980 <_printf_i+0xbc>
 80109a0:	682b      	ldr	r3, [r5, #0]
 80109a2:	6820      	ldr	r0, [r4, #0]
 80109a4:	1d19      	adds	r1, r3, #4
 80109a6:	6029      	str	r1, [r5, #0]
 80109a8:	0601      	lsls	r1, r0, #24
 80109aa:	d501      	bpl.n	80109b0 <_printf_i+0xec>
 80109ac:	681e      	ldr	r6, [r3, #0]
 80109ae:	e002      	b.n	80109b6 <_printf_i+0xf2>
 80109b0:	0646      	lsls	r6, r0, #25
 80109b2:	d5fb      	bpl.n	80109ac <_printf_i+0xe8>
 80109b4:	881e      	ldrh	r6, [r3, #0]
 80109b6:	2f6f      	cmp	r7, #111	; 0x6f
 80109b8:	bf0c      	ite	eq
 80109ba:	2308      	moveq	r3, #8
 80109bc:	230a      	movne	r3, #10
 80109be:	4852      	ldr	r0, [pc, #328]	; (8010b08 <_printf_i+0x244>)
 80109c0:	2100      	movs	r1, #0
 80109c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109c6:	6865      	ldr	r5, [r4, #4]
 80109c8:	2d00      	cmp	r5, #0
 80109ca:	bfa8      	it	ge
 80109cc:	6821      	ldrge	r1, [r4, #0]
 80109ce:	60a5      	str	r5, [r4, #8]
 80109d0:	bfa4      	itt	ge
 80109d2:	f021 0104 	bicge.w	r1, r1, #4
 80109d6:	6021      	strge	r1, [r4, #0]
 80109d8:	b90e      	cbnz	r6, 80109de <_printf_i+0x11a>
 80109da:	2d00      	cmp	r5, #0
 80109dc:	d04d      	beq.n	8010a7a <_printf_i+0x1b6>
 80109de:	4615      	mov	r5, r2
 80109e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80109e4:	fb03 6711 	mls	r7, r3, r1, r6
 80109e8:	5dc7      	ldrb	r7, [r0, r7]
 80109ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80109ee:	4637      	mov	r7, r6
 80109f0:	42bb      	cmp	r3, r7
 80109f2:	460e      	mov	r6, r1
 80109f4:	d9f4      	bls.n	80109e0 <_printf_i+0x11c>
 80109f6:	2b08      	cmp	r3, #8
 80109f8:	d10b      	bne.n	8010a12 <_printf_i+0x14e>
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	07de      	lsls	r6, r3, #31
 80109fe:	d508      	bpl.n	8010a12 <_printf_i+0x14e>
 8010a00:	6923      	ldr	r3, [r4, #16]
 8010a02:	6861      	ldr	r1, [r4, #4]
 8010a04:	4299      	cmp	r1, r3
 8010a06:	bfde      	ittt	le
 8010a08:	2330      	movle	r3, #48	; 0x30
 8010a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a12:	1b52      	subs	r2, r2, r5
 8010a14:	6122      	str	r2, [r4, #16]
 8010a16:	464b      	mov	r3, r9
 8010a18:	4621      	mov	r1, r4
 8010a1a:	4640      	mov	r0, r8
 8010a1c:	f8cd a000 	str.w	sl, [sp]
 8010a20:	aa03      	add	r2, sp, #12
 8010a22:	f7ff fedf 	bl	80107e4 <_printf_common>
 8010a26:	3001      	adds	r0, #1
 8010a28:	d14c      	bne.n	8010ac4 <_printf_i+0x200>
 8010a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2e:	b004      	add	sp, #16
 8010a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a34:	4834      	ldr	r0, [pc, #208]	; (8010b08 <_printf_i+0x244>)
 8010a36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010a3a:	6829      	ldr	r1, [r5, #0]
 8010a3c:	6823      	ldr	r3, [r4, #0]
 8010a3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8010a42:	6029      	str	r1, [r5, #0]
 8010a44:	061d      	lsls	r5, r3, #24
 8010a46:	d514      	bpl.n	8010a72 <_printf_i+0x1ae>
 8010a48:	07df      	lsls	r7, r3, #31
 8010a4a:	bf44      	itt	mi
 8010a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8010a50:	6023      	strmi	r3, [r4, #0]
 8010a52:	b91e      	cbnz	r6, 8010a5c <_printf_i+0x198>
 8010a54:	6823      	ldr	r3, [r4, #0]
 8010a56:	f023 0320 	bic.w	r3, r3, #32
 8010a5a:	6023      	str	r3, [r4, #0]
 8010a5c:	2310      	movs	r3, #16
 8010a5e:	e7af      	b.n	80109c0 <_printf_i+0xfc>
 8010a60:	6823      	ldr	r3, [r4, #0]
 8010a62:	f043 0320 	orr.w	r3, r3, #32
 8010a66:	6023      	str	r3, [r4, #0]
 8010a68:	2378      	movs	r3, #120	; 0x78
 8010a6a:	4828      	ldr	r0, [pc, #160]	; (8010b0c <_printf_i+0x248>)
 8010a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a70:	e7e3      	b.n	8010a3a <_printf_i+0x176>
 8010a72:	0659      	lsls	r1, r3, #25
 8010a74:	bf48      	it	mi
 8010a76:	b2b6      	uxthmi	r6, r6
 8010a78:	e7e6      	b.n	8010a48 <_printf_i+0x184>
 8010a7a:	4615      	mov	r5, r2
 8010a7c:	e7bb      	b.n	80109f6 <_printf_i+0x132>
 8010a7e:	682b      	ldr	r3, [r5, #0]
 8010a80:	6826      	ldr	r6, [r4, #0]
 8010a82:	1d18      	adds	r0, r3, #4
 8010a84:	6961      	ldr	r1, [r4, #20]
 8010a86:	6028      	str	r0, [r5, #0]
 8010a88:	0635      	lsls	r5, r6, #24
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	d501      	bpl.n	8010a92 <_printf_i+0x1ce>
 8010a8e:	6019      	str	r1, [r3, #0]
 8010a90:	e002      	b.n	8010a98 <_printf_i+0x1d4>
 8010a92:	0670      	lsls	r0, r6, #25
 8010a94:	d5fb      	bpl.n	8010a8e <_printf_i+0x1ca>
 8010a96:	8019      	strh	r1, [r3, #0]
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4615      	mov	r5, r2
 8010a9c:	6123      	str	r3, [r4, #16]
 8010a9e:	e7ba      	b.n	8010a16 <_printf_i+0x152>
 8010aa0:	682b      	ldr	r3, [r5, #0]
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	1d1a      	adds	r2, r3, #4
 8010aa6:	602a      	str	r2, [r5, #0]
 8010aa8:	681d      	ldr	r5, [r3, #0]
 8010aaa:	6862      	ldr	r2, [r4, #4]
 8010aac:	4628      	mov	r0, r5
 8010aae:	f000 fa9b 	bl	8010fe8 <memchr>
 8010ab2:	b108      	cbz	r0, 8010ab8 <_printf_i+0x1f4>
 8010ab4:	1b40      	subs	r0, r0, r5
 8010ab6:	6060      	str	r0, [r4, #4]
 8010ab8:	6863      	ldr	r3, [r4, #4]
 8010aba:	6123      	str	r3, [r4, #16]
 8010abc:	2300      	movs	r3, #0
 8010abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ac2:	e7a8      	b.n	8010a16 <_printf_i+0x152>
 8010ac4:	462a      	mov	r2, r5
 8010ac6:	4649      	mov	r1, r9
 8010ac8:	4640      	mov	r0, r8
 8010aca:	6923      	ldr	r3, [r4, #16]
 8010acc:	47d0      	blx	sl
 8010ace:	3001      	adds	r0, #1
 8010ad0:	d0ab      	beq.n	8010a2a <_printf_i+0x166>
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	079b      	lsls	r3, r3, #30
 8010ad6:	d413      	bmi.n	8010b00 <_printf_i+0x23c>
 8010ad8:	68e0      	ldr	r0, [r4, #12]
 8010ada:	9b03      	ldr	r3, [sp, #12]
 8010adc:	4298      	cmp	r0, r3
 8010ade:	bfb8      	it	lt
 8010ae0:	4618      	movlt	r0, r3
 8010ae2:	e7a4      	b.n	8010a2e <_printf_i+0x16a>
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	4632      	mov	r2, r6
 8010ae8:	4649      	mov	r1, r9
 8010aea:	4640      	mov	r0, r8
 8010aec:	47d0      	blx	sl
 8010aee:	3001      	adds	r0, #1
 8010af0:	d09b      	beq.n	8010a2a <_printf_i+0x166>
 8010af2:	3501      	adds	r5, #1
 8010af4:	68e3      	ldr	r3, [r4, #12]
 8010af6:	9903      	ldr	r1, [sp, #12]
 8010af8:	1a5b      	subs	r3, r3, r1
 8010afa:	42ab      	cmp	r3, r5
 8010afc:	dcf2      	bgt.n	8010ae4 <_printf_i+0x220>
 8010afe:	e7eb      	b.n	8010ad8 <_printf_i+0x214>
 8010b00:	2500      	movs	r5, #0
 8010b02:	f104 0619 	add.w	r6, r4, #25
 8010b06:	e7f5      	b.n	8010af4 <_printf_i+0x230>
 8010b08:	08013111 	.word	0x08013111
 8010b0c:	08013122 	.word	0x08013122

08010b10 <_sbrk_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	2300      	movs	r3, #0
 8010b14:	4d05      	ldr	r5, [pc, #20]	; (8010b2c <_sbrk_r+0x1c>)
 8010b16:	4604      	mov	r4, r0
 8010b18:	4608      	mov	r0, r1
 8010b1a:	602b      	str	r3, [r5, #0]
 8010b1c:	f7ef feea 	bl	80008f4 <_sbrk>
 8010b20:	1c43      	adds	r3, r0, #1
 8010b22:	d102      	bne.n	8010b2a <_sbrk_r+0x1a>
 8010b24:	682b      	ldr	r3, [r5, #0]
 8010b26:	b103      	cbz	r3, 8010b2a <_sbrk_r+0x1a>
 8010b28:	6023      	str	r3, [r4, #0]
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	2000bc80 	.word	0x2000bc80

08010b30 <__sread>:
 8010b30:	b510      	push	{r4, lr}
 8010b32:	460c      	mov	r4, r1
 8010b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b38:	f000 fab8 	bl	80110ac <_read_r>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	bfab      	itete	ge
 8010b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b42:	89a3      	ldrhlt	r3, [r4, #12]
 8010b44:	181b      	addge	r3, r3, r0
 8010b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b4a:	bfac      	ite	ge
 8010b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b4e:	81a3      	strhlt	r3, [r4, #12]
 8010b50:	bd10      	pop	{r4, pc}

08010b52 <__swrite>:
 8010b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b56:	461f      	mov	r7, r3
 8010b58:	898b      	ldrh	r3, [r1, #12]
 8010b5a:	4605      	mov	r5, r0
 8010b5c:	05db      	lsls	r3, r3, #23
 8010b5e:	460c      	mov	r4, r1
 8010b60:	4616      	mov	r6, r2
 8010b62:	d505      	bpl.n	8010b70 <__swrite+0x1e>
 8010b64:	2302      	movs	r3, #2
 8010b66:	2200      	movs	r2, #0
 8010b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b6c:	f000 f9c4 	bl	8010ef8 <_lseek_r>
 8010b70:	89a3      	ldrh	r3, [r4, #12]
 8010b72:	4632      	mov	r2, r6
 8010b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b78:	81a3      	strh	r3, [r4, #12]
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	463b      	mov	r3, r7
 8010b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b86:	f000 b869 	b.w	8010c5c <_write_r>

08010b8a <__sseek>:
 8010b8a:	b510      	push	{r4, lr}
 8010b8c:	460c      	mov	r4, r1
 8010b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b92:	f000 f9b1 	bl	8010ef8 <_lseek_r>
 8010b96:	1c43      	adds	r3, r0, #1
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	bf15      	itete	ne
 8010b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ba6:	81a3      	strheq	r3, [r4, #12]
 8010ba8:	bf18      	it	ne
 8010baa:	81a3      	strhne	r3, [r4, #12]
 8010bac:	bd10      	pop	{r4, pc}

08010bae <__sclose>:
 8010bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb2:	f000 b8d3 	b.w	8010d5c <_close_r>
	...

08010bb8 <__swbuf_r>:
 8010bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bba:	460e      	mov	r6, r1
 8010bbc:	4614      	mov	r4, r2
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	b118      	cbz	r0, 8010bca <__swbuf_r+0x12>
 8010bc2:	6983      	ldr	r3, [r0, #24]
 8010bc4:	b90b      	cbnz	r3, 8010bca <__swbuf_r+0x12>
 8010bc6:	f7ff fb81 	bl	80102cc <__sinit>
 8010bca:	4b21      	ldr	r3, [pc, #132]	; (8010c50 <__swbuf_r+0x98>)
 8010bcc:	429c      	cmp	r4, r3
 8010bce:	d12b      	bne.n	8010c28 <__swbuf_r+0x70>
 8010bd0:	686c      	ldr	r4, [r5, #4]
 8010bd2:	69a3      	ldr	r3, [r4, #24]
 8010bd4:	60a3      	str	r3, [r4, #8]
 8010bd6:	89a3      	ldrh	r3, [r4, #12]
 8010bd8:	071a      	lsls	r2, r3, #28
 8010bda:	d52f      	bpl.n	8010c3c <__swbuf_r+0x84>
 8010bdc:	6923      	ldr	r3, [r4, #16]
 8010bde:	b36b      	cbz	r3, 8010c3c <__swbuf_r+0x84>
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	6820      	ldr	r0, [r4, #0]
 8010be4:	b2f6      	uxtb	r6, r6
 8010be6:	1ac0      	subs	r0, r0, r3
 8010be8:	6963      	ldr	r3, [r4, #20]
 8010bea:	4637      	mov	r7, r6
 8010bec:	4283      	cmp	r3, r0
 8010bee:	dc04      	bgt.n	8010bfa <__swbuf_r+0x42>
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f000 f944 	bl	8010e80 <_fflush_r>
 8010bf8:	bb30      	cbnz	r0, 8010c48 <__swbuf_r+0x90>
 8010bfa:	68a3      	ldr	r3, [r4, #8]
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	3b01      	subs	r3, #1
 8010c00:	60a3      	str	r3, [r4, #8]
 8010c02:	6823      	ldr	r3, [r4, #0]
 8010c04:	1c5a      	adds	r2, r3, #1
 8010c06:	6022      	str	r2, [r4, #0]
 8010c08:	701e      	strb	r6, [r3, #0]
 8010c0a:	6963      	ldr	r3, [r4, #20]
 8010c0c:	4283      	cmp	r3, r0
 8010c0e:	d004      	beq.n	8010c1a <__swbuf_r+0x62>
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	07db      	lsls	r3, r3, #31
 8010c14:	d506      	bpl.n	8010c24 <__swbuf_r+0x6c>
 8010c16:	2e0a      	cmp	r6, #10
 8010c18:	d104      	bne.n	8010c24 <__swbuf_r+0x6c>
 8010c1a:	4621      	mov	r1, r4
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	f000 f92f 	bl	8010e80 <_fflush_r>
 8010c22:	b988      	cbnz	r0, 8010c48 <__swbuf_r+0x90>
 8010c24:	4638      	mov	r0, r7
 8010c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c28:	4b0a      	ldr	r3, [pc, #40]	; (8010c54 <__swbuf_r+0x9c>)
 8010c2a:	429c      	cmp	r4, r3
 8010c2c:	d101      	bne.n	8010c32 <__swbuf_r+0x7a>
 8010c2e:	68ac      	ldr	r4, [r5, #8]
 8010c30:	e7cf      	b.n	8010bd2 <__swbuf_r+0x1a>
 8010c32:	4b09      	ldr	r3, [pc, #36]	; (8010c58 <__swbuf_r+0xa0>)
 8010c34:	429c      	cmp	r4, r3
 8010c36:	bf08      	it	eq
 8010c38:	68ec      	ldreq	r4, [r5, #12]
 8010c3a:	e7ca      	b.n	8010bd2 <__swbuf_r+0x1a>
 8010c3c:	4621      	mov	r1, r4
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f000 f81e 	bl	8010c80 <__swsetup_r>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d0cb      	beq.n	8010be0 <__swbuf_r+0x28>
 8010c48:	f04f 37ff 	mov.w	r7, #4294967295
 8010c4c:	e7ea      	b.n	8010c24 <__swbuf_r+0x6c>
 8010c4e:	bf00      	nop
 8010c50:	080130c0 	.word	0x080130c0
 8010c54:	080130e0 	.word	0x080130e0
 8010c58:	080130a0 	.word	0x080130a0

08010c5c <_write_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4604      	mov	r4, r0
 8010c60:	4608      	mov	r0, r1
 8010c62:	4611      	mov	r1, r2
 8010c64:	2200      	movs	r2, #0
 8010c66:	4d05      	ldr	r5, [pc, #20]	; (8010c7c <_write_r+0x20>)
 8010c68:	602a      	str	r2, [r5, #0]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	f7ef fdf5 	bl	800085a <_write>
 8010c70:	1c43      	adds	r3, r0, #1
 8010c72:	d102      	bne.n	8010c7a <_write_r+0x1e>
 8010c74:	682b      	ldr	r3, [r5, #0]
 8010c76:	b103      	cbz	r3, 8010c7a <_write_r+0x1e>
 8010c78:	6023      	str	r3, [r4, #0]
 8010c7a:	bd38      	pop	{r3, r4, r5, pc}
 8010c7c:	2000bc80 	.word	0x2000bc80

08010c80 <__swsetup_r>:
 8010c80:	4b32      	ldr	r3, [pc, #200]	; (8010d4c <__swsetup_r+0xcc>)
 8010c82:	b570      	push	{r4, r5, r6, lr}
 8010c84:	681d      	ldr	r5, [r3, #0]
 8010c86:	4606      	mov	r6, r0
 8010c88:	460c      	mov	r4, r1
 8010c8a:	b125      	cbz	r5, 8010c96 <__swsetup_r+0x16>
 8010c8c:	69ab      	ldr	r3, [r5, #24]
 8010c8e:	b913      	cbnz	r3, 8010c96 <__swsetup_r+0x16>
 8010c90:	4628      	mov	r0, r5
 8010c92:	f7ff fb1b 	bl	80102cc <__sinit>
 8010c96:	4b2e      	ldr	r3, [pc, #184]	; (8010d50 <__swsetup_r+0xd0>)
 8010c98:	429c      	cmp	r4, r3
 8010c9a:	d10f      	bne.n	8010cbc <__swsetup_r+0x3c>
 8010c9c:	686c      	ldr	r4, [r5, #4]
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ca4:	0719      	lsls	r1, r3, #28
 8010ca6:	d42c      	bmi.n	8010d02 <__swsetup_r+0x82>
 8010ca8:	06dd      	lsls	r5, r3, #27
 8010caa:	d411      	bmi.n	8010cd0 <__swsetup_r+0x50>
 8010cac:	2309      	movs	r3, #9
 8010cae:	6033      	str	r3, [r6, #0]
 8010cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	81a3      	strh	r3, [r4, #12]
 8010cba:	e03e      	b.n	8010d3a <__swsetup_r+0xba>
 8010cbc:	4b25      	ldr	r3, [pc, #148]	; (8010d54 <__swsetup_r+0xd4>)
 8010cbe:	429c      	cmp	r4, r3
 8010cc0:	d101      	bne.n	8010cc6 <__swsetup_r+0x46>
 8010cc2:	68ac      	ldr	r4, [r5, #8]
 8010cc4:	e7eb      	b.n	8010c9e <__swsetup_r+0x1e>
 8010cc6:	4b24      	ldr	r3, [pc, #144]	; (8010d58 <__swsetup_r+0xd8>)
 8010cc8:	429c      	cmp	r4, r3
 8010cca:	bf08      	it	eq
 8010ccc:	68ec      	ldreq	r4, [r5, #12]
 8010cce:	e7e6      	b.n	8010c9e <__swsetup_r+0x1e>
 8010cd0:	0758      	lsls	r0, r3, #29
 8010cd2:	d512      	bpl.n	8010cfa <__swsetup_r+0x7a>
 8010cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cd6:	b141      	cbz	r1, 8010cea <__swsetup_r+0x6a>
 8010cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cdc:	4299      	cmp	r1, r3
 8010cde:	d002      	beq.n	8010ce6 <__swsetup_r+0x66>
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f000 f99b 	bl	801101c <_free_r>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8010cea:	89a3      	ldrh	r3, [r4, #12]
 8010cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010cf0:	81a3      	strh	r3, [r4, #12]
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	6063      	str	r3, [r4, #4]
 8010cf6:	6923      	ldr	r3, [r4, #16]
 8010cf8:	6023      	str	r3, [r4, #0]
 8010cfa:	89a3      	ldrh	r3, [r4, #12]
 8010cfc:	f043 0308 	orr.w	r3, r3, #8
 8010d00:	81a3      	strh	r3, [r4, #12]
 8010d02:	6923      	ldr	r3, [r4, #16]
 8010d04:	b94b      	cbnz	r3, 8010d1a <__swsetup_r+0x9a>
 8010d06:	89a3      	ldrh	r3, [r4, #12]
 8010d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d10:	d003      	beq.n	8010d1a <__swsetup_r+0x9a>
 8010d12:	4621      	mov	r1, r4
 8010d14:	4630      	mov	r0, r6
 8010d16:	f000 f927 	bl	8010f68 <__smakebuf_r>
 8010d1a:	89a0      	ldrh	r0, [r4, #12]
 8010d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d20:	f010 0301 	ands.w	r3, r0, #1
 8010d24:	d00a      	beq.n	8010d3c <__swsetup_r+0xbc>
 8010d26:	2300      	movs	r3, #0
 8010d28:	60a3      	str	r3, [r4, #8]
 8010d2a:	6963      	ldr	r3, [r4, #20]
 8010d2c:	425b      	negs	r3, r3
 8010d2e:	61a3      	str	r3, [r4, #24]
 8010d30:	6923      	ldr	r3, [r4, #16]
 8010d32:	b943      	cbnz	r3, 8010d46 <__swsetup_r+0xc6>
 8010d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010d38:	d1ba      	bne.n	8010cb0 <__swsetup_r+0x30>
 8010d3a:	bd70      	pop	{r4, r5, r6, pc}
 8010d3c:	0781      	lsls	r1, r0, #30
 8010d3e:	bf58      	it	pl
 8010d40:	6963      	ldrpl	r3, [r4, #20]
 8010d42:	60a3      	str	r3, [r4, #8]
 8010d44:	e7f4      	b.n	8010d30 <__swsetup_r+0xb0>
 8010d46:	2000      	movs	r0, #0
 8010d48:	e7f7      	b.n	8010d3a <__swsetup_r+0xba>
 8010d4a:	bf00      	nop
 8010d4c:	20000014 	.word	0x20000014
 8010d50:	080130c0 	.word	0x080130c0
 8010d54:	080130e0 	.word	0x080130e0
 8010d58:	080130a0 	.word	0x080130a0

08010d5c <_close_r>:
 8010d5c:	b538      	push	{r3, r4, r5, lr}
 8010d5e:	2300      	movs	r3, #0
 8010d60:	4d05      	ldr	r5, [pc, #20]	; (8010d78 <_close_r+0x1c>)
 8010d62:	4604      	mov	r4, r0
 8010d64:	4608      	mov	r0, r1
 8010d66:	602b      	str	r3, [r5, #0]
 8010d68:	f7ef fd93 	bl	8000892 <_close>
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	d102      	bne.n	8010d76 <_close_r+0x1a>
 8010d70:	682b      	ldr	r3, [r5, #0]
 8010d72:	b103      	cbz	r3, 8010d76 <_close_r+0x1a>
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	2000bc80 	.word	0x2000bc80

08010d7c <__sflush_r>:
 8010d7c:	898a      	ldrh	r2, [r1, #12]
 8010d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d80:	4605      	mov	r5, r0
 8010d82:	0710      	lsls	r0, r2, #28
 8010d84:	460c      	mov	r4, r1
 8010d86:	d457      	bmi.n	8010e38 <__sflush_r+0xbc>
 8010d88:	684b      	ldr	r3, [r1, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	dc04      	bgt.n	8010d98 <__sflush_r+0x1c>
 8010d8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dc01      	bgt.n	8010d98 <__sflush_r+0x1c>
 8010d94:	2000      	movs	r0, #0
 8010d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d9a:	2e00      	cmp	r6, #0
 8010d9c:	d0fa      	beq.n	8010d94 <__sflush_r+0x18>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010da4:	682f      	ldr	r7, [r5, #0]
 8010da6:	602b      	str	r3, [r5, #0]
 8010da8:	d032      	beq.n	8010e10 <__sflush_r+0x94>
 8010daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010dac:	89a3      	ldrh	r3, [r4, #12]
 8010dae:	075a      	lsls	r2, r3, #29
 8010db0:	d505      	bpl.n	8010dbe <__sflush_r+0x42>
 8010db2:	6863      	ldr	r3, [r4, #4]
 8010db4:	1ac0      	subs	r0, r0, r3
 8010db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010db8:	b10b      	cbz	r3, 8010dbe <__sflush_r+0x42>
 8010dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010dbc:	1ac0      	subs	r0, r0, r3
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	6a21      	ldr	r1, [r4, #32]
 8010dc8:	47b0      	blx	r6
 8010dca:	1c43      	adds	r3, r0, #1
 8010dcc:	89a3      	ldrh	r3, [r4, #12]
 8010dce:	d106      	bne.n	8010dde <__sflush_r+0x62>
 8010dd0:	6829      	ldr	r1, [r5, #0]
 8010dd2:	291d      	cmp	r1, #29
 8010dd4:	d82c      	bhi.n	8010e30 <__sflush_r+0xb4>
 8010dd6:	4a29      	ldr	r2, [pc, #164]	; (8010e7c <__sflush_r+0x100>)
 8010dd8:	40ca      	lsrs	r2, r1
 8010dda:	07d6      	lsls	r6, r2, #31
 8010ddc:	d528      	bpl.n	8010e30 <__sflush_r+0xb4>
 8010dde:	2200      	movs	r2, #0
 8010de0:	6062      	str	r2, [r4, #4]
 8010de2:	6922      	ldr	r2, [r4, #16]
 8010de4:	04d9      	lsls	r1, r3, #19
 8010de6:	6022      	str	r2, [r4, #0]
 8010de8:	d504      	bpl.n	8010df4 <__sflush_r+0x78>
 8010dea:	1c42      	adds	r2, r0, #1
 8010dec:	d101      	bne.n	8010df2 <__sflush_r+0x76>
 8010dee:	682b      	ldr	r3, [r5, #0]
 8010df0:	b903      	cbnz	r3, 8010df4 <__sflush_r+0x78>
 8010df2:	6560      	str	r0, [r4, #84]	; 0x54
 8010df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010df6:	602f      	str	r7, [r5, #0]
 8010df8:	2900      	cmp	r1, #0
 8010dfa:	d0cb      	beq.n	8010d94 <__sflush_r+0x18>
 8010dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e00:	4299      	cmp	r1, r3
 8010e02:	d002      	beq.n	8010e0a <__sflush_r+0x8e>
 8010e04:	4628      	mov	r0, r5
 8010e06:	f000 f909 	bl	801101c <_free_r>
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8010e0e:	e7c2      	b.n	8010d96 <__sflush_r+0x1a>
 8010e10:	6a21      	ldr	r1, [r4, #32]
 8010e12:	2301      	movs	r3, #1
 8010e14:	4628      	mov	r0, r5
 8010e16:	47b0      	blx	r6
 8010e18:	1c41      	adds	r1, r0, #1
 8010e1a:	d1c7      	bne.n	8010dac <__sflush_r+0x30>
 8010e1c:	682b      	ldr	r3, [r5, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d0c4      	beq.n	8010dac <__sflush_r+0x30>
 8010e22:	2b1d      	cmp	r3, #29
 8010e24:	d001      	beq.n	8010e2a <__sflush_r+0xae>
 8010e26:	2b16      	cmp	r3, #22
 8010e28:	d101      	bne.n	8010e2e <__sflush_r+0xb2>
 8010e2a:	602f      	str	r7, [r5, #0]
 8010e2c:	e7b2      	b.n	8010d94 <__sflush_r+0x18>
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e34:	81a3      	strh	r3, [r4, #12]
 8010e36:	e7ae      	b.n	8010d96 <__sflush_r+0x1a>
 8010e38:	690f      	ldr	r7, [r1, #16]
 8010e3a:	2f00      	cmp	r7, #0
 8010e3c:	d0aa      	beq.n	8010d94 <__sflush_r+0x18>
 8010e3e:	0793      	lsls	r3, r2, #30
 8010e40:	bf18      	it	ne
 8010e42:	2300      	movne	r3, #0
 8010e44:	680e      	ldr	r6, [r1, #0]
 8010e46:	bf08      	it	eq
 8010e48:	694b      	ldreq	r3, [r1, #20]
 8010e4a:	1bf6      	subs	r6, r6, r7
 8010e4c:	600f      	str	r7, [r1, #0]
 8010e4e:	608b      	str	r3, [r1, #8]
 8010e50:	2e00      	cmp	r6, #0
 8010e52:	dd9f      	ble.n	8010d94 <__sflush_r+0x18>
 8010e54:	4633      	mov	r3, r6
 8010e56:	463a      	mov	r2, r7
 8010e58:	4628      	mov	r0, r5
 8010e5a:	6a21      	ldr	r1, [r4, #32]
 8010e5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010e60:	47e0      	blx	ip
 8010e62:	2800      	cmp	r0, #0
 8010e64:	dc06      	bgt.n	8010e74 <__sflush_r+0xf8>
 8010e66:	89a3      	ldrh	r3, [r4, #12]
 8010e68:	f04f 30ff 	mov.w	r0, #4294967295
 8010e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e70:	81a3      	strh	r3, [r4, #12]
 8010e72:	e790      	b.n	8010d96 <__sflush_r+0x1a>
 8010e74:	4407      	add	r7, r0
 8010e76:	1a36      	subs	r6, r6, r0
 8010e78:	e7ea      	b.n	8010e50 <__sflush_r+0xd4>
 8010e7a:	bf00      	nop
 8010e7c:	20400001 	.word	0x20400001

08010e80 <_fflush_r>:
 8010e80:	b538      	push	{r3, r4, r5, lr}
 8010e82:	690b      	ldr	r3, [r1, #16]
 8010e84:	4605      	mov	r5, r0
 8010e86:	460c      	mov	r4, r1
 8010e88:	b913      	cbnz	r3, 8010e90 <_fflush_r+0x10>
 8010e8a:	2500      	movs	r5, #0
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	b118      	cbz	r0, 8010e9a <_fflush_r+0x1a>
 8010e92:	6983      	ldr	r3, [r0, #24]
 8010e94:	b90b      	cbnz	r3, 8010e9a <_fflush_r+0x1a>
 8010e96:	f7ff fa19 	bl	80102cc <__sinit>
 8010e9a:	4b14      	ldr	r3, [pc, #80]	; (8010eec <_fflush_r+0x6c>)
 8010e9c:	429c      	cmp	r4, r3
 8010e9e:	d11b      	bne.n	8010ed8 <_fflush_r+0x58>
 8010ea0:	686c      	ldr	r4, [r5, #4]
 8010ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d0ef      	beq.n	8010e8a <_fflush_r+0xa>
 8010eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010eac:	07d0      	lsls	r0, r2, #31
 8010eae:	d404      	bmi.n	8010eba <_fflush_r+0x3a>
 8010eb0:	0599      	lsls	r1, r3, #22
 8010eb2:	d402      	bmi.n	8010eba <_fflush_r+0x3a>
 8010eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eb6:	f7ff faa7 	bl	8010408 <__retarget_lock_acquire_recursive>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	4621      	mov	r1, r4
 8010ebe:	f7ff ff5d 	bl	8010d7c <__sflush_r>
 8010ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ec4:	4605      	mov	r5, r0
 8010ec6:	07da      	lsls	r2, r3, #31
 8010ec8:	d4e0      	bmi.n	8010e8c <_fflush_r+0xc>
 8010eca:	89a3      	ldrh	r3, [r4, #12]
 8010ecc:	059b      	lsls	r3, r3, #22
 8010ece:	d4dd      	bmi.n	8010e8c <_fflush_r+0xc>
 8010ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ed2:	f7ff fa9a 	bl	801040a <__retarget_lock_release_recursive>
 8010ed6:	e7d9      	b.n	8010e8c <_fflush_r+0xc>
 8010ed8:	4b05      	ldr	r3, [pc, #20]	; (8010ef0 <_fflush_r+0x70>)
 8010eda:	429c      	cmp	r4, r3
 8010edc:	d101      	bne.n	8010ee2 <_fflush_r+0x62>
 8010ede:	68ac      	ldr	r4, [r5, #8]
 8010ee0:	e7df      	b.n	8010ea2 <_fflush_r+0x22>
 8010ee2:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <_fflush_r+0x74>)
 8010ee4:	429c      	cmp	r4, r3
 8010ee6:	bf08      	it	eq
 8010ee8:	68ec      	ldreq	r4, [r5, #12]
 8010eea:	e7da      	b.n	8010ea2 <_fflush_r+0x22>
 8010eec:	080130c0 	.word	0x080130c0
 8010ef0:	080130e0 	.word	0x080130e0
 8010ef4:	080130a0 	.word	0x080130a0

08010ef8 <_lseek_r>:
 8010ef8:	b538      	push	{r3, r4, r5, lr}
 8010efa:	4604      	mov	r4, r0
 8010efc:	4608      	mov	r0, r1
 8010efe:	4611      	mov	r1, r2
 8010f00:	2200      	movs	r2, #0
 8010f02:	4d05      	ldr	r5, [pc, #20]	; (8010f18 <_lseek_r+0x20>)
 8010f04:	602a      	str	r2, [r5, #0]
 8010f06:	461a      	mov	r2, r3
 8010f08:	f7ef fce7 	bl	80008da <_lseek>
 8010f0c:	1c43      	adds	r3, r0, #1
 8010f0e:	d102      	bne.n	8010f16 <_lseek_r+0x1e>
 8010f10:	682b      	ldr	r3, [r5, #0]
 8010f12:	b103      	cbz	r3, 8010f16 <_lseek_r+0x1e>
 8010f14:	6023      	str	r3, [r4, #0]
 8010f16:	bd38      	pop	{r3, r4, r5, pc}
 8010f18:	2000bc80 	.word	0x2000bc80

08010f1c <__swhatbuf_r>:
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	460e      	mov	r6, r1
 8010f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f24:	4614      	mov	r4, r2
 8010f26:	2900      	cmp	r1, #0
 8010f28:	461d      	mov	r5, r3
 8010f2a:	b096      	sub	sp, #88	; 0x58
 8010f2c:	da08      	bge.n	8010f40 <__swhatbuf_r+0x24>
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010f34:	602a      	str	r2, [r5, #0]
 8010f36:	061a      	lsls	r2, r3, #24
 8010f38:	d410      	bmi.n	8010f5c <__swhatbuf_r+0x40>
 8010f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f3e:	e00e      	b.n	8010f5e <__swhatbuf_r+0x42>
 8010f40:	466a      	mov	r2, sp
 8010f42:	f000 f8c5 	bl	80110d0 <_fstat_r>
 8010f46:	2800      	cmp	r0, #0
 8010f48:	dbf1      	blt.n	8010f2e <__swhatbuf_r+0x12>
 8010f4a:	9a01      	ldr	r2, [sp, #4]
 8010f4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010f50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010f54:	425a      	negs	r2, r3
 8010f56:	415a      	adcs	r2, r3
 8010f58:	602a      	str	r2, [r5, #0]
 8010f5a:	e7ee      	b.n	8010f3a <__swhatbuf_r+0x1e>
 8010f5c:	2340      	movs	r3, #64	; 0x40
 8010f5e:	2000      	movs	r0, #0
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	b016      	add	sp, #88	; 0x58
 8010f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08010f68 <__smakebuf_r>:
 8010f68:	898b      	ldrh	r3, [r1, #12]
 8010f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f6c:	079d      	lsls	r5, r3, #30
 8010f6e:	4606      	mov	r6, r0
 8010f70:	460c      	mov	r4, r1
 8010f72:	d507      	bpl.n	8010f84 <__smakebuf_r+0x1c>
 8010f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f78:	6023      	str	r3, [r4, #0]
 8010f7a:	6123      	str	r3, [r4, #16]
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	6163      	str	r3, [r4, #20]
 8010f80:	b002      	add	sp, #8
 8010f82:	bd70      	pop	{r4, r5, r6, pc}
 8010f84:	466a      	mov	r2, sp
 8010f86:	ab01      	add	r3, sp, #4
 8010f88:	f7ff ffc8 	bl	8010f1c <__swhatbuf_r>
 8010f8c:	9900      	ldr	r1, [sp, #0]
 8010f8e:	4605      	mov	r5, r0
 8010f90:	4630      	mov	r0, r6
 8010f92:	f7ff fa5b 	bl	801044c <_malloc_r>
 8010f96:	b948      	cbnz	r0, 8010fac <__smakebuf_r+0x44>
 8010f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f9c:	059a      	lsls	r2, r3, #22
 8010f9e:	d4ef      	bmi.n	8010f80 <__smakebuf_r+0x18>
 8010fa0:	f023 0303 	bic.w	r3, r3, #3
 8010fa4:	f043 0302 	orr.w	r3, r3, #2
 8010fa8:	81a3      	strh	r3, [r4, #12]
 8010faa:	e7e3      	b.n	8010f74 <__smakebuf_r+0xc>
 8010fac:	4b0d      	ldr	r3, [pc, #52]	; (8010fe4 <__smakebuf_r+0x7c>)
 8010fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8010fb0:	89a3      	ldrh	r3, [r4, #12]
 8010fb2:	6020      	str	r0, [r4, #0]
 8010fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb8:	81a3      	strh	r3, [r4, #12]
 8010fba:	9b00      	ldr	r3, [sp, #0]
 8010fbc:	6120      	str	r0, [r4, #16]
 8010fbe:	6163      	str	r3, [r4, #20]
 8010fc0:	9b01      	ldr	r3, [sp, #4]
 8010fc2:	b15b      	cbz	r3, 8010fdc <__smakebuf_r+0x74>
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fca:	f000 f893 	bl	80110f4 <_isatty_r>
 8010fce:	b128      	cbz	r0, 8010fdc <__smakebuf_r+0x74>
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	f023 0303 	bic.w	r3, r3, #3
 8010fd6:	f043 0301 	orr.w	r3, r3, #1
 8010fda:	81a3      	strh	r3, [r4, #12]
 8010fdc:	89a0      	ldrh	r0, [r4, #12]
 8010fde:	4305      	orrs	r5, r0
 8010fe0:	81a5      	strh	r5, [r4, #12]
 8010fe2:	e7cd      	b.n	8010f80 <__smakebuf_r+0x18>
 8010fe4:	08010265 	.word	0x08010265

08010fe8 <memchr>:
 8010fe8:	4603      	mov	r3, r0
 8010fea:	b510      	push	{r4, lr}
 8010fec:	b2c9      	uxtb	r1, r1
 8010fee:	4402      	add	r2, r0
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	d101      	bne.n	8010ffa <memchr+0x12>
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	e003      	b.n	8011002 <memchr+0x1a>
 8010ffa:	7804      	ldrb	r4, [r0, #0]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	428c      	cmp	r4, r1
 8011000:	d1f6      	bne.n	8010ff0 <memchr+0x8>
 8011002:	bd10      	pop	{r4, pc}

08011004 <__malloc_lock>:
 8011004:	4801      	ldr	r0, [pc, #4]	; (801100c <__malloc_lock+0x8>)
 8011006:	f7ff b9ff 	b.w	8010408 <__retarget_lock_acquire_recursive>
 801100a:	bf00      	nop
 801100c:	2000bc88 	.word	0x2000bc88

08011010 <__malloc_unlock>:
 8011010:	4801      	ldr	r0, [pc, #4]	; (8011018 <__malloc_unlock+0x8>)
 8011012:	f7ff b9fa 	b.w	801040a <__retarget_lock_release_recursive>
 8011016:	bf00      	nop
 8011018:	2000bc88 	.word	0x2000bc88

0801101c <_free_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	4605      	mov	r5, r0
 8011020:	2900      	cmp	r1, #0
 8011022:	d040      	beq.n	80110a6 <_free_r+0x8a>
 8011024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011028:	1f0c      	subs	r4, r1, #4
 801102a:	2b00      	cmp	r3, #0
 801102c:	bfb8      	it	lt
 801102e:	18e4      	addlt	r4, r4, r3
 8011030:	f7ff ffe8 	bl	8011004 <__malloc_lock>
 8011034:	4a1c      	ldr	r2, [pc, #112]	; (80110a8 <_free_r+0x8c>)
 8011036:	6813      	ldr	r3, [r2, #0]
 8011038:	b933      	cbnz	r3, 8011048 <_free_r+0x2c>
 801103a:	6063      	str	r3, [r4, #4]
 801103c:	6014      	str	r4, [r2, #0]
 801103e:	4628      	mov	r0, r5
 8011040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011044:	f7ff bfe4 	b.w	8011010 <__malloc_unlock>
 8011048:	42a3      	cmp	r3, r4
 801104a:	d908      	bls.n	801105e <_free_r+0x42>
 801104c:	6820      	ldr	r0, [r4, #0]
 801104e:	1821      	adds	r1, r4, r0
 8011050:	428b      	cmp	r3, r1
 8011052:	bf01      	itttt	eq
 8011054:	6819      	ldreq	r1, [r3, #0]
 8011056:	685b      	ldreq	r3, [r3, #4]
 8011058:	1809      	addeq	r1, r1, r0
 801105a:	6021      	streq	r1, [r4, #0]
 801105c:	e7ed      	b.n	801103a <_free_r+0x1e>
 801105e:	461a      	mov	r2, r3
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	b10b      	cbz	r3, 8011068 <_free_r+0x4c>
 8011064:	42a3      	cmp	r3, r4
 8011066:	d9fa      	bls.n	801105e <_free_r+0x42>
 8011068:	6811      	ldr	r1, [r2, #0]
 801106a:	1850      	adds	r0, r2, r1
 801106c:	42a0      	cmp	r0, r4
 801106e:	d10b      	bne.n	8011088 <_free_r+0x6c>
 8011070:	6820      	ldr	r0, [r4, #0]
 8011072:	4401      	add	r1, r0
 8011074:	1850      	adds	r0, r2, r1
 8011076:	4283      	cmp	r3, r0
 8011078:	6011      	str	r1, [r2, #0]
 801107a:	d1e0      	bne.n	801103e <_free_r+0x22>
 801107c:	6818      	ldr	r0, [r3, #0]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	4401      	add	r1, r0
 8011082:	6011      	str	r1, [r2, #0]
 8011084:	6053      	str	r3, [r2, #4]
 8011086:	e7da      	b.n	801103e <_free_r+0x22>
 8011088:	d902      	bls.n	8011090 <_free_r+0x74>
 801108a:	230c      	movs	r3, #12
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	e7d6      	b.n	801103e <_free_r+0x22>
 8011090:	6820      	ldr	r0, [r4, #0]
 8011092:	1821      	adds	r1, r4, r0
 8011094:	428b      	cmp	r3, r1
 8011096:	bf01      	itttt	eq
 8011098:	6819      	ldreq	r1, [r3, #0]
 801109a:	685b      	ldreq	r3, [r3, #4]
 801109c:	1809      	addeq	r1, r1, r0
 801109e:	6021      	streq	r1, [r4, #0]
 80110a0:	6063      	str	r3, [r4, #4]
 80110a2:	6054      	str	r4, [r2, #4]
 80110a4:	e7cb      	b.n	801103e <_free_r+0x22>
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	2000bc8c 	.word	0x2000bc8c

080110ac <_read_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4604      	mov	r4, r0
 80110b0:	4608      	mov	r0, r1
 80110b2:	4611      	mov	r1, r2
 80110b4:	2200      	movs	r2, #0
 80110b6:	4d05      	ldr	r5, [pc, #20]	; (80110cc <_read_r+0x20>)
 80110b8:	602a      	str	r2, [r5, #0]
 80110ba:	461a      	mov	r2, r3
 80110bc:	f7ef fbb0 	bl	8000820 <_read>
 80110c0:	1c43      	adds	r3, r0, #1
 80110c2:	d102      	bne.n	80110ca <_read_r+0x1e>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b103      	cbz	r3, 80110ca <_read_r+0x1e>
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	2000bc80 	.word	0x2000bc80

080110d0 <_fstat_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	2300      	movs	r3, #0
 80110d4:	4d06      	ldr	r5, [pc, #24]	; (80110f0 <_fstat_r+0x20>)
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	4611      	mov	r1, r2
 80110dc:	602b      	str	r3, [r5, #0]
 80110de:	f7ef fbe3 	bl	80008a8 <_fstat>
 80110e2:	1c43      	adds	r3, r0, #1
 80110e4:	d102      	bne.n	80110ec <_fstat_r+0x1c>
 80110e6:	682b      	ldr	r3, [r5, #0]
 80110e8:	b103      	cbz	r3, 80110ec <_fstat_r+0x1c>
 80110ea:	6023      	str	r3, [r4, #0]
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
 80110ee:	bf00      	nop
 80110f0:	2000bc80 	.word	0x2000bc80

080110f4 <_isatty_r>:
 80110f4:	b538      	push	{r3, r4, r5, lr}
 80110f6:	2300      	movs	r3, #0
 80110f8:	4d05      	ldr	r5, [pc, #20]	; (8011110 <_isatty_r+0x1c>)
 80110fa:	4604      	mov	r4, r0
 80110fc:	4608      	mov	r0, r1
 80110fe:	602b      	str	r3, [r5, #0]
 8011100:	f7ef fbe1 	bl	80008c6 <_isatty>
 8011104:	1c43      	adds	r3, r0, #1
 8011106:	d102      	bne.n	801110e <_isatty_r+0x1a>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b103      	cbz	r3, 801110e <_isatty_r+0x1a>
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	bd38      	pop	{r3, r4, r5, pc}
 8011110:	2000bc80 	.word	0x2000bc80

08011114 <_init>:
 8011114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011116:	bf00      	nop
 8011118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801111a:	bc08      	pop	{r3}
 801111c:	469e      	mov	lr, r3
 801111e:	4770      	bx	lr

08011120 <_fini>:
 8011120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011122:	bf00      	nop
 8011124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011126:	bc08      	pop	{r3}
 8011128:	469e      	mov	lr, r3
 801112a:	4770      	bx	lr
