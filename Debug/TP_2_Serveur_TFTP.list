
TP_2_Serveur_TFTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002974  080147a4  080147a4  000247a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017118  08017118  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08017118  08017118  00027118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017120  08017120  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017120  08017120  00027120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017124  08017124  00027124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08017128  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b898  20000084  080171ac  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b91c  080171ac  0003b91c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d44  00000000  00000000  000300ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c5e  00000000  00000000  00054df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  0005ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  0005d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe0a  00000000  00000000  0005ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eee5  00000000  00000000  0008ea6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc518  00000000  00000000  000bd94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00199e67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ed8  00000000  00000000  00199eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801478c 	.word	0x0801478c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0801478c 	.word	0x0801478c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b976 	b.w	80004e8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14d      	bne.n	80002c0 <__udivmoddi4+0xac>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d968      	bls.n	80002fc <__udivmoddi4+0xe8>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b152      	cbz	r2, 8000246 <__udivmoddi4+0x32>
 8000230:	fa01 f302 	lsl.w	r3, r1, r2
 8000234:	f1c2 0120 	rsb	r1, r2, #32
 8000238:	fa20 f101 	lsr.w	r1, r0, r1
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	ea41 0803 	orr.w	r8, r1, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800024a:	fbb8 f7f1 	udiv	r7, r8, r1
 800024e:	fa1f fe8c 	uxth.w	lr, ip
 8000252:	fb01 8817 	mls	r8, r1, r7, r8
 8000256:	fb07 f00e 	mul.w	r0, r7, lr
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	4298      	cmp	r0, r3
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x66>
 8000264:	eb1c 0303 	adds.w	r3, ip, r3
 8000268:	f107 35ff 	add.w	r5, r7, #4294967295
 800026c:	f080 811e 	bcs.w	80004ac <__udivmoddi4+0x298>
 8000270:	4298      	cmp	r0, r3
 8000272:	f240 811b 	bls.w	80004ac <__udivmoddi4+0x298>
 8000276:	3f02      	subs	r7, #2
 8000278:	4463      	add	r3, ip
 800027a:	1a1b      	subs	r3, r3, r0
 800027c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000280:	fb01 3310 	mls	r3, r1, r0, r3
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	b2a4      	uxth	r4, r4
 800028a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028e:	45a6      	cmp	lr, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8109 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8106 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	2100      	movs	r1, #0
 80002aa:	eba4 040e 	sub.w	r4, r4, lr
 80002ae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa8>
 80002b4:	2300      	movs	r3, #0
 80002b6:	40d4      	lsrs	r4, r2
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c4:	2e00      	cmp	r6, #0
 80002c6:	f000 80ee 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002ca:	2100      	movs	r1, #0
 80002cc:	e9c6 0500 	strd	r0, r5, [r6]
 80002d0:	4608      	mov	r0, r1
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	42ab      	cmp	r3, r5
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fc 	bhi.w	80004e0 <__udivmoddi4+0x2cc>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb65 0303 	sbc.w	r3, r5, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e2      	beq.n	80002bc <__udivmoddi4+0xa8>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7df      	b.n	80002bc <__udivmoddi4+0xa8>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8091 	bne.w	800042c <__udivmoddi4+0x218>
 800030a:	eba1 000c 	sub.w	r0, r1, ip
 800030e:	2101      	movs	r1, #1
 8000310:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	fbb0 f3f7 	udiv	r3, r0, r7
 800031c:	fb07 0013 	mls	r0, r7, r3, r0
 8000320:	0c25      	lsrs	r5, r4, #16
 8000322:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	42a8      	cmp	r0, r5
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0505 	adds.w	r5, ip, r5
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	42a8      	cmp	r0, r5
 800033a:	f200 80ce 	bhi.w	80004da <__udivmoddi4+0x2c6>
 800033e:	4643      	mov	r3, r8
 8000340:	1a2d      	subs	r5, r5, r0
 8000342:	fbb5 f0f7 	udiv	r0, r5, r7
 8000346:	fb07 5510 	mls	r5, r7, r0, r5
 800034a:	fb0e fe00 	mul.w	lr, lr, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80b6 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 8000368:	4628      	mov	r0, r5
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79e      	b.n	80002b2 <__udivmoddi4+0x9e>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa25 fa07 	lsr.w	sl, r5, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fbba f8f9 	udiv	r8, sl, r9
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	fb09 aa18 	mls	sl, r9, r8, sl
 8000396:	408d      	lsls	r5, r1
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	431d      	orrs	r5, r3
 800039e:	fa00 f301 	lsl.w	r3, r0, r1
 80003a2:	fb08 f00e 	mul.w	r0, r8, lr
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ac:	42a0      	cmp	r0, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	42a0      	cmp	r0, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1a24      	subs	r4, r4, r0
 80003ce:	fbb4 f0f9 	udiv	r0, r4, r9
 80003d2:	fb09 4410 	mls	r4, r9, r0, r4
 80003d6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9502 	umull	r9, r5, r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2d0>
 8000410:	ebb3 0208 	subs.w	r2, r3, r8
 8000414:	eb64 040e 	sbc.w	r4, r4, lr
 8000418:	fa22 f301 	lsr.w	r3, r2, r1
 800041c:	fa04 f707 	lsl.w	r7, r4, r7
 8000420:	431f      	orrs	r7, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	2100      	movs	r1, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa8>
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	f1c2 0120 	rsb	r1, r2, #32
 8000434:	fa25 f301 	lsr.w	r3, r5, r1
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa20 f101 	lsr.w	r1, r0, r1
 8000440:	4095      	lsls	r5, r2
 8000442:	430d      	orrs	r5, r1
 8000444:	fbb3 f1f7 	udiv	r1, r3, r7
 8000448:	fb07 3311 	mls	r3, r7, r1, r3
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	0c28      	lsrs	r0, r5, #16
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	fb01 f30e 	mul.w	r3, r1, lr
 800045a:	4283      	cmp	r3, r0
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	4283      	cmp	r3, r0
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1ac0      	subs	r0, r0, r3
 8000476:	fbb0 f3f7 	udiv	r3, r0, r7
 800047a:	fb07 0013 	mls	r0, r7, r3, r0
 800047e:	b2ad      	uxth	r5, r5
 8000480:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000484:	fb03 f00e 	mul.w	r0, r3, lr
 8000488:	42a8      	cmp	r0, r5
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0505 	adds.w	r5, ip, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	42a8      	cmp	r0, r5
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3b02      	subs	r3, #2
 800049c:	4465      	add	r5, ip
 800049e:	1a28      	subs	r0, r5, r0
 80004a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e707      	b.n	80002bc <__udivmoddi4+0xa8>
 80004ac:	462f      	mov	r7, r5
 80004ae:	e6e4      	b.n	800027a <__udivmoddi4+0x66>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f9      	b.n	80002a8 <__udivmoddi4+0x94>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4643      	mov	r3, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4628      	mov	r0, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4641      	mov	r1, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	4464      	add	r4, ip
 80004d6:	3802      	subs	r0, #2
 80004d8:	e747      	b.n	800036a <__udivmoddi4+0x156>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x12c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e706      	b.n	80002f2 <__udivmoddi4+0xde>
 80004e4:	4631      	mov	r1, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa8>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <vApplicationGetIdleTaskMemory+0x2c>)
 80004fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	4a06      	ldr	r2, [pc, #24]	; (800051c <vApplicationGetIdleTaskMemory+0x30>)
 8000502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800050a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000a4 	.word	0x200000a4
 800051c:	200000f8 	.word	0x200000f8

08000520 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_FREERTOS_Init+0x30>)
 8000528:	1d3c      	adds	r4, r7, #4
 800052a:	461d      	mov	r5, r3
 800052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 ffd1 	bl	80044e4 <osThreadCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <MX_FREERTOS_Init+0x34>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bdb0      	pop	{r4, r5, r7, pc}
 8000550:	080147b0 	.word	0x080147b0
 8000554:	200000a0 	.word	0x200000a0

08000558 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
    MX_LWIP_Init();
 8000560:	f003 f9f6 	bl	8003950 <MX_LWIP_Init>
    uint8_t MSG[35] = {'\0'};
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	221f      	movs	r2, #31
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f012 ff99 	bl	80134a8 <memset>
    uint8_t X = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    X = tftp_server_init();
 800057c:	f000 fb04 	bl	8000b88 <tftp_server_init>
 8000580:	4603      	mov	r3, r0
 8000582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (X == 8) {
 8000586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800058a:	2b08      	cmp	r3, #8
 800058c:	d110      	bne.n	80005b0 <StartDefaultTask+0x58>
        for (int i = 0; i < 8; ++i) {
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000592:	e009      	b.n	80005a8 <StartDefaultTask+0x50>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);//Toggle LED_1 GREEN
 8000594:	2101      	movs	r1, #1
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <StartDefaultTask+0x88>)
 8000598:	f002 fa4e 	bl	8002a38 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 fdf1 	bl	8001184 <HAL_Delay>
        for (int i = 0; i < 8; ++i) {
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	3301      	adds	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005aa:	2b07      	cmp	r3, #7
 80005ac:	ddf2      	ble.n	8000594 <StartDefaultTask+0x3c>
 80005ae:	e005      	b.n	80005bc <StartDefaultTask+0x64>
        }
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);//Toggle LED_3 RED
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <StartDefaultTask+0x88>)
 80005b8:	f002 fa26 	bl	8002a08 <HAL_GPIO_WritePin>
    }
    sprintf(MSG, " tftp_server_init return = %d\r\n", X);
 80005bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <StartDefaultTask+0x8c>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	f013 f87a 	bl	80136c0 <siprintf>
    HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
 80005cc:	f107 0108 	add.w	r1, r7, #8
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	2223      	movs	r2, #35	; 0x23
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <StartDefaultTask+0x90>)
 80005d6:	f002 ff44 	bl	8003462 <HAL_UART_Transmit>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
      tftp_server_run();
 80005da:	f000 faf5 	bl	8000bc8 <tftp_server_run>
 80005de:	e7fc      	b.n	80005da <StartDefaultTask+0x82>
 80005e0:	40020400 	.word	0x40020400
 80005e4:	080147cc 	.word	0x080147cc
 80005e8:	20001134 	.word	0x20001134

080005ec <MX_GPIO_Init>:
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	4b62      	ldr	r3, [pc, #392]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a61      	ldr	r2, [pc, #388]	; (8000790 <MX_GPIO_Init+0x1a4>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b5f      	ldr	r3, [pc, #380]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	61bb      	str	r3, [r7, #24]
 800061c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	4b5b      	ldr	r3, [pc, #364]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a5a      	ldr	r2, [pc, #360]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b58      	ldr	r3, [pc, #352]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b54      	ldr	r3, [pc, #336]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a53      	ldr	r2, [pc, #332]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b51      	ldr	r3, [pc, #324]	; (8000790 <MX_GPIO_Init+0x1a4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <MX_GPIO_Init+0x1a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a4c      	ldr	r2, [pc, #304]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b46      	ldr	r3, [pc, #280]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a45      	ldr	r2, [pc, #276]	; (8000790 <MX_GPIO_Init+0x1a4>)
 800067c:	f043 0308 	orr.w	r3, r3, #8
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b43      	ldr	r3, [pc, #268]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0308 	and.w	r3, r3, #8
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a3e      	ldr	r2, [pc, #248]	; (8000790 <MX_GPIO_Init+0x1a4>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <MX_GPIO_Init+0x1a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f244 0101 	movw	r1, #16385	; 0x4001
 80006b0:	4838      	ldr	r0, [pc, #224]	; (8000794 <MX_GPIO_Init+0x1a8>)
 80006b2:	f002 f9a9 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4837      	ldr	r0, [pc, #220]	; (8000798 <MX_GPIO_Init+0x1ac>)
 80006bc:	f002 f9a4 	bl	8002a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <MX_GPIO_Init+0x1b0>)
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4832      	ldr	r0, [pc, #200]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 80006d6:	f001 fff9 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80006da:	f244 0301 	movw	r3, #16385	; 0x4001
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4828      	ldr	r0, [pc, #160]	; (8000794 <MX_GPIO_Init+0x1a8>)
 80006f4:	f001 ffea 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006f8:	2340      	movs	r3, #64	; 0x40
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4822      	ldr	r0, [pc, #136]	; (8000798 <MX_GPIO_Init+0x1ac>)
 8000710:	f001 ffdc 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <MX_GPIO_Init+0x1ac>)
 8000728:	f001 ffd0 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800072c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800073e:	230a      	movs	r3, #10
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4816      	ldr	r0, [pc, #88]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 800074a:	f001 ffbf 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800074e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 8000764:	f001 ffb2 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000778:	2307      	movs	r3, #7
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0x1a8>)
 8000784:	f001 ffa2 	bl	80026cc <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3730      	adds	r7, #48	; 0x30
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020400 	.word	0x40020400
 8000798:	40021800 	.word	0x40021800
 800079c:	10110000 	.word	0x10110000
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020000 	.word	0x40020000

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fc7c 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f80b 	bl	80007ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f7ff ff1a 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007b8:	f000 fbd4 	bl	8000f64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80007bc:	f000 fc44 	bl	8001048 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c0:	f7ff feae 	bl	8000520 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007c4:	f003 fe77 	bl	80044b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x20>

080007ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b092      	sub	sp, #72	; 0x48
 80007ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	2230      	movs	r2, #48	; 0x30
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f012 fe65 	bl	80134a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000800:	230d      	movs	r3, #13
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000804:	23c3      	movs	r3, #195	; 0xc3
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800080c:	2305      	movs	r3, #5
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f002 f929 	bl	8002a6c <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000820:	f000 f81a 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2103      	movs	r1, #3
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fb7b 	bl	8002f3c <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800084c:	f000 f804 	bl	8000858 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3748      	adds	r7, #72	; 0x48
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fd66 	bl	800137a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 fc2f 	bl	800114c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008ee:	f005 ff1f 	bl	8006730 <xTaskGetSchedulerState>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d001      	beq.n	80008fc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008f8:	f006 face 	bl	8006e98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <ETH_IRQHandler+0x10>)
 8000906:	f001 f93c 	bl	8001b82 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20004274 	.word	0x20004274

08000914 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e00a      	b.n	800093c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000926:	f3af 8000 	nop.w
 800092a:	4601      	mov	r1, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	b2ca      	uxtb	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf0      	blt.n	8000926 <_read+0x12>
	}

return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e009      	b.n	8000974 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	dbf1      	blt.n	8000960 <_write+0x12>
	}
	return len;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_close>:

int _close(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
	return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
	return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d205      	bcs.n	8000a24 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <_sbrk+0x6c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	371c      	adds	r7, #28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20020000 	.word	0x20020000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200010f8 	.word	0x200010f8
 8000a50:	2000b920 	.word	0x2000b920
 8000a54:	2000b908 	.word	0x2000b908

08000a58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SystemInit+0x50>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <SystemInit+0x50>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <SystemInit+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <SystemInit+0x50>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <SystemInit+0x50>)
 8000a74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <SystemInit+0x50>)
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SystemInit+0x54>)
 8000a82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SystemInit+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x50>)
 8000a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SystemInit+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x58>)
 8000a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	24003010 	.word	0x24003010
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <tftp_file_init>:
#define PARAM_FILE_SIZE 10	// To be modified when needed

static u8_t tftp_pseudo_file[PARAM_FILE_SIZE];
static uint current_index;

void tftp_file_init() {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
	for (int i = 0; i < PARAM_FILE_SIZE; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	e015      	b.n	8000aec <tftp_file_init+0x38>
		tftp_pseudo_file[i] = (u8_t) (i % 26 + 97);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <tftp_file_init+0x50>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	10d1      	asrs	r1, r2, #3
 8000aca:	17da      	asrs	r2, r3, #31
 8000acc:	1a8a      	subs	r2, r1, r2
 8000ace:	211a      	movs	r1, #26
 8000ad0:	fb01 f202 	mul.w	r2, r1, r2
 8000ad4:	1a9a      	subs	r2, r3, r2
 8000ad6:	b2d3      	uxtb	r3, r2
 8000ad8:	3361      	adds	r3, #97	; 0x61
 8000ada:	b2d9      	uxtb	r1, r3
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <tftp_file_init+0x54>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	460a      	mov	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PARAM_FILE_SIZE; i++) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b09      	cmp	r3, #9
 8000af0:	dde6      	ble.n	8000ac0 <tftp_file_init+0xc>
	}
	current_index = 0;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <tftp_file_init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	4ec4ec4f 	.word	0x4ec4ec4f
 8000b08:	200010fc 	.word	0x200010fc
 8000b0c:	20001108 	.word	0x20001108

08000b10 <tftp_file_open>:

void * tftp_file_open(char * pfilename) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if (strcmp("param", pfilename) == 0)
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <tftp_file_open+0x2c>)
 8000b1c:	f7ff fb58 	bl	80001d0 <strcmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d104      	bne.n	8000b30 <tftp_file_open+0x20>
	{
		current_index = 0;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <tftp_file_open+0x30>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
		return tftp_pseudo_file;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <tftp_file_open+0x34>)
 8000b2e:	e000      	b.n	8000b32 <tftp_file_open+0x22>
	}
	else
		return NULL;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	080147ec 	.word	0x080147ec
 8000b40:	20001108 	.word	0x20001108
 8000b44:	200010fc 	.word	0x200010fc

08000b48 <tftp_file_getbyte>:

u8_t * tftp_file_getbyte(void * pfile) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	u8_t * byte;
	if ((pfile != NULL) && (current_index < PARAM_FILE_SIZE))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00e      	beq.n	8000b74 <tftp_file_getbyte+0x2c>
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <tftp_file_getbyte+0x3c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	d80a      	bhi.n	8000b74 <tftp_file_getbyte+0x2c>
	{
		byte = pfile + current_index;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <tftp_file_getbyte+0x3c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
		current_index++;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <tftp_file_getbyte+0x3c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <tftp_file_getbyte+0x3c>)
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e001      	b.n	8000b78 <tftp_file_getbyte+0x30>
	}
	else
	{
		byte = NULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	}
	return byte;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20001108 	.word	0x20001108

08000b88 <tftp_server_init>:
 *      Author: ayman
 */

#include <tftp_server.h>

enum tftp_err tftp_server_init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    MX_LWIP_Init();
 8000b8c:	f002 fee0 	bl	8003950 <MX_LWIP_Init>

    tftp_file_init();
 8000b90:	f7ff ff90 	bl	8000ab4 <tftp_file_init>

    tftp_server = netconn_new(NETCONN_UDP);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2020      	movs	r0, #32
 8000b9a:	f006 fbf5 	bl	8007388 <netconn_new_with_proto_and_callback>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <tftp_server_init+0x3c>)
 8000ba2:	6013      	str	r3, [r2, #0]

    if (netconn_bind(tftp_server, NULL, 69) == ERR_OK)
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <tftp_server_init+0x3c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2245      	movs	r2, #69	; 0x45
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 fc65 	bl	800747c <netconn_bind>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <tftp_server_init+0x34>
        return TFTPSERV_OK;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	e000      	b.n	8000bbe <tftp_server_init+0x36>
    else
        return TFTPSERV_ERR;
 8000bbc:	2309      	movs	r3, #9
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000110c 	.word	0x2000110c

08000bc8 <tftp_server_run>:

void tftp_server_run(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
/* On charge les donnees recues dans un buffer "buf" */
    if (netconn_recv(tftp_server, &buf) == ERR_OK) {
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <tftp_server_run+0x78>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	491c      	ldr	r1, [pc, #112]	; (8000c44 <tftp_server_run+0x7c>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f006 fdbd 	bl	8007754 <netconn_recv>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12b      	bne.n	8000c38 <tftp_server_run+0x70>
        addr = netbuf_fromaddr(buf);    // On stock l'adresse IP avec laquelle on va communiquer dans "addr"
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <tftp_server_run+0x7c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3308      	adds	r3, #8
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <tftp_server_run+0x80>)
 8000be8:	6013      	str	r3, [r2, #0]
        port = netbuf_fromport(buf);    // On stock le port de communication dans "port"
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <tftp_server_run+0x7c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	899a      	ldrh	r2, [r3, #12]
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <tftp_server_run+0x84>)
 8000bf2:	801a      	strh	r2, [r3, #0]

        /* On stock la donnee du buffer dans un tableau "dataptr" */
        if (netbuf_data(buf, (void **) &dataptr, &len) == ERR_OK) {
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <tftp_server_run+0x7c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <tftp_server_run+0x88>)
 8000bfa:	4916      	ldr	r1, [pc, #88]	; (8000c54 <tftp_server_run+0x8c>)
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f008 fa1f 	bl	8009040 <netbuf_data>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <tftp_server_run+0x70>
            /* On verifie que la requete envoyee est correcte */
            if (check_opcode(dataptr).code_validate == TFTPOP_OK) {
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <tftp_server_run+0x8c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f823 	bl	8000c58 <check_opcode>
 8000c12:	4603      	mov	r3, r0
 8000c14:	80bb      	strh	r3, [r7, #4]
 8000c16:	797b      	ldrb	r3, [r7, #5]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	d10d      	bne.n	8000c38 <tftp_server_run+0x70>
                /* On connecte le serveur à l'adresse IP "addr" via le port "port" */
                netconn_connect(tftp_server, addr, port);
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <tftp_server_run+0x78>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <tftp_server_run+0x80>)
 8000c22:	6811      	ldr	r1, [r2, #0]
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <tftp_server_run+0x84>)
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f006 fc5f 	bl	80074ec <netconn_connect>

                /* On traite la requete "RRQ" du client */
                respond_RRQ(dataptr);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <tftp_server_run+0x8c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f852 	bl	8000cdc <respond_RRQ>
            }
        }
    }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000110c 	.word	0x2000110c
 8000c44:	20001110 	.word	0x20001110
 8000c48:	20001114 	.word	0x20001114
 8000c4c:	20001118 	.word	0x20001118
 8000c50:	20001120 	.word	0x20001120
 8000c54:	2000111c 	.word	0x2000111c

08000c58 <check_opcode>:

struct opCode check_opcode(u8_t *data) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    struct opCode opcode;

    /* We check the second Byte of the opcode since the first is always '0x00' */
    switch (*(data + 1)) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d826      	bhi.n	8000cba <check_opcode+0x62>
 8000c6c:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <check_opcode+0x1c>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c89 	.word	0x08000c89
 8000c78:	08000c93 	.word	0x08000c93
 8000c7c:	08000c9d 	.word	0x08000c9d
 8000c80:	08000ca7 	.word	0x08000ca7
 8000c84:	08000cb1 	.word	0x08000cb1
        case 0x01: { // RRQ
            opcode.tftp_code = TFTPOP_RRQ;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	723b      	strb	r3, [r7, #8]
            opcode.code_validate = TFTPOP_OK;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	727b      	strb	r3, [r7, #9]
            break;
 8000c90:	e016      	b.n	8000cc0 <check_opcode+0x68>
        }
        case 0x02: { // WRQ
            opcode.tftp_code = TFTPOP_WRQ;
 8000c92:	2302      	movs	r3, #2
 8000c94:	723b      	strb	r3, [r7, #8]
            opcode.code_validate = TFTPOP_OK;
 8000c96:	2306      	movs	r3, #6
 8000c98:	727b      	strb	r3, [r7, #9]
            break;
 8000c9a:	e011      	b.n	8000cc0 <check_opcode+0x68>
        }
        case 0x03: { // DATA
            opcode.tftp_code = TFTPOP_DATA;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	723b      	strb	r3, [r7, #8]
            opcode.code_validate = TFTPOP_OK;
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	727b      	strb	r3, [r7, #9]
            break;
 8000ca4:	e00c      	b.n	8000cc0 <check_opcode+0x68>
        }
        case 0x04: { // ACK
            opcode.tftp_code = TFTPOP_ACK;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	723b      	strb	r3, [r7, #8]
            opcode.code_validate = TFTPOP_OK;
 8000caa:	2306      	movs	r3, #6
 8000cac:	727b      	strb	r3, [r7, #9]
            break;
 8000cae:	e007      	b.n	8000cc0 <check_opcode+0x68>
        }
        case 0x05: { // ERR
            opcode.tftp_code = TFTPOP_ERR;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	723b      	strb	r3, [r7, #8]
            opcode.code_validate = TFTPOP_NOK;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	727b      	strb	r3, [r7, #9]
            break;
 8000cb8:	e002      	b.n	8000cc0 <check_opcode+0x68>
        }
        default: {
            opcode.code_validate = TFTPOP_NOK;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	727b      	strb	r3, [r7, #9]
            break;
 8000cbe:	bf00      	nop
        }
    }

    return opcode;
 8000cc0:	893b      	ldrh	r3, [r7, #8]
 8000cc2:	81bb      	strh	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	f362 0307 	bfi	r3, r2, #0, #8
 8000ccc:	7b7a      	ldrb	r2, [r7, #13]
 8000cce:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <respond_RRQ>:


void respond_RRQ(u8_t *data) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    enum tftp_operation tftp_code = check_opcode(data).tftp_code;
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffb7 	bl	8000c58 <check_opcode>
 8000cea:	4603      	mov	r3, r0
 8000cec:	813b      	strh	r3, [r7, #8]
 8000cee:	7a3b      	ldrb	r3, [r7, #8]
 8000cf0:	76fb      	strb	r3, [r7, #27]
    char *filename;
    void *file;
    u8_t *file_bytes;
    if (tftp_code == TFTPOP_RRQ && jeton == 1) {
 8000cf2:	7efb      	ldrb	r3, [r7, #27]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	f040 8095 	bne.w	8000e24 <respond_RRQ+0x148>
 8000cfa:	4b92      	ldr	r3, [pc, #584]	; (8000f44 <respond_RRQ+0x268>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f040 8090 	bne.w	8000e24 <respond_RRQ+0x148>
        filename = malloc(sizeof(char));
 8000d04:	2001      	movs	r0, #1
 8000d06:	f012 fba9 	bl	801345c <malloc>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	617b      	str	r3, [r7, #20]
        file_bytes = malloc(sizeof(u8_t));
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f012 fba4 	bl	801345c <malloc>
 8000d14:	4603      	mov	r3, r0
 8000d16:	613b      	str	r3, [r7, #16]
        dataToSend = malloc(sizeof(u8_t));
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f012 fb9f 	bl	801345c <malloc>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b89      	ldr	r3, [pc, #548]	; (8000f48 <respond_RRQ+0x26c>)
 8000d24:	601a      	str	r2, [r3, #0]

        // Signal that the server is treating a RRQ and that any other RRQ should wait
        jeton = 0;
 8000d26:	4b87      	ldr	r3, [pc, #540]	; (8000f44 <respond_RRQ+0x268>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]

        // Copy the filename within the RRQ packet in "filename"
        strcpy(filename, data + 2);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3302      	adds	r3, #2
 8000d30:	4619      	mov	r1, r3
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f012 fce4 	bl	8013700 <strcpy>

        // Counts the blocks sent
        block_counter = 1;
 8000d38:	4b84      	ldr	r3, [pc, #528]	; (8000f4c <respond_RRQ+0x270>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	801a      	strh	r2, [r3, #0]

        if ((file = tftp_file_open(filename)) != NULL) {
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff fee6 	bl	8000b10 <tftp_file_open>
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80f7 	beq.w	8000f3c <respond_RRQ+0x260>
            // The DATA to send "dataToSend" to the client
            dataToSend[0] = 0;
 8000d4e:	4b7e      	ldr	r3, [pc, #504]	; (8000f48 <respond_RRQ+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
            dataToSend[1] = 3;
 8000d56:	4b7c      	ldr	r3, [pc, #496]	; (8000f48 <respond_RRQ+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	701a      	strb	r2, [r3, #0]
            dataToSend[2] = block_counter >> 8;
 8000d60:	4b7a      	ldr	r3, [pc, #488]	; (8000f4c <respond_RRQ+0x270>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b77      	ldr	r3, [pc, #476]	; (8000f48 <respond_RRQ+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	701a      	strb	r2, [r3, #0]
            dataToSend[3] = block_counter;
 8000d72:	4b76      	ldr	r3, [pc, #472]	; (8000f4c <respond_RRQ+0x270>)
 8000d74:	881a      	ldrh	r2, [r3, #0]
 8000d76:	4b74      	ldr	r3, [pc, #464]	; (8000f48 <respond_RRQ+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3303      	adds	r3, #3
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	701a      	strb	r2, [r3, #0]

            // Counts the bytes within the file "param"
            byte_counter = 0;
 8000d80:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <respond_RRQ+0x274>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]

            // Copy the data from "param" to "dataToSend"
            while ((file_bytes = tftp_file_getbyte(file)) != NULL) {
 8000d86:	e00d      	b.n	8000da4 <respond_RRQ+0xc8>
                *(dataToSend + 4 + byte_counter) = *file_bytes;
 8000d88:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <respond_RRQ+0x26c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <respond_RRQ+0x274>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3304      	adds	r3, #4
 8000d92:	4413      	add	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	701a      	strb	r2, [r3, #0]
                byte_counter++;
 8000d9a:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <respond_RRQ+0x274>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a6b      	ldr	r2, [pc, #428]	; (8000f50 <respond_RRQ+0x274>)
 8000da2:	6013      	str	r3, [r2, #0]
            while ((file_bytes = tftp_file_getbyte(file)) != NULL) {
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff fecf 	bl	8000b48 <tftp_file_getbyte>
 8000daa:	6138      	str	r0, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ea      	bne.n	8000d88 <respond_RRQ+0xac>
            }

            // Signals the number of blocks of 512 Bytes within the "param" file
            blocksToSend = ((byte_counter) / 513) + 1;
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <respond_RRQ+0x274>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a67      	ldr	r2, [pc, #412]	; (8000f54 <respond_RRQ+0x278>)
 8000db8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbc:	1212      	asrs	r2, r2, #8
 8000dbe:	17db      	asrs	r3, r3, #31
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <respond_RRQ+0x27c>)
 8000dca:	801a      	strh	r2, [r3, #0]

            // Free the buffer so we can receive new data in it
            netbuf_delete(buf);
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <respond_RRQ+0x280>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 f8cb 	bl	8008f6c <netbuf_delete>

            // Move "dataToSend" in "buf->ptr->payload"
            if (blocksToSend == 1) // DATA to send <= 512 Bytes
 8000dd6:	4b60      	ldr	r3, [pc, #384]	; (8000f58 <respond_RRQ+0x27c>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10c      	bne.n	8000df8 <respond_RRQ+0x11c>
            {
                // Move all data to the buffer "buf"
                netbuf_ref(buf, dataToSend, byte_counter + 4);
 8000dde:	4b5f      	ldr	r3, [pc, #380]	; (8000f5c <respond_RRQ+0x280>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <respond_RRQ+0x26c>)
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	4b5a      	ldr	r3, [pc, #360]	; (8000f50 <respond_RRQ+0x274>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3304      	adds	r3, #4
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	f008 f8db 	bl	8008fac <netbuf_ref>
 8000df6:	e00c      	b.n	8000e12 <respond_RRQ+0x136>
            } else if (blocksToSend > 1) // DATA to send > 512 Bytes
 8000df8:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <respond_RRQ+0x27c>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d908      	bls.n	8000e12 <respond_RRQ+0x136>
            {
                // Move 516 Bytes of data to the buffer: 2(opcode)+2(block_counter)+512(dataToSend)
                netbuf_ref(buf, dataToSend, 516);
 8000e00:	4b56      	ldr	r3, [pc, #344]	; (8000f5c <respond_RRQ+0x280>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a50      	ldr	r2, [pc, #320]	; (8000f48 <respond_RRQ+0x26c>)
 8000e06:	6811      	ldr	r1, [r2, #0]
 8000e08:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f008 f8cd 	bl	8008fac <netbuf_ref>
            }

            // Send the buffer using the netconn "tftp_server"
            netconn_send(tftp_server, buf);
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <respond_RRQ+0x284>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <respond_RRQ+0x280>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f006 fd11 	bl	8007844 <netconn_send>
        if ((file = tftp_file_open(filename)) != NULL) {
 8000e22:	e08b      	b.n	8000f3c <respond_RRQ+0x260>
        /*
         * The server should already be responding to a request: jeton = 0
         * The ACK operation for receiving data
         * The block_counter of data should be the same as the block_counter of the ACK
         */
    else if (tftp_code == TFTPOP_ACK && jeton == 0
 8000e24:	7efb      	ldrb	r3, [r7, #27]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	f040 8088 	bne.w	8000f3c <respond_RRQ+0x260>
 8000e2c:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <respond_RRQ+0x268>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 8083 	bne.w	8000f3c <respond_RRQ+0x260>
             && *(data + 2) == (block_counter >> 8) && *(data + 3) == block_counter) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <respond_RRQ+0x270>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d178      	bne.n	8000f3c <respond_RRQ+0x260>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <respond_RRQ+0x270>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d170      	bne.n	8000f3c <respond_RRQ+0x260>
        netbuf_delete(buf);
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <respond_RRQ+0x280>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 f884 	bl	8008f6c <netbuf_delete>

        // Increment the block_counter
        block_counter++;
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <respond_RRQ+0x270>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <respond_RRQ+0x270>)
 8000e6e:	801a      	strh	r2, [r3, #0]

        // Move the 512 Bytes of "dataToSend" concerned for this transfer to make treatment easier
        for (int i = 4; i < 516; i++)
 8000e70:	2304      	movs	r3, #4
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	e012      	b.n	8000e9c <respond_RRQ+0x1c0>
            *(dataToSend + i) = *(dataToSend + (512 * (block_counter - 1)) + i);
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <respond_RRQ+0x26c>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <respond_RRQ+0x270>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	025b      	lsls	r3, r3, #9
 8000e82:	4619      	mov	r1, r3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	440b      	add	r3, r1
 8000e88:	441a      	add	r2, r3
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <respond_RRQ+0x26c>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	440b      	add	r3, r1
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	701a      	strb	r2, [r3, #0]
        for (int i = 4; i < 516; i++)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8000ea2:	dbe8      	blt.n	8000e76 <respond_RRQ+0x19a>

        // Updating the block_counter for the "dataToSend"
        dataToSend[2] = block_counter >> 8;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <respond_RRQ+0x270>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <respond_RRQ+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	701a      	strb	r2, [r3, #0]
        dataToSend[3] = block_counter;
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <respond_RRQ+0x270>)
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <respond_RRQ+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3303      	adds	r3, #3
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]

        if (block_counter >= blocksToSend) // Last 512 Bytes of "dataToSend"
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <respond_RRQ+0x270>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <respond_RRQ+0x27c>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d323      	bcc.n	8000f18 <respond_RRQ+0x23c>
        {
            // Move the remaining data to the buffer
            netbuf_ref(buf, dataToSend, (byte_counter % 512) + 4);
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <respond_RRQ+0x280>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <respond_RRQ+0x26c>)
 8000ed6:	6819      	ldr	r1, [r3, #0]
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <respond_RRQ+0x274>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	425a      	negs	r2, r3
 8000ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ee6:	bf58      	it	pl
 8000ee8:	4253      	negpl	r3, r2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3304      	adds	r3, #4
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f008 f85b 	bl	8008fac <netbuf_ref>
            // Send the buffer through the netconn "tftp_server"
            netconn_send(tftp_server, buf);
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <respond_RRQ+0x284>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <respond_RRQ+0x280>)
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 fc9f 	bl	8007844 <netconn_send>

            // Disconnect the netconn "tftp_server" from its current peer
            netconn_disconnect(tftp_server);
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <respond_RRQ+0x284>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fb26 	bl	800755c <netconn_disconnect>

            // The server can treat a new "RRQ"
            jeton = 1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <respond_RRQ+0x268>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
            netconn_send(tftp_server, buf);
        }
    }


}
 8000f16:	e011      	b.n	8000f3c <respond_RRQ+0x260>
            netbuf_ref(buf, dataToSend, 516);
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <respond_RRQ+0x280>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <respond_RRQ+0x26c>)
 8000f1e:	6811      	ldr	r1, [r2, #0]
 8000f20:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 f841 	bl	8008fac <netbuf_ref>
            netconn_send(tftp_server, buf);
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <respond_RRQ+0x284>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <respond_RRQ+0x280>)
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 fc85 	bl	8007844 <netconn_send>
}
 8000f3a:	e7ff      	b.n	8000f3c <respond_RRQ+0x260>
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20001124 	.word	0x20001124
 8000f4c:	20001128 	.word	0x20001128
 8000f50:	2000112c 	.word	0x2000112c
 8000f54:	7fc01ff1 	.word	0x7fc01ff1
 8000f58:	20001130 	.word	0x20001130
 8000f5c:	20001110 	.word	0x20001110
 8000f60:	2000110c 	.word	0x2000110c

08000f64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART3_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	f002 fa14 	bl	80033c8 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f7ff fc57 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20001134 	.word	0x20001134
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_UART_MspInit+0x84>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12c      	bne.n	8001034 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_UART_MspInit+0x88>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_UART_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001024:	2307      	movs	r3, #7
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_UART_MspInit+0x8c>)
 8001030:	f001 fb4c 	bl	80026cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40004800 	.word	0x40004800
 8001040:	40023800 	.word	0x40023800
 8001044:	40020c00 	.word	0x40020c00

08001048 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001058:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
  ldr  r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001072:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800107e:	f7ff fceb 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f012 f9c7 	bl	8013414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fb8f 	bl	80007a8 <main>
  bx  lr
 800108a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001090:	08017128 	.word	0x08017128
  ldr  r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001098:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800109c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80010a0:	2000b91c 	.word	0x2000b91c

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f947 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fbc2 	bl	8000864 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f95f 	bl	80013ce <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f927 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20001174 	.word	0x20001174

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20001174 	.word	0x20001174

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff fff0 	bl	8001170 <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffe0 	bl	8001170 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000000c 	.word	0x2000000c

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4906      	ldr	r1, [pc, #24]	; (8001264 <__NVIC_EnableIRQ+0x34>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff90 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff2d 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff42 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff90 	bl	80012bc <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5f 	bl	8001268 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff35 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa2 	bl	8001320 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80013f8:	4ba3      	ldr	r3, [pc, #652]	; (8001688 <HAL_ETH_Init+0x2a0>)
 80013fa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e173      	b.n	80016f6 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f002 fbf2 	bl	8003c0c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	4b97      	ldr	r3, [pc, #604]	; (800168c <HAL_ETH_Init+0x2a4>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_ETH_Init+0x2a4>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6453      	str	r3, [r2, #68]	; 0x44
 8001438:	4b94      	ldr	r3, [pc, #592]	; (800168c <HAL_ETH_Init+0x2a4>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_ETH_Init+0x2a8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a91      	ldr	r2, [pc, #580]	; (8001690 <HAL_ETH_Init+0x2a8>)
 800144a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800144e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001450:	4b8f      	ldr	r3, [pc, #572]	; (8001690 <HAL_ETH_Init+0x2a8>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	498d      	ldr	r1, [pc, #564]	; (8001690 <HAL_ETH_Init+0x2a8>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001474:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001476:	f7ff fe7b 	bl	8001170 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800147c:	e011      	b.n	80014a2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800147e:	f7ff fe77 	bl	8001170 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800148c:	d909      	bls.n	80014a2 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2203      	movs	r2, #3
 8001492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e129      	b.n	80016f6 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e4      	bne.n	800147e <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f023 031c 	bic.w	r3, r3, #28
 80014c2:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014c4:	f001 ff32 	bl	800332c <HAL_RCC_GetHCLKFreq>
 80014c8:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4a71      	ldr	r2, [pc, #452]	; (8001694 <HAL_ETH_Init+0x2ac>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d908      	bls.n	80014e4 <HAL_ETH_Init+0xfc>
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4a70      	ldr	r2, [pc, #448]	; (8001698 <HAL_ETH_Init+0x2b0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d804      	bhi.n	80014e4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e01a      	b.n	800151a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4a6c      	ldr	r2, [pc, #432]	; (8001698 <HAL_ETH_Init+0x2b0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d908      	bls.n	80014fe <HAL_ETH_Init+0x116>
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	4a66      	ldr	r2, [pc, #408]	; (8001688 <HAL_ETH_Init+0x2a0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d204      	bcs.n	80014fe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f043 030c 	orr.w	r3, r3, #12
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e00d      	b.n	800151a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4a61      	ldr	r2, [pc, #388]	; (8001688 <HAL_ETH_Init+0x2a0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d303      	bcc.n	800150e <HAL_ETH_Init+0x126>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4a64      	ldr	r2, [pc, #400]	; (800169c <HAL_ETH_Init+0x2b4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d904      	bls.n	8001518 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e000      	b.n	800151a <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001518:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fc08 	bl	8001d3e <HAL_ETH_WritePHYRegister>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fdbe 	bl	80020bc <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0d4      	b.n	80016f6 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800154c:	20ff      	movs	r0, #255	; 0xff
 800154e:	f7ff fe19 	bl	8001184 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80a2 	beq.w	80016a0 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fe08 	bl	8001170 <HAL_GetTick>
 8001560:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	461a      	mov	r2, r3
 8001568:	2101      	movs	r1, #1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fb7f 	bl	8001c6e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001570:	f7ff fdfe 	bl	8001170 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d90f      	bls.n	80015a2 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fd97 	bl	80020bc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0a9      	b.n	80016f6 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0da      	beq.n	8001562 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fbc3 	bl	8001d3e <HAL_ETH_WritePHYRegister>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015c2:	6939      	ldr	r1, [r7, #16]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fd79 	bl	80020bc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08f      	b.n	80016f6 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80015d6:	f7ff fdcb 	bl	8001170 <HAL_GetTick>
 80015da:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	461a      	mov	r2, r3
 80015e2:	2101      	movs	r1, #1
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fb42 	bl	8001c6e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015ea:	f7ff fdc1 	bl	8001170 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d90f      	bls.n	800161c <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fd5a 	bl	80020bc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e06c      	b.n	80016f6 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0da      	beq.n	80015dc <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	461a      	mov	r2, r3
 800162c:	2110      	movs	r1, #16
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fb1d 	bl	8001c6e <HAL_ETH_ReadPHYRegister>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800163e:	6939      	ldr	r1, [r7, #16]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fd3b 	bl	80020bc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e051      	b.n	80016f6 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	e002      	b.n	800166c <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e032      	b.n	80016e4 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	e02d      	b.n	80016e4 <HAL_ETH_Init+0x2fc>
 8001688:	03938700 	.word	0x03938700
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	01312cff 	.word	0x01312cff
 8001698:	02160ebf 	.word	0x02160ebf
 800169c:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fb40 	bl	8001d3e <HAL_ETH_WritePHYRegister>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016c8:	6939      	ldr	r1, [r7, #16]
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fcf6 	bl	80020bc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e00c      	b.n	80016f6 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016dc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016e0:	f7ff fd50 	bl	8001184 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016e4:	6939      	ldr	r1, [r7, #16]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fce8 	bl	80020bc <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop

08001700 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_ETH_DMATxDescListInit+0x20>
 800171c:	2302      	movs	r3, #2
 800171e:	e051      	b.n	80017c4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e030      	b.n	800179e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	4413      	add	r3, r2
 8001744:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800174c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	461a      	mov	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3b01      	subs	r3, #1
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	d208      	bcs.n	8001792 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	015b      	lsls	r3, r3, #5
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	461a      	mov	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	e002      	b.n	8001798 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3ca      	bcc.n	800173c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b0:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ETH_DMARxDescListInit+0x20>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e055      	b.n	800189a <HAL_ETH_DMARxDescListInit+0xcc>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e034      	b.n	8001874 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800181a:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001822:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	461a      	mov	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	d208      	bcs.n	8001868 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	e002      	b.n	800186e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3c6      	bcc.n	800180a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001886:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ETH_TransmitFrame+0x24>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e0cc      	b.n	8001a62 <HAL_ETH_TransmitFrame+0x1be>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0b7      	b.n	8001a62 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da09      	bge.n	8001910 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2212      	movs	r2, #18
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0a8      	b.n	8001a62 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001916:	4293      	cmp	r3, r2
 8001918:	d915      	bls.n	8001946 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	4a53      	ldr	r2, [pc, #332]	; (8001a6c <HAL_ETH_TransmitFrame+0x1c8>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0a9b      	lsrs	r3, r3, #10
 8001924:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <HAL_ETH_TransmitFrame+0x1c8>)
 800192a:	fba3 1302 	umull	r1, r3, r3, r2
 800192e:	0a9b      	lsrs	r3, r3, #10
 8001930:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e001      	b.n	800194a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d11c      	bne.n	800198a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800195e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800196a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800197a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
 8001988:	e04b      	b.n	8001a22 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e044      	b.n	8001a1a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800199e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019b4:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019be:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d116      	bne.n	80019f8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019d8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_ETH_TransmitFrame+0x1cc>)
 80019de:	fb03 f202 	mul.w	r2, r3, r2
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019ea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019f6:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a06:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	3301      	adds	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3b6      	bcc.n	8001990 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2304      	movs	r3, #4
 8001a40:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	ac02b00b 	.word	0xac02b00b
 8001a70:	fffffa0c 	.word	0xfffffa0c

08001a74 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e074      	b.n	8001b78 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a9e:	e05a      	b.n	8001b56 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	461a      	mov	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad0:	e041      	b.n	8001b56 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10b      	bne.n	8001af8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
 8001af6:	e02e      	b.n	8001b56 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d103      	bne.n	8001b1a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b26:	1f1a      	subs	r2, r3, #4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e010      	b.n	8001b78 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db02      	blt.n	8001b66 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d99c      	bls.n	8001aa0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b98:	2b40      	cmp	r3, #64	; 0x40
 8001b9a:	d112      	bne.n	8001bc2 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f002 f903 	bl	8003da8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	461a      	mov	r2, r3
 8001bac:	2340      	movs	r3, #64	; 0x40
 8001bae:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bc0:	e01a      	b.n	8001bf8 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d111      	bne.n	8001bf8 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f838 	bl	8001c4a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	461a      	mov	r2, r3
 8001be4:	2301      	movs	r3, #1
 8001be6:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c00:	461a      	mov	r2, r3
 8001c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c06:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1a:	d112      	bne.n	8001c42 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f81d 	bl	8001c5c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c30:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	460b      	mov	r3, r1
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b82      	cmp	r3, #130	; 0x82
 8001c8e:	d101      	bne.n	8001c94 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c90:	2302      	movs	r3, #2
 8001c92:	e050      	b.n	8001d36 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2282      	movs	r2, #130	; 0x82
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 031c 	and.w	r3, r3, #28
 8001caa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8a1b      	ldrh	r3, [r3, #16]
 8001cb0:	02db      	lsls	r3, r3, #11
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f023 0302 	bic.w	r3, r3, #2
 8001cce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce0:	f7ff fa46 	bl	8001170 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ce6:	e015      	b.n	8001d14 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ce8:	f7ff fa42 	bl	8001170 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf6:	d309      	bcc.n	8001d0c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e014      	b.n	8001d36 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1e4      	bne.n	8001ce8 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	460b      	mov	r3, r1
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b42      	cmp	r3, #66	; 0x42
 8001d5e:	d101      	bne.n	8001d64 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
 8001d62:	e04e      	b.n	8001e02 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2242      	movs	r2, #66	; 0x42
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 031c 	and.w	r3, r3, #28
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8a1b      	ldrh	r3, [r3, #16]
 8001d80:	02db      	lsls	r3, r3, #11
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dba:	f7ff f9d9 	bl	8001170 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc0:	e015      	b.n	8001dee <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dc2:	f7ff f9d5 	bl	8001170 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d309      	bcc.n	8001de6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e00d      	b.n	8001e02 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e4      	bne.n	8001dc2 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ETH_Start+0x16>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e01f      	b.n	8001e60 <HAL_ETH_Start+0x56>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fb3f 	bl	80024b4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fb76 	bl	8002528 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fc01 	bl	8002644 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fbaa 	bl	800259c <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fbd1 	bl	80025f0 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ETH_Stop+0x16>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e01f      	b.n	8001ebe <HAL_ETH_Stop+0x56>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb99 	bl	80025c6 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fbc0 	bl	800261a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fb61 	bl	8002562 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fbcf 	bl	8002644 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fb21 	bl	80024ee <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ETH_ConfigMAC+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0e4      	b.n	80020ae <HAL_ETH_ConfigMAC+0x1e6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b1 	beq.w	800205e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001f14:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001f1a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001f20:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001f26:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001f2c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001f32:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001f38:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001f3e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001f44:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001f4a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001f50:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001f56:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff f908 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f84:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f8a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f90:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001f96:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f9c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001fa2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001fae:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001fb0:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff f8e2 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fd0:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fda:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ff8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ffe:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002004:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 800200a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002010:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff f8ab 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff f898 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	61da      	str	r2, [r3, #28]
 800205c:	e01e      	b.n	800209c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800206c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff f878 	bl	8001184 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	ff20810f 	.word	0xff20810f

080020bc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0b0      	sub	sp, #192	; 0xc0
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d8:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020e0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	663b      	str	r3, [r7, #96]	; 0x60
 8002108:	e001      	b.n	800210e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002118:	2300      	movs	r3, #0
 800211a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002128:	2340      	movs	r3, #64	; 0x40
 800212a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002190:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002194:	4baa      	ldr	r3, [pc, #680]	; (8002440 <ETH_MACDMAConfig+0x384>)
 8002196:	4013      	ands	r3, r2
 8002198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800219c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800219e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80021a0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80021a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80021a4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80021a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80021a8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80021ae:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80021b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80021b2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80021b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80021b6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80021bc:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80021be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80021c0:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80021c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80021c4:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80021c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80021c8:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80021ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80021cc:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80021ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80021d0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80021d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7fe ffc7 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002200:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002204:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002208:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800220a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800220e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002214:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800221a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800221c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002220:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002224:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800222c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800222e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223a:	2001      	movs	r0, #1
 800223c:	f7fe ffa2 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002248:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002252:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800225c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002268:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002270:	4013      	ands	r3, r2
 8002272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800227a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800227c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002280:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002286:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800228c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800228e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002292:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002294:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002298:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800229a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ac:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7fe ff63 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c6:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80022c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80022cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7fe ff4e 	bl	8001184 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f0:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fa:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002300:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002304:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002316:	2304      	movs	r3, #4
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800231a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800232c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002336:	2300      	movs	r3, #0
 8002338:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800233a:	2300      	movs	r3, #0
 800233c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800234c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002350:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <ETH_MACDMAConfig+0x388>)
 8002352:	4013      	ands	r3, r2
 8002354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002358:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800235a:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800235c:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800235e:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8002360:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002362:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002364:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002366:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002368:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800236a:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800236c:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800236e:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002370:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002374:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002378:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800237a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	461a      	mov	r2, r3
 800238e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002392:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7fe feee 	bl	8001184 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	461a      	mov	r2, r3
 80023b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023b6:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80023b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80023bc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80023c0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023c4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80023c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80023c8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80023ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023cc:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80023ce:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80023d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80023d2:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e0:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7fe fec7 	bl	8001184 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fe:	461a      	mov	r2, r3
 8002400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002404:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10d      	bne.n	800242a <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002428:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	461a      	mov	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f808 	bl	8002448 <ETH_MACAddressConfig>
}
 8002438:	bf00      	nop
 800243a:	37c0      	adds	r7, #192	; 0xc0
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	ff20810f 	.word	0xff20810f
 8002444:	f8de3f23 	.word	0xf8de3f23

08002448 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3305      	adds	r3, #5
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	3204      	adds	r2, #4
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <ETH_MACAddressConfig+0x64>)
 800246a:	4413      	add	r3, r2
 800246c:	461a      	mov	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3303      	adds	r3, #3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	061a      	lsls	r2, r3, #24
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3302      	adds	r3, #2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3301      	adds	r3, #1
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	4313      	orrs	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <ETH_MACAddressConfig+0x68>)
 800249a:	4413      	add	r3, r2
 800249c:	461a      	mov	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6013      	str	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40028040 	.word	0x40028040
 80024b0:	40028044 	.word	0x40028044

080024b4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f000 f8d9 	bl	8002690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002512:	2001      	movs	r0, #1
 8002514:	f000 f8bc 	bl	8002690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0204 	orr.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f000 f89f 	bl	8002690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0204 	bic.w	r2, r2, #4
 800257c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f882 	bl	8002690 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ba:	6193      	str	r3, [r2, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025e4:	6193      	str	r3, [r2, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800260e:	6193      	str	r3, [r2, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	f023 0302 	bic.w	r3, r3, #2
 8002634:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002638:	6193      	str	r3, [r2, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002666:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002674:	2001      	movs	r0, #1
 8002676:	f000 f80b 	bl	8002690 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002684:	6193      	str	r3, [r2, #24]
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <ETH_Delay+0x34>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <ETH_Delay+0x38>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a5b      	lsrs	r3, r3, #9
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ac:	bf00      	nop
  }
  while (Delay --);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e5a      	subs	r2, r3, #1
 80026b2:	60fa      	str	r2, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <ETH_Delay+0x1c>
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000000 	.word	0x20000000
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e16f      	b.n	80029bc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8161 	beq.w	80029b6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d00b      	beq.n	8002714 <HAL_GPIO_Init+0x48>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d007      	beq.n	8002714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002708:	2b11      	cmp	r3, #17
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b12      	cmp	r3, #18
 8002712:	d130      	bne.n	8002776 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274a:	2201      	movs	r2, #1
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	f003 0201 	and.w	r2, r3, #1
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0xea>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	d123      	bne.n	80027fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	6939      	ldr	r1, [r7, #16]
 80027fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80bb 	beq.w	80029b6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 800284a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284e:	6453      	str	r3, [r2, #68]	; 0x44
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800285c:	4a5f      	ldr	r2, [pc, #380]	; (80029dc <HAL_GPIO_Init+0x310>)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_GPIO_Init+0x314>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d031      	beq.n	80028ec <HAL_GPIO_Init+0x220>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_GPIO_Init+0x318>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d02b      	beq.n	80028e8 <HAL_GPIO_Init+0x21c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <HAL_GPIO_Init+0x31c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d025      	beq.n	80028e4 <HAL_GPIO_Init+0x218>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_GPIO_Init+0x320>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01f      	beq.n	80028e0 <HAL_GPIO_Init+0x214>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <HAL_GPIO_Init+0x324>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d019      	beq.n	80028dc <HAL_GPIO_Init+0x210>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_GPIO_Init+0x328>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_GPIO_Init+0x20c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_GPIO_Init+0x32c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00d      	beq.n	80028d4 <HAL_GPIO_Init+0x208>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_GPIO_Init+0x330>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x334>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_GPIO_Init+0x200>
 80028c8:	2308      	movs	r3, #8
 80028ca:	e010      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028cc:	2309      	movs	r3, #9
 80028ce:	e00e      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028d0:	2307      	movs	r3, #7
 80028d2:	e00c      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028d4:	2306      	movs	r3, #6
 80028d6:	e00a      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028d8:	2305      	movs	r3, #5
 80028da:	e008      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028dc:	2304      	movs	r3, #4
 80028de:	e006      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e004      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e002      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_GPIO_Init+0x222>
 80028ec:	2300      	movs	r3, #0
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	f002 0203 	and.w	r2, r2, #3
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	4093      	lsls	r3, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002900:	4936      	ldr	r1, [pc, #216]	; (80029dc <HAL_GPIO_Init+0x310>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_GPIO_Init+0x338>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_GPIO_Init+0x338>)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_GPIO_Init+0x338>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_GPIO_Init+0x338>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_GPIO_Init+0x338>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_GPIO_Init+0x338>)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_GPIO_Init+0x338>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <HAL_GPIO_Init+0x338>)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f47f ae88 	bne.w	80026dc <HAL_GPIO_Init+0x10>
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40021400 	.word	0x40021400
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021c00 	.word	0x40021c00
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
 8002a14:	4613      	mov	r3, r2
 8002a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a18:	787b      	ldrb	r3, [r7, #1]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a24:	e003      	b.n	8002a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	619a      	str	r2, [r3, #24]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	041a      	lsls	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b090      	sub	sp, #64	; 0x40
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e252      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d050      	beq.n	8002b2c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8a:	4b9e      	ldr	r3, [pc, #632]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b9b      	ldr	r3, [pc, #620]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4b94      	ldr	r3, [pc, #592]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d036      	beq.n	8002b2a <HAL_RCC_OscConfig+0xbe>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d132      	bne.n	8002b2a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e22d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4b8e      	ldr	r3, [pc, #568]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe fb49 	bl	8001170 <HAL_GetTick>
 8002ade:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fb45 	bl	8001170 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	; 0x64
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e217      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af4:	4b83      	ldr	r3, [pc, #524]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x76>
 8002b00:	e014      	b.n	8002b2c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fb35 	bl	8001170 <HAL_GetTick>
 8002b06:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fb31 	bl	8001170 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	; 0x64
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e203      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1c:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x9e>
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d077      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b38:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b44:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d126      	bne.n	8002b9e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b50:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d120      	bne.n	8002b9e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5c:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_OscConfig+0x108>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e1d7      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	21f8      	movs	r1, #248	; 0xf8
 8002b82:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b86:	fa91 f1a1 	rbit	r1, r1
 8002b8a:	62f9      	str	r1, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b8e:	fab1 f181 	clz	r1, r1
 8002b92:	b2c9      	uxtb	r1, r1
 8002b94:	408b      	lsls	r3, r1
 8002b96:	495b      	ldr	r1, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9c:	e044      	b.n	8002c28 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d02a      	beq.n	8002bfc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba6:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_OscConfig+0x2a0>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fae0 	bl	8001170 <HAL_GetTick>
 8002bb0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fadc 	bl	8001170 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1ae      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	21f8      	movs	r1, #248	; 0xf8
 8002be0:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be4:	fa91 f1a1 	rbit	r1, r1
 8002be8:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8002bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bec:	fab1 f181 	clz	r1, r1
 8002bf0:	b2c9      	uxtb	r1, r1
 8002bf2:	408b      	lsls	r3, r1
 8002bf4:	4943      	ldr	r1, [pc, #268]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
 8002bfa:	e015      	b.n	8002c28 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <HAL_RCC_OscConfig+0x2a0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe fab5 	bl	8001170 <HAL_GetTick>
 8002c06:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fab1 	bl	8001170 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e183      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d030      	beq.n	8002c96 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d016      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fa95 	bl	8001170 <HAL_GetTick>
 8002c46:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fa91 	bl	8001170 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e163      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5c:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1de>
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c70:	f7fe fa7e 	bl	8001170 <HAL_GetTick>
 8002c74:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe fa7a 	bl	8001170 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e14c      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8087 	beq.w	8002db2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d110      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_RCC_OscConfig+0x298>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d122      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_RCC_OscConfig+0x2a8>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fa38 	bl	8001170 <HAL_GetTick>
 8002d00:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	e012      	b.n	8002d2a <HAL_RCC_OscConfig+0x2be>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40023802 	.word	0x40023802
 8002d0c:	42470000 	.word	0x42470000
 8002d10:	42470e80 	.word	0x42470e80
 8002d14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe fa2a 	bl	8001170 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0fc      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <HAL_RCC_OscConfig+0x4c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7fe fa12 	bl	8001170 <HAL_GetTick>
 8002d4c:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fa0e 	bl	8001170 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0de      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ee      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2e4>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d74:	f7fe f9fc 	bl	8001170 <HAL_GetTick>
 8002d78:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f9f8 	bl	8001170 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0c8      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1ee      	bne.n	8002d7c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a62      	ldr	r2, [pc, #392]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80b3 	beq.w	8002f22 <HAL_RCC_OscConfig+0x4b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dbc:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d07d      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x458>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d162      	bne.n	8002e96 <HAL_RCC_OscConfig+0x42a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe f9cb 	bl	8001170 <HAL_GetTick>
 8002dda:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe f9c7 	bl	8001170 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e099      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002e0e:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6939      	ldr	r1, [r7, #16]
 8002e12:	fa91 f1a1 	rbit	r1, r1
 8002e16:	60f9      	str	r1, [r7, #12]
  return result;
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	fab1 f181 	clz	r1, r1
 8002e1e:	b2c9      	uxtb	r1, r1
 8002e20:	408b      	lsls	r3, r1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002e30:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	fa91 f1a1 	rbit	r1, r1
 8002e38:	6179      	str	r1, [r7, #20]
  return result;
 8002e3a:	6979      	ldr	r1, [r7, #20]
 8002e3c:	fab1 f181 	clz	r1, r1
 8002e40:	b2c9      	uxtb	r1, r1
 8002e42:	408b      	lsls	r3, r1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002e4e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6a39      	ldr	r1, [r7, #32]
 8002e52:	fa91 f1a1 	rbit	r1, r1
 8002e56:	61f9      	str	r1, [r7, #28]
  return result;
 8002e58:	69f9      	ldr	r1, [r7, #28]
 8002e5a:	fab1 f181 	clz	r1, r1
 8002e5e:	b2c9      	uxtb	r1, r1
 8002e60:	408b      	lsls	r3, r1
 8002e62:	4934      	ldr	r1, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f97f 	bl	8001170 <HAL_GetTick>
 8002e72:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f97b 	bl	8001170 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e04d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x40a>
 8002e94:	e045      	b.n	8002f22 <HAL_RCC_OscConfig+0x4b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe f968 	bl	8001170 <HAL_GetTick>
 8002ea0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x44a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe f964 	bl	8001170 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x44a>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e036      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x438>
 8002ec2:	e02e      	b.n	8002f22 <HAL_RCC_OscConfig+0x4b6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e029      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_RCC_OscConfig+0x4c8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d11c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4b2>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d115      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4b2>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4b2>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4b2>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3740      	adds	r7, #64	; 0x40
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	40023870 	.word	0x40023870
 8002f34:	40023800 	.word	0x40023800
 8002f38:	42470060 	.word	0x42470060

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d2      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d90c      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0be      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a5b      	ldr	r2, [pc, #364]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002fa8:	4b56      	ldr	r3, [pc, #344]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a55      	ldr	r2, [pc, #340]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4950      	ldr	r1, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d040      	beq.n	8003054 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e085      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b44      	ldr	r3, [pc, #272]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e079      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e071      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003012:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4939      	ldr	r1, [pc, #228]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003024:	f7fe f8a4 	bl	8001170 <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	e00a      	b.n	8003042 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302c:	f7fe f8a0 	bl	8001170 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e059      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 020c 	and.w	r2, r3, #12
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d1eb      	bne.n	800302c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d20c      	bcs.n	800307c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e03c      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	491b      	ldr	r1, [pc, #108]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4913      	ldr	r1, [pc, #76]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80030ba:	f000 f82b 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030be:	4601      	mov	r1, r0
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c8:	22f0      	movs	r2, #240	; 0xf0
 80030ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	60fa      	str	r2, [r7, #12]
  return result;
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	fab2 f282 	clz	r2, r2
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	40d3      	lsrs	r3, r2
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1cc>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	fa21 f303 	lsr.w	r3, r1, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1d0>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1d4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fffc 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00
 8003104:	40023800 	.word	0x40023800
 8003108:	08016f3c 	.word	0x08016f3c
 800310c:	20000000 	.word	0x20000000
 8003110:	20000008 	.word	0x20000008

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003118:	b094      	sub	sp, #80	; 0x50
 800311a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
 8003120:	2300      	movs	r3, #0
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003124:	2300      	movs	r3, #0
 8003126:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312c:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <HAL_RCC_GetSysClockFreq+0x20c>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d00d      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x40>
 8003138:	2b08      	cmp	r3, #8
 800313a:	f200 80e7 	bhi.w	800330c <HAL_RCC_GetSysClockFreq+0x1f8>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x34>
 8003142:	2b04      	cmp	r3, #4
 8003144:	d003      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x3a>
 8003146:	e0e1      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b76      	ldr	r3, [pc, #472]	; (8003324 <HAL_RCC_GetSysClockFreq+0x210>)
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800314c:	e0e1      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCC_GetSysClockFreq+0x214>)
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003152:	e0de      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003154:	4b72      	ldr	r3, [pc, #456]	; (8003320 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800315c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315e:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d065      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_GetSysClockFreq+0x20c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38
 8003174:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
 800317e:	2300      	movs	r3, #0
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
 8003182:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003186:	4622      	mov	r2, r4
 8003188:	462b      	mov	r3, r5
 800318a:	f04f 0000 	mov.w	r0, #0
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	0159      	lsls	r1, r3, #5
 8003194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003198:	0150      	lsls	r0, r2, #5
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4621      	mov	r1, r4
 80031a0:	1a51      	subs	r1, r2, r1
 80031a2:	6139      	str	r1, [r7, #16]
 80031a4:	4629      	mov	r1, r5
 80031a6:	eb63 0301 	sbc.w	r3, r3, r1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b8:	4659      	mov	r1, fp
 80031ba:	018b      	lsls	r3, r1, #6
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031c2:	4651      	mov	r1, sl
 80031c4:	018a      	lsls	r2, r1, #6
 80031c6:	46d4      	mov	ip, sl
 80031c8:	ebb2 080c 	subs.w	r8, r2, ip
 80031cc:	4659      	mov	r1, fp
 80031ce:	eb63 0901 	sbc.w	r9, r3, r1
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031e6:	4690      	mov	r8, r2
 80031e8:	4699      	mov	r9, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	eb18 0303 	adds.w	r3, r8, r3
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	462b      	mov	r3, r5
 80031f4:	eb49 0303 	adc.w	r3, r9, r3
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003206:	4629      	mov	r1, r5
 8003208:	024b      	lsls	r3, r1, #9
 800320a:	4620      	mov	r0, r4
 800320c:	4629      	mov	r1, r5
 800320e:	4604      	mov	r4, r0
 8003210:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003214:	4601      	mov	r1, r0
 8003216:	024a      	lsls	r2, r1, #9
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321e:	2200      	movs	r2, #0
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
 8003222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003228:	f7fc ffdc 	bl	80001e4 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4613      	mov	r3, r2
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003234:	e05c      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	2200      	movs	r2, #0
 800323e:	4618      	mov	r0, r3
 8003240:	4611      	mov	r1, r2
 8003242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
 800324c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003250:	4642      	mov	r2, r8
 8003252:	464b      	mov	r3, r9
 8003254:	f04f 0000 	mov.w	r0, #0
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	0159      	lsls	r1, r3, #5
 800325e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003262:	0150      	lsls	r0, r2, #5
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	46c4      	mov	ip, r8
 800326a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800326e:	4640      	mov	r0, r8
 8003270:	4649      	mov	r1, r9
 8003272:	468c      	mov	ip, r1
 8003274:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800328c:	ebb2 040a 	subs.w	r4, r2, sl
 8003290:	eb63 050b 	sbc.w	r5, r3, fp
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	18e3      	adds	r3, r4, r3
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	460b      	mov	r3, r1
 80032b0:	eb45 0303 	adc.w	r3, r5, r3
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c2:	4629      	mov	r1, r5
 80032c4:	028b      	lsls	r3, r1, #10
 80032c6:	4620      	mov	r0, r4
 80032c8:	4629      	mov	r1, r5
 80032ca:	4604      	mov	r4, r0
 80032cc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80032d0:	4601      	mov	r1, r0
 80032d2:	028a      	lsls	r2, r1, #10
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032da:	2200      	movs	r2, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	61fa      	str	r2, [r7, #28]
 80032e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e4:	f7fc ff7e 	bl	80001e4 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x210>)
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003314:	4618      	mov	r0, r3
 8003316:	3750      	adds	r7, #80	; 0x50
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <HAL_RCC_GetHCLKFreq+0x10>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003346:	f7ff fff1 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334a:	4601      	mov	r1, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003354:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003358:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	fa92 f2a2 	rbit	r2, r2
 8003360:	603a      	str	r2, [r7, #0]
  return result;
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	fab2 f282 	clz	r2, r2
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	40d3      	lsrs	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x40>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	08016f4c 	.word	0x08016f4c

08003384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800338a:	f7ff ffcf 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800338e:	4601      	mov	r1, r0
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003398:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800339c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	603a      	str	r2, [r7, #0]
  return result;
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	40d3      	lsrs	r3, r2
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08016f4c 	.word	0x08016f4c

080033c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e03f      	b.n	800345a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fde2 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f90b 	bl	8003628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af02      	add	r7, sp, #8
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b20      	cmp	r3, #32
 8003480:	f040 8083 	bne.w	800358a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Transmit+0x2e>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e07b      	b.n	800358c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Transmit+0x40>
 800349e:	2302      	movs	r3, #2
 80034a0:	e074      	b.n	800358c <HAL_UART_Transmit+0x12a>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2221      	movs	r2, #33	; 0x21
 80034b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034b8:	f7fd fe5a 	bl	8001170 <HAL_GetTick>
 80034bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034d2:	e042      	b.n	800355a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ea:	d122      	bne.n	8003532 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2200      	movs	r2, #0
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f84c 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e042      	b.n	800358c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003518:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d103      	bne.n	800352a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3302      	adds	r3, #2
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	e017      	b.n	800355a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e013      	b.n	800355a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f829 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e01f      	b.n	800358c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60ba      	str	r2, [r7, #8]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1b7      	bne.n	80034d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f810 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e006      	b.n	800358c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e02c      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d028      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b4:	f7fd fddc 	bl	8001170 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d21d      	bcs.n	8003600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e00f      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	d0c3      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003668:	f023 030c 	bic.w	r3, r3, #12
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	68f9      	ldr	r1, [r7, #12]
 8003672:	430b      	orrs	r3, r1
 8003674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	f040 80aa 	bne.w	80037ec <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4aa9      	ldr	r2, [pc, #676]	; (8003944 <UART_SetConfig+0x31c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <UART_SetConfig+0x84>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4aa8      	ldr	r2, [pc, #672]	; (8003948 <UART_SetConfig+0x320>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d14f      	bne.n	800374c <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036ac:	f7ff fe6a 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 80036b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009a      	lsls	r2, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	4aa0      	ldr	r2, [pc, #640]	; (800394c <UART_SetConfig+0x324>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	0119      	lsls	r1, r3, #4
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009a      	lsls	r2, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e8:	4b98      	ldr	r3, [pc, #608]	; (800394c <UART_SetConfig+0x324>)
 80036ea:	fba3 0302 	umull	r0, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2064      	movs	r0, #100	; 0x64
 80036f2:	fb00 f303 	mul.w	r3, r0, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	3332      	adds	r3, #50	; 0x32
 80036fc:	4a93      	ldr	r2, [pc, #588]	; (800394c <UART_SetConfig+0x324>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800370a:	4419      	add	r1, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003722:	4b8a      	ldr	r3, [pc, #552]	; (800394c <UART_SetConfig+0x324>)
 8003724:	fba3 0302 	umull	r0, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2064      	movs	r0, #100	; 0x64
 800372c:	fb00 f303 	mul.w	r3, r0, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a85      	ldr	r2, [pc, #532]	; (800394c <UART_SetConfig+0x324>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 0207 	and.w	r2, r3, #7
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	440a      	add	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	e0f7      	b.n	800393c <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7ff fdf8 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003750:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	4a78      	ldr	r2, [pc, #480]	; (800394c <UART_SetConfig+0x324>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	0119      	lsls	r1, r3, #4
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fbb2 f2f3 	udiv	r2, r2, r3
 8003788:	4b70      	ldr	r3, [pc, #448]	; (800394c <UART_SetConfig+0x324>)
 800378a:	fba3 0302 	umull	r0, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2064      	movs	r0, #100	; 0x64
 8003792:	fb00 f303 	mul.w	r3, r0, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	3332      	adds	r3, #50	; 0x32
 800379c:	4a6b      	ldr	r2, [pc, #428]	; (800394c <UART_SetConfig+0x324>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037aa:	4419      	add	r1, r3
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009a      	lsls	r2, r3, #2
 80037b6:	441a      	add	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c2:	4b62      	ldr	r3, [pc, #392]	; (800394c <UART_SetConfig+0x324>)
 80037c4:	fba3 0302 	umull	r0, r3, r3, r2
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	2064      	movs	r0, #100	; 0x64
 80037cc:	fb00 f303 	mul.w	r3, r0, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	3332      	adds	r3, #50	; 0x32
 80037d6:	4a5d      	ldr	r2, [pc, #372]	; (800394c <UART_SetConfig+0x324>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	f003 0207 	and.w	r2, r3, #7
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	440a      	add	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80037ea:	e0a7      	b.n	800393c <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a54      	ldr	r2, [pc, #336]	; (8003944 <UART_SetConfig+0x31c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <UART_SetConfig+0x1d8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a53      	ldr	r2, [pc, #332]	; (8003948 <UART_SetConfig+0x320>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d14e      	bne.n	800389e <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7ff fdc0 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8003804:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <UART_SetConfig+0x324>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	0119      	lsls	r1, r3, #4
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b43      	ldr	r3, [pc, #268]	; (800394c <UART_SetConfig+0x324>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a3e      	ldr	r2, [pc, #248]	; (800394c <UART_SetConfig+0x324>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385c:	4419      	add	r1, r3
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009a      	lsls	r2, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fbb2 f2f3 	udiv	r2, r2, r3
 8003874:	4b35      	ldr	r3, [pc, #212]	; (800394c <UART_SetConfig+0x324>)
 8003876:	fba3 0302 	umull	r0, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2064      	movs	r0, #100	; 0x64
 800387e:	fb00 f303 	mul.w	r3, r0, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a30      	ldr	r2, [pc, #192]	; (800394c <UART_SetConfig+0x324>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	440a      	add	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e04e      	b.n	800393c <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 800389e:	f7ff fd4f 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 80038a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009a      	lsls	r2, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <UART_SetConfig+0x324>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	0119      	lsls	r1, r3, #4
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009a      	lsls	r2, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <UART_SetConfig+0x324>)
 80038dc:	fba3 0302 	umull	r0, r3, r3, r2
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	2064      	movs	r0, #100	; 0x64
 80038e4:	fb00 f303 	mul.w	r3, r0, r3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	3332      	adds	r3, #50	; 0x32
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <UART_SetConfig+0x324>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fa:	4419      	add	r1, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009a      	lsls	r2, r3, #2
 8003906:	441a      	add	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <UART_SetConfig+0x324>)
 8003914:	fba3 0302 	umull	r0, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2064      	movs	r0, #100	; 0x64
 800391c:	fb00 f303 	mul.w	r3, r0, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	3332      	adds	r3, #50	; 0x32
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <UART_SetConfig+0x324>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	440a      	add	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	e7ff      	b.n	800393c <UART_SetConfig+0x314>
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40011000 	.word	0x40011000
 8003948:	40011400 	.word	0x40011400
 800394c:	51eb851f 	.word	0x51eb851f

08003950 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b08e      	sub	sp, #56	; 0x38
 8003954:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8003956:	4ba0      	ldr	r3, [pc, #640]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003958:	22a9      	movs	r2, #169	; 0xa9
 800395a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800395c:	4b9e      	ldr	r3, [pc, #632]	; (8003bd8 <MX_LWIP_Init+0x288>)
 800395e:	22fe      	movs	r2, #254	; 0xfe
 8003960:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 103;
 8003962:	4b9d      	ldr	r3, [pc, #628]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003964:	2267      	movs	r2, #103	; 0x67
 8003966:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003968:	4b9b      	ldr	r3, [pc, #620]	; (8003bd8 <MX_LWIP_Init+0x288>)
 800396a:	226f      	movs	r2, #111	; 0x6f
 800396c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800396e:	4b9b      	ldr	r3, [pc, #620]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003974:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800397a:	4b98      	ldr	r3, [pc, #608]	; (8003bdc <MX_LWIP_Init+0x28c>)
 800397c:	2200      	movs	r2, #0
 800397e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003980:	4b96      	ldr	r3, [pc, #600]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003982:	2200      	movs	r2, #0
 8003984:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003986:	4b96      	ldr	r3, [pc, #600]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800398c:	4b94      	ldr	r3, [pc, #592]	; (8003be0 <MX_LWIP_Init+0x290>)
 800398e:	2200      	movs	r2, #0
 8003990:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003992:	4b93      	ldr	r3, [pc, #588]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003994:	2200      	movs	r2, #0
 8003996:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003998:	4b91      	ldr	r3, [pc, #580]	; (8003be0 <MX_LWIP_Init+0x290>)
 800399a:	2200      	movs	r2, #0
 800399c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800399e:	2100      	movs	r1, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	f005 fcc7 	bl	8009334 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80039a6:	4b8c      	ldr	r3, [pc, #560]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	061a      	lsls	r2, r3, #24
 80039ac:	4b8a      	ldr	r3, [pc, #552]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039ae:	785b      	ldrb	r3, [r3, #1]
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	4313      	orrs	r3, r2
 80039bc:	4a86      	ldr	r2, [pc, #536]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039be:	78d2      	ldrb	r2, [r2, #3]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	061a      	lsls	r2, r3, #24
 80039c4:	4b84      	ldr	r3, [pc, #528]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	0619      	lsls	r1, r3, #24
 80039ca:	4b83      	ldr	r3, [pc, #524]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	4319      	orrs	r1, r3
 80039d2:	4b81      	ldr	r3, [pc, #516]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039d4:	789b      	ldrb	r3, [r3, #2]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	430b      	orrs	r3, r1
 80039da:	497f      	ldr	r1, [pc, #508]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039dc:	78c9      	ldrb	r1, [r1, #3]
 80039de:	430b      	orrs	r3, r1
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039e6:	431a      	orrs	r2, r3
 80039e8:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	0619      	lsls	r1, r3, #24
 80039ee:	4b7a      	ldr	r3, [pc, #488]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	4319      	orrs	r1, r3
 80039f6:	4b78      	ldr	r3, [pc, #480]	; (8003bd8 <MX_LWIP_Init+0x288>)
 80039f8:	789b      	ldrb	r3, [r3, #2]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	430b      	orrs	r3, r1
 80039fe:	4976      	ldr	r1, [pc, #472]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003a00:	78c9      	ldrb	r1, [r1, #3]
 8003a02:	430b      	orrs	r3, r1
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	4b72      	ldr	r3, [pc, #456]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	0619      	lsls	r1, r3, #24
 8003a12:	4b71      	ldr	r3, [pc, #452]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	4319      	orrs	r1, r3
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003a1c:	789b      	ldrb	r3, [r3, #2]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	430b      	orrs	r3, r1
 8003a22:	496d      	ldr	r1, [pc, #436]	; (8003bd8 <MX_LWIP_Init+0x288>)
 8003a24:	78c9      	ldrb	r1, [r1, #3]
 8003a26:	430b      	orrs	r3, r1
 8003a28:	0e1b      	lsrs	r3, r3, #24
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	4a6d      	ldr	r2, [pc, #436]	; (8003be4 <MX_LWIP_Init+0x294>)
 8003a2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003a30:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	061a      	lsls	r2, r3, #24
 8003a36:	4b69      	ldr	r3, [pc, #420]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a40:	789b      	ldrb	r3, [r3, #2]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	4313      	orrs	r3, r2
 8003a46:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a48:	78d2      	ldrb	r2, [r2, #3]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	061a      	lsls	r2, r3, #24
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	0619      	lsls	r1, r3, #24
 8003a54:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	4319      	orrs	r1, r3
 8003a5c:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a5e:	789b      	ldrb	r3, [r3, #2]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	430b      	orrs	r3, r1
 8003a64:	495d      	ldr	r1, [pc, #372]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a66:	78c9      	ldrb	r1, [r1, #3]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a70:	431a      	orrs	r2, r3
 8003a72:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	0619      	lsls	r1, r3, #24
 8003a78:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	4319      	orrs	r1, r3
 8003a80:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a82:	789b      	ldrb	r3, [r3, #2]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	430b      	orrs	r3, r1
 8003a88:	4954      	ldr	r1, [pc, #336]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a8a:	78c9      	ldrb	r1, [r1, #3]
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a94:	431a      	orrs	r2, r3
 8003a96:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	0619      	lsls	r1, r3, #24
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003a9e:	785b      	ldrb	r3, [r3, #1]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	4319      	orrs	r1, r3
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	494b      	ldr	r1, [pc, #300]	; (8003bdc <MX_LWIP_Init+0x28c>)
 8003aae:	78c9      	ldrb	r1, [r1, #3]
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	0e1b      	lsrs	r3, r3, #24
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	4a4c      	ldr	r2, [pc, #304]	; (8003be8 <MX_LWIP_Init+0x298>)
 8003ab8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	061a      	lsls	r2, r3, #24
 8003ac0:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003aca:	789b      	ldrb	r3, [r3, #2]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	4a43      	ldr	r2, [pc, #268]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003ad2:	78d2      	ldrb	r2, [r2, #3]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	061a      	lsls	r2, r3, #24
 8003ad8:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	0619      	lsls	r1, r3, #24
 8003ade:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	4319      	orrs	r1, r3
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003ae8:	789b      	ldrb	r3, [r3, #2]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	430b      	orrs	r3, r1
 8003aee:	493c      	ldr	r1, [pc, #240]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003af0:	78c9      	ldrb	r1, [r1, #3]
 8003af2:	430b      	orrs	r3, r1
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003afa:	431a      	orrs	r2, r3
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	0619      	lsls	r1, r3, #24
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	4319      	orrs	r1, r3
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b0c:	789b      	ldrb	r3, [r3, #2]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	430b      	orrs	r3, r1
 8003b12:	4933      	ldr	r1, [pc, #204]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b14:	78c9      	ldrb	r1, [r1, #3]
 8003b16:	430b      	orrs	r3, r1
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	0619      	lsls	r1, r3, #24
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	4319      	orrs	r1, r3
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b30:	789b      	ldrb	r3, [r3, #2]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	430b      	orrs	r3, r1
 8003b36:	492a      	ldr	r1, [pc, #168]	; (8003be0 <MX_LWIP_Init+0x290>)
 8003b38:	78c9      	ldrb	r1, [r1, #3]
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <MX_LWIP_Init+0x29c>)
 8003b42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <MX_LWIP_Init+0x2a0>)
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <MX_LWIP_Init+0x2a4>)
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <MX_LWIP_Init+0x29c>)
 8003b52:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <MX_LWIP_Init+0x298>)
 8003b54:	4923      	ldr	r1, [pc, #140]	; (8003be4 <MX_LWIP_Init+0x294>)
 8003b56:	4828      	ldr	r0, [pc, #160]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003b58:	f006 f8a4 	bl	8009ca4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003b5c:	4826      	ldr	r0, [pc, #152]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003b5e:	f006 f983 	bl	8009e68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003b64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003b74:	4820      	ldr	r0, [pc, #128]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003b76:	f006 f985 	bl	8009e84 <netif_set_up>
 8003b7a:	e002      	b.n	8003b82 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003b7c:	481e      	ldr	r0, [pc, #120]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003b7e:	f006 f9c5 	bl	8009f0c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003b82:	491e      	ldr	r1, [pc, #120]	; (8003bfc <MX_LWIP_Init+0x2ac>)
 8003b84:	481c      	ldr	r0, [pc, #112]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003b86:	f006 fa2e 	bl	8009fe6 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003b92:	f107 0320 	add.w	r3, r7, #32
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd9f 	bl	80046dc <osSemaphoreCreate>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <MX_LWIP_Init+0x2b0>)
 8003ba2:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <MX_LWIP_Init+0x2b4>)
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <MX_LWIP_Init+0x2a8>)
 8003ba8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <MX_LWIP_Init+0x2b0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <MX_LWIP_Init+0x2b4>)
 8003bb0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <MX_LWIP_Init+0x2b8>)
 8003bb4:	1d3c      	adds	r4, r7, #4
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	490f      	ldr	r1, [pc, #60]	; (8003c04 <MX_LWIP_Init+0x2b4>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fc8b 	bl	80044e4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003bce:	bf00      	nop
 8003bd0:	3728      	adds	r7, #40	; 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200011c4 	.word	0x200011c4
 8003bdc:	200011c8 	.word	0x200011c8
 8003be0:	200011cc 	.word	0x200011cc
 8003be4:	200011b8 	.word	0x200011b8
 8003be8:	200011bc 	.word	0x200011bc
 8003bec:	200011c0 	.word	0x200011c0
 8003bf0:	08009231 	.word	0x08009231
 8003bf4:	08004279 	.word	0x08004279
 8003bf8:	20001184 	.word	0x20001184
 8003bfc:	0800435d 	.word	0x0800435d
 8003c00:	20001178 	.word	0x20001178
 8003c04:	2000117c 	.word	0x2000117c
 8003c08:	080147fc 	.word	0x080147fc

08003c0c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08e      	sub	sp, #56	; 0x38
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a59      	ldr	r2, [pc, #356]	; (8003d90 <HAL_ETH_MspInit+0x184>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	f040 80ac 	bne.w	8003d88 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c40:	4b54      	ldr	r3, [pc, #336]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4a4f      	ldr	r2, [pc, #316]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4a48      	ldr	r2, [pc, #288]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c76:	6313      	str	r3, [r2, #48]	; 0x30
 8003c78:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	6313      	str	r3, [r2, #48]	; 0x30
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb0:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_ETH_MspInit+0x188>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003cf4:	2332      	movs	r3, #50	; 0x32
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d00:	2303      	movs	r3, #3
 8003d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d04:	230b      	movs	r3, #11
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4822      	ldr	r0, [pc, #136]	; (8003d98 <HAL_ETH_MspInit+0x18c>)
 8003d10:	f7fe fcdc 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d14:	2386      	movs	r3, #134	; 0x86
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d24:	230b      	movs	r3, #11
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	481b      	ldr	r0, [pc, #108]	; (8003d9c <HAL_ETH_MspInit+0x190>)
 8003d30:	f7fe fccc 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d42:	2303      	movs	r3, #3
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d46:	230b      	movs	r3, #11
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4813      	ldr	r0, [pc, #76]	; (8003da0 <HAL_ETH_MspInit+0x194>)
 8003d52:	f7fe fcbb 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d64:	2303      	movs	r3, #3
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d68:	230b      	movs	r3, #11
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d70:	4619      	mov	r1, r3
 8003d72:	480c      	ldr	r0, [pc, #48]	; (8003da4 <HAL_ETH_MspInit+0x198>)
 8003d74:	f7fe fcaa 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2105      	movs	r1, #5
 8003d7c:	203d      	movs	r0, #61	; 0x3d
 8003d7e:	f7fd fafc 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003d82:	203d      	movs	r0, #61	; 0x3d
 8003d84:	f7fd fb15 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3738      	adds	r7, #56	; 0x38
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40028000 	.word	0x40028000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40021800 	.word	0x40021800

08003da8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <HAL_ETH_RxCpltCallback+0x1c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fd11 	bl	80047dc <osSemaphoreRelease>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20004270 	.word	0x20004270

08003dc8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003dc8:	b5b0      	push	{r4, r5, r7, lr}
 8003dca:	b090      	sub	sp, #64	; 0x40
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003dd4:	4b60      	ldr	r3, [pc, #384]	; (8003f58 <low_level_init+0x190>)
 8003dd6:	4a61      	ldr	r2, [pc, #388]	; (8003f5c <low_level_init+0x194>)
 8003dd8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003dda:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <low_level_init+0x190>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003de0:	4b5d      	ldr	r3, [pc, #372]	; (8003f58 <low_level_init+0x190>)
 8003de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003de6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003de8:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <low_level_init+0x190>)
 8003dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dee:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <low_level_init+0x190>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003e02:	23e1      	movs	r3, #225	; 0xe1
 8003e04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8003e1a:	4a4f      	ldr	r2, [pc, #316]	; (8003f58 <low_level_init+0x190>)
 8003e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003e22:	4b4d      	ldr	r3, [pc, #308]	; (8003f58 <low_level_init+0x190>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003e28:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <low_level_init+0x190>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <low_level_init+0x190>)
 8003e30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e36:	4848      	ldr	r0, [pc, #288]	; (8003f58 <low_level_init+0x190>)
 8003e38:	f7fd fad6 	bl	80013e8 <HAL_ETH_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d108      	bne.n	8003e5c <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <low_level_init+0x198>)
 8003e60:	4940      	ldr	r1, [pc, #256]	; (8003f64 <low_level_init+0x19c>)
 8003e62:	483d      	ldr	r0, [pc, #244]	; (8003f58 <low_level_init+0x190>)
 8003e64:	f7fd fc4c 	bl	8001700 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003e68:	2304      	movs	r3, #4
 8003e6a:	4a3f      	ldr	r2, [pc, #252]	; (8003f68 <low_level_init+0x1a0>)
 8003e6c:	493f      	ldr	r1, [pc, #252]	; (8003f6c <low_level_init+0x1a4>)
 8003e6e:	483a      	ldr	r0, [pc, #232]	; (8003f58 <low_level_init+0x190>)
 8003e70:	f7fd fcad 	bl	80017ce <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2206      	movs	r2, #6
 8003e78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <low_level_init+0x190>)
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e88:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <low_level_init+0x190>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	785a      	ldrb	r2, [r3, #1]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003e94:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <low_level_init+0x190>)
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	789a      	ldrb	r2, [r3, #2]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <low_level_init+0x190>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	78da      	ldrb	r2, [r3, #3]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <low_level_init+0x190>)
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	791a      	ldrb	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003eb8:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <low_level_init+0x190>)
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	795a      	ldrb	r2, [r3, #5]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003eca:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003ed2:	f043 030a 	orr.w	r3, r3, #10
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eea:	2101      	movs	r1, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fbf5 	bl	80046dc <osSemaphoreCreate>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <low_level_init+0x1a8>)
 8003ef6:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <low_level_init+0x1ac>)
 8003efa:	f107 040c 	add.w	r4, r7, #12
 8003efe:	461d      	mov	r5, r3
 8003f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fae6 	bl	80044e4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003f18:	480f      	ldr	r0, [pc, #60]	; (8003f58 <low_level_init+0x190>)
 8003f1a:	f7fd ff76 	bl	8001e0a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003f1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f22:	461a      	mov	r2, r3
 8003f24:	211d      	movs	r1, #29
 8003f26:	480c      	ldr	r0, [pc, #48]	; (8003f58 <low_level_init+0x190>)
 8003f28:	f7fd fea1 	bl	8001c6e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	f043 030b 	orr.w	r3, r3, #11
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	461a      	mov	r2, r3
 8003f38:	211d      	movs	r1, #29
 8003f3a:	4807      	ldr	r0, [pc, #28]	; (8003f58 <low_level_init+0x190>)
 8003f3c:	f7fd feff 	bl	8001d3e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003f40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f44:	461a      	mov	r2, r3
 8003f46:	211d      	movs	r1, #29
 8003f48:	4803      	ldr	r0, [pc, #12]	; (8003f58 <low_level_init+0x190>)
 8003f4a:	f7fd fe90 	bl	8001c6e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003f4e:	bf00      	nop
 8003f50:	3740      	adds	r7, #64	; 0x40
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdb0      	pop	{r4, r5, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20004274 	.word	0x20004274
 8003f5c:	40028000 	.word	0x40028000
 8003f60:	20002aa0 	.word	0x20002aa0
 8003f64:	20001250 	.word	0x20001250
 8003f68:	200012d0 	.word	0x200012d0
 8003f6c:	200011d0 	.word	0x200011d0
 8003f70:	20004270 	.word	0x20004270
 8003f74:	08014820 	.word	0x08014820

08003f78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003f82:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <low_level_output+0x138>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <low_level_output+0x138>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	e05a      	b.n	8004060 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	da03      	bge.n	8003fba <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003fb2:	23f8      	movs	r3, #248	; 0xf8
 8003fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003fb8:	e05c      	b.n	8004074 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	895b      	ldrh	r3, [r3, #10]
 8003fbe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003fc4:	e02f      	b.n	8004026 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	18d0      	adds	r0, r2, r3
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	18d1      	adds	r1, r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003fda:	3304      	adds	r3, #4
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f00f fa55 	bl	801348c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da03      	bge.n	8003ff8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003ff0:	23f8      	movs	r3, #248	; 0xf8
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003ff6:	e03d      	b.n	8004074 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004008:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004014:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004020:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004030:	4293      	cmp	r3, r2
 8004032:	d8c8      	bhi.n	8003fc6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	18d0      	adds	r0, r2, r3
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4619      	mov	r1, r3
 8004046:	f00f fa21 	bl	801348c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1a1      	bne.n	8003faa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	4811      	ldr	r0, [pc, #68]	; (80040b0 <low_level_output+0x138>)
 800406a:	f7fd fc1b 	bl	80018a4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004074:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <low_level_output+0x138>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <low_level_output+0x138>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	461a      	mov	r2, r3
 8004090:	2320      	movs	r3, #32
 8004092:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <low_level_output+0x138>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	461a      	mov	r2, r3
 800409e:	2300      	movs	r3, #0
 80040a0:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80040a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20004274 	.word	0x20004274

080040b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80040d8:	484e      	ldr	r0, [pc, #312]	; (8004214 <low_level_input+0x160>)
 80040da:	f7fd fccb 	bl	8001a74 <HAL_ETH_GetReceivedFrame_IT>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <low_level_input+0x34>

    return NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e090      	b.n	800420a <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80040e8:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <low_level_input+0x160>)
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80040ee:	4b49      	ldr	r3, [pc, #292]	; (8004214 <low_level_input+0x160>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80040fa:	89fb      	ldrh	r3, [r7, #14]
 80040fc:	2203      	movs	r2, #3
 80040fe:	4619      	mov	r1, r3
 8004100:	2004      	movs	r0, #4
 8004102:	f005 ffe1 	bl	800a0c8 <pbuf_alloc>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04b      	beq.n	80041a6 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <low_level_input+0x160>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
 800411c:	e040      	b.n	80041a0 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	895b      	ldrh	r3, [r3, #10]
 8004122:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004128:	e021      	b.n	800416e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	18d0      	adds	r0, r2, r3
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	18d1      	adds	r1, r2, r3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800413e:	3304      	adds	r3, #4
 8004140:	461a      	mov	r2, r3
 8004142:	f00f f9a3 	bl	801348c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4413      	add	r3, r2
 8004158:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800415c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004168:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004178:	4293      	cmp	r3, r2
 800417a:	d8d6      	bhi.n	800412a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	18d0      	adds	r0, r2, r3
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4619      	mov	r1, r3
 800418e:	f00f f97d 	bl	801348c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4413      	add	r3, r2
 8004198:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1bb      	bne.n	800411e <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <low_level_input+0x160>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e00b      	b.n	80041ca <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3301      	adds	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <low_level_input+0x160>)
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3ee      	bcc.n	80041b2 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <low_level_input+0x160>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <low_level_input+0x160>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <low_level_input+0x160>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	461a      	mov	r2, r3
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <low_level_input+0x160>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800420a:	4618      	mov	r0, r3
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20004274 	.word	0x20004274

08004218 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <ethernetif_input+0x58>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f04f 31ff 	mov.w	r1, #4294967295
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa87 	bl	8004740 <osSemaphoreWait>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f5      	bne.n	8004224 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004238:	480e      	ldr	r0, [pc, #56]	; (8004274 <ethernetif_input+0x5c>)
 800423a:	f00f f88b 	bl	8013354 <sys_mutex_lock>
        p = low_level_input( netif );
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff38 	bl	80040b4 <low_level_input>
 8004244:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	68b8      	ldr	r0, [r7, #8]
 8004254:	4798      	blx	r3
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800425c:	68b8      	ldr	r0, [r7, #8]
 800425e:	f006 faab 	bl	800a7b8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004262:	4804      	ldr	r0, [pc, #16]	; (8004274 <ethernetif_input+0x5c>)
 8004264:	f00f f885 	bl	8013372 <sys_mutex_unlock>
      } while(p!=NULL);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e4      	bne.n	8004238 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800426e:	e7d9      	b.n	8004224 <ethernetif_input+0xc>
 8004270:	20004270 	.word	0x20004270
 8004274:	20008058 	.word	0x20008058

08004278 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <ethernetif_init+0x1c>
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <ethernetif_init+0x48>)
 8004288:	f240 2236 	movw	r2, #566	; 0x236
 800428c:	490d      	ldr	r1, [pc, #52]	; (80042c4 <ethernetif_init+0x4c>)
 800428e:	480e      	ldr	r0, [pc, #56]	; (80042c8 <ethernetif_init+0x50>)
 8004290:	f00f f9ee 	bl	8013670 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2273      	movs	r2, #115	; 0x73
 8004298:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2274      	movs	r2, #116	; 0x74
 80042a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <ethernetif_init+0x54>)
 80042a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <ethernetif_init+0x58>)
 80042ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fd89 	bl	8003dc8 <low_level_init>

  return ERR_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	0801483c 	.word	0x0801483c
 80042c4:	08014858 	.word	0x08014858
 80042c8:	08014868 	.word	0x08014868
 80042cc:	08011451 	.word	0x08011451
 80042d0:	08003f79 	.word	0x08003f79

080042d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80042d8:	f7fc ff4a 	bl	8001170 <HAL_GetTick>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80042f4:	f107 0308 	add.w	r3, r7, #8
 80042f8:	461a      	mov	r2, r3
 80042fa:	2101      	movs	r1, #1
 80042fc:	4816      	ldr	r0, [pc, #88]	; (8004358 <ethernetif_set_link+0x74>)
 80042fe:	f7fd fcb6 	bl	8001c6e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <ethernetif_set_link+0x48>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f005 fe13 	bl	8009f50 <netif_set_link_up>
 800432a:	e011      	b.n	8004350 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <ethernetif_set_link+0x6c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f005 fe2b 	bl	8009fa6 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004350:	20c8      	movs	r0, #200	; 0xc8
 8004352:	f000 f913 	bl	800457c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004356:	e7cd      	b.n	80042f4 <ethernetif_set_link+0x10>
 8004358:	20004274 	.word	0x20004274

0800435c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d05d      	beq.n	800443a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800437e:	4b34      	ldr	r3, [pc, #208]	; (8004450 <ethernetif_update_config+0xf4>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03f      	beq.n	8004406 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800438a:	2100      	movs	r1, #0
 800438c:	4830      	ldr	r0, [pc, #192]	; (8004450 <ethernetif_update_config+0xf4>)
 800438e:	f7fd fcd6 	bl	8001d3e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004392:	f7fc feed 	bl	8001170 <HAL_GetTick>
 8004396:	4603      	mov	r3, r0
 8004398:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	461a      	mov	r2, r3
 80043a0:	2101      	movs	r1, #1
 80043a2:	482b      	ldr	r0, [pc, #172]	; (8004450 <ethernetif_update_config+0xf4>)
 80043a4:	f7fd fc63 	bl	8001c6e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80043a8:	f7fc fee2 	bl	8001170 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043b6:	d828      	bhi.n	800440a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0eb      	beq.n	800439a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	461a      	mov	r2, r3
 80043c8:	2110      	movs	r1, #16
 80043ca:	4821      	ldr	r0, [pc, #132]	; (8004450 <ethernetif_update_config+0xf4>)
 80043cc:	f7fd fc4f 	bl	8001c6e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80043da:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <ethernetif_update_config+0xf4>)
 80043dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e002      	b.n	80043ea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <ethernetif_update_config+0xf4>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <ethernetif_update_config+0xf4>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	e016      	b.n	800442a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <ethernetif_update_config+0xf4>)
 80043fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	e011      	b.n	800442a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <ethernetif_update_config+0xb0>
          goto error;
 800440a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <ethernetif_update_config+0xf4>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <ethernetif_update_config+0xf4>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800441c:	4313      	orrs	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	2100      	movs	r1, #0
 8004424:	480a      	ldr	r0, [pc, #40]	; (8004450 <ethernetif_update_config+0xf4>)
 8004426:	f7fd fc8a 	bl	8001d3e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800442a:	2100      	movs	r1, #0
 800442c:	4808      	ldr	r0, [pc, #32]	; (8004450 <ethernetif_update_config+0xf4>)
 800442e:	f7fd fd4b 	bl	8001ec8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <ethernetif_update_config+0xf4>)
 8004434:	f7fd fce9 	bl	8001e0a <HAL_ETH_Start>
 8004438:	e002      	b.n	8004440 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800443a:	4805      	ldr	r0, [pc, #20]	; (8004450 <ethernetif_update_config+0xf4>)
 800443c:	f7fd fd14 	bl	8001e68 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f807 	bl	8004454 <ethernetif_notify_conn_changed>
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20004274 	.word	0x20004274

08004454 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	4603      	mov	r3, r0
 800446e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004478:	2b84      	cmp	r3, #132	; 0x84
 800447a:	d005      	beq.n	8004488 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800447c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	3303      	adds	r3, #3
 8004486:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004488:	68fb      	ldr	r3, [r7, #12]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800449a:	f3ef 8305 	mrs	r3, IPSR
 800449e:	607b      	str	r3, [r7, #4]
  return(result);
 80044a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044ba:	f001 fd13 	bl	8005ee4 <vTaskStartScheduler>
  
  return osOK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80044c8:	f7ff ffe4 	bl	8004494 <inHandlerMode>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80044d2:	f001 fe1f 	bl	8006114 <xTaskGetTickCountFromISR>
 80044d6:	4603      	mov	r3, r0
 80044d8:	e002      	b.n	80044e0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80044da:	f001 fe0d 	bl	80060f8 <xTaskGetTickCount>
 80044de:	4603      	mov	r3, r0
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af04      	add	r7, sp, #16
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d020      	beq.n	8004538 <osThreadCreate+0x54>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01c      	beq.n	8004538 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685c      	ldr	r4, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681d      	ldr	r5, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691e      	ldr	r6, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ffa8 	bl	8004466 <makeFreeRtosPriority>
 8004516:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004520:	9202      	str	r2, [sp, #8]
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	9100      	str	r1, [sp, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	4632      	mov	r2, r6
 800452a:	4629      	mov	r1, r5
 800452c:	4620      	mov	r0, r4
 800452e:	f001 fb1b 	bl	8005b68 <xTaskCreateStatic>
 8004532:	4603      	mov	r3, r0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e01c      	b.n	8004572 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685c      	ldr	r4, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004544:	b29e      	uxth	r6, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff8a 	bl	8004466 <makeFreeRtosPriority>
 8004552:	4602      	mov	r2, r0
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	9200      	str	r2, [sp, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4632      	mov	r2, r6
 8004560:	4629      	mov	r1, r5
 8004562:	4620      	mov	r0, r4
 8004564:	f001 fb5c 	bl	8005c20 <xTaskCreate>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d001      	beq.n	8004572 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	e000      	b.n	8004574 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800457c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <osDelay+0x16>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	e000      	b.n	8004594 <osDelay+0x18>
 8004592:	2301      	movs	r3, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fc71 	bl	8005e7c <vTaskDelay>
  
  return osOK;
 800459a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4619      	mov	r1, r3
 80045ba:	2001      	movs	r0, #1
 80045bc:	f000 fc7a 	bl	8004eb4 <xQueueCreateMutexStatic>
 80045c0:	4603      	mov	r3, r0
 80045c2:	e003      	b.n	80045cc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80045c4:	2001      	movs	r0, #1
 80045c6:	f000 fc5d 	bl	8004e84 <xQueueCreateMutex>
 80045ca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <osMutexWait+0x18>
    return osErrorParameter;
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	e03a      	b.n	8004662 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d103      	bne.n	8004600 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e009      	b.n	8004614 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <osMutexWait+0x40>
      ticks = 1;
 8004610:	2301      	movs	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004614:	f7ff ff3e 	bl	8004494 <inHandlerMode>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	461a      	mov	r2, r3
 8004624:	2100      	movs	r1, #0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 f870 	bl	800570c <xQueueReceiveFromISR>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <osMutexWait+0x62>
      return osErrorOS;
 8004632:	23ff      	movs	r3, #255	; 0xff
 8004634:	e015      	b.n	8004662 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d011      	beq.n	8004660 <osMutexWait+0x8c>
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <osMutexWait+0x98>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	e008      	b.n	8004660 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 ff4f 	bl	80054f4 <xQueueSemaphoreTake>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d001      	beq.n	8004660 <osMutexWait+0x8c>
    return osErrorOS;
 800465c:	23ff      	movs	r3, #255	; 0xff
 800465e:	e000      	b.n	8004662 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800467c:	2300      	movs	r3, #0
 800467e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004680:	f7ff ff08 	bl	8004494 <inHandlerMode>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fdc1 	bl	8005218 <xQueueGiveFromISR>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <osMutexRelease+0x30>
      return osErrorOS;
 800469c:	23ff      	movs	r3, #255	; 0xff
 800469e:	e017      	b.n	80046d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d013      	beq.n	80046ce <osMutexRelease+0x5e>
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <osMutexRelease+0x68>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	e00a      	b.n	80046ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80046b8:	2300      	movs	r3, #0
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fc14 	bl	8004eec <xQueueGenericSend>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d001      	beq.n	80046ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80046ca:	23ff      	movs	r3, #255	; 0xff
 80046cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00f      	beq.n	800470e <osSemaphoreCreate+0x32>
    if (count == 1) {
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10a      	bne.n	800470a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2203      	movs	r2, #3
 80046fa:	9200      	str	r2, [sp, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2100      	movs	r1, #0
 8004700:	2001      	movs	r0, #1
 8004702:	f000 fad1 	bl	8004ca8 <xQueueGenericCreateStatic>
 8004706:	4603      	mov	r3, r0
 8004708:	e016      	b.n	8004738 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	e014      	b.n	8004738 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d110      	bne.n	8004736 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004714:	2203      	movs	r2, #3
 8004716:	2100      	movs	r1, #0
 8004718:	2001      	movs	r0, #1
 800471a:	f000 fb3c 	bl	8004d96 <xQueueGenericCreate>
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <osSemaphoreCreate+0x56>
 8004726:	2300      	movs	r3, #0
 8004728:	2200      	movs	r2, #0
 800472a:	2100      	movs	r1, #0
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fbdd 	bl	8004eec <xQueueGenericSend>
      return sema;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	e000      	b.n	8004738 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004736:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	e03a      	b.n	80047ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d103      	bne.n	800476c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004764:	f04f 33ff 	mov.w	r3, #4294967295
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e009      	b.n	8004780 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <osSemaphoreWait+0x40>
      ticks = 1;
 800477c:	2301      	movs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004780:	f7ff fe88 	bl	8004494 <inHandlerMode>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	461a      	mov	r2, r3
 8004790:	2100      	movs	r1, #0
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ffba 	bl	800570c <xQueueReceiveFromISR>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800479e:	23ff      	movs	r3, #255	; 0xff
 80047a0:	e015      	b.n	80047ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d011      	beq.n	80047cc <osSemaphoreWait+0x8c>
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <osSemaphoreWait+0x98>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	e008      	b.n	80047cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fe99 	bl	80054f4 <xQueueSemaphoreTake>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80047c8:	23ff      	movs	r3, #255	; 0xff
 80047ca:	e000      	b.n	80047ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80047ec:	f7ff fe52 	bl	8004494 <inHandlerMode>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fd0b 	bl	8005218 <xQueueGiveFromISR>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004808:	23ff      	movs	r3, #255	; 0xff
 800480a:	e017      	b.n	800483c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d013      	beq.n	800483a <osSemaphoreRelease+0x5e>
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <osSemaphoreRelease+0x68>)
 8004814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	e00a      	b.n	800483a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004824:	2300      	movs	r3, #0
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fb5e 	bl	8004eec <xQueueGenericSend>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004836:	23ff      	movs	r3, #255	; 0xff
 8004838:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800483a:	68fb      	ldr	r3, [r7, #12]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004850:	f7ff fe20 	bl	8004494 <inHandlerMode>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800485a:	2382      	movs	r3, #130	; 0x82
 800485c:	e003      	b.n	8004866 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f001 f80d 	bl	800587e <vQueueDelete>

  return osOK; 
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800486e:	b590      	push	{r4, r7, lr}
 8004870:	b085      	sub	sp, #20
 8004872:	af02      	add	r7, sp, #8
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d011      	beq.n	80048a4 <osMessageCreate+0x36>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2400      	movs	r4, #0
 800489a:	9400      	str	r4, [sp, #0]
 800489c:	f000 fa04 	bl	8004ca8 <xQueueGenericCreateStatic>
 80048a0:	4603      	mov	r3, r0
 80048a2:	e008      	b.n	80048b6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	4619      	mov	r1, r3
 80048b0:	f000 fa71 	bl	8004d96 <xQueueGenericCreate>
 80048b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd90      	pop	{r4, r7, pc}
	...

080048c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <osMessagePut+0x1e>
    ticks = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048de:	f7ff fdd9 	bl	8004494 <inHandlerMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d018      	beq.n	800491a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048e8:	f107 0210 	add.w	r2, r7, #16
 80048ec:	f107 0108 	add.w	r1, r7, #8
 80048f0:	2300      	movs	r3, #0
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fbf8 	bl	80050e8 <xQueueGenericSendFromISR>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <osMessagePut+0x42>
      return osErrorOS;
 80048fe:	23ff      	movs	r3, #255	; 0xff
 8004900:	e018      	b.n	8004934 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d014      	beq.n	8004932 <osMessagePut+0x72>
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <osMessagePut+0x7c>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	e00b      	b.n	8004932 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800491a:	f107 0108 	add.w	r1, r7, #8
 800491e:	2300      	movs	r3, #0
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fae2 	bl	8004eec <xQueueGenericSend>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <osMessagePut+0x72>
      return osErrorOS;
 800492e:	23ff      	movs	r3, #255	; 0xff
 8004930:	e000      	b.n	8004934 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b08b      	sub	sp, #44	; 0x2c
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	617b      	str	r3, [r7, #20]
    return event;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	461c      	mov	r4, r3
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800496a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800496e:	e054      	b.n	8004a1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d103      	bne.n	8004988 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	e009      	b.n	800499c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <osMessageGet+0x5c>
      ticks = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800499c:	f7ff fd7a 	bl	8004494 <inHandlerMode>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01c      	beq.n	80049e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80049a6:	f107 0220 	add.w	r2, r7, #32
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	68b8      	ldr	r0, [r7, #8]
 80049b4:	f000 feaa 	bl	800570c <xQueueReceiveFromISR>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d102      	bne.n	80049c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80049be:	2310      	movs	r3, #16
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e001      	b.n	80049c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01d      	beq.n	8004a0a <osMessageGet+0xca>
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <osMessageGet+0xe4>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	e014      	b.n	8004a0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	3304      	adds	r3, #4
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	4619      	mov	r1, r3
 80049ea:	68b8      	ldr	r0, [r7, #8]
 80049ec:	f000 fca2 	bl	8005334 <xQueueReceive>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80049f6:	2310      	movs	r3, #16
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e006      	b.n	8004a0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <osMessageGet+0xc6>
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <osMessageGet+0xc8>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	461c      	mov	r4, r3
 8004a0e:	f107 0314 	add.w	r3, r7, #20
 8004a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	372c      	adds	r7, #44	; 0x2c
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004a30:	f7ff fd30 	bl	8004494 <inHandlerMode>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 ff04 	bl	8005848 <uxQueueMessagesWaitingFromISR>
 8004a40:	4603      	mov	r3, r0
 8004a42:	e003      	b.n	8004a4c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fee1 	bl	800580c <uxQueueMessagesWaiting>
 8004a4a:	4603      	mov	r3, r0
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004a5c:	f7ff fd1a 	bl	8004494 <inHandlerMode>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <osMessageDelete+0x16>
    return osErrorISR;
 8004a66:	2382      	movs	r3, #130	; 0x82
 8004a68:	e003      	b.n	8004a72 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 ff07 	bl	800587e <vQueueDelete>

  return osOK; 
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f103 0208 	add.w	r2, r3, #8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f103 0208 	add.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f103 0208 	add.w	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d103      	bne.n	8004b36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e00c      	b.n	8004b50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e002      	b.n	8004b44 <vListInsert+0x2e>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d2f6      	bcs.n	8004b3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6892      	ldr	r2, [r2, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6852      	ldr	r2, [r2, #4]
 8004ba6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d103      	bne.n	8004bba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c02:	f002 f8cb 	bl	8006d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	3b01      	subs	r3, #1
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01a      	beq.n	8004c96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3310      	adds	r3, #16
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fba3 	bl	80063b0 <xTaskRemoveFromEventList>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <xQueueGenericReset+0xcc>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	e009      	b.n	8004c96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3310      	adds	r3, #16
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fef7 	bl	8004a7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fef2 	bl	8004a7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c96:	f002 f8b1 	bl	8006dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <xQueueGenericCreateStatic+0x52>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <xQueueGenericCreateStatic+0x56>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <xQueueGenericCreateStatic+0x58>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	623b      	str	r3, [r7, #32]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <xQueueGenericCreateStatic+0x7e>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <xQueueGenericCreateStatic+0x82>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <xQueueGenericCreateStatic+0x84>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61fb      	str	r3, [r7, #28]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d46:	2348      	movs	r3, #72	; 0x48
 8004d48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b48      	cmp	r3, #72	; 0x48
 8004d4e:	d00a      	beq.n	8004d66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	61bb      	str	r3, [r7, #24]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f843 	bl	8004e12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b08a      	sub	sp, #40	; 0x28
 8004d9a:	af02      	add	r7, sp, #8
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	613b      	str	r3, [r7, #16]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	e004      	b.n	8004dd6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3348      	adds	r3, #72	; 0x48
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f002 f8de 	bl	8006f9c <pvPortMalloc>
 8004de0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00f      	beq.n	8004e08 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	3348      	adds	r3, #72	; 0x48
 8004dec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df6:	79fa      	ldrb	r2, [r7, #7]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f805 	bl	8004e12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e08:	69bb      	ldr	r3, [r7, #24]
	}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e002      	b.n	8004e34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e40:	2101      	movs	r1, #1
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f7ff fec8 	bl	8004bd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00e      	beq.n	8004e7c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e70:	2300      	movs	r3, #0
 8004e72:	2200      	movs	r2, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f838 	bl	8004eec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6939      	ldr	r1, [r7, #16]
 8004e9c:	6978      	ldr	r0, [r7, #20]
 8004e9e:	f7ff ff7a 	bl	8004d96 <xQueueGenericCreate>
 8004ea2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff ffd3 	bl	8004e50 <prvInitialiseMutex>

		return pxNewQueue;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
	}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	4603      	mov	r3, r0
 8004ebc:	6039      	str	r1, [r7, #0]
 8004ebe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	6939      	ldr	r1, [r7, #16]
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f7ff fee8 	bl	8004ca8 <xQueueGenericCreateStatic>
 8004ed8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ffb8 	bl	8004e50 <prvInitialiseMutex>

		return pxNewQueue;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
	}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueGenericSend+0x32>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <xQueueGenericSend+0x40>
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <xQueueGenericSend+0x44>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <xQueueGenericSend+0x46>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <xQueueGenericSend+0x60>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d103      	bne.n	8004f5a <xQueueGenericSend+0x6e>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <xQueueGenericSend+0x72>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueGenericSend+0x74>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueGenericSend+0x8e>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	623b      	str	r3, [r7, #32]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7a:	f001 fbd9 	bl	8006730 <xTaskGetSchedulerState>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <xQueueGenericSend+0x9e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueGenericSend+0xa2>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <xQueueGenericSend+0xa4>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xQueueGenericSend+0xbe>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	61fb      	str	r3, [r7, #28]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004faa:	f001 fef7 	bl	8006d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <xQueueGenericSend+0xd4>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d129      	bne.n	8005014 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fc6:	f000 fc94 	bl	80058f2 <prvCopyDataToQueue>
 8004fca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	3324      	adds	r3, #36	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 f9e9 	bl	80063b0 <xTaskRemoveFromEventList>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b3f      	ldr	r3, [pc, #252]	; (80050e4 <xQueueGenericSend+0x1f8>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	e00a      	b.n	800500c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ffc:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <xQueueGenericSend+0x1f8>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800500c:	f001 fef6 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8005010:	2301      	movs	r3, #1
 8005012:	e063      	b.n	80050dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800501a:	f001 feef 	bl	8006dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800501e:	2300      	movs	r3, #0
 8005020:	e05c      	b.n	80050dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fa21 	bl	8006474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005032:	2301      	movs	r3, #1
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005036:	f001 fee1 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800503a:	f000 ffb3 	bl	8005fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800503e:	f001 fead 	bl	8006d9c <vPortEnterCritical>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005048:	b25b      	sxtb	r3, r3
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d103      	bne.n	8005058 <xQueueGenericSend+0x16c>
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800505e:	b25b      	sxtb	r3, r3
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d103      	bne.n	800506e <xQueueGenericSend+0x182>
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800506e:	f001 fec5 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005072:	1d3a      	adds	r2, r7, #4
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fa10 	bl	80064a0 <xTaskCheckForTimeOut>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d124      	bne.n	80050d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005088:	f000 fd2b 	bl	8005ae2 <prvIsQueueFull>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d018      	beq.n	80050c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	3310      	adds	r3, #16
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f001 f964 	bl	8006368 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a2:	f000 fcb6 	bl	8005a12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050a6:	f000 ff8b 	bl	8005fc0 <xTaskResumeAll>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f af7c 	bne.w	8004faa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <xQueueGenericSend+0x1f8>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	e772      	b.n	8004faa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050c6:	f000 fca4 	bl	8005a12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ca:	f000 ff79 	bl	8005fc0 <xTaskResumeAll>
 80050ce:	e76c      	b.n	8004faa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d2:	f000 fc9e 	bl	8005a12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050d6:	f000 ff73 	bl	8005fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050da:	2300      	movs	r3, #0
		}
	}
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3738      	adds	r7, #56	; 0x38
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	; 0x38
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005112:	bf00      	nop
 8005114:	e7fe      	b.n	8005114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <xQueueGenericSendFromISR+0x3c>
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <xQueueGenericSendFromISR+0x40>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xQueueGenericSendFromISR+0x42>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	623b      	str	r3, [r7, #32]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d103      	bne.n	8005152 <xQueueGenericSendFromISR+0x6a>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <xQueueGenericSendFromISR+0x6e>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <xQueueGenericSendFromISR+0x70>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61fb      	str	r3, [r7, #28]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005172:	f001 fed5 	bl	8006f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005176:	f3ef 8211 	mrs	r2, BASEPRI
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	61ba      	str	r2, [r7, #24]
 800518c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800518e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <xQueueGenericSendFromISR+0xbc>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d12c      	bne.n	80051fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b4:	f000 fb9d 	bl	80058f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d112      	bne.n	80051e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 f8ee 	bl	80063b0 <xTaskRemoveFromEventList>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00e      	beq.n	80051f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e007      	b.n	80051f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051ec:	3301      	adds	r3, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	b25a      	sxtb	r2, r3
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051f8:	2301      	movs	r3, #1
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051fc:	e001      	b.n	8005202 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800520c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005210:	4618      	mov	r0, r3
 8005212:	3738      	adds	r7, #56	; 0x38
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	; 0x38
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	623b      	str	r3, [r7, #32]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <xQueueGiveFromISR+0x48>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	61fb      	str	r3, [r7, #28]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <xQueueGiveFromISR+0x58>
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <xQueueGiveFromISR+0x5c>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <xQueueGiveFromISR+0x5e>
 8005274:	2300      	movs	r3, #0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <xQueueGiveFromISR+0x78>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	61bb      	str	r3, [r7, #24]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005290:	f001 fe46 	bl	8006f20 <vPortValidateInterruptPriority>
	__asm volatile
 8005294:	f3ef 8211 	mrs	r2, BASEPRI
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	617a      	str	r2, [r7, #20]
 80052aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80052ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	429a      	cmp	r2, r3
 80052be:	d22b      	bcs.n	8005318 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d112      	bne.n	8005302 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d016      	beq.n	8005312 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	3324      	adds	r3, #36	; 0x24
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f861 	bl	80063b0 <xTaskRemoveFromEventList>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00e      	beq.n	8005312 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e007      	b.n	8005312 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005306:	3301      	adds	r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	b25a      	sxtb	r2, r3
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005312:	2301      	movs	r3, #1
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	e001      	b.n	800531c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005318:	2300      	movs	r3, #0
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f383 8811 	msr	BASEPRI, r3
}
 8005326:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800532a:	4618      	mov	r0, r3
 800532c:	3738      	adds	r7, #56	; 0x38
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	; 0x30
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005340:	2300      	movs	r3, #0
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <xQueueReceive+0x30>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	623b      	str	r3, [r7, #32]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <xQueueReceive+0x3e>
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <xQueueReceive+0x42>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <xQueueReceive+0x44>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <xQueueReceive+0x5e>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	61fb      	str	r3, [r7, #28]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005392:	f001 f9cd 	bl	8006730 <xTaskGetSchedulerState>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d102      	bne.n	80053a2 <xQueueReceive+0x6e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <xQueueReceive+0x72>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <xQueueReceive+0x74>
 80053a6:	2300      	movs	r3, #0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueReceive+0x8e>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80053c2:	f001 fceb 	bl	8006d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01f      	beq.n	8005412 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d6:	f000 faf6 	bl	80059c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	1e5a      	subs	r2, r3, #1
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00f      	beq.n	800540a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	3310      	adds	r3, #16
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 ffde 	bl	80063b0 <xTaskRemoveFromEventList>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <xQueueReceive+0x1bc>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800540a:	f001 fcf7 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 800540e:	2301      	movs	r3, #1
 8005410:	e069      	b.n	80054e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005418:	f001 fcf0 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800541c:	2300      	movs	r3, #0
 800541e:	e062      	b.n	80054e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005426:	f107 0310 	add.w	r3, r7, #16
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f822 	bl	8006474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005434:	f001 fce2 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005438:	f000 fdb4 	bl	8005fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800543c:	f001 fcae 	bl	8006d9c <vPortEnterCritical>
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005446:	b25b      	sxtb	r3, r3
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d103      	bne.n	8005456 <xQueueReceive+0x122>
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800545c:	b25b      	sxtb	r3, r3
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d103      	bne.n	800546c <xQueueReceive+0x138>
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800546c:	f001 fcc6 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005470:	1d3a      	adds	r2, r7, #4
 8005472:	f107 0310 	add.w	r3, r7, #16
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f811 	bl	80064a0 <xTaskCheckForTimeOut>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d123      	bne.n	80054cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005486:	f000 fb16 	bl	8005ab6 <prvIsQueueEmpty>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d017      	beq.n	80054c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	3324      	adds	r3, #36	; 0x24
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 ff65 	bl	8006368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800549e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a0:	f000 fab7 	bl	8005a12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054a4:	f000 fd8c 	bl	8005fc0 <xTaskResumeAll>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d189      	bne.n	80053c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <xQueueReceive+0x1bc>)
 80054b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	e780      	b.n	80053c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c2:	f000 faa6 	bl	8005a12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054c6:	f000 fd7b 	bl	8005fc0 <xTaskResumeAll>
 80054ca:	e77a      	b.n	80053c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ce:	f000 faa0 	bl	8005a12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054d2:	f000 fd75 	bl	8005fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d8:	f000 faed 	bl	8005ab6 <prvIsQueueEmpty>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f43f af6f 	beq.w	80053c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3730      	adds	r7, #48	; 0x30
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08e      	sub	sp, #56	; 0x38
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005506:	2300      	movs	r3, #0
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	623b      	str	r3, [r7, #32]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	61fb      	str	r3, [r7, #28]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005544:	f001 f8f4 	bl	8006730 <xTaskGetSchedulerState>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <xQueueSemaphoreTake+0x60>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <xQueueSemaphoreTake+0x64>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <xQueueSemaphoreTake+0x66>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61bb      	str	r3, [r7, #24]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005574:	f001 fc12 	bl	8006d9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	d024      	beq.n	80055ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005594:	f001 fa96 	bl	8006ac4 <pvTaskIncrementMutexHeldCount>
 8005598:	4602      	mov	r2, r0
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00f      	beq.n	80055c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	3310      	adds	r3, #16
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 ff00 	bl	80063b0 <xTaskRemoveFromEventList>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b6:	4b54      	ldr	r3, [pc, #336]	; (8005708 <xQueueSemaphoreTake+0x214>)
 80055b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c6:	f001 fc19 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e097      	b.n	80056fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d111      	bne.n	80055f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	617b      	str	r3, [r7, #20]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80055f0:	f001 fc04 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e082      	b.n	80056fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	4618      	mov	r0, r3
 8005604:	f000 ff36 	bl	8006474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800560c:	f001 fbf6 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005610:	f000 fcc8 	bl	8005fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005614:	f001 fbc2 	bl	8006d9c <vPortEnterCritical>
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d103      	bne.n	800562e <xQueueSemaphoreTake+0x13a>
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005634:	b25b      	sxtb	r3, r3
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d103      	bne.n	8005644 <xQueueSemaphoreTake+0x150>
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005644:	f001 fbda 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005648:	463a      	mov	r2, r7
 800564a:	f107 030c 	add.w	r3, r7, #12
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 ff25 	bl	80064a0 <xTaskCheckForTimeOut>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d132      	bne.n	80056c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800565c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800565e:	f000 fa2a 	bl	8005ab6 <prvIsQueueEmpty>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d026      	beq.n	80056b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005670:	f001 fb94 	bl	8006d9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	f001 f877 	bl	800676c <xTaskPriorityInherit>
 800567e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005680:	f001 fbbc 	bl	8006dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	3324      	adds	r3, #36	; 0x24
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fe6b 	bl	8006368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005694:	f000 f9bd 	bl	8005a12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005698:	f000 fc92 	bl	8005fc0 <xTaskResumeAll>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f47f af68 	bne.w	8005574 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80056a4:	4b18      	ldr	r3, [pc, #96]	; (8005708 <xQueueSemaphoreTake+0x214>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	e75e      	b.n	8005574 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80056b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056b8:	f000 f9ab 	bl	8005a12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056bc:	f000 fc80 	bl	8005fc0 <xTaskResumeAll>
 80056c0:	e758      	b.n	8005574 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056c4:	f000 f9a5 	bl	8005a12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056c8:	f000 fc7a 	bl	8005fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056ce:	f000 f9f2 	bl	8005ab6 <prvIsQueueEmpty>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f43f af4d 	beq.w	8005574 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00d      	beq.n	80056fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80056e0:	f001 fb5c 	bl	8006d9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80056e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e6:	f000 f8ed 	bl	80058c4 <prvGetDisinheritPriorityAfterTimeout>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 f946 	bl	8006984 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80056f8:	f001 fb80 	bl	8006dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3738      	adds	r7, #56	; 0x38
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08e      	sub	sp, #56	; 0x38
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	623b      	str	r3, [r7, #32]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueReceiveFromISR+0x3a>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueReceiveFromISR+0x3e>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueReceiveFromISR+0x40>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	61fb      	str	r3, [r7, #28]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005766:	f001 fbdb 	bl	8006f20 <vPortValidateInterruptPriority>
	__asm volatile
 800576a:	f3ef 8211 	mrs	r2, BASEPRI
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	61ba      	str	r2, [r7, #24]
 8005780:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005782:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02f      	beq.n	80057f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a0:	f000 f911 	bl	80059c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80057ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d112      	bne.n	80057dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	3310      	adds	r3, #16
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fdf4 	bl	80063b0 <xTaskRemoveFromEventList>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00e      	beq.n	80057ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e007      	b.n	80057ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80057dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e0:	3301      	adds	r3, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	b25a      	sxtb	r2, r3
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80057ec:	2301      	movs	r3, #1
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	e001      	b.n	80057f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f383 8811 	msr	BASEPRI, r3
}
 8005800:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005804:	4618      	mov	r0, r3
 8005806:	3738      	adds	r7, #56	; 0x38
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60bb      	str	r3, [r7, #8]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005830:	f001 fab4 	bl	8006d9c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800583a:	f001 fadf 	bl	8006dfc <vPortExitCritical>

	return uxReturn;
 800583e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60bb      	str	r3, [r7, #8]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005872:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <vQueueDelete+0x28>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60bb      	str	r3, [r7, #8]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f934 	bl	8005b14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f001 fc34 	bl	8007124 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1c3 0307 	rsb	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e001      	b.n	80058e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80058e6:	68fb      	ldr	r3, [r7, #12]
	}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10d      	bne.n	800592c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d14d      	bne.n	80059b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 ffab 	bl	8006878 <xTaskPriorityDisinherit>
 8005922:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	e043      	b.n	80059b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6898      	ldr	r0, [r3, #8]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	461a      	mov	r2, r3
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	f00d fda5 	bl	801348c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	441a      	add	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d32b      	bcc.n	80059b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e026      	b.n	80059b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68d8      	ldr	r0, [r3, #12]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	461a      	mov	r2, r3
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	f00d fd8b 	bl	801348c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	425b      	negs	r3, r3
 8005980:	441a      	add	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d207      	bcs.n	80059a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	425b      	negs	r3, r3
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d105      	bne.n	80059b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059bc:	697b      	ldr	r3, [r7, #20]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d018      	beq.n	8005a0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d303      	bcc.n	80059fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68d9      	ldr	r1, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	461a      	mov	r2, r3
 8005a04:	6838      	ldr	r0, [r7, #0]
 8005a06:	f00d fd41 	bl	801348c <memcpy>
	}
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a1a:	f001 f9bf 	bl	8006d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a26:	e011      	b.n	8005a4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d012      	beq.n	8005a56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3324      	adds	r3, #36	; 0x24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fcbb 	bl	80063b0 <xTaskRemoveFromEventList>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a40:	f000 fd90 	bl	8006564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dce9      	bgt.n	8005a28 <prvUnlockQueue+0x16>
 8005a54:	e000      	b.n	8005a58 <prvUnlockQueue+0x46>
					break;
 8005a56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	22ff      	movs	r2, #255	; 0xff
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a60:	f001 f9cc 	bl	8006dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a64:	f001 f99a 	bl	8006d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a70:	e011      	b.n	8005a96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3310      	adds	r3, #16
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fc96 	bl	80063b0 <xTaskRemoveFromEventList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a8a:	f000 fd6b 	bl	8006564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dce9      	bgt.n	8005a72 <prvUnlockQueue+0x60>
 8005a9e:	e000      	b.n	8005aa2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aa0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005aaa:	f001 f9a7 	bl	8006dfc <vPortExitCritical>
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005abe:	f001 f96d 	bl	8006d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e001      	b.n	8005ad4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 f992 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aea:	f001 f957 	bl	8006d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d102      	bne.n	8005b00 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e001      	b.n	8005b04 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b04:	f001 f97a 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005b08:	68fb      	ldr	r3, [r7, #12]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e016      	b.n	8005b50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005b22:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <vQueueUnregisterQueue+0x50>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d10b      	bne.n	8005b4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005b32:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <vQueueUnregisterQueue+0x50>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2100      	movs	r1, #0
 8005b38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005b3c:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <vQueueUnregisterQueue+0x50>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	2200      	movs	r2, #0
 8005b46:	605a      	str	r2, [r3, #4]
				break;
 8005b48:	e006      	b.n	8005b58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b07      	cmp	r3, #7
 8005b54:	d9e5      	bls.n	8005b22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	200042bc 	.word	0x200042bc

08005b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af04      	add	r7, sp, #16
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xTaskCreateStatic+0x46>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61fb      	str	r3, [r7, #28]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bae:	2354      	movs	r3, #84	; 0x54
 8005bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b54      	cmp	r3, #84	; 0x54
 8005bb6:	d00a      	beq.n	8005bce <xTaskCreateStatic+0x66>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	61bb      	str	r3, [r7, #24]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01e      	beq.n	8005c12 <xTaskCreateStatic+0xaa>
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01b      	beq.n	8005c12 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bec:	2300      	movs	r3, #0
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f850 	bl	8005caa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c0c:	f000 f8cc 	bl	8005da8 <prvAddNewTaskToReadyList>
 8005c10:	e001      	b.n	8005c16 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c16:	697b      	ldr	r3, [r7, #20]
	}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	; 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af04      	add	r7, sp, #16
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f9b1 	bl	8006f9c <pvPortMalloc>
 8005c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c42:	2054      	movs	r0, #84	; 0x54
 8005c44:	f001 f9aa 	bl	8006f9c <pvPortMalloc>
 8005c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
 8005c56:	e005      	b.n	8005c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f001 fa63 	bl	8007124 <vPortFree>
 8005c5e:	e001      	b.n	8005c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	2300      	movs	r3, #0
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f80e 	bl	8005caa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c8e:	69f8      	ldr	r0, [r7, #28]
 8005c90:	f000 f88a 	bl	8005da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e002      	b.n	8005ca0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	617b      	str	r3, [r7, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e012      	b.n	8005d1e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	7819      	ldrb	r1, [r3, #0]
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	3334      	adds	r3, #52	; 0x34
 8005d08:	460a      	mov	r2, r1
 8005d0a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d006      	beq.n	8005d26 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	d9e9      	bls.n	8005cf8 <prvInitialiseNewTask+0x4e>
 8005d24:	e000      	b.n	8005d28 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005d26:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d901      	bls.n	8005d3a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d36:	2306      	movs	r3, #6
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2200      	movs	r2, #0
 8005d4a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe feb1 	bl	8004ab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	3318      	adds	r3, #24
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe feac 	bl	8004ab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	f1c3 0207 	rsb	r2, r3, #7
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2200      	movs	r2, #0
 8005d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	69b8      	ldr	r0, [r7, #24]
 8005d8a:	f000 ff15 	bl	8006bb8 <pxPortInitialiseStack>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da0:	bf00      	nop
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005db0:	f000 fff4 	bl	8006d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005db4:	4b2a      	ldr	r3, [pc, #168]	; (8005e60 <prvAddNewTaskToReadyList+0xb8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	4a29      	ldr	r2, [pc, #164]	; (8005e60 <prvAddNewTaskToReadyList+0xb8>)
 8005dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <prvAddNewTaskToReadyList+0xbc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dc6:	4a27      	ldr	r2, [pc, #156]	; (8005e64 <prvAddNewTaskToReadyList+0xbc>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dcc:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <prvAddNewTaskToReadyList+0xb8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d110      	bne.n	8005df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dd4:	f000 fbea 	bl	80065ac <prvInitialiseTaskLists>
 8005dd8:	e00d      	b.n	8005df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dda:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <prvAddNewTaskToReadyList+0xc0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005de2:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <prvAddNewTaskToReadyList+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d802      	bhi.n	8005df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005df0:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <prvAddNewTaskToReadyList+0xbc>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <prvAddNewTaskToReadyList+0xc4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <prvAddNewTaskToReadyList+0xc4>)
 8005dfe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	2201      	movs	r2, #1
 8005e06:	409a      	lsls	r2, r3
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <prvAddNewTaskToReadyList+0xc8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	4a18      	ldr	r2, [pc, #96]	; (8005e70 <prvAddNewTaskToReadyList+0xc8>)
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <prvAddNewTaskToReadyList+0xcc>)
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fe fe51 	bl	8004ad0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e2e:	f000 ffe5 	bl	8006dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e32:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <prvAddNewTaskToReadyList+0xc0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <prvAddNewTaskToReadyList+0xbc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d207      	bcs.n	8005e58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <prvAddNewTaskToReadyList+0xd0>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200043fc 	.word	0x200043fc
 8005e64:	200042fc 	.word	0x200042fc
 8005e68:	20004408 	.word	0x20004408
 8005e6c:	20004418 	.word	0x20004418
 8005e70:	20004404 	.word	0x20004404
 8005e74:	20004300 	.word	0x20004300
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d017      	beq.n	8005ebe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <vTaskDelay+0x60>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <vTaskDelay+0x30>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60bb      	str	r3, [r7, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005eac:	f000 f87a 	bl	8005fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fe1a 	bl	8006aec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eb8:	f000 f882 	bl	8005fc0 <xTaskResumeAll>
 8005ebc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d107      	bne.n	8005ed4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <vTaskDelay+0x64>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20004424 	.word	0x20004424
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ef2:	463a      	mov	r2, r7
 8005ef4:	1d39      	adds	r1, r7, #4
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa faf6 	bl	80004ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	9202      	str	r2, [sp, #8]
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	460a      	mov	r2, r1
 8005f12:	491e      	ldr	r1, [pc, #120]	; (8005f8c <vTaskStartScheduler+0xa8>)
 8005f14:	481e      	ldr	r0, [pc, #120]	; (8005f90 <vTaskStartScheduler+0xac>)
 8005f16:	f7ff fe27 	bl	8005b68 <xTaskCreateStatic>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <vTaskStartScheduler+0xb0>)
 8005f1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f20:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <vTaskStartScheduler+0xb0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e001      	b.n	8005f32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d116      	bne.n	8005f66 <vTaskStartScheduler+0x82>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	613b      	str	r3, [r7, #16]
}
 8005f4a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f4c:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <vTaskStartScheduler+0xb4>)
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f54:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <vTaskStartScheduler+0xb8>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <vTaskStartScheduler+0xbc>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f60:	f000 feaa 	bl	8006cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f64:	e00e      	b.n	8005f84 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d10a      	bne.n	8005f84 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60fb      	str	r3, [r7, #12]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vTaskStartScheduler+0x9e>
}
 8005f84:	bf00      	nop
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08014890 	.word	0x08014890
 8005f90:	0800657d 	.word	0x0800657d
 8005f94:	20004420 	.word	0x20004420
 8005f98:	2000441c 	.word	0x2000441c
 8005f9c:	20004408 	.word	0x20004408
 8005fa0:	20004400 	.word	0x20004400

08005fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <vTaskSuspendAll+0x18>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	4a03      	ldr	r2, [pc, #12]	; (8005fbc <vTaskSuspendAll+0x18>)
 8005fb0:	6013      	str	r3, [r2, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20004424 	.word	0x20004424

08005fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <xTaskResumeAll+0x114>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <xTaskResumeAll+0x2c>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	603b      	str	r3, [r7, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fec:	f000 fed6 	bl	8006d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ff0:	4b38      	ldr	r3, [pc, #224]	; (80060d4 <xTaskResumeAll+0x114>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	4a37      	ldr	r2, [pc, #220]	; (80060d4 <xTaskResumeAll+0x114>)
 8005ff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ffa:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <xTaskResumeAll+0x114>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d161      	bne.n	80060c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006002:	4b35      	ldr	r3, [pc, #212]	; (80060d8 <xTaskResumeAll+0x118>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05d      	beq.n	80060c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800600a:	e02e      	b.n	800606a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800600c:	4b33      	ldr	r3, [pc, #204]	; (80060dc <xTaskResumeAll+0x11c>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3318      	adds	r3, #24
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fdb4 	bl	8004b86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fdaf 	bl	8004b86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <xTaskResumeAll+0x120>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4313      	orrs	r3, r2
 8006036:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <xTaskResumeAll+0x120>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4a27      	ldr	r2, [pc, #156]	; (80060e4 <xTaskResumeAll+0x124>)
 8006048:	441a      	add	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f7fe fd3d 	bl	8004ad0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <xTaskResumeAll+0x128>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d302      	bcc.n	800606a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <xTaskResumeAll+0x12c>)
 8006066:	2201      	movs	r2, #1
 8006068:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800606a:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <xTaskResumeAll+0x11c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1cc      	bne.n	800600c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006078:	f000 fb36 	bl	80066e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800607c:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <xTaskResumeAll+0x130>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006088:	f000 f856 	bl	8006138 <xTaskIncrementTick>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006092:	4b16      	ldr	r3, [pc, #88]	; (80060ec <xTaskResumeAll+0x12c>)
 8006094:	2201      	movs	r2, #1
 8006096:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3b01      	subs	r3, #1
 800609c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f1      	bne.n	8006088 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060a4:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <xTaskResumeAll+0x130>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <xTaskResumeAll+0x12c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <xTaskResumeAll+0x134>)
 80060b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060c6:	f000 fe99 	bl	8006dfc <vPortExitCritical>

	return xAlreadyYielded;
 80060ca:	68bb      	ldr	r3, [r7, #8]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20004424 	.word	0x20004424
 80060d8:	200043fc 	.word	0x200043fc
 80060dc:	200043bc 	.word	0x200043bc
 80060e0:	20004404 	.word	0x20004404
 80060e4:	20004300 	.word	0x20004300
 80060e8:	200042fc 	.word	0x200042fc
 80060ec:	20004410 	.word	0x20004410
 80060f0:	2000440c 	.word	0x2000440c
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <xTaskGetTickCount+0x18>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006104:	687b      	ldr	r3, [r7, #4]
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr
 8006110:	20004400 	.word	0x20004400

08006114 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800611a:	f000 ff01 	bl	8006f20 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006122:	4b04      	ldr	r3, [pc, #16]	; (8006134 <xTaskGetTickCountFromISR+0x20>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006128:	683b      	ldr	r3, [r7, #0]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20004400 	.word	0x20004400

08006138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006142:	4b51      	ldr	r3, [pc, #324]	; (8006288 <xTaskIncrementTick+0x150>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f040 808d 	bne.w	8006266 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800614c:	4b4f      	ldr	r3, [pc, #316]	; (800628c <xTaskIncrementTick+0x154>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006154:	4a4d      	ldr	r2, [pc, #308]	; (800628c <xTaskIncrementTick+0x154>)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d120      	bne.n	80061a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006160:	4b4b      	ldr	r3, [pc, #300]	; (8006290 <xTaskIncrementTick+0x158>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <xTaskIncrementTick+0x48>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <xTaskIncrementTick+0x46>
 8006180:	4b43      	ldr	r3, [pc, #268]	; (8006290 <xTaskIncrementTick+0x158>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	4b43      	ldr	r3, [pc, #268]	; (8006294 <xTaskIncrementTick+0x15c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a41      	ldr	r2, [pc, #260]	; (8006290 <xTaskIncrementTick+0x158>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4a41      	ldr	r2, [pc, #260]	; (8006294 <xTaskIncrementTick+0x15c>)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <xTaskIncrementTick+0x160>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <xTaskIncrementTick+0x160>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	f000 faa3 	bl	80066e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061a2:	4b3e      	ldr	r3, [pc, #248]	; (800629c <xTaskIncrementTick+0x164>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d34d      	bcc.n	8006248 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ac:	4b38      	ldr	r3, [pc, #224]	; (8006290 <xTaskIncrementTick+0x158>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <xTaskIncrementTick+0x82>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xTaskIncrementTick+0x84>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c0:	4b36      	ldr	r3, [pc, #216]	; (800629c <xTaskIncrementTick+0x164>)
 80061c2:	f04f 32ff 	mov.w	r2, #4294967295
 80061c6:	601a      	str	r2, [r3, #0]
					break;
 80061c8:	e03e      	b.n	8006248 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <xTaskIncrementTick+0x158>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d203      	bcs.n	80061ea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061e2:	4a2e      	ldr	r2, [pc, #184]	; (800629c <xTaskIncrementTick+0x164>)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6013      	str	r3, [r2, #0]
						break;
 80061e8:	e02e      	b.n	8006248 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fcc9 	bl	8004b86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	3318      	adds	r3, #24
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fcc0 	bl	8004b86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	2201      	movs	r2, #1
 800620c:	409a      	lsls	r2, r3
 800620e:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <xTaskIncrementTick+0x168>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <xTaskIncrementTick+0x168>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <xTaskIncrementTick+0x16c>)
 8006226:	441a      	add	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe fc4e 	bl	8004ad0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <xTaskIncrementTick+0x170>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	429a      	cmp	r2, r3
 8006240:	d3b4      	bcc.n	80061ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006242:	2301      	movs	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006246:	e7b1      	b.n	80061ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006248:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <xTaskIncrementTick+0x170>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624e:	4915      	ldr	r1, [pc, #84]	; (80062a4 <xTaskIncrementTick+0x16c>)
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d907      	bls.n	8006270 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e004      	b.n	8006270 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006266:	4b11      	ldr	r3, [pc, #68]	; (80062ac <xTaskIncrementTick+0x174>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	4a0f      	ldr	r2, [pc, #60]	; (80062ac <xTaskIncrementTick+0x174>)
 800626e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006270:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <xTaskIncrementTick+0x178>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006278:	2301      	movs	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800627c:	697b      	ldr	r3, [r7, #20]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20004424 	.word	0x20004424
 800628c:	20004400 	.word	0x20004400
 8006290:	200043b4 	.word	0x200043b4
 8006294:	200043b8 	.word	0x200043b8
 8006298:	20004414 	.word	0x20004414
 800629c:	2000441c 	.word	0x2000441c
 80062a0:	20004404 	.word	0x20004404
 80062a4:	20004300 	.word	0x20004300
 80062a8:	200042fc 	.word	0x200042fc
 80062ac:	2000440c 	.word	0x2000440c
 80062b0:	20004410 	.word	0x20004410

080062b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <vTaskSwitchContext+0xa0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062c2:	4b25      	ldr	r3, [pc, #148]	; (8006358 <vTaskSwitchContext+0xa4>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062c8:	e03f      	b.n	800634a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80062ca:	4b23      	ldr	r3, [pc, #140]	; (8006358 <vTaskSwitchContext+0xa4>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80062d0:	4b22      	ldr	r3, [pc, #136]	; (800635c <vTaskSwitchContext+0xa8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	fab3 f383 	clz	r3, r3
 80062dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062de:	7afb      	ldrb	r3, [r7, #11]
 80062e0:	f1c3 031f 	rsb	r3, r3, #31
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	491e      	ldr	r1, [pc, #120]	; (8006360 <vTaskSwitchContext+0xac>)
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <vTaskSwitchContext+0x5c>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	607b      	str	r3, [r7, #4]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <vTaskSwitchContext+0x5a>
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4a11      	ldr	r2, [pc, #68]	; (8006360 <vTaskSwitchContext+0xac>)
 800631c:	4413      	add	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3308      	adds	r3, #8
 8006332:	429a      	cmp	r2, r3
 8006334:	d104      	bne.n	8006340 <vTaskSwitchContext+0x8c>
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	4a07      	ldr	r2, [pc, #28]	; (8006364 <vTaskSwitchContext+0xb0>)
 8006348:	6013      	str	r3, [r2, #0]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	20004424 	.word	0x20004424
 8006358:	20004410 	.word	0x20004410
 800635c:	20004404 	.word	0x20004404
 8006360:	20004300 	.word	0x20004300
 8006364:	200042fc 	.word	0x200042fc

08006368 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <vTaskPlaceOnEventList+0x44>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3318      	adds	r3, #24
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fe fbbd 	bl	8004b16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800639c:	2101      	movs	r1, #1
 800639e:	6838      	ldr	r0, [r7, #0]
 80063a0:	f000 fba4 	bl	8006aec <prvAddCurrentTaskToDelayedList>
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200042fc 	.word	0x200042fc

080063b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3318      	adds	r3, #24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fbd0 	bl	8004b86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <xTaskRemoveFromEventList+0xac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d11c      	bne.n	8006428 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fbc7 	bl	8004b86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	2201      	movs	r2, #1
 80063fe:	409a      	lsls	r2, r3
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <xTaskRemoveFromEventList+0xb0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4313      	orrs	r3, r2
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <xTaskRemoveFromEventList+0xb0>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <xTaskRemoveFromEventList+0xb4>)
 8006418:	441a      	add	r2, r3
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fe fb55 	bl	8004ad0 <vListInsertEnd>
 8006426:	e005      	b.n	8006434 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3318      	adds	r3, #24
 800642c:	4619      	mov	r1, r3
 800642e:	480e      	ldr	r0, [pc, #56]	; (8006468 <xTaskRemoveFromEventList+0xb8>)
 8006430:	f7fe fb4e 	bl	8004ad0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <xTaskRemoveFromEventList+0xbc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	429a      	cmp	r2, r3
 8006440:	d905      	bls.n	800644e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006442:	2301      	movs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <xTaskRemoveFromEventList+0xc0>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e001      	b.n	8006452 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006452:	697b      	ldr	r3, [r7, #20]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20004424 	.word	0x20004424
 8006460:	20004404 	.word	0x20004404
 8006464:	20004300 	.word	0x20004300
 8006468:	200043bc 	.word	0x200043bc
 800646c:	200042fc 	.word	0x200042fc
 8006470:	20004410 	.word	0x20004410

08006474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <vTaskInternalSetTimeOutState+0x24>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <vTaskInternalSetTimeOutState+0x28>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	605a      	str	r2, [r3, #4]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20004414 	.word	0x20004414
 800649c:	20004400 	.word	0x20004400

080064a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60fb      	str	r3, [r7, #12]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064e2:	f000 fc5b 	bl	8006d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064e6:	4b1d      	ldr	r3, [pc, #116]	; (800655c <xTaskCheckForTimeOut+0xbc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d102      	bne.n	8006506 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	e023      	b.n	800654e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <xTaskCheckForTimeOut+0xc0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d007      	beq.n	8006522 <xTaskCheckForTimeOut+0x82>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	e015      	b.n	800654e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	d20b      	bcs.n	8006544 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff9b 	bl	8006474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	e004      	b.n	800654e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800654e:	f000 fc55 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8006552:	69fb      	ldr	r3, [r7, #28]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20004400 	.word	0x20004400
 8006560:	20004414 	.word	0x20004414

08006564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006564:	b480      	push	{r7}
 8006566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006568:	4b03      	ldr	r3, [pc, #12]	; (8006578 <vTaskMissedYield+0x14>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
}
 800656e:	bf00      	nop
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20004410 	.word	0x20004410

0800657c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006584:	f000 f852 	bl	800662c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <prvIdleTask+0x28>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d9f9      	bls.n	8006584 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <prvIdleTask+0x2c>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065a0:	e7f0      	b.n	8006584 <prvIdleTask+0x8>
 80065a2:	bf00      	nop
 80065a4:	20004300 	.word	0x20004300
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
 80065b6:	e00c      	b.n	80065d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4a12      	ldr	r2, [pc, #72]	; (800660c <prvInitialiseTaskLists+0x60>)
 80065c4:	4413      	add	r3, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fa57 	bl	8004a7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3301      	adds	r3, #1
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b06      	cmp	r3, #6
 80065d6:	d9ef      	bls.n	80065b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065d8:	480d      	ldr	r0, [pc, #52]	; (8006610 <prvInitialiseTaskLists+0x64>)
 80065da:	f7fe fa4e 	bl	8004a7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065de:	480d      	ldr	r0, [pc, #52]	; (8006614 <prvInitialiseTaskLists+0x68>)
 80065e0:	f7fe fa4b 	bl	8004a7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065e4:	480c      	ldr	r0, [pc, #48]	; (8006618 <prvInitialiseTaskLists+0x6c>)
 80065e6:	f7fe fa48 	bl	8004a7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065ea:	480c      	ldr	r0, [pc, #48]	; (800661c <prvInitialiseTaskLists+0x70>)
 80065ec:	f7fe fa45 	bl	8004a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065f0:	480b      	ldr	r0, [pc, #44]	; (8006620 <prvInitialiseTaskLists+0x74>)
 80065f2:	f7fe fa42 	bl	8004a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <prvInitialiseTaskLists+0x78>)
 80065f8:	4a05      	ldr	r2, [pc, #20]	; (8006610 <prvInitialiseTaskLists+0x64>)
 80065fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <prvInitialiseTaskLists+0x7c>)
 80065fe:	4a05      	ldr	r2, [pc, #20]	; (8006614 <prvInitialiseTaskLists+0x68>)
 8006600:	601a      	str	r2, [r3, #0]
}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20004300 	.word	0x20004300
 8006610:	2000438c 	.word	0x2000438c
 8006614:	200043a0 	.word	0x200043a0
 8006618:	200043bc 	.word	0x200043bc
 800661c:	200043d0 	.word	0x200043d0
 8006620:	200043e8 	.word	0x200043e8
 8006624:	200043b4 	.word	0x200043b4
 8006628:	200043b8 	.word	0x200043b8

0800662c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006632:	e019      	b.n	8006668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006634:	f000 fbb2 	bl	8006d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <prvCheckTasksWaitingTermination+0x50>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fa9e 	bl	8004b86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <prvCheckTasksWaitingTermination+0x54>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3b01      	subs	r3, #1
 8006650:	4a0b      	ldr	r2, [pc, #44]	; (8006680 <prvCheckTasksWaitingTermination+0x54>)
 8006652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <prvCheckTasksWaitingTermination+0x58>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <prvCheckTasksWaitingTermination+0x58>)
 800665c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800665e:	f000 fbcd 	bl	8006dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f810 	bl	8006688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <prvCheckTasksWaitingTermination+0x58>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e1      	bne.n	8006634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200043d0 	.word	0x200043d0
 8006680:	200043fc 	.word	0x200043fc
 8006684:	200043e4 	.word	0x200043e4

08006688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006696:	2b00      	cmp	r3, #0
 8006698:	d108      	bne.n	80066ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd40 	bl	8007124 <vPortFree>
				vPortFree( pxTCB );
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fd3d 	bl	8007124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066aa:	e018      	b.n	80066de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d103      	bne.n	80066be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fd34 	bl	8007124 <vPortFree>
	}
 80066bc:	e00f      	b.n	80066de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d00a      	beq.n	80066de <prvDeleteTCB+0x56>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	60fb      	str	r3, [r7, #12]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <prvDeleteTCB+0x54>
	}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ee:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <prvResetNextTaskUnblockTime+0x40>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <prvResetNextTaskUnblockTime+0x14>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <prvResetNextTaskUnblockTime+0x16>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <prvResetNextTaskUnblockTime+0x44>)
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800670a:	e008      	b.n	800671e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <prvResetNextTaskUnblockTime+0x40>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4a04      	ldr	r2, [pc, #16]	; (800672c <prvResetNextTaskUnblockTime+0x44>)
 800671c:	6013      	str	r3, [r2, #0]
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr
 8006728:	200043b4 	.word	0x200043b4
 800672c:	2000441c 	.word	0x2000441c

08006730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <xTaskGetSchedulerState+0x34>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800673e:	2301      	movs	r3, #1
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	e008      	b.n	8006756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006744:	4b08      	ldr	r3, [pc, #32]	; (8006768 <xTaskGetSchedulerState+0x38>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800674c:	2302      	movs	r3, #2
 800674e:	607b      	str	r3, [r7, #4]
 8006750:	e001      	b.n	8006756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006752:	2300      	movs	r3, #0
 8006754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006756:	687b      	ldr	r3, [r7, #4]
	}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20004408 	.word	0x20004408
 8006768:	20004424 	.word	0x20004424

0800676c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d06e      	beq.n	8006860 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	4b39      	ldr	r3, [pc, #228]	; (800686c <xTaskPriorityInherit+0x100>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d25e      	bcs.n	800684e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	db06      	blt.n	80067a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006798:	4b34      	ldr	r3, [pc, #208]	; (800686c <xTaskPriorityInherit+0x100>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	f1c3 0207 	rsb	r2, r3, #7
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6959      	ldr	r1, [r3, #20]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a2e      	ldr	r2, [pc, #184]	; (8006870 <xTaskPriorityInherit+0x104>)
 80067b8:	4413      	add	r3, r2
 80067ba:	4299      	cmp	r1, r3
 80067bc:	d101      	bne.n	80067c2 <xTaskPriorityInherit+0x56>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <xTaskPriorityInherit+0x58>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d03a      	beq.n	800683e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe f9da 	bl	8004b86 <uxListRemove>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d115      	bne.n	8006804 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4924      	ldr	r1, [pc, #144]	; (8006870 <xTaskPriorityInherit+0x104>)
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <xTaskPriorityInherit+0x98>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	2201      	movs	r2, #1
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	43da      	mvns	r2, r3
 80067fa:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <xTaskPriorityInherit+0x108>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4013      	ands	r3, r2
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <xTaskPriorityInherit+0x108>)
 8006802:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <xTaskPriorityInherit+0x100>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	2201      	movs	r2, #1
 8006814:	409a      	lsls	r2, r3
 8006816:	4b17      	ldr	r3, [pc, #92]	; (8006874 <xTaskPriorityInherit+0x108>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4313      	orrs	r3, r2
 800681c:	4a15      	ldr	r2, [pc, #84]	; (8006874 <xTaskPriorityInherit+0x108>)
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4a10      	ldr	r2, [pc, #64]	; (8006870 <xTaskPriorityInherit+0x104>)
 800682e:	441a      	add	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f7fe f94a 	bl	8004ad0 <vListInsertEnd>
 800683c:	e004      	b.n	8006848 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <xTaskPriorityInherit+0x100>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e008      	b.n	8006860 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <xTaskPriorityInherit+0x100>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	429a      	cmp	r2, r3
 800685a:	d201      	bcs.n	8006860 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006860:	68fb      	ldr	r3, [r7, #12]
	}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200042fc 	.word	0x200042fc
 8006870:	20004300 	.word	0x20004300
 8006874:	20004404 	.word	0x20004404

08006878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d06e      	beq.n	800696c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800688e:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <xTaskPriorityDisinherit+0x100>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	429a      	cmp	r2, r3
 8006896:	d00a      	beq.n	80068ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d0:	1e5a      	subs	r2, r3, #1
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	429a      	cmp	r2, r3
 80068e0:	d044      	beq.n	800696c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d140      	bne.n	800696c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe f949 	bl	8004b86 <uxListRemove>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d115      	bne.n	8006926 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	491f      	ldr	r1, [pc, #124]	; (800697c <xTaskPriorityDisinherit+0x104>)
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <xTaskPriorityDisinherit+0xae>
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	2201      	movs	r2, #1
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43da      	mvns	r2, r3
 800691c:	4b18      	ldr	r3, [pc, #96]	; (8006980 <xTaskPriorityDisinherit+0x108>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4013      	ands	r3, r2
 8006922:	4a17      	ldr	r2, [pc, #92]	; (8006980 <xTaskPriorityDisinherit+0x108>)
 8006924:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	f1c3 0207 	rsb	r2, r3, #7
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	2201      	movs	r2, #1
 8006940:	409a      	lsls	r2, r3
 8006942:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <xTaskPriorityDisinherit+0x108>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4313      	orrs	r3, r2
 8006948:	4a0d      	ldr	r2, [pc, #52]	; (8006980 <xTaskPriorityDisinherit+0x108>)
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4a08      	ldr	r2, [pc, #32]	; (800697c <xTaskPriorityDisinherit+0x104>)
 800695a:	441a      	add	r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f7fe f8b4 	bl	8004ad0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800696c:	697b      	ldr	r3, [r7, #20]
	}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200042fc 	.word	0x200042fc
 800697c:	20004300 	.word	0x20004300
 8006980:	20004404 	.word	0x20004404

08006984 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006992:	2301      	movs	r3, #1
 8006994:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8088 	beq.w	8006aae <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60fb      	str	r3, [r7, #12]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d902      	bls.n	80069cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	e002      	b.n	80069d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d068      	beq.n	8006aae <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d163      	bne.n	8006aae <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069e6:	4b34      	ldr	r3, [pc, #208]	; (8006ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d10a      	bne.n	8006a06 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60bb      	str	r3, [r7, #8]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	db04      	blt.n	8006a24 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f1c3 0207 	rsb	r2, r3, #7
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	6959      	ldr	r1, [r3, #20]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a22      	ldr	r2, [pc, #136]	; (8006abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a34:	4413      	add	r3, r2
 8006a36:	4299      	cmp	r1, r3
 8006a38:	d101      	bne.n	8006a3e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d034      	beq.n	8006aae <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe f89c 	bl	8004b86 <uxListRemove>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d115      	bne.n	8006a80 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	4918      	ldr	r1, [pc, #96]	; (8006abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	43da      	mvns	r2, r3
 8006a76:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006a7e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4a07      	ldr	r2, [pc, #28]	; (8006abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006aa0:	441a      	add	r2, r3
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7fe f811 	bl	8004ad0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aae:	bf00      	nop
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200042fc 	.word	0x200042fc
 8006abc:	20004300 	.word	0x20004300
 8006ac0:	20004404 	.word	0x20004404

08006ac4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad6:	3201      	adds	r2, #1
 8006ad8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006ada:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006adc:	681b      	ldr	r3, [r3, #0]
	}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	200042fc 	.word	0x200042fc

08006aec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006af6:	4b29      	ldr	r3, [pc, #164]	; (8006b9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006afc:	4b28      	ldr	r3, [pc, #160]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe f83f 	bl	8004b86 <uxListRemove>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	2201      	movs	r2, #1
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43da      	mvns	r2, r3
 8006b1c:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4013      	ands	r3, r2
 8006b22:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d10a      	bne.n	8006b44 <prvAddCurrentTaskToDelayedList+0x58>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	481a      	ldr	r0, [pc, #104]	; (8006ba8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b3e:	f7fd ffc7 	bl	8004ad0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b42:	e026      	b.n	8006b92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4413      	add	r3, r2
 8006b4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b4c:	4b14      	ldr	r3, [pc, #80]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d209      	bcs.n	8006b70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b5c:	4b13      	ldr	r3, [pc, #76]	; (8006bac <prvAddCurrentTaskToDelayedList+0xc0>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f7fd ffd4 	bl	8004b16 <vListInsert>
}
 8006b6e:	e010      	b.n	8006b92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7fd ffca 	bl	8004b16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b82:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d202      	bcs.n	8006b92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006b8c:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6013      	str	r3, [r2, #0]
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20004400 	.word	0x20004400
 8006ba0:	200042fc 	.word	0x200042fc
 8006ba4:	20004404 	.word	0x20004404
 8006ba8:	200043e8 	.word	0x200043e8
 8006bac:	200043b8 	.word	0x200043b8
 8006bb0:	200043b4 	.word	0x200043b4
 8006bb4:	2000441c 	.word	0x2000441c

08006bb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3b04      	subs	r3, #4
 8006bc8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3b04      	subs	r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <pxPortInitialiseStack+0x54>)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3b14      	subs	r3, #20
 8006bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b20      	subs	r3, #32
 8006bfe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <prvTaskExitError+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d00a      	beq.n	8006c3a <prvTaskExitError+0x2a>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <prvTaskExitError+0x28>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c4e:	bf00      	nop
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0fc      	beq.n	8006c50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20000010 	.word	0x20000010
	...

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c8e:	4770      	bx	lr

08006c90 <pxCurrentTCBConst2>:
 8006c90:	200042fc 	.word	0x200042fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c98:	4806      	ldr	r0, [pc, #24]	; (8006cb4 <prvPortStartFirstTask+0x1c>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	b662      	cpsie	i
 8006ca4:	b661      	cpsie	f
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	df00      	svc	0
 8006cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cb2:	bf00      	nop
 8006cb4:	e000ed08 	.word	0xe000ed08

08006cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cbe:	4b32      	ldr	r3, [pc, #200]	; (8006d88 <xPortStartScheduler+0xd0>)
 8006cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <xPortStartScheduler+0xd4>)
 8006ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ce6:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006ce8:	2207      	movs	r2, #7
 8006cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cec:	e009      	b.n	8006d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cee:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d0ef      	beq.n	8006cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1c3 0307 	rsb	r3, r3, #7
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d00a      	beq.n	8006d30 <xPortStartScheduler+0x78>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60bb      	str	r3, [r7, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d30:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d66:	f000 f8b9 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <xPortStartScheduler+0xe0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d70:	f7ff ff92 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d74:	f7ff fa9e 	bl	80062b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d78:	f7ff ff4a 	bl	8006c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	e000e400 	.word	0xe000e400
 8006d8c:	20004428 	.word	0x20004428
 8006d90:	2000442c 	.word	0x2000442c
 8006d94:	e000ed20 	.word	0xe000ed20
 8006d98:	20000010 	.word	0x20000010

08006d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	607b      	str	r3, [r7, #4]
}
 8006db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <vPortEnterCritical+0x58>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <vPortEnterCritical+0x58>)
 8006dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <vPortEnterCritical+0x58>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10f      	bne.n	8006de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <vPortEnterCritical+0x5c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	603b      	str	r3, [r7, #0]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vPortEnterCritical+0x4a>
	}
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000010 	.word	0x20000010
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <vPortExitCritical+0x24>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <vPortExitCritical+0x42>
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f383 8811 	msr	BASEPRI, r3
}
 8006e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	20000010 	.word	0x20000010
 8006e4c:	00000000 	.word	0x00000000

08006e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e50:	f3ef 8009 	mrs	r0, PSP
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <pxCurrentTCBConst>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e60:	6010      	str	r0, [r2, #0]
 8006e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e6a:	f380 8811 	msr	BASEPRI, r0
 8006e6e:	f7ff fa21 	bl	80062b4 <vTaskSwitchContext>
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8811 	msr	BASEPRI, r0
 8006e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	6808      	ldr	r0, [r1, #0]
 8006e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e86:	f380 8809 	msr	PSP, r0
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	4770      	bx	lr

08006e90 <pxCurrentTCBConst>:
 8006e90:	200042fc 	.word	0x200042fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7ff f941 	bl	8006138 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <xPortSysTickHandler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <vPortSetupTimerInterrupt+0x30>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <vPortSetupTimerInterrupt+0x30>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	e000e010 	.word	0xe000e010
 8006f10:	e000e018 	.word	0xe000e018
 8006f14:	20000000 	.word	0x20000000
 8006f18:	10624dd3 	.word	0x10624dd3
 8006f1c:	e000e014 	.word	0xe000e014

08006f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f26:	f3ef 8305 	mrs	r3, IPSR
 8006f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d914      	bls.n	8006f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f32:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <vPortValidateInterruptPriority+0x6c>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <vPortValidateInterruptPriority+0x70>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	7afa      	ldrb	r2, [r7, #11]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d20a      	bcs.n	8006f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	607b      	str	r3, [r7, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <vPortValidateInterruptPriority+0x74>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <vPortValidateInterruptPriority+0x78>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d90a      	bls.n	8006f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	603b      	str	r3, [r7, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <vPortValidateInterruptPriority+0x60>
	}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	e000e3f0 	.word	0xe000e3f0
 8006f90:	20004428 	.word	0x20004428
 8006f94:	e000ed0c 	.word	0xe000ed0c
 8006f98:	2000442c 	.word	0x2000442c

08006f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fa8:	f7fe fffc 	bl	8005fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fac:	4b58      	ldr	r3, [pc, #352]	; (8007110 <pvPortMalloc+0x174>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fb4:	f000 f910 	bl	80071d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fb8:	4b56      	ldr	r3, [pc, #344]	; (8007114 <pvPortMalloc+0x178>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 808e 	bne.w	80070e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01d      	beq.n	8007008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fcc:	2208      	movs	r2, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f023 0307 	bic.w	r3, r3, #7
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <pvPortMalloc+0x6c>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	617b      	str	r3, [r7, #20]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d069      	beq.n	80070e2 <pvPortMalloc+0x146>
 800700e:	4b42      	ldr	r3, [pc, #264]	; (8007118 <pvPortMalloc+0x17c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d864      	bhi.n	80070e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007018:	4b40      	ldr	r3, [pc, #256]	; (800711c <pvPortMalloc+0x180>)
 800701a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800701c:	4b3f      	ldr	r3, [pc, #252]	; (800711c <pvPortMalloc+0x180>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007022:	e004      	b.n	800702e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d903      	bls.n	8007040 <pvPortMalloc+0xa4>
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f1      	bne.n	8007024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007040:	4b33      	ldr	r3, [pc, #204]	; (8007110 <pvPortMalloc+0x174>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007046:	429a      	cmp	r2, r3
 8007048:	d04b      	beq.n	80070e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2208      	movs	r2, #8
 8007050:	4413      	add	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	2308      	movs	r3, #8
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	d91f      	bls.n	80070ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800706c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <pvPortMalloc+0xf8>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	613b      	str	r3, [r7, #16]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070a6:	69b8      	ldr	r0, [r7, #24]
 80070a8:	f000 f8f8 	bl	800729c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <pvPortMalloc+0x17c>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <pvPortMalloc+0x17c>)
 80070b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ba:	4b17      	ldr	r3, [pc, #92]	; (8007118 <pvPortMalloc+0x17c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <pvPortMalloc+0x184>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d203      	bcs.n	80070ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <pvPortMalloc+0x17c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <pvPortMalloc+0x184>)
 80070cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <pvPortMalloc+0x178>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e2:	f7fe ff6d 	bl	8005fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <pvPortMalloc+0x16a>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <pvPortMalloc+0x168>
	return pvReturn;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20008038 	.word	0x20008038
 8007114:	20008044 	.word	0x20008044
 8007118:	2000803c 	.word	0x2000803c
 800711c:	20008030 	.word	0x20008030
 8007120:	20008040 	.word	0x20008040

08007124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d048      	beq.n	80071c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007136:	2308      	movs	r3, #8
 8007138:	425b      	negs	r3, r3
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <vPortFree+0xac>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <vPortFree+0x44>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60fb      	str	r3, [r7, #12]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <vPortFree+0x62>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60bb      	str	r3, [r7, #8]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <vPortFree+0xac>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d019      	beq.n	80071c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d115      	bne.n	80071c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <vPortFree+0xac>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071ac:	f7fe fefa 	bl	8005fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <vPortFree+0xb0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4413      	add	r3, r2
 80071ba:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <vPortFree+0xb0>)
 80071bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071be:	6938      	ldr	r0, [r7, #16]
 80071c0:	f000 f86c 	bl	800729c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071c4:	f7fe fefc 	bl	8005fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20008044 	.word	0x20008044
 80071d4:	2000803c 	.word	0x2000803c

080071d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071e4:	4b27      	ldr	r3, [pc, #156]	; (8007284 <prvHeapInit+0xac>)
 80071e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3307      	adds	r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <prvHeapInit+0xac>)
 8007208:	4413      	add	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <prvHeapInit+0xb0>)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <prvHeapInit+0xb0>)
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007224:	2208      	movs	r2, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <prvHeapInit+0xb4>)
 8007238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <prvHeapInit+0xb4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <prvHeapInit+0xb4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvHeapInit+0xb4>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <prvHeapInit+0xb8>)
 8007266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <prvHeapInit+0xbc>)
 800726e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <prvHeapInit+0xc0>)
 8007272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007276:	601a      	str	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20004430 	.word	0x20004430
 8007288:	20008030 	.word	0x20008030
 800728c:	20008038 	.word	0x20008038
 8007290:	20008040 	.word	0x20008040
 8007294:	2000803c 	.word	0x2000803c
 8007298:	20008044 	.word	0x20008044

0800729c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <prvInsertBlockIntoFreeList+0xa8>)
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x14>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d8f7      	bhi.n	80072aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d108      	bne.n	80072de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d118      	bne.n	8007324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d00d      	beq.n	800731a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e008      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e003      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d002      	beq.n	800733a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	20008030 	.word	0x20008030
 8007348:	20008038 	.word	0x20008038

0800734c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	461a      	mov	r2, r3
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 ffd1 	bl	8009308 <tcpip_send_msg_wait_sem>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800736a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007378:	e001      	b.n	800737e <netconn_apimsg+0x32>
  }
  return err;
 800737a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	603a      	str	r2, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
 8007394:	460b      	mov	r3, r1
 8007396:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fe19 	bl	8007fd4 <netconn_alloc>
 80073a2:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d054      	beq.n	8007454 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80073aa:	79bb      	ldrb	r3, [r7, #6]
 80073ac:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80073b2:	f107 030c 	add.w	r3, r7, #12
 80073b6:	4619      	mov	r1, r3
 80073b8:	4829      	ldr	r0, [pc, #164]	; (8007460 <netconn_new_with_proto_and_callback+0xd8>)
 80073ba:	f7ff ffc7 	bl	800734c <netconn_apimsg>
 80073be:	4603      	mov	r3, r0
 80073c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 80073c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d043      	beq.n	8007454 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <netconn_new_with_proto_and_callback+0x58>
 80073d4:	4b23      	ldr	r3, [pc, #140]	; (8007464 <netconn_new_with_proto_and_callback+0xdc>)
 80073d6:	2289      	movs	r2, #137	; 0x89
 80073d8:	4923      	ldr	r1, [pc, #140]	; (8007468 <netconn_new_with_proto_and_callback+0xe0>)
 80073da:	4824      	ldr	r0, [pc, #144]	; (800746c <netconn_new_with_proto_and_callback+0xe4>)
 80073dc:	f00c f948 	bl	8013670 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	3310      	adds	r3, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	f00b fee0 	bl	80131aa <sys_mbox_valid>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d105      	bne.n	80073fc <netconn_new_with_proto_and_callback+0x74>
 80073f0:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <netconn_new_with_proto_and_callback+0xdc>)
 80073f2:	228a      	movs	r2, #138	; 0x8a
 80073f4:	491e      	ldr	r1, [pc, #120]	; (8007470 <netconn_new_with_proto_and_callback+0xe8>)
 80073f6:	481d      	ldr	r0, [pc, #116]	; (800746c <netconn_new_with_proto_and_callback+0xe4>)
 80073f8:	f00c f93a 	bl	8013670 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	3314      	adds	r3, #20
 8007400:	4618      	mov	r0, r3
 8007402:	f00b fed2 	bl	80131aa <sys_mbox_valid>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <netconn_new_with_proto_and_callback+0x90>
 800740c:	4b15      	ldr	r3, [pc, #84]	; (8007464 <netconn_new_with_proto_and_callback+0xdc>)
 800740e:	228c      	movs	r2, #140	; 0x8c
 8007410:	4918      	ldr	r1, [pc, #96]	; (8007474 <netconn_new_with_proto_and_callback+0xec>)
 8007412:	4816      	ldr	r0, [pc, #88]	; (800746c <netconn_new_with_proto_and_callback+0xe4>)
 8007414:	f00c f92c 	bl	8013670 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	330c      	adds	r3, #12
 800741c:	4618      	mov	r0, r3
 800741e:	f00b ff53 	bl	80132c8 <sys_sem_valid>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <netconn_new_with_proto_and_callback+0xac>
 8007428:	4b0e      	ldr	r3, [pc, #56]	; (8007464 <netconn_new_with_proto_and_callback+0xdc>)
 800742a:	228f      	movs	r2, #143	; 0x8f
 800742c:	4912      	ldr	r1, [pc, #72]	; (8007478 <netconn_new_with_proto_and_callback+0xf0>)
 800742e:	480f      	ldr	r0, [pc, #60]	; (800746c <netconn_new_with_proto_and_callback+0xe4>)
 8007430:	f00c f91e 	bl	8013670 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	330c      	adds	r3, #12
 8007438:	4618      	mov	r0, r3
 800743a:	f00b ff38 	bl	80132ae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	3310      	adds	r3, #16
 8007442:	4618      	mov	r0, r3
 8007444:	f00b fe14 	bl	8013070 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800744a:	2007      	movs	r0, #7
 800744c:	f002 fbfa 	bl	8009c44 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007456:	4618      	mov	r0, r3
 8007458:	3728      	adds	r7, #40	; 0x28
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	08007f7d 	.word	0x08007f7d
 8007464:	08014898 	.word	0x08014898
 8007468:	080148cc 	.word	0x080148cc
 800746c:	080148f0 	.word	0x080148f0
 8007470:	08014918 	.word	0x08014918
 8007474:	08014930 	.word	0x08014930
 8007478:	08014954 	.word	0x08014954

0800747c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d108      	bne.n	80074a2 <netconn_bind+0x26>
 8007490:	4b11      	ldr	r3, [pc, #68]	; (80074d8 <netconn_bind+0x5c>)
 8007492:	22ff      	movs	r2, #255	; 0xff
 8007494:	4911      	ldr	r1, [pc, #68]	; (80074dc <netconn_bind+0x60>)
 8007496:	4812      	ldr	r0, [pc, #72]	; (80074e0 <netconn_bind+0x64>)
 8007498:	f00c f8ea 	bl	8013670 <iprintf>
 800749c:	f06f 030f 	mvn.w	r3, #15
 80074a0:	e015      	b.n	80074ce <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 80074a8:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <netconn_bind+0x68>)
 80074aa:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80074b4:	88fb      	ldrh	r3, [r7, #6]
 80074b6:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80074b8:	f107 0310 	add.w	r3, r7, #16
 80074bc:	4619      	mov	r1, r3
 80074be:	480a      	ldr	r0, [pc, #40]	; (80074e8 <netconn_bind+0x6c>)
 80074c0:	f7ff ff44 	bl	800734c <netconn_apimsg>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 80074ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	08014898 	.word	0x08014898
 80074dc:	080149d0 	.word	0x080149d0
 80074e0:	080148f0 	.word	0x080148f0
 80074e4:	08017064 	.word	0x08017064
 80074e8:	08008541 	.word	0x08008541

080074ec <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <netconn_connect+0x28>
 8007500:	4b11      	ldr	r3, [pc, #68]	; (8007548 <netconn_connect+0x5c>)
 8007502:	f240 122b 	movw	r2, #299	; 0x12b
 8007506:	4911      	ldr	r1, [pc, #68]	; (800754c <netconn_connect+0x60>)
 8007508:	4811      	ldr	r0, [pc, #68]	; (8007550 <netconn_connect+0x64>)
 800750a:	f00c f8b1 	bl	8013670 <iprintf>
 800750e:	f06f 030f 	mvn.w	r3, #15
 8007512:	e015      	b.n	8007540 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <netconn_connect+0x68>)
 800751c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800752a:	f107 0310 	add.w	r3, r7, #16
 800752e:	4619      	mov	r1, r3
 8007530:	4809      	ldr	r0, [pc, #36]	; (8007558 <netconn_connect+0x6c>)
 8007532:	f7ff ff0b 	bl	800734c <netconn_apimsg>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800753c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007540:	4618      	mov	r0, r3
 8007542:	3728      	adds	r7, #40	; 0x28
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	08014898 	.word	0x08014898
 800754c:	080149ec 	.word	0x080149ec
 8007550:	080148f0 	.word	0x080148f0
 8007554:	08017064 	.word	0x08017064
 8007558:	08008749 	.word	0x08008749

0800755c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <netconn_disconnect+0x22>
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <netconn_disconnect+0x44>)
 800756c:	f240 124b 	movw	r2, #331	; 0x14b
 8007570:	490c      	ldr	r1, [pc, #48]	; (80075a4 <netconn_disconnect+0x48>)
 8007572:	480d      	ldr	r0, [pc, #52]	; (80075a8 <netconn_disconnect+0x4c>)
 8007574:	f00c f87c 	bl	8013670 <iprintf>
 8007578:	f06f 030f 	mvn.w	r3, #15
 800757c:	e00b      	b.n	8007596 <netconn_disconnect+0x3a>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60bb      	str	r3, [r7, #8]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8007582:	f107 0308 	add.w	r3, r7, #8
 8007586:	4619      	mov	r1, r3
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <netconn_disconnect+0x50>)
 800758a:	f7ff fedf 	bl	800734c <netconn_apimsg>
 800758e:	4603      	mov	r3, r0
 8007590:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007592:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	08014898 	.word	0x08014898
 80075a4:	08014a0c 	.word	0x08014a0c
 80075a8:	080148f0 	.word	0x080148f0
 80075ac:	08008901 	.word	0x08008901

080075b0 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	; 0x28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <netconn_recv_data+0x28>
 80075c4:	4b5c      	ldr	r3, [pc, #368]	; (8007738 <netconn_recv_data+0x188>)
 80075c6:	f240 12e7 	movw	r2, #487	; 0x1e7
 80075ca:	495c      	ldr	r1, [pc, #368]	; (800773c <netconn_recv_data+0x18c>)
 80075cc:	485c      	ldr	r0, [pc, #368]	; (8007740 <netconn_recv_data+0x190>)
 80075ce:	f00c f84f 	bl	8013670 <iprintf>
 80075d2:	f06f 030f 	mvn.w	r3, #15
 80075d6:	e0aa      	b.n	800772e <netconn_recv_data+0x17e>
  *new_buf = NULL;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d109      	bne.n	80075f8 <netconn_recv_data+0x48>
 80075e4:	4b54      	ldr	r3, [pc, #336]	; (8007738 <netconn_recv_data+0x188>)
 80075e6:	f240 12e9 	movw	r2, #489	; 0x1e9
 80075ea:	4956      	ldr	r1, [pc, #344]	; (8007744 <netconn_recv_data+0x194>)
 80075ec:	4854      	ldr	r0, [pc, #336]	; (8007740 <netconn_recv_data+0x190>)
 80075ee:	f00c f83f 	bl	8013670 <iprintf>
 80075f2:	f06f 030f 	mvn.w	r3, #15
 80075f6:	e09a      	b.n	800772e <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007600:	2b10      	cmp	r3, #16
 8007602:	d115      	bne.n	8007630 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3310      	adds	r3, #16
 8007608:	4618      	mov	r0, r3
 800760a:	f00b fdce 	bl	80131aa <sys_mbox_valid>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10d      	bne.n	8007630 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3314      	adds	r3, #20
 8007618:	4618      	mov	r0, r3
 800761a:	f00b fdc6 	bl	80131aa <sys_mbox_valid>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <netconn_recv_data+0x7a>
 8007624:	f06f 030a 	mvn.w	r3, #10
 8007628:	e081      	b.n	800772e <netconn_recv_data+0x17e>
 800762a:	f06f 030e 	mvn.w	r3, #14
 800762e:	e07e      	b.n	800772e <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3310      	adds	r3, #16
 8007634:	4618      	mov	r0, r3
 8007636:	f00b fdb8 	bl	80131aa <sys_mbox_valid>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <netconn_recv_data+0xa4>
 8007640:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <netconn_recv_data+0x188>)
 8007642:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007646:	4940      	ldr	r1, [pc, #256]	; (8007748 <netconn_recv_data+0x198>)
 8007648:	483d      	ldr	r0, [pc, #244]	; (8007740 <netconn_recv_data+0x190>)
 800764a:	f00c f811 	bl	8013670 <iprintf>
 800764e:	f06f 030a 	mvn.w	r3, #10
 8007652:	e06c      	b.n	800772e <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800765a:	f113 0f0c 	cmn.w	r3, #12
 800765e:	da03      	bge.n	8007668 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007666:	e062      	b.n	800772e <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3310      	adds	r3, #16
 800766c:	f107 0120 	add.w	r1, r7, #32
 8007670:	2200      	movs	r2, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f00b fd3e 	bl	80130f4 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007680:	2b10      	cmp	r3, #16
 8007682:	d138      	bne.n	80076f6 <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	891b      	ldrh	r3, [r3, #8]
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e001      	b.n	800769a <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	4619      	mov	r1, r3
 80076a0:	482a      	ldr	r0, [pc, #168]	; (800774c <netconn_recv_data+0x19c>)
 80076a2:	f7ff fe53 	bl	800734c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d120      	bne.n	80076ee <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <netconn_recv_data+0x110>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	2200      	movs	r2, #0
 80076ba:	2101      	movs	r1, #1
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <netconn_recv_data+0x12a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80076d8:	e029      	b.n	800772e <netconn_recv_data+0x17e>
 80076da:	f06f 030d 	mvn.w	r3, #13
 80076de:	e026      	b.n	800772e <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80076e0:	2101      	movs	r1, #1
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f8da 	bl	800789c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80076e8:	f06f 030e 	mvn.w	r3, #14
 80076ec:	e01f      	b.n	800772e <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	891b      	ldrh	r3, [r3, #8]
 80076f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076f4:	e00d      	b.n	8007712 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d106      	bne.n	800770a <netconn_recv_data+0x15a>
 80076fc:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <netconn_recv_data+0x188>)
 80076fe:	f240 223e 	movw	r2, #574	; 0x23e
 8007702:	4913      	ldr	r1, [pc, #76]	; (8007750 <netconn_recv_data+0x1a0>)
 8007704:	480e      	ldr	r0, [pc, #56]	; (8007740 <netconn_recv_data+0x190>)
 8007706:	f00b ffb3 	bl	8013670 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	891b      	ldrh	r3, [r3, #8]
 8007710:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <netconn_recv_data+0x176>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007720:	2101      	movs	r1, #1
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007726:	6a3a      	ldr	r2, [r7, #32]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3728      	adds	r7, #40	; 0x28
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	08014898 	.word	0x08014898
 800773c:	08014a90 	.word	0x08014a90
 8007740:	080148f0 	.word	0x080148f0
 8007744:	08014ab0 	.word	0x08014ab0
 8007748:	08014acc 	.word	0x08014acc
 800774c:	08008a3d 	.word	0x08008a3d
 8007750:	08014aec 	.word	0x08014aec

08007754 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d109      	bne.n	800777c <netconn_recv+0x28>
 8007768:	4b31      	ldr	r3, [pc, #196]	; (8007830 <netconn_recv+0xdc>)
 800776a:	f44f 721d 	mov.w	r2, #628	; 0x274
 800776e:	4931      	ldr	r1, [pc, #196]	; (8007834 <netconn_recv+0xe0>)
 8007770:	4831      	ldr	r0, [pc, #196]	; (8007838 <netconn_recv+0xe4>)
 8007772:	f00b ff7d 	bl	8013670 <iprintf>
 8007776:	f06f 030f 	mvn.w	r3, #15
 800777a:	e054      	b.n	8007826 <netconn_recv+0xd2>
  *new_buf = NULL;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <netconn_recv+0x48>
 8007788:	4b29      	ldr	r3, [pc, #164]	; (8007830 <netconn_recv+0xdc>)
 800778a:	f240 2276 	movw	r2, #630	; 0x276
 800778e:	492b      	ldr	r1, [pc, #172]	; (800783c <netconn_recv+0xe8>)
 8007790:	4829      	ldr	r0, [pc, #164]	; (8007838 <netconn_recv+0xe4>)
 8007792:	f00b ff6d 	bl	8013670 <iprintf>
 8007796:	f06f 030f 	mvn.w	r3, #15
 800779a:	e044      	b.n	8007826 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077a4:	2b10      	cmp	r3, #16
 80077a6:	d139      	bne.n	800781c <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80077ac:	2006      	movs	r0, #6
 80077ae:	f002 f9f7 	bl	8009ba0 <memp_malloc>
 80077b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <netconn_recv+0x6c>
      return ERR_MEM;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	e032      	b.n	8007826 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fef2 	bl	80075b0 <netconn_recv_data>
 80077cc:	4603      	mov	r3, r0
 80077ce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80077d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80077d8:	6979      	ldr	r1, [r7, #20]
 80077da:	2006      	movs	r0, #6
 80077dc:	f002 fa32 	bl	8009c44 <memp_free>
      return err;
 80077e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077e4:	e01f      	b.n	8007826 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <netconn_recv+0xa6>
 80077ec:	4b10      	ldr	r3, [pc, #64]	; (8007830 <netconn_recv+0xdc>)
 80077ee:	f240 228a 	movw	r2, #650	; 0x28a
 80077f2:	4913      	ldr	r1, [pc, #76]	; (8007840 <netconn_recv+0xec>)
 80077f4:	4810      	ldr	r0, [pc, #64]	; (8007838 <netconn_recv+0xe4>)
 80077f6:	f00b ff3b 	bl	8013670 <iprintf>

    buf->p = p;
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2200      	movs	r2, #0
 800780a:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e004      	b.n	8007826 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fec6 	bl	80075b0 <netconn_recv_data>
 8007824:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	08014898 	.word	0x08014898
 8007834:	08014a90 	.word	0x08014a90
 8007838:	080148f0 	.word	0x080148f0
 800783c:	08014ab0 	.word	0x08014ab0
 8007840:	08014af8 	.word	0x08014af8

08007844 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <netconn_send+0x24>
 8007854:	4b0d      	ldr	r3, [pc, #52]	; (800788c <netconn_send+0x48>)
 8007856:	f240 22c3 	movw	r2, #707	; 0x2c3
 800785a:	490d      	ldr	r1, [pc, #52]	; (8007890 <netconn_send+0x4c>)
 800785c:	480d      	ldr	r0, [pc, #52]	; (8007894 <netconn_send+0x50>)
 800785e:	f00b ff07 	bl	8013670 <iprintf>
 8007862:	f06f 030f 	mvn.w	r3, #15
 8007866:	e00d      	b.n	8007884 <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8007870:	f107 0308 	add.w	r3, r7, #8
 8007874:	4619      	mov	r1, r3
 8007876:	4808      	ldr	r0, [pc, #32]	; (8007898 <netconn_send+0x54>)
 8007878:	f7ff fd68 	bl	800734c <netconn_apimsg>
 800787c:	4603      	mov	r3, r0
 800787e:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007880:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	08014898 	.word	0x08014898
 8007890:	08014b04 	.word	0x08014b04
 8007894:	080148f0 	.word	0x080148f0
 8007898:	0800896b 	.word	0x0800896b

0800789c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <netconn_close_shutdown+0x26>
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <netconn_close_shutdown+0x50>)
 80078b0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80078b4:	490e      	ldr	r1, [pc, #56]	; (80078f0 <netconn_close_shutdown+0x54>)
 80078b6:	480f      	ldr	r0, [pc, #60]	; (80078f4 <netconn_close_shutdown+0x58>)
 80078b8:	f00b feda 	bl	8013670 <iprintf>
 80078bc:	f06f 030f 	mvn.w	r3, #15
 80078c0:	e00f      	b.n	80078e2 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80078ca:	2329      	movs	r3, #41	; 0x29
 80078cc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80078ce:	f107 0308 	add.w	r3, r7, #8
 80078d2:	4619      	mov	r1, r3
 80078d4:	4808      	ldr	r0, [pc, #32]	; (80078f8 <netconn_close_shutdown+0x5c>)
 80078d6:	f7ff fd39 	bl	800734c <netconn_apimsg>
 80078da:	4603      	mov	r3, r0
 80078dc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80078de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	08014898 	.word	0x08014898
 80078f0:	08014b60 	.word	0x08014b60
 80078f4:	080148f0 	.word	0x080148f0
 80078f8:	08008e1d 	.word	0x08008e1d

080078fc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <recv_udp+0x20>
 8007910:	4b34      	ldr	r3, [pc, #208]	; (80079e4 <recv_udp+0xe8>)
 8007912:	22b1      	movs	r2, #177	; 0xb1
 8007914:	4934      	ldr	r1, [pc, #208]	; (80079e8 <recv_udp+0xec>)
 8007916:	4835      	ldr	r0, [pc, #212]	; (80079ec <recv_udp+0xf0>)
 8007918:	f00b feaa 	bl	8013670 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d105      	bne.n	800792e <recv_udp+0x32>
 8007922:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <recv_udp+0xe8>)
 8007924:	22b2      	movs	r2, #178	; 0xb2
 8007926:	4932      	ldr	r1, [pc, #200]	; (80079f0 <recv_udp+0xf4>)
 8007928:	4830      	ldr	r0, [pc, #192]	; (80079ec <recv_udp+0xf0>)
 800792a:	f00b fea1 	bl	8013670 <iprintf>
  conn = (struct netconn *)arg;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <recv_udp+0x44>
    pbuf_free(p);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f002 ff3d 	bl	800a7b8 <pbuf_free>
    return;
 800793e:	e04d      	b.n	80079dc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	429a      	cmp	r2, r3
 8007948:	d005      	beq.n	8007956 <recv_udp+0x5a>
 800794a:	4b26      	ldr	r3, [pc, #152]	; (80079e4 <recv_udp+0xe8>)
 800794c:	22ba      	movs	r2, #186	; 0xba
 800794e:	4929      	ldr	r1, [pc, #164]	; (80079f4 <recv_udp+0xf8>)
 8007950:	4826      	ldr	r0, [pc, #152]	; (80079ec <recv_udp+0xf0>)
 8007952:	f00b fe8d 	bl	8013670 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	3310      	adds	r3, #16
 800795a:	4618      	mov	r0, r3
 800795c:	f00b fc25 	bl	80131aa <sys_mbox_valid>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 ff26 	bl	800a7b8 <pbuf_free>
    return;
 800796c:	e036      	b.n	80079dc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800796e:	2006      	movs	r0, #6
 8007970:	f002 f916 	bl	8009ba0 <memp_malloc>
 8007974:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <recv_udp+0x88>
    pbuf_free(p);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f002 ff1b 	bl	800a7b8 <pbuf_free>
    return;
 8007982:	e02b      	b.n	80079dc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <recv_udp+0xa0>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	e000      	b.n	800799e <recv_udp+0xa2>
 800799c:	2300      	movs	r3, #0
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80079a6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	891b      	ldrh	r3, [r3, #8]
 80079ac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3310      	adds	r3, #16
 80079b2:	69b9      	ldr	r1, [r7, #24]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f00b fb83 	bl	80130c0 <sys_mbox_trypost>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80079c0:	69b8      	ldr	r0, [r7, #24]
 80079c2:	f001 fad3 	bl	8008f6c <netbuf_delete>
    return;
 80079c6:	e009      	b.n	80079dc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <recv_udp+0xe0>
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	8afa      	ldrh	r2, [r7, #22]
 80079d6:	2100      	movs	r1, #0
 80079d8:	69f8      	ldr	r0, [r7, #28]
 80079da:	4798      	blx	r3
  }
}
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	08014b7c 	.word	0x08014b7c
 80079e8:	08014bb0 	.word	0x08014bb0
 80079ec:	08014bd4 	.word	0x08014bd4
 80079f0:	08014bfc 	.word	0x08014bfc
 80079f4:	08014c1c 	.word	0x08014c1c

080079f8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <recv_tcp+0x20>
 8007a0c:	4b39      	ldr	r3, [pc, #228]	; (8007af4 <recv_tcp+0xfc>)
 8007a0e:	22f9      	movs	r2, #249	; 0xf9
 8007a10:	4939      	ldr	r1, [pc, #228]	; (8007af8 <recv_tcp+0x100>)
 8007a12:	483a      	ldr	r0, [pc, #232]	; (8007afc <recv_tcp+0x104>)
 8007a14:	f00b fe2c 	bl	8013670 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d105      	bne.n	8007a2a <recv_tcp+0x32>
 8007a1e:	4b35      	ldr	r3, [pc, #212]	; (8007af4 <recv_tcp+0xfc>)
 8007a20:	22fa      	movs	r2, #250	; 0xfa
 8007a22:	4937      	ldr	r1, [pc, #220]	; (8007b00 <recv_tcp+0x108>)
 8007a24:	4835      	ldr	r0, [pc, #212]	; (8007afc <recv_tcp+0x104>)
 8007a26:	f00b fe23 	bl	8013670 <iprintf>
  conn = (struct netconn *)arg;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <recv_tcp+0x42>
    return ERR_VAL;
 8007a34:	f06f 0305 	mvn.w	r3, #5
 8007a38:	e057      	b.n	8007aea <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d006      	beq.n	8007a52 <recv_tcp+0x5a>
 8007a44:	4b2b      	ldr	r3, [pc, #172]	; (8007af4 <recv_tcp+0xfc>)
 8007a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a4a:	492e      	ldr	r1, [pc, #184]	; (8007b04 <recv_tcp+0x10c>)
 8007a4c:	482b      	ldr	r0, [pc, #172]	; (8007afc <recv_tcp+0x104>)
 8007a4e:	f00b fe0f 	bl	8013670 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	3310      	adds	r3, #16
 8007a56:	4618      	mov	r0, r3
 8007a58:	f00b fba7 	bl	80131aa <sys_mbox_valid>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10d      	bne.n	8007a7e <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	891b      	ldrh	r3, [r3, #8]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	68b8      	ldr	r0, [r7, #8]
 8007a70:	f003 fce8 	bl	800b444 <tcp_recved>
      pbuf_free(p);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f002 fe9f 	bl	800a7b8 <pbuf_free>
    }
    return ERR_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e035      	b.n	8007aea <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8007a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d011      	beq.n	8007aaa <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00e      	beq.n	8007aaa <recv_tcp+0xb2>
 8007a8c:	f00b fca4 	bl	80133d8 <sys_arch_protect>
 8007a90:	6178      	str	r0, [r7, #20]
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007a98:	f113 0f0c 	cmn.w	r3, #12
 8007a9c:	db02      	blt.n	8007aa4 <recv_tcp+0xac>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	78fa      	ldrb	r2, [r7, #3]
 8007aa2:	721a      	strb	r2, [r3, #8]
 8007aa4:	6978      	ldr	r0, [r7, #20]
 8007aa6:	f00b fca5 	bl	80133f4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <recv_tcp+0xc0>
    len = p->tot_len;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	891b      	ldrh	r3, [r3, #8]
 8007ab4:	83fb      	strh	r3, [r7, #30]
 8007ab6:	e001      	b.n	8007abc <recv_tcp+0xc4>
  } else {
    len = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	3310      	adds	r3, #16
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f00b fafc 	bl	80130c0 <sys_mbox_trypost>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	e00a      	b.n	8007aea <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <recv_tcp+0xf0>
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae0:	8bfa      	ldrh	r2, [r7, #30]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	69b8      	ldr	r0, [r7, #24]
 8007ae6:	4798      	blx	r3
  }

  return ERR_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08014b7c 	.word	0x08014b7c
 8007af8:	08014c3c 	.word	0x08014c3c
 8007afc:	08014bd4 	.word	0x08014bd4
 8007b00:	08014c60 	.word	0x08014c60
 8007b04:	08014c80 	.word	0x08014c80

08007b08 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <poll_tcp+0x22>
 8007b1c:	4b29      	ldr	r3, [pc, #164]	; (8007bc4 <poll_tcp+0xbc>)
 8007b1e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007b22:	4929      	ldr	r1, [pc, #164]	; (8007bc8 <poll_tcp+0xc0>)
 8007b24:	4829      	ldr	r0, [pc, #164]	; (8007bcc <poll_tcp+0xc4>)
 8007b26:	f00b fda3 	bl	8013670 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d104      	bne.n	8007b3c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007b32:	2101      	movs	r1, #1
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 ffcd 	bl	8008ad4 <lwip_netconn_do_writemore>
 8007b3a:	e016      	b.n	8007b6a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d112      	bne.n	8007b6a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <poll_tcp+0x5a>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	7a5b      	ldrb	r3, [r3, #9]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	7a5a      	ldrb	r2, [r3, #9]
 8007b5c:	3a01      	subs	r2, #1
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007b62:	2101      	movs	r1, #1
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fb6f 	bl	8008248 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7f1b      	ldrb	r3, [r3, #28]
 8007b6e:	f003 0310 	and.w	r3, r3, #16
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d021      	beq.n	8007bba <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01d      	beq.n	8007bba <poll_tcp+0xb2>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b86:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007b8a:	d316      	bcc.n	8007bba <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d810      	bhi.n	8007bba <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	7f1b      	ldrb	r3, [r3, #28]
 8007b9c:	f023 0310 	bic.w	r3, r3, #16
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <poll_tcp+0xb2>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08014b7c 	.word	0x08014b7c
 8007bc8:	08014ca0 	.word	0x08014ca0
 8007bcc:	08014bd4 	.word	0x08014bd4

08007bd0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <sent_tcp+0x26>
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <sent_tcp+0x9c>)
 8007bea:	f240 1261 	movw	r2, #353	; 0x161
 8007bee:	4920      	ldr	r1, [pc, #128]	; (8007c70 <sent_tcp+0xa0>)
 8007bf0:	4820      	ldr	r0, [pc, #128]	; (8007c74 <sent_tcp+0xa4>)
 8007bf2:	f00b fd3d 	bl	8013670 <iprintf>

  if (conn) {
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d032      	beq.n	8007c62 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d104      	bne.n	8007c0e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007c04:	2101      	movs	r1, #1
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f000 ff64 	bl	8008ad4 <lwip_netconn_do_writemore>
 8007c0c:	e007      	b.n	8007c1e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d103      	bne.n	8007c1e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007c16:	2101      	movs	r1, #1
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f000 fb15 	bl	8008248 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01d      	beq.n	8007c62 <sent_tcp+0x92>
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c2e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007c32:	d316      	bcc.n	8007c62 <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d810      	bhi.n	8007c62 <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	7f1b      	ldrb	r3, [r3, #28]
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <sent_tcp+0x92>
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	6978      	ldr	r0, [r7, #20]
 8007c60:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	08014b7c 	.word	0x08014b7c
 8007c70:	08014ca0 	.word	0x08014ca0
 8007c74:	08014bd4 	.word	0x08014bd4

08007c78 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <err_tcp+0x24>
 8007c8e:	4b6c      	ldr	r3, [pc, #432]	; (8007e40 <err_tcp+0x1c8>)
 8007c90:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007c94:	496b      	ldr	r1, [pc, #428]	; (8007e44 <err_tcp+0x1cc>)
 8007c96:	486c      	ldr	r0, [pc, #432]	; (8007e48 <err_tcp+0x1d0>)
 8007c98:	f00b fcea 	bl	8013670 <iprintf>

  conn->pcb.tcp = NULL;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	2200      	movs	r2, #0
 8007cae:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8007cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d114      	bne.n	8007ce2 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <err_tcp+0x7c>
 8007cc2:	f00b fb89 	bl	80133d8 <sys_arch_protect>
 8007cc6:	61b8      	str	r0, [r7, #24]
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007cce:	f113 0f0c 	cmn.w	r3, #12
 8007cd2:	db02      	blt.n	8007cda <err_tcp+0x62>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	721a      	strb	r2, [r3, #8]
 8007cda:	69b8      	ldr	r0, [r7, #24]
 8007cdc:	f00b fb8a 	bl	80133f4 <sys_arch_unprotect>
 8007ce0:	e008      	b.n	8007cf4 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8007ce2:	f00b fb79 	bl	80133d8 <sys_arch_protect>
 8007ce6:	61f8      	str	r0, [r7, #28]
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	721a      	strb	r2, [r3, #8]
 8007cee:	69f8      	ldr	r0, [r7, #28]
 8007cf0:	f00b fb80 	bl	80133f4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <err_tcp+0x90>
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	2200      	movs	r2, #0
 8007d02:	2104      	movs	r1, #4
 8007d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d06:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <err_tcp+0xa4>
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d1a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <err_tcp+0xb8>
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2102      	movs	r1, #2
 8007d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d2e:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	3310      	adds	r3, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f00b fa38 	bl	80131aa <sys_mbox_valid>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	3310      	adds	r3, #16
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f00b f9ba 	bl	80130c0 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	3314      	adds	r3, #20
 8007d50:	4618      	mov	r0, r3
 8007d52:	f00b fa2a 	bl	80131aa <sys_mbox_valid>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	3314      	adds	r3, #20
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f00b f9ac 	bl	80130c0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d007      	beq.n	8007d80 <err_tcp+0x108>
 8007d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d003      	beq.n	8007d80 <err_tcp+0x108>
 8007d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d14d      	bne.n	8007e1c <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	7f1b      	ldrb	r3, [r3, #28]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	7f1b      	ldrb	r3, [r3, #28]
 8007d98:	f023 0304 	bic.w	r3, r3, #4
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d145      	bne.n	8007e34 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <err_tcp+0x146>
 8007db0:	4b23      	ldr	r3, [pc, #140]	; (8007e40 <err_tcp+0x1c8>)
 8007db2:	f240 12b3 	movw	r2, #435	; 0x1b3
 8007db6:	4925      	ldr	r1, [pc, #148]	; (8007e4c <err_tcp+0x1d4>)
 8007db8:	4823      	ldr	r0, [pc, #140]	; (8007e48 <err_tcp+0x1d0>)
 8007dba:	f00b fc59 	bl	8013670 <iprintf>
      conn->current_msg->err = err;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	f00b fa79 	bl	80132c8 <sys_sem_valid>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <err_tcp+0x172>
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <err_tcp+0x1c8>)
 8007dde:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007de2:	491b      	ldr	r1, [pc, #108]	; (8007e50 <err_tcp+0x1d8>)
 8007de4:	4818      	ldr	r0, [pc, #96]	; (8007e48 <err_tcp+0x1d0>)
 8007de6:	f00b fc43 	bl	8013670 <iprintf>
      conn->current_msg = NULL;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	2200      	movs	r2, #0
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00e      	beq.n	8007e14 <err_tcp+0x19c>
 8007df6:	f00b faef 	bl	80133d8 <sys_arch_protect>
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e02:	f113 0f0c 	cmn.w	r3, #12
 8007e06:	db02      	blt.n	8007e0e <err_tcp+0x196>
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	721a      	strb	r2, [r3, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f00b faf0 	bl	80133f4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8007e14:	6938      	ldr	r0, [r7, #16]
 8007e16:	f00b fa3d 	bl	8013294 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8007e1a:	e00b      	b.n	8007e34 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <err_tcp+0x1be>
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <err_tcp+0x1c8>)
 8007e26:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007e2a:	490a      	ldr	r1, [pc, #40]	; (8007e54 <err_tcp+0x1dc>)
 8007e2c:	4806      	ldr	r0, [pc, #24]	; (8007e48 <err_tcp+0x1d0>)
 8007e2e:	f00b fc1f 	bl	8013670 <iprintf>
  }
}
 8007e32:	e000      	b.n	8007e36 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8007e34:	bf00      	nop
}
 8007e36:	bf00      	nop
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08014b7c 	.word	0x08014b7c
 8007e44:	08014ca0 	.word	0x08014ca0
 8007e48:	08014bd4 	.word	0x08014bd4
 8007e4c:	08014cb0 	.word	0x08014cb0
 8007e50:	08014ccc 	.word	0x08014ccc
 8007e54:	08014ce8 	.word	0x08014ce8

08007e58 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f004 f9c3 	bl	800c1f4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007e6e:	490a      	ldr	r1, [pc, #40]	; (8007e98 <setup_tcp+0x40>)
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f004 f9cf 	bl	800c214 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007e76:	4909      	ldr	r1, [pc, #36]	; (8007e9c <setup_tcp+0x44>)
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f004 f9ed 	bl	800c258 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007e7e:	2202      	movs	r2, #2
 8007e80:	4907      	ldr	r1, [pc, #28]	; (8007ea0 <setup_tcp+0x48>)
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f004 fa40 	bl	800c308 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8007e88:	4906      	ldr	r1, [pc, #24]	; (8007ea4 <setup_tcp+0x4c>)
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f004 fa04 	bl	800c298 <tcp_err>
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	080079f9 	.word	0x080079f9
 8007e9c:	08007bd1 	.word	0x08007bd1
 8007ea0:	08007b09 	.word	0x08007b09
 8007ea4:	08007c79 	.word	0x08007c79

08007ea8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d006      	beq.n	8007ecc <pcb_new+0x24>
 8007ebe:	4b2b      	ldr	r3, [pc, #172]	; (8007f6c <pcb_new+0xc4>)
 8007ec0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8007ec4:	492a      	ldr	r1, [pc, #168]	; (8007f70 <pcb_new+0xc8>)
 8007ec6:	482b      	ldr	r0, [pc, #172]	; (8007f74 <pcb_new+0xcc>)
 8007ec8:	f00b fbd2 	bl	8013670 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d022      	beq.n	8007f20 <pcb_new+0x78>
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d133      	bne.n	8007f46 <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681c      	ldr	r4, [r3, #0]
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f008 fe57 	bl	8010b98 <udp_new_ip_type>
 8007eea:	4603      	mov	r3, r0
 8007eec:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02a      	beq.n	8007f4e <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b22      	cmp	r3, #34	; 0x22
 8007f00:	d104      	bne.n	8007f0c <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6858      	ldr	r0, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	4917      	ldr	r1, [pc, #92]	; (8007f78 <pcb_new+0xd0>)
 8007f1a:	f008 fe15 	bl	8010b48 <udp_recv>
    }
    break;
 8007f1e:	e016      	b.n	8007f4e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681c      	ldr	r4, [r3, #0]
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f004 f956 	bl	800c1d8 <tcp_new_ip_type>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff ff8a 	bl	8007e58 <setup_tcp>
    }
    break;
 8007f44:	e005      	b.n	8007f52 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	22fa      	movs	r2, #250	; 0xfa
 8007f4a:	711a      	strb	r2, [r3, #4]
    return;
 8007f4c:	e00a      	b.n	8007f64 <pcb_new+0xbc>
    break;
 8007f4e:	bf00      	nop
 8007f50:	e000      	b.n	8007f54 <pcb_new+0xac>
    break;
 8007f52:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	22ff      	movs	r2, #255	; 0xff
 8007f62:	711a      	strb	r2, [r3, #4]
  }
}
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd90      	pop	{r4, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08014b7c 	.word	0x08014b7c
 8007f70:	08014d04 	.word	0x08014d04
 8007f74:	08014bd4 	.word	0x08014bd4
 8007f78:	080078fd 	.word	0x080078fd

08007f7c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff ff85 	bl	8007ea8 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d012      	beq.n	8007fcc <lwip_netconn_do_newconn+0x50>
 8007fa6:	f00b fa17 	bl	80133d8 <sys_arch_protect>
 8007faa:	60b8      	str	r0, [r7, #8]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007fb4:	f113 0f0c 	cmn.w	r3, #12
 8007fb8:	db05      	blt.n	8007fc6 <lwip_netconn_do_newconn+0x4a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007fc4:	721a      	strb	r2, [r3, #8]
 8007fc6:	68b8      	ldr	r0, [r7, #8]
 8007fc8:	f00b fa14 	bl	80133f4 <sys_arch_unprotect>
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007fe0:	2007      	movs	r0, #7
 8007fe2:	f001 fddd 	bl	8009ba0 <memp_malloc>
 8007fe6:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <netconn_alloc+0x1e>
    return NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e055      	b.n	800809e <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	79fa      	ldrb	r2, [r7, #7]
 8007ffc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800800a:	2b10      	cmp	r3, #16
 800800c:	d004      	beq.n	8008018 <netconn_alloc+0x44>
 800800e:	2b20      	cmp	r3, #32
 8008010:	d105      	bne.n	800801e <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008012:	2306      	movs	r3, #6
 8008014:	60fb      	str	r3, [r7, #12]
    break;
 8008016:	e00a      	b.n	800802e <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008018:	2306      	movs	r3, #6
 800801a:	60fb      	str	r3, [r7, #12]
    break;
 800801c:	e007      	b.n	800802e <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800801e:	4b22      	ldr	r3, [pc, #136]	; (80080a8 <netconn_alloc+0xd4>)
 8008020:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008024:	4921      	ldr	r1, [pc, #132]	; (80080ac <netconn_alloc+0xd8>)
 8008026:	4822      	ldr	r0, [pc, #136]	; (80080b0 <netconn_alloc+0xdc>)
 8008028:	f00b fb22 	bl	8013670 <iprintf>
    goto free_and_return;
 800802c:	e032      	b.n	8008094 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3310      	adds	r3, #16
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	4618      	mov	r0, r3
 8008036:	f00a fff9 	bl	801302c <sys_mbox_new>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d128      	bne.n	8008092 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	330c      	adds	r3, #12
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f00b f8cb 	bl	80131e2 <sys_sem_new>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	3310      	adds	r3, #16
 8008056:	4618      	mov	r0, r3
 8008058:	f00b f80a 	bl	8013070 <sys_mbox_free>
    goto free_and_return;
 800805c:	e01a      	b.n	8008094 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3314      	adds	r3, #20
 8008062:	4618      	mov	r0, r3
 8008064:	f00b f8b1 	bl	80131ca <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	771a      	strb	r2, [r3, #28]
  return conn;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	e005      	b.n	800809e <netconn_alloc+0xca>
    goto free_and_return;
 8008092:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	2007      	movs	r0, #7
 8008098:	f001 fdd4 	bl	8009c44 <memp_free>
  return NULL;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	08014b7c 	.word	0x08014b7c
 80080ac:	08014d24 	.word	0x08014d24
 80080b0:	08014bd4 	.word	0x08014bd4

080080b4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <netconn_free+0x1e>
 80080c4:	4b1b      	ldr	r3, [pc, #108]	; (8008134 <netconn_free+0x80>)
 80080c6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80080ca:	491b      	ldr	r1, [pc, #108]	; (8008138 <netconn_free+0x84>)
 80080cc:	481b      	ldr	r0, [pc, #108]	; (800813c <netconn_free+0x88>)
 80080ce:	f00b facf 	bl	8013670 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3310      	adds	r3, #16
 80080d6:	4618      	mov	r0, r3
 80080d8:	f00b f867 	bl	80131aa <sys_mbox_valid>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d006      	beq.n	80080f0 <netconn_free+0x3c>
 80080e2:	4b14      	ldr	r3, [pc, #80]	; (8008134 <netconn_free+0x80>)
 80080e4:	f240 22e1 	movw	r2, #737	; 0x2e1
 80080e8:	4915      	ldr	r1, [pc, #84]	; (8008140 <netconn_free+0x8c>)
 80080ea:	4814      	ldr	r0, [pc, #80]	; (800813c <netconn_free+0x88>)
 80080ec:	f00b fac0 	bl	8013670 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3314      	adds	r3, #20
 80080f4:	4618      	mov	r0, r3
 80080f6:	f00b f858 	bl	80131aa <sys_mbox_valid>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <netconn_free+0x5a>
 8008100:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <netconn_free+0x80>)
 8008102:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008106:	490f      	ldr	r1, [pc, #60]	; (8008144 <netconn_free+0x90>)
 8008108:	480c      	ldr	r0, [pc, #48]	; (800813c <netconn_free+0x88>)
 800810a:	f00b fab1 	bl	8013670 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	330c      	adds	r3, #12
 8008112:	4618      	mov	r0, r3
 8008114:	f00b f8cb 	bl	80132ae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	330c      	adds	r3, #12
 800811c:	4618      	mov	r0, r3
 800811e:	f00b f8e3 	bl	80132e8 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	2007      	movs	r0, #7
 8008126:	f001 fd8d 	bl	8009c44 <memp_free>
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	08014b7c 	.word	0x08014b7c
 8008138:	08014d4c 	.word	0x08014d4c
 800813c:	08014bd4 	.word	0x08014bd4
 8008140:	08014d7c 	.word	0x08014d7c
 8008144:	08014db8 	.word	0x08014db8

08008148 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3310      	adds	r3, #16
 8008154:	4618      	mov	r0, r3
 8008156:	f00b f828 	bl	80131aa <sys_mbox_valid>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d035      	beq.n	80081cc <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008160:	e01e      	b.n	80081a0 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800816a:	2b10      	cmp	r3, #16
 800816c:	d114      	bne.n	8008198 <netconn_drain+0x50>
        if (mem != NULL) {
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d015      	beq.n	80081a0 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	891b      	ldrh	r3, [r3, #8]
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f003 f95a 	bl	800b444 <tcp_recved>
          }
          pbuf_free(p);
 8008190:	6978      	ldr	r0, [r7, #20]
 8008192:	f002 fb11 	bl	800a7b8 <pbuf_free>
 8008196:	e003      	b.n	80081a0 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fee6 	bl	8008f6c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3310      	adds	r3, #16
 80081a4:	f107 020c 	add.w	r2, r7, #12
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f00a ffe1 	bl	8013172 <sys_arch_mbox_tryfetch>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d1d4      	bne.n	8008162 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3310      	adds	r3, #16
 80081bc:	4618      	mov	r0, r3
 80081be:	f00a ff57 	bl	8013070 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3310      	adds	r3, #16
 80081c6:	4618      	mov	r0, r3
 80081c8:	f00a ffff 	bl	80131ca <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3314      	adds	r3, #20
 80081d0:	4618      	mov	r0, r3
 80081d2:	f00a ffea 	bl	80131aa <sys_mbox_valid>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02e      	beq.n	800823a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80081dc:	e017      	b.n	800820e <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a18      	ldr	r2, [pc, #96]	; (8008244 <netconn_drain+0xfc>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f7ff ffac 	bl	8008148 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f003 f835 	bl	800b26c <tcp_abort>
          newconn->pcb.tcp = NULL;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2200      	movs	r2, #0
 8008206:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8008208:	6938      	ldr	r0, [r7, #16]
 800820a:	f7ff ff53 	bl	80080b4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3314      	adds	r3, #20
 8008212:	f107 020c 	add.w	r2, r7, #12
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f00a ffaa 	bl	8013172 <sys_arch_mbox_tryfetch>
 800821e:	4603      	mov	r3, r0
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008224:	d1db      	bne.n	80081de <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3314      	adds	r3, #20
 800822a:	4618      	mov	r0, r3
 800822c:	f00a ff20 	bl	8013070 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3314      	adds	r3, #20
 8008234:	4618      	mov	r0, r3
 8008236:	f00a ffc8 	bl	80131ca <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800823a:	bf00      	nop
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20008048 	.word	0x20008048

08008248 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <lwip_netconn_do_close_internal+0x24>
 800825e:	4b90      	ldr	r3, [pc, #576]	; (80084a0 <lwip_netconn_do_close_internal+0x258>)
 8008260:	f240 3243 	movw	r2, #835	; 0x343
 8008264:	498f      	ldr	r1, [pc, #572]	; (80084a4 <lwip_netconn_do_close_internal+0x25c>)
 8008266:	4890      	ldr	r0, [pc, #576]	; (80084a8 <lwip_netconn_do_close_internal+0x260>)
 8008268:	f00b fa02 	bl	8013670 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008274:	2b10      	cmp	r3, #16
 8008276:	d006      	beq.n	8008286 <lwip_netconn_do_close_internal+0x3e>
 8008278:	4b89      	ldr	r3, [pc, #548]	; (80084a0 <lwip_netconn_do_close_internal+0x258>)
 800827a:	f44f 7251 	mov.w	r2, #836	; 0x344
 800827e:	498b      	ldr	r1, [pc, #556]	; (80084ac <lwip_netconn_do_close_internal+0x264>)
 8008280:	4889      	ldr	r0, [pc, #548]	; (80084a8 <lwip_netconn_do_close_internal+0x260>)
 8008282:	f00b f9f5 	bl	8013670 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b04      	cmp	r3, #4
 800828c:	d006      	beq.n	800829c <lwip_netconn_do_close_internal+0x54>
 800828e:	4b84      	ldr	r3, [pc, #528]	; (80084a0 <lwip_netconn_do_close_internal+0x258>)
 8008290:	f240 3245 	movw	r2, #837	; 0x345
 8008294:	4986      	ldr	r1, [pc, #536]	; (80084b0 <lwip_netconn_do_close_internal+0x268>)
 8008296:	4884      	ldr	r0, [pc, #528]	; (80084a8 <lwip_netconn_do_close_internal+0x260>)
 8008298:	f00b f9ea 	bl	8013670 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d106      	bne.n	80082b2 <lwip_netconn_do_close_internal+0x6a>
 80082a4:	4b7e      	ldr	r3, [pc, #504]	; (80084a0 <lwip_netconn_do_close_internal+0x258>)
 80082a6:	f240 3246 	movw	r2, #838	; 0x346
 80082aa:	4982      	ldr	r1, [pc, #520]	; (80084b4 <lwip_netconn_do_close_internal+0x26c>)
 80082ac:	487e      	ldr	r0, [pc, #504]	; (80084a8 <lwip_netconn_do_close_internal+0x260>)
 80082ae:	f00b f9df 	bl	8013670 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <lwip_netconn_do_close_internal+0x80>
 80082ba:	4b79      	ldr	r3, [pc, #484]	; (80084a0 <lwip_netconn_do_close_internal+0x258>)
 80082bc:	f240 3247 	movw	r2, #839	; 0x347
 80082c0:	497d      	ldr	r1, [pc, #500]	; (80084b8 <lwip_netconn_do_close_internal+0x270>)
 80082c2:	4879      	ldr	r0, [pc, #484]	; (80084a8 <lwip_netconn_do_close_internal+0x260>)
 80082c4:	f00b f9d4 	bl	8013670 <iprintf>

  tpcb = conn->pcb.tcp;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	7a1b      	ldrb	r3, [r3, #8]
 80082d4:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d102      	bne.n	80082f2 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	77bb      	strb	r3, [r7, #30]
 80082f0:	e01f      	b.n	8008332 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80082f2:	7dbb      	ldrb	r3, [r7, #22]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00e      	beq.n	8008316 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	d007      	beq.n	8008310 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008304:	2b06      	cmp	r3, #6
 8008306:	d003      	beq.n	8008310 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800830c:	2b08      	cmp	r3, #8
 800830e:	d102      	bne.n	8008316 <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8008310:	2301      	movs	r3, #1
 8008312:	77bb      	strb	r3, [r7, #30]
 8008314:	e00d      	b.n	8008332 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008316:	7d7b      	ldrb	r3, [r7, #21]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d008      	beq.n	800832e <lwip_netconn_do_close_internal+0xe6>
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	7e9b      	ldrb	r3, [r3, #26]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8008328:	2301      	movs	r3, #1
 800832a:	77bb      	strb	r3, [r7, #30]
 800832c:	e001      	b.n	8008332 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8008332:	7fbb      	ldrb	r3, [r7, #30]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008338:	2100      	movs	r1, #0
 800833a:	69b8      	ldr	r0, [r7, #24]
 800833c:	f003 ff5a 	bl	800c1f4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	7d1b      	ldrb	r3, [r3, #20]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d104      	bne.n	8008352 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008348:	2100      	movs	r1, #0
 800834a:	69b8      	ldr	r0, [r7, #24]
 800834c:	f003 ffc6 	bl	800c2dc <tcp_accept>
 8008350:	e01d      	b.n	800838e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008352:	7dbb      	ldrb	r3, [r7, #22]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d007      	beq.n	8008368 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008358:	2100      	movs	r1, #0
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f003 ff5a 	bl	800c214 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008360:	2100      	movs	r1, #0
 8008362:	69b8      	ldr	r0, [r7, #24]
 8008364:	f003 ffba 	bl	800c2dc <tcp_accept>
    }
    if (shut_tx) {
 8008368:	7d7b      	ldrb	r3, [r7, #21]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800836e:	2100      	movs	r1, #0
 8008370:	69b8      	ldr	r0, [r7, #24]
 8008372:	f003 ff71 	bl	800c258 <tcp_sent>
    }
    if (close) {
 8008376:	7fbb      	ldrb	r3, [r7, #30]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d008      	beq.n	800838e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800837c:	2200      	movs	r2, #0
 800837e:	2100      	movs	r1, #0
 8008380:	69b8      	ldr	r0, [r7, #24]
 8008382:	f003 ffc1 	bl	800c308 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008386:	2100      	movs	r1, #0
 8008388:	69b8      	ldr	r0, [r7, #24]
 800838a:	f003 ff85 	bl	800c298 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800838e:	7fbb      	ldrb	r3, [r7, #30]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008394:	69b8      	ldr	r0, [r7, #24]
 8008396:	f002 fe57 	bl	800b048 <tcp_close>
 800839a:	4603      	mov	r3, r0
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e007      	b.n	80083b0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
 80083a2:	7d7a      	ldrb	r2, [r7, #21]
 80083a4:	4619      	mov	r1, r3
 80083a6:	69b8      	ldr	r0, [r7, #24]
 80083a8:	f002 fe66 	bl	800b078 <tcp_shutdown>
 80083ac:	4603      	mov	r3, r0
 80083ae:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 80083b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80083b8:	2301      	movs	r3, #1
 80083ba:	777b      	strb	r3, [r7, #29]
 80083bc:	e016      	b.n	80083ec <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80083be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d10f      	bne.n	80083e8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	7a5b      	ldrb	r3, [r3, #9]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10c      	bne.n	80083ec <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	777b      	strb	r3, [r7, #29]
        if (close) {
 80083d6:	7fbb      	ldrb	r3, [r7, #30]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80083dc:	69b8      	ldr	r0, [r7, #24]
 80083de:	f002 ff45 	bl	800b26c <tcp_abort>
          err = ERR_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e001      	b.n	80083ec <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80083e8:	2301      	movs	r3, #1
 80083ea:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 80083ec:	7f7b      	ldrb	r3, [r7, #29]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d064      	beq.n	80084bc <lwip_netconn_do_close_internal+0x274>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	7ffa      	ldrb	r2, [r7, #31]
 8008402:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008410:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d129      	bne.n	800846c <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8008418:	7fbb      	ldrb	r3, [r7, #30]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00c      	beq.n	8008438 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <lwip_netconn_do_close_internal+0x1f0>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	2200      	movs	r2, #0
 8008432:	2104      	movs	r1, #4
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
      }
      if (shut_rx) {
 8008438:	7dbb      	ldrb	r3, [r7, #22]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <lwip_netconn_do_close_internal+0x20a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	2200      	movs	r2, #0
 800844c:	2100      	movs	r1, #0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
      }
      if (shut_tx) {
 8008452:	7d7b      	ldrb	r3, [r7, #21]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <lwip_netconn_do_close_internal+0x224>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	2200      	movs	r2, #0
 8008466:	2102      	movs	r1, #2
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00e      	beq.n	8008490 <lwip_netconn_do_close_internal+0x248>
 8008472:	f00a ffb1 	bl	80133d8 <sys_arch_protect>
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800847e:	f113 0f0c 	cmn.w	r3, #12
 8008482:	db02      	blt.n	800848a <lwip_netconn_do_close_internal+0x242>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	7ffa      	ldrb	r2, [r7, #31]
 8008488:	721a      	strb	r2, [r3, #8]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f00a ffb2 	bl	80133f4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008496:	6938      	ldr	r0, [r7, #16]
 8008498:	f00a fefc 	bl	8013294 <sys_sem_signal>
    }
    return ERR_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e03c      	b.n	800851a <lwip_netconn_do_close_internal+0x2d2>
 80084a0:	08014b7c 	.word	0x08014b7c
 80084a4:	08014df4 	.word	0x08014df4
 80084a8:	08014bd4 	.word	0x08014bd4
 80084ac:	08014e04 	.word	0x08014e04
 80084b0:	08014e24 	.word	0x08014e24
 80084b4:	08014e48 	.word	0x08014e48
 80084b8:	08014cb0 	.word	0x08014cb0
  }
  if (!close_finished) {
 80084bc:	7f7b      	ldrb	r3, [r7, #29]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d11e      	bne.n	8008500 <lwip_netconn_do_close_internal+0x2b8>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	7d1b      	ldrb	r3, [r3, #20]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d106      	bne.n	80084d8 <lwip_netconn_do_close_internal+0x290>
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <lwip_netconn_do_close_internal+0x2dc>)
 80084cc:	f240 32e3 	movw	r2, #995	; 0x3e3
 80084d0:	4915      	ldr	r1, [pc, #84]	; (8008528 <lwip_netconn_do_close_internal+0x2e0>)
 80084d2:	4816      	ldr	r0, [pc, #88]	; (800852c <lwip_netconn_do_close_internal+0x2e4>)
 80084d4:	f00b f8cc 	bl	8013670 <iprintf>
    if (shut_tx) {
 80084d8:	7d7b      	ldrb	r3, [r7, #21]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <lwip_netconn_do_close_internal+0x29e>
      tcp_sent(tpcb, sent_tcp);
 80084de:	4914      	ldr	r1, [pc, #80]	; (8008530 <lwip_netconn_do_close_internal+0x2e8>)
 80084e0:	69b8      	ldr	r0, [r7, #24]
 80084e2:	f003 feb9 	bl	800c258 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80084e6:	2201      	movs	r2, #1
 80084e8:	4912      	ldr	r1, [pc, #72]	; (8008534 <lwip_netconn_do_close_internal+0x2ec>)
 80084ea:	69b8      	ldr	r0, [r7, #24]
 80084ec:	f003 ff0c 	bl	800c308 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80084f0:	4911      	ldr	r1, [pc, #68]	; (8008538 <lwip_netconn_do_close_internal+0x2f0>)
 80084f2:	69b8      	ldr	r0, [r7, #24]
 80084f4:	f003 fed0 	bl	800c298 <tcp_err>
    tcp_arg(tpcb, conn);
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	69b8      	ldr	r0, [r7, #24]
 80084fc:	f003 fe7a 	bl	800c1f4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008500:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <lwip_netconn_do_close_internal+0x2ce>
 8008508:	4b06      	ldr	r3, [pc, #24]	; (8008524 <lwip_netconn_do_close_internal+0x2dc>)
 800850a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800850e:	490b      	ldr	r1, [pc, #44]	; (800853c <lwip_netconn_do_close_internal+0x2f4>)
 8008510:	4806      	ldr	r0, [pc, #24]	; (800852c <lwip_netconn_do_close_internal+0x2e4>)
 8008512:	f00b f8ad 	bl	8013670 <iprintf>
  return err;
 8008516:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	08014b7c 	.word	0x08014b7c
 8008528:	08014e5c 	.word	0x08014e5c
 800852c:	08014bd4 	.word	0x08014bd4
 8008530:	08007bd1 	.word	0x08007bd1
 8008534:	08007b09 	.word	0x08007b09
 8008538:	08007c79 	.word	0x08007c79
 800853c:	08014e80 	.word	0x08014e80

08008540 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008554:	f113 0f0c 	cmn.w	r3, #12
 8008558:	da06      	bge.n	8008568 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	711a      	strb	r2, [r3, #4]
 8008566:	e031      	b.n	80085cc <lwip_netconn_do_bind+0x8c>
  } else {
    msg->err = ERR_VAL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	22fa      	movs	r2, #250	; 0xfa
 800856c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d026      	beq.n	80085c6 <lwip_netconn_do_bind+0x86>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008582:	2b10      	cmp	r3, #16
 8008584:	d010      	beq.n	80085a8 <lwip_netconn_do_bind+0x68>
 8008586:	2b20      	cmp	r3, #32
 8008588:	d11f      	bne.n	80085ca <lwip_netconn_do_bind+0x8a>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6858      	ldr	r0, [r3, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6899      	ldr	r1, [r3, #8]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	899b      	ldrh	r3, [r3, #12]
 8008598:	461a      	mov	r2, r3
 800859a:	f008 f9f9 	bl	8010990 <udp_bind>
 800859e:	4603      	mov	r3, r0
 80085a0:	461a      	mov	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	711a      	strb	r2, [r3, #4]
        break;
 80085a6:	e011      	b.n	80085cc <lwip_netconn_do_bind+0x8c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6858      	ldr	r0, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6899      	ldr	r1, [r3, #8]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	899b      	ldrh	r3, [r3, #12]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f002 fe64 	bl	800b284 <tcp_bind>
 80085bc:	4603      	mov	r3, r0
 80085be:	461a      	mov	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	711a      	strb	r2, [r3, #4]
        break;
 80085c4:	e002      	b.n	80085cc <lwip_netconn_do_bind+0x8c>
#endif /* LWIP_TCP */
      default:
        break;
      }
    }
 80085c6:	bf00      	nop
 80085c8:	e000      	b.n	80085cc <lwip_netconn_do_bind+0x8c>
        break;
 80085ca:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d012      	beq.n	80085fa <lwip_netconn_do_bind+0xba>
 80085d4:	f00a ff00 	bl	80133d8 <sys_arch_protect>
 80085d8:	60b8      	str	r0, [r7, #8]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085e2:	f113 0f0c 	cmn.w	r3, #12
 80085e6:	db05      	blt.n	80085f4 <lwip_netconn_do_bind+0xb4>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80085f2:	721a      	strb	r2, [r3, #8]
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	f00a fefd 	bl	80133f4 <sys_arch_unprotect>
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 8008612:	2300      	movs	r3, #0
 8008614:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8008620:	f06f 0305 	mvn.w	r3, #5
 8008624:	e082      	b.n	800872c <lwip_netconn_do_connected+0x128>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b03      	cmp	r3, #3
 800862c:	d006      	beq.n	800863c <lwip_netconn_do_connected+0x38>
 800862e:	4b41      	ldr	r3, [pc, #260]	; (8008734 <lwip_netconn_do_connected+0x130>)
 8008630:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8008634:	4940      	ldr	r1, [pc, #256]	; (8008738 <lwip_netconn_do_connected+0x134>)
 8008636:	4841      	ldr	r0, [pc, #260]	; (800873c <lwip_netconn_do_connected+0x138>)
 8008638:	f00b f81a 	bl	8013670 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10c      	bne.n	800865e <lwip_netconn_do_connected+0x5a>
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	7f1b      	ldrb	r3, [r3, #28]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <lwip_netconn_do_connected+0x5a>
 8008650:	4b38      	ldr	r3, [pc, #224]	; (8008734 <lwip_netconn_do_connected+0x130>)
 8008652:	f240 4299 	movw	r2, #1177	; 0x499
 8008656:	493a      	ldr	r1, [pc, #232]	; (8008740 <lwip_netconn_do_connected+0x13c>)
 8008658:	4838      	ldr	r0, [pc, #224]	; (800873c <lwip_netconn_do_connected+0x138>)
 800865a:	f00b f809 	bl	8013670 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	79fa      	ldrb	r2, [r7, #7]
 800866c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	330c      	adds	r3, #12
 8008676:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008680:	2b10      	cmp	r3, #16
 8008682:	d106      	bne.n	8008692 <lwip_netconn_do_connected+0x8e>
 8008684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800868c:	69b8      	ldr	r0, [r7, #24]
 800868e:	f7ff fbe3 	bl	8007e58 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	7f1b      	ldrb	r3, [r3, #28]
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	bf0c      	ite	eq
 800869e:	2301      	moveq	r3, #1
 80086a0:	2300      	movne	r3, #0
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	7f1b      	ldrb	r3, [r3, #28]
 80086aa:	f023 0304 	bic.w	r3, r3, #4
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <lwip_netconn_do_connected+0xbc>
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10c      	bne.n	80086da <lwip_netconn_do_connected+0xd6>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <lwip_netconn_do_connected+0xc8>
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d006      	beq.n	80086da <lwip_netconn_do_connected+0xd6>
 80086cc:	4b19      	ldr	r3, [pc, #100]	; (8008734 <lwip_netconn_do_connected+0x130>)
 80086ce:	f240 42a5 	movw	r2, #1189	; 0x4a5
 80086d2:	491c      	ldr	r1, [pc, #112]	; (8008744 <lwip_netconn_do_connected+0x140>)
 80086d4:	4819      	ldr	r0, [pc, #100]	; (800873c <lwip_netconn_do_connected+0x138>)
 80086d6:	f00a ffcb 	bl	8013670 <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2200      	movs	r2, #0
 80086de:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2200      	movs	r2, #0
 80086e4:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00e      	beq.n	800870a <lwip_netconn_do_connected+0x106>
 80086ec:	f00a fe74 	bl	80133d8 <sys_arch_protect>
 80086f0:	6138      	str	r0, [r7, #16]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80086f8:	f113 0f0c 	cmn.w	r3, #12
 80086fc:	db02      	blt.n	8008704 <lwip_netconn_do_connected+0x100>
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2200      	movs	r2, #0
 8008702:	721a      	strb	r2, [r3, #8]
 8008704:	6938      	ldr	r0, [r7, #16]
 8008706:	f00a fe75 	bl	80133f4 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <lwip_netconn_do_connected+0x11a>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	2200      	movs	r2, #0
 8008718:	2102      	movs	r1, #2
 800871a:	69b8      	ldr	r0, [r7, #24]
 800871c:	4798      	blx	r3

  if (was_blocking) {
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <lwip_netconn_do_connected+0x126>
    sys_sem_signal(op_completed_sem);
 8008724:	69f8      	ldr	r0, [r7, #28]
 8008726:	f00a fdb5 	bl	8013294 <sys_sem_signal>
  }
  return ERR_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	08014b7c 	.word	0x08014b7c
 8008738:	08014ee8 	.word	0x08014ee8
 800873c:	08014bd4 	.word	0x08014bd4
 8008740:	08014f08 	.word	0x08014f08
 8008744:	08014f48 	.word	0x08014f48

08008748 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	22f1      	movs	r2, #241	; 0xf1
 8008762:	711a      	strb	r2, [r3, #4]
 8008764:	e0a4      	b.n	80088b0 <lwip_netconn_do_connect+0x168>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008770:	2b10      	cmp	r3, #16
 8008772:	d011      	beq.n	8008798 <lwip_netconn_do_connect+0x50>
 8008774:	2b20      	cmp	r3, #32
 8008776:	f040 808f 	bne.w	8008898 <lwip_netconn_do_connect+0x150>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6858      	ldr	r0, [r3, #4]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6899      	ldr	r1, [r3, #8]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	899b      	ldrh	r3, [r3, #12]
 8008788:	461a      	mov	r2, r3
 800878a:	f008 f971 	bl	8010a70 <udp_connect>
 800878e:	4603      	mov	r3, r0
 8008790:	461a      	mov	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	711a      	strb	r2, [r3, #4]
      break;
 8008796:	e08b      	b.n	80088b0 <lwip_netconn_do_connect+0x168>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d103      	bne.n	80087aa <lwip_netconn_do_connect+0x62>
        msg->err = ERR_ALREADY;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	22f7      	movs	r2, #247	; 0xf7
 80087a6:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 80087a8:	e081      	b.n	80088ae <lwip_netconn_do_connect+0x166>
      } else if (msg->conn->state != NETCONN_NONE) {
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <lwip_netconn_do_connect+0x74>
        msg->err = ERR_ISCONN;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	22f6      	movs	r2, #246	; 0xf6
 80087b8:	711a      	strb	r2, [r3, #4]
      break;
 80087ba:	e078      	b.n	80088ae <lwip_netconn_do_connect+0x166>
        setup_tcp(msg->conn);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fb49 	bl	8007e58 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6858      	ldr	r0, [r3, #4]
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	6899      	ldr	r1, [r3, #8]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	899a      	ldrh	r2, [r3, #12]
 80087d4:	4b44      	ldr	r3, [pc, #272]	; (80088e8 <lwip_netconn_do_connect+0x1a0>)
 80087d6:	f002 fed3 	bl	800b580 <tcp_connect>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d160      	bne.n	80088ae <lwip_netconn_do_connect+0x166>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	7f1b      	ldrb	r3, [r3, #28]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf14      	ite	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	2300      	moveq	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2203      	movs	r2, #3
 8008808:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800880a:	7cfb      	ldrb	r3, [r7, #19]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <lwip_netconn_do_connect+0xdc>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	7f1a      	ldrb	r2, [r3, #28]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0204 	orr.w	r2, r2, #4
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	771a      	strb	r2, [r3, #28]
 8008822:	e008      	b.n	8008836 <lwip_netconn_do_connect+0xee>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	7f1a      	ldrb	r2, [r3, #28]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0204 	bic.w	r2, r2, #4
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	771a      	strb	r2, [r3, #28]
          if (non_blocking) {
 8008836:	7cfb      	ldrb	r3, [r7, #19]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <lwip_netconn_do_connect+0xfc>
            msg->err = ERR_INPROGRESS;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	22fb      	movs	r2, #251	; 0xfb
 8008840:	711a      	strb	r2, [r3, #4]
      break;
 8008842:	e034      	b.n	80088ae <lwip_netconn_do_connect+0x166>
            msg->conn->current_msg = msg;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	625a      	str	r2, [r3, #36]	; 0x24
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b03      	cmp	r3, #3
 8008854:	d006      	beq.n	8008864 <lwip_netconn_do_connect+0x11c>
 8008856:	4b25      	ldr	r3, [pc, #148]	; (80088ec <lwip_netconn_do_connect+0x1a4>)
 8008858:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800885c:	4924      	ldr	r1, [pc, #144]	; (80088f0 <lwip_netconn_do_connect+0x1a8>)
 800885e:	4825      	ldr	r0, [pc, #148]	; (80088f4 <lwip_netconn_do_connect+0x1ac>)
 8008860:	f00a ff06 	bl	8013670 <iprintf>
            UNLOCK_TCPIP_CORE();
 8008864:	4824      	ldr	r0, [pc, #144]	; (80088f8 <lwip_netconn_do_connect+0x1b0>)
 8008866:	f00a fd84 	bl	8013372 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	2100      	movs	r1, #0
 8008872:	4618      	mov	r0, r3
 8008874:	f00a fcdd 	bl	8013232 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008878:	481f      	ldr	r0, [pc, #124]	; (80088f8 <lwip_netconn_do_connect+0x1b0>)
 800887a:	f00a fd6b 	bl	8013354 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d12b      	bne.n	80088e0 <lwip_netconn_do_connect+0x198>
 8008888:	4b18      	ldr	r3, [pc, #96]	; (80088ec <lwip_netconn_do_connect+0x1a4>)
 800888a:	f240 42e9 	movw	r2, #1257	; 0x4e9
 800888e:	4918      	ldr	r1, [pc, #96]	; (80088f0 <lwip_netconn_do_connect+0x1a8>)
 8008890:	4818      	ldr	r0, [pc, #96]	; (80088f4 <lwip_netconn_do_connect+0x1ac>)
 8008892:	f00a feed 	bl	8013670 <iprintf>
            return;
 8008896:	e023      	b.n	80088e0 <lwip_netconn_do_connect+0x198>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 8008898:	4b14      	ldr	r3, [pc, #80]	; (80088ec <lwip_netconn_do_connect+0x1a4>)
 800889a:	f240 42f2 	movw	r2, #1266	; 0x4f2
 800889e:	4917      	ldr	r1, [pc, #92]	; (80088fc <lwip_netconn_do_connect+0x1b4>)
 80088a0:	4814      	ldr	r0, [pc, #80]	; (80088f4 <lwip_netconn_do_connect+0x1ac>)
 80088a2:	f00a fee5 	bl	8013670 <iprintf>
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	22fa      	movs	r2, #250	; 0xfa
 80088aa:	711a      	strb	r2, [r3, #4]
      break;
 80088ac:	e000      	b.n	80088b0 <lwip_netconn_do_connect+0x168>
      break;
 80088ae:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d014      	beq.n	80088e2 <lwip_netconn_do_connect+0x19a>
 80088b8:	f00a fd8e 	bl	80133d8 <sys_arch_protect>
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80088c6:	f113 0f0c 	cmn.w	r3, #12
 80088ca:	db05      	blt.n	80088d8 <lwip_netconn_do_connect+0x190>
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80088d6:	721a      	strb	r2, [r3, #8]
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f00a fd8b 	bl	80133f4 <sys_arch_unprotect>
 80088de:	e000      	b.n	80088e2 <lwip_netconn_do_connect+0x19a>
            return;
 80088e0:	bf00      	nop
}
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	08008605 	.word	0x08008605
 80088ec:	08014b7c 	.word	0x08014b7c
 80088f0:	08014ee0 	.word	0x08014ee0
 80088f4:	08014bd4 	.word	0x08014bd4
 80088f8:	20008058 	.word	0x20008058
 80088fc:	08014f68 	.word	0x08014f68

08008900 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008916:	2b20      	cmp	r3, #32
 8008918:	d109      	bne.n	800892e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	f008 f8fb 	bl	8010b1c <udp_disconnect>
    msg->err = ERR_OK;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	711a      	strb	r2, [r3, #4]
 800892c:	e002      	b.n	8008934 <lwip_netconn_do_disconnect+0x34>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	22fa      	movs	r2, #250	; 0xfa
 8008932:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d012      	beq.n	8008962 <lwip_netconn_do_disconnect+0x62>
 800893c:	f00a fd4c 	bl	80133d8 <sys_arch_protect>
 8008940:	60b8      	str	r0, [r7, #8]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800894a:	f113 0f0c 	cmn.w	r3, #12
 800894e:	db05      	blt.n	800895c <lwip_netconn_do_disconnect+0x5c>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800895a:	721a      	strb	r2, [r3, #8]
 800895c:	68b8      	ldr	r0, [r7, #8]
 800895e:	f00a fd49 	bl	80133f4 <sys_arch_unprotect>
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800897e:	f113 0f0c 	cmn.w	r3, #12
 8008982:	da06      	bge.n	8008992 <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	711a      	strb	r2, [r3, #4]
 8008990:	e039      	b.n	8008a06 <lwip_netconn_do_send+0x9c>
  } else {
    msg->err = ERR_CONN;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22f5      	movs	r2, #245	; 0xf5
 8008996:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02e      	beq.n	8008a00 <lwip_netconn_do_send+0x96>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d129      	bne.n	8008a04 <lwip_netconn_do_send+0x9a>
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        }
#else /* LWIP_CHECKSUM_ON_COPY */
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10e      	bne.n	80089d8 <lwip_netconn_do_send+0x6e>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f007 fec7 	bl	801075c <udp_send>
 80089ce:	4603      	mov	r3, r0
 80089d0:	461a      	mov	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	711a      	strb	r2, [r3, #4]
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 80089d6:	e016      	b.n	8008a06 <lwip_netconn_do_send+0x9c>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6858      	ldr	r0, [r3, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f103 0208 	add.w	r2, r3, #8
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	899b      	ldrh	r3, [r3, #12]
 80089f2:	f007 fecb 	bl	801078c <udp_sendto>
 80089f6:	4603      	mov	r3, r0
 80089f8:	461a      	mov	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	711a      	strb	r2, [r3, #4]
        break;
 80089fe:	e002      	b.n	8008a06 <lwip_netconn_do_send+0x9c>
#endif /* LWIP_UDP */
      default:
        break;
      }
    }
 8008a00:	bf00      	nop
 8008a02:	e000      	b.n	8008a06 <lwip_netconn_do_send+0x9c>
        break;
 8008a04:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d012      	beq.n	8008a34 <lwip_netconn_do_send+0xca>
 8008a0e:	f00a fce3 	bl	80133d8 <sys_arch_protect>
 8008a12:	60b8      	str	r0, [r7, #8]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a1c:	f113 0f0c 	cmn.w	r3, #12
 8008a20:	db05      	blt.n	8008a2e <lwip_netconn_do_send+0xc4>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008a2c:	721a      	strb	r2, [r3, #8]
 8008a2e:	68b8      	ldr	r0, [r7, #8]
 8008a30:	f00a fce0 	bl	80133f4 <sys_arch_unprotect>
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d022      	beq.n	8008a9e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a62:	2b10      	cmp	r3, #16
 8008a64:	d11b      	bne.n	8008a9e <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a72:	d202      	bcs.n	8008a7a <lwip_netconn_do_recv+0x3e>
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	e001      	b.n	8008a7e <lwip_netconn_do_recv+0x42>
 8008a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a7e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	89fa      	ldrh	r2, [r7, #14]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fcda 	bl	800b444 <tcp_recved>
        remaining -= recved;
 8008a90:	89fb      	ldrh	r3, [r7, #14]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d012      	beq.n	8008acc <lwip_netconn_do_recv+0x90>
 8008aa6:	f00a fc97 	bl	80133d8 <sys_arch_protect>
 8008aaa:	60b8      	str	r0, [r7, #8]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ab4:	f113 0f0c 	cmn.w	r3, #12
 8008ab8:	db05      	blt.n	8008ac6 <lwip_netconn_do_recv+0x8a>
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008ac4:	721a      	strb	r2, [r3, #8]
 8008ac6:	68b8      	ldr	r0, [r7, #8]
 8008ac8:	f00a fc94 	bl	80133f4 <sys_arch_unprotect>
}
 8008acc:	bf00      	nop
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08a      	sub	sp, #40	; 0x28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <lwip_netconn_do_writemore+0x26>
 8008aec:	4b9b      	ldr	r3, [pc, #620]	; (8008d5c <lwip_netconn_do_writemore+0x288>)
 8008aee:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8008af2:	499b      	ldr	r1, [pc, #620]	; (8008d60 <lwip_netconn_do_writemore+0x28c>)
 8008af4:	489b      	ldr	r0, [pc, #620]	; (8008d64 <lwip_netconn_do_writemore+0x290>)
 8008af6:	f00a fdbb 	bl	8013670 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d006      	beq.n	8008b10 <lwip_netconn_do_writemore+0x3c>
 8008b02:	4b96      	ldr	r3, [pc, #600]	; (8008d5c <lwip_netconn_do_writemore+0x288>)
 8008b04:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8008b08:	4997      	ldr	r1, [pc, #604]	; (8008d68 <lwip_netconn_do_writemore+0x294>)
 8008b0a:	4896      	ldr	r0, [pc, #600]	; (8008d64 <lwip_netconn_do_writemore+0x290>)
 8008b0c:	f00a fdb0 	bl	8013670 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d106      	bne.n	8008b26 <lwip_netconn_do_writemore+0x52>
 8008b18:	4b90      	ldr	r3, [pc, #576]	; (8008d5c <lwip_netconn_do_writemore+0x288>)
 8008b1a:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8008b1e:	4993      	ldr	r1, [pc, #588]	; (8008d6c <lwip_netconn_do_writemore+0x298>)
 8008b20:	4890      	ldr	r0, [pc, #576]	; (8008d64 <lwip_netconn_do_writemore+0x290>)
 8008b22:	f00a fda5 	bl	8013670 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d106      	bne.n	8008b3c <lwip_netconn_do_writemore+0x68>
 8008b2e:	4b8b      	ldr	r3, [pc, #556]	; (8008d5c <lwip_netconn_do_writemore+0x288>)
 8008b30:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8008b34:	498e      	ldr	r1, [pc, #568]	; (8008d70 <lwip_netconn_do_writemore+0x29c>)
 8008b36:	488b      	ldr	r0, [pc, #556]	; (8008d64 <lwip_netconn_do_writemore+0x290>)
 8008b38:	f00a fd9a 	bl	8013670 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1a      	ldr	r2, [r3, #32]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d306      	bcc.n	8008b58 <lwip_netconn_do_writemore+0x84>
 8008b4a:	4b84      	ldr	r3, [pc, #528]	; (8008d5c <lwip_netconn_do_writemore+0x288>)
 8008b4c:	f240 52e7 	movw	r2, #1511	; 0x5e7
 8008b50:	4988      	ldr	r1, [pc, #544]	; (8008d74 <lwip_netconn_do_writemore+0x2a0>)
 8008b52:	4884      	ldr	r0, [pc, #528]	; (8008d64 <lwip_netconn_do_writemore+0x290>)
 8008b54:	f00a fd8c 	bl	8013670 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	7c1b      	ldrb	r3, [r3, #16]
 8008b5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	7f1b      	ldrb	r3, [r3, #28]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <lwip_netconn_do_writemore+0xa6>
 8008b6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <lwip_netconn_do_writemore+0xaa>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <lwip_netconn_do_writemore+0xac>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	4413      	add	r3, r2
 8008b90:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba6:	d309      	bcc.n	8008bbc <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8008ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bac:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8008bae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008bb2:	f043 0302 	orr.w	r3, r3, #2
 8008bb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bba:	e001      	b.n	8008bc0 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bc8:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8008bca:	8afa      	ldrh	r2, [r7, #22]
 8008bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d212      	bcs.n	8008bf8 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8008bd2:	8afb      	ldrh	r3, [r7, #22]
 8008bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8008bd6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d006      	beq.n	8008bec <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8008bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d109      	bne.n	8008bf8 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8008be4:	23f9      	movs	r3, #249	; 0xf9
 8008be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8008bea:	e02a      	b.n	8008c42 <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008bec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008bf0:	f043 0302 	orr.w	r3, r3, #2
 8008bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1a      	ldr	r2, [r3, #32]
 8008bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bfe:	441a      	add	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d906      	bls.n	8008c18 <lwip_netconn_do_writemore+0x144>
 8008c0a:	4b54      	ldr	r3, [pc, #336]	; (8008d5c <lwip_netconn_do_writemore+0x288>)
 8008c0c:	f240 6213 	movw	r2, #1555	; 0x613
 8008c10:	4959      	ldr	r1, [pc, #356]	; (8008d78 <lwip_netconn_do_writemore+0x2a4>)
 8008c12:	4854      	ldr	r0, [pc, #336]	; (8008d64 <lwip_netconn_do_writemore+0x290>)
 8008c14:	f00a fd2c 	bl	8013670 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6858      	ldr	r0, [r3, #4]
 8008c1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c22:	69f9      	ldr	r1, [r7, #28]
 8008c24:	f006 f91e 	bl	800ee64 <tcp_write>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <lwip_netconn_do_writemore+0x16c>
 8008c36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d133      	bne.n	8008ca8 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 8008c40:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008c42:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d017      	beq.n	8008c7a <lwip_netconn_do_writemore+0x1a6>
 8008c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d211      	bcs.n	8008c7a <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <lwip_netconn_do_writemore+0x196>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c64:	2103      	movs	r1, #3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7f1b      	ldrb	r3, [r3, #28]
 8008c6e:	f043 0310 	orr.w	r3, r3, #16
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	771a      	strb	r2, [r3, #28]
 8008c78:	e016      	b.n	8008ca8 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c82:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008c86:	d305      	bcc.n	8008c94 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d909      	bls.n	8008ca8 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <lwip_netconn_do_writemore+0x1d4>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ca2:	2103      	movs	r1, #3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8008ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d134      	bne.n	8008d1a <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1a      	ldr	r2, [r3, #32]
 8008cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cb6:	441a      	add	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1a      	ldr	r2, [r3, #32]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d003      	beq.n	8008cd2 <lwip_netconn_do_writemore+0x1fe>
 8008cca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6a12      	ldr	r2, [r2, #32]
 8008cda:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f006 fd6e 	bl	800f7c8 <tcp_output>
 8008cec:	4603      	mov	r3, r0
 8008cee:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008cf0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008cf4:	f113 0f0c 	cmn.w	r3, #12
 8008cf8:	db04      	blt.n	8008d04 <lwip_netconn_do_writemore+0x230>
 8008cfa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008cfe:	f113 0f04 	cmn.w	r3, #4
 8008d02:	d151      	bne.n	8008da8 <lwip_netconn_do_writemore+0x2d4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008d04:	7d3b      	ldrb	r3, [r7, #20]
 8008d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	2200      	movs	r2, #0
 8008d16:	60da      	str	r2, [r3, #12]
 8008d18:	e046      	b.n	8008da8 <lwip_netconn_do_writemore+0x2d4>
      }
    } else if (err == ERR_MEM) {
 8008d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d13a      	bne.n	8008d9a <lwip_netconn_do_writemore+0x2c6>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f006 fd4d 	bl	800f7c8 <tcp_output>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d32:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008d36:	f113 0f0c 	cmn.w	r3, #12
 8008d3a:	db04      	blt.n	8008d46 <lwip_netconn_do_writemore+0x272>
 8008d3c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008d40:	f113 0f04 	cmn.w	r3, #4
 8008d44:	d11a      	bne.n	8008d7c <lwip_netconn_do_writemore+0x2a8>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008d46:	7d7b      	ldrb	r3, [r7, #21]
 8008d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2200      	movs	r2, #0
 8008d58:	60da      	str	r2, [r3, #12]
 8008d5a:	e025      	b.n	8008da8 <lwip_netconn_do_writemore+0x2d4>
 8008d5c:	08014b7c 	.word	0x08014b7c
 8008d60:	08014ca0 	.word	0x08014ca0
 8008d64:	08014bd4 	.word	0x08014bd4
 8008d68:	08014f80 	.word	0x08014f80
 8008d6c:	08014cb0 	.word	0x08014cb0
 8008d70:	08014fa0 	.word	0x08014fa0
 8008d74:	08014fb8 	.word	0x08014fb8
 8008d78:	08014fec 	.word	0x08014fec
      } else if (dontblock) {
 8008d7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d011      	beq.n	8008da8 <lwip_netconn_do_writemore+0x2d4>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8008d84:	23f9      	movs	r3, #249	; 0xf9
 8008d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2200      	movs	r2, #0
 8008d96:	60da      	str	r2, [r3, #12]
 8008d98:	e006      	b.n	8008da8 <lwip_netconn_do_writemore+0x2d4>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2200      	movs	r2, #0
 8008da6:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8008da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d02c      	beq.n	8008e0a <lwip_netconn_do_writemore+0x336>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	330c      	adds	r3, #12
 8008db8:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008dc2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00f      	beq.n	8008dfc <lwip_netconn_do_writemore+0x328>
 8008ddc:	f00a fafc 	bl	80133d8 <sys_arch_protect>
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008de8:	f113 0f0c 	cmn.w	r3, #12
 8008dec:	db03      	blt.n	8008df6 <lwip_netconn_do_writemore+0x322>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008df4:	721a      	strb	r2, [r3, #8]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f00a fafc 	bl	80133f4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d006      	beq.n	8008e10 <lwip_netconn_do_writemore+0x33c>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008e02:	6938      	ldr	r0, [r7, #16]
 8008e04:	f00a fa46 	bl	8013294 <sys_sem_signal>
 8008e08:	e002      	b.n	8008e10 <lwip_netconn_do_writemore+0x33c>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8008e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0e:	e000      	b.n	8008e12 <lwip_netconn_do_writemore+0x33e>
  }
#endif
  return ERR_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3728      	adds	r7, #40	; 0x28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop

08008e1c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d06e      	beq.n	8008f18 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008e44:	2b10      	cmp	r3, #16
 8008e46:	d167      	bne.n	8008f18 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d002      	beq.n	8008e56 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008e50:	7cfb      	ldrb	r3, [r7, #19]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d060      	beq.n	8008f18 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008e56:	7cfb      	ldrb	r3, [r7, #19]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d103      	bne.n	8008e64 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	22f5      	movs	r2, #245	; 0xf5
 8008e60:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008e62:	e05c      	b.n	8008f1e <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8008e64:	7cfb      	ldrb	r3, [r7, #19]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d103      	bne.n	8008e72 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	22fb      	movs	r2, #251	; 0xfb
 8008e6e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008e70:	e055      	b.n	8008f1e <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	7a1b      	ldrb	r3, [r3, #8]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff f960 	bl	8008148 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d104      	bne.n	8008e9c <lwip_netconn_do_close+0x80>
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d006      	beq.n	8008eaa <lwip_netconn_do_close+0x8e>
 8008e9c:	4b2e      	ldr	r3, [pc, #184]	; (8008f58 <lwip_netconn_do_close+0x13c>)
 8008e9e:	f240 721b 	movw	r2, #1819	; 0x71b
 8008ea2:	492e      	ldr	r1, [pc, #184]	; (8008f5c <lwip_netconn_do_close+0x140>)
 8008ea4:	482e      	ldr	r0, [pc, #184]	; (8008f60 <lwip_netconn_do_close+0x144>)
 8008ea6:	f00a fbe3 	bl	8013670 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2204      	movs	r2, #4
 8008eb0:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff f9c1 	bl	8008248 <lwip_netconn_do_close_internal>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d040      	beq.n	8008f4e <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d006      	beq.n	8008ee4 <lwip_netconn_do_close+0xc8>
 8008ed6:	4b20      	ldr	r3, [pc, #128]	; (8008f58 <lwip_netconn_do_close+0x13c>)
 8008ed8:	f240 7221 	movw	r2, #1825	; 0x721
 8008edc:	4921      	ldr	r1, [pc, #132]	; (8008f64 <lwip_netconn_do_close+0x148>)
 8008ede:	4820      	ldr	r0, [pc, #128]	; (8008f60 <lwip_netconn_do_close+0x144>)
 8008ee0:	f00a fbc6 	bl	8013670 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008ee4:	4820      	ldr	r0, [pc, #128]	; (8008f68 <lwip_netconn_do_close+0x14c>)
 8008ee6:	f00a fa44 	bl	8013372 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	330c      	adds	r3, #12
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f00a f99d 	bl	8013232 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008ef8:	481b      	ldr	r0, [pc, #108]	; (8008f68 <lwip_netconn_do_close+0x14c>)
 8008efa:	f00a fa2b 	bl	8013354 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d022      	beq.n	8008f4e <lwip_netconn_do_close+0x132>
 8008f08:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <lwip_netconn_do_close+0x13c>)
 8008f0a:	f240 7225 	movw	r2, #1829	; 0x725
 8008f0e:	4915      	ldr	r1, [pc, #84]	; (8008f64 <lwip_netconn_do_close+0x148>)
 8008f10:	4813      	ldr	r0, [pc, #76]	; (8008f60 <lwip_netconn_do_close+0x144>)
 8008f12:	f00a fbad 	bl	8013670 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8008f16:	e01a      	b.n	8008f4e <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	22f5      	movs	r2, #245	; 0xf5
 8008f1c:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d014      	beq.n	8008f50 <lwip_netconn_do_close+0x134>
 8008f26:	f00a fa57 	bl	80133d8 <sys_arch_protect>
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008f34:	f113 0f0c 	cmn.w	r3, #12
 8008f38:	db05      	blt.n	8008f46 <lwip_netconn_do_close+0x12a>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008f44:	721a      	strb	r2, [r3, #8]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f00a fa54 	bl	80133f4 <sys_arch_unprotect>
 8008f4c:	e000      	b.n	8008f50 <lwip_netconn_do_close+0x134>
      return;
 8008f4e:	bf00      	nop
}
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	08014b7c 	.word	0x08014b7c
 8008f5c:	08014ec4 	.word	0x08014ec4
 8008f60:	08014bd4 	.word	0x08014bd4
 8008f64:	08014ee0 	.word	0x08014ee0
 8008f68:	20008058 	.word	0x20008058

08008f6c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d013      	beq.n	8008fa2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fc16 	bl	800a7b8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	2006      	movs	r0, #6
 8008f9e:	f000 fe51 	bl	8009c44 <memp_free>
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d108      	bne.n	8008fd2 <netbuf_ref+0x26>
 8008fc0:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <netbuf_ref+0x88>)
 8008fc2:	2295      	movs	r2, #149	; 0x95
 8008fc4:	491c      	ldr	r1, [pc, #112]	; (8009038 <netbuf_ref+0x8c>)
 8008fc6:	481d      	ldr	r0, [pc, #116]	; (800903c <netbuf_ref+0x90>)
 8008fc8:	f00a fb52 	bl	8013670 <iprintf>
 8008fcc:	f06f 030f 	mvn.w	r3, #15
 8008fd0:	e02b      	b.n	800902a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fbea 	bl	800a7b8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f001 f86d 	bl	800a0c8 <pbuf_alloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8009002:	f04f 33ff 	mov.w	r3, #4294967295
 8009006:	e010      	b.n	800902a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	811a      	strh	r2, [r3, #8]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	6812      	ldr	r2, [r2, #0]
 800901c:	891b      	ldrh	r3, [r3, #8]
 800901e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	08015044 	.word	0x08015044
 8009038:	080150fc 	.word	0x080150fc
 800903c:	08015094 	.word	0x08015094

08009040 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d108      	bne.n	8009064 <netbuf_data+0x24>
 8009052:	4b1b      	ldr	r3, [pc, #108]	; (80090c0 <netbuf_data+0x80>)
 8009054:	22c2      	movs	r2, #194	; 0xc2
 8009056:	491b      	ldr	r1, [pc, #108]	; (80090c4 <netbuf_data+0x84>)
 8009058:	481b      	ldr	r0, [pc, #108]	; (80090c8 <netbuf_data+0x88>)
 800905a:	f00a fb09 	bl	8013670 <iprintf>
 800905e:	f06f 030f 	mvn.w	r3, #15
 8009062:	e029      	b.n	80090b8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d108      	bne.n	800907c <netbuf_data+0x3c>
 800906a:	4b15      	ldr	r3, [pc, #84]	; (80090c0 <netbuf_data+0x80>)
 800906c:	22c3      	movs	r2, #195	; 0xc3
 800906e:	4917      	ldr	r1, [pc, #92]	; (80090cc <netbuf_data+0x8c>)
 8009070:	4815      	ldr	r0, [pc, #84]	; (80090c8 <netbuf_data+0x88>)
 8009072:	f00a fafd 	bl	8013670 <iprintf>
 8009076:	f06f 030f 	mvn.w	r3, #15
 800907a:	e01d      	b.n	80090b8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d108      	bne.n	8009094 <netbuf_data+0x54>
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <netbuf_data+0x80>)
 8009084:	22c4      	movs	r2, #196	; 0xc4
 8009086:	4912      	ldr	r1, [pc, #72]	; (80090d0 <netbuf_data+0x90>)
 8009088:	480f      	ldr	r0, [pc, #60]	; (80090c8 <netbuf_data+0x88>)
 800908a:	f00a faf1 	bl	8013670 <iprintf>
 800908e:	f06f 030f 	mvn.w	r3, #15
 8009092:	e011      	b.n	80090b8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <netbuf_data+0x62>
    return ERR_BUF;
 800909c:	f06f 0301 	mvn.w	r3, #1
 80090a0:	e00a      	b.n	80090b8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	895a      	ldrh	r2, [r3, #10]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	08015044 	.word	0x08015044
 80090c4:	0801514c 	.word	0x0801514c
 80090c8:	08015094 	.word	0x08015094
 80090cc:	08015168 	.word	0x08015168
 80090d0:	08015188 	.word	0x08015188

080090d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80090dc:	4b2b      	ldr	r3, [pc, #172]	; (800918c <tcpip_thread+0xb8>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 80090e4:	4b29      	ldr	r3, [pc, #164]	; (800918c <tcpip_thread+0xb8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a29      	ldr	r2, [pc, #164]	; (8009190 <tcpip_thread+0xbc>)
 80090ea:	6812      	ldr	r2, [r2, #0]
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 80090f0:	4828      	ldr	r0, [pc, #160]	; (8009194 <tcpip_thread+0xc0>)
 80090f2:	f00a f92f 	bl	8013354 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80090f6:	4827      	ldr	r0, [pc, #156]	; (8009194 <tcpip_thread+0xc0>)
 80090f8:	f00a f93b 	bl	8013372 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4619      	mov	r1, r3
 8009102:	4825      	ldr	r0, [pc, #148]	; (8009198 <tcpip_thread+0xc4>)
 8009104:	f007 f9a6 	bl	8010454 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009108:	4822      	ldr	r0, [pc, #136]	; (8009194 <tcpip_thread+0xc0>)
 800910a:	f00a f923 	bl	8013354 <sys_mutex_lock>
    if (msg == NULL) {
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009114:	4b21      	ldr	r3, [pc, #132]	; (800919c <tcpip_thread+0xc8>)
 8009116:	2269      	movs	r2, #105	; 0x69
 8009118:	4921      	ldr	r1, [pc, #132]	; (80091a0 <tcpip_thread+0xcc>)
 800911a:	4822      	ldr	r0, [pc, #136]	; (80091a4 <tcpip_thread+0xd0>)
 800911c:	f00a faa8 	bl	8013670 <iprintf>
      continue;
 8009120:	e032      	b.n	8009188 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b04      	cmp	r3, #4
 8009128:	d020      	beq.n	800916c <tcpip_thread+0x98>
 800912a:	2b04      	cmp	r3, #4
 800912c:	dc25      	bgt.n	800917a <tcpip_thread+0xa6>
 800912e:	2b02      	cmp	r3, #2
 8009130:	d002      	beq.n	8009138 <tcpip_thread+0x64>
 8009132:	2b03      	cmp	r3, #3
 8009134:	d00e      	beq.n	8009154 <tcpip_thread+0x80>
 8009136:	e020      	b.n	800917a <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	6850      	ldr	r0, [r2, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	6892      	ldr	r2, [r2, #8]
 8009144:	4611      	mov	r1, r2
 8009146:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4619      	mov	r1, r3
 800914c:	2009      	movs	r0, #9
 800914e:	f000 fd79 	bl	8009c44 <memp_free>
      break;
 8009152:	e019      	b.n	8009188 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	6892      	ldr	r2, [r2, #8]
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4619      	mov	r1, r3
 8009164:	2008      	movs	r0, #8
 8009166:	f000 fd6d 	bl	8009c44 <memp_free>
      break;
 800916a:	e00d      	b.n	8009188 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	6892      	ldr	r2, [r2, #8]
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
      break;
 8009178:	e006      	b.n	8009188 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800917a:	4b08      	ldr	r3, [pc, #32]	; (800919c <tcpip_thread+0xc8>)
 800917c:	229b      	movs	r2, #155	; 0x9b
 800917e:	4908      	ldr	r1, [pc, #32]	; (80091a0 <tcpip_thread+0xcc>)
 8009180:	4808      	ldr	r0, [pc, #32]	; (80091a4 <tcpip_thread+0xd0>)
 8009182:	f00a fa75 	bl	8013670 <iprintf>
      break;
 8009186:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8009188:	e7b5      	b.n	80090f6 <tcpip_thread+0x22>
 800918a:	bf00      	nop
 800918c:	2000804c 	.word	0x2000804c
 8009190:	20008050 	.word	0x20008050
 8009194:	20008058 	.word	0x20008058
 8009198:	20008054 	.word	0x20008054
 800919c:	080151dc 	.word	0x080151dc
 80091a0:	0801520c 	.word	0x0801520c
 80091a4:	0801522c 	.word	0x0801522c

080091a8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80091b4:	481a      	ldr	r0, [pc, #104]	; (8009220 <tcpip_inpkt+0x78>)
 80091b6:	f009 fff8 	bl	80131aa <sys_mbox_valid>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d105      	bne.n	80091cc <tcpip_inpkt+0x24>
 80091c0:	4b18      	ldr	r3, [pc, #96]	; (8009224 <tcpip_inpkt+0x7c>)
 80091c2:	22b5      	movs	r2, #181	; 0xb5
 80091c4:	4918      	ldr	r1, [pc, #96]	; (8009228 <tcpip_inpkt+0x80>)
 80091c6:	4819      	ldr	r0, [pc, #100]	; (800922c <tcpip_inpkt+0x84>)
 80091c8:	f00a fa52 	bl	8013670 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80091cc:	2009      	movs	r0, #9
 80091ce:	f000 fce7 	bl	8009ba0 <memp_malloc>
 80091d2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	e01a      	b.n	8009216 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2202      	movs	r2, #2
 80091e4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80091f8:	6979      	ldr	r1, [r7, #20]
 80091fa:	4809      	ldr	r0, [pc, #36]	; (8009220 <tcpip_inpkt+0x78>)
 80091fc:	f009 ff60 	bl	80130c0 <sys_mbox_trypost>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d006      	beq.n	8009214 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009206:	6979      	ldr	r1, [r7, #20]
 8009208:	2009      	movs	r0, #9
 800920a:	f000 fd1b 	bl	8009c44 <memp_free>
    return ERR_MEM;
 800920e:	f04f 33ff 	mov.w	r3, #4294967295
 8009212:	e000      	b.n	8009216 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009214:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20008054 	.word	0x20008054
 8009224:	080151dc 	.word	0x080151dc
 8009228:	08015254 	.word	0x08015254
 800922c:	0801522c 	.word	0x0801522c

08009230 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009240:	f003 0318 	and.w	r3, r3, #24
 8009244:	2b00      	cmp	r3, #0
 8009246:	d006      	beq.n	8009256 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009248:	4a08      	ldr	r2, [pc, #32]	; (800926c <tcpip_input+0x3c>)
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ffab 	bl	80091a8 <tcpip_inpkt>
 8009252:	4603      	mov	r3, r0
 8009254:	e005      	b.n	8009262 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009256:	4a06      	ldr	r2, [pc, #24]	; (8009270 <tcpip_input+0x40>)
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff ffa4 	bl	80091a8 <tcpip_inpkt>
 8009260:	4603      	mov	r3, r0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	08012e71 	.word	0x08012e71
 8009270:	08011e2d 	.word	0x08011e2d

08009274 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009282:	481d      	ldr	r0, [pc, #116]	; (80092f8 <tcpip_callback_with_block+0x84>)
 8009284:	f009 ff91 	bl	80131aa <sys_mbox_valid>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <tcpip_callback_with_block+0x26>
 800928e:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <tcpip_callback_with_block+0x88>)
 8009290:	22ee      	movs	r2, #238	; 0xee
 8009292:	491b      	ldr	r1, [pc, #108]	; (8009300 <tcpip_callback_with_block+0x8c>)
 8009294:	481b      	ldr	r0, [pc, #108]	; (8009304 <tcpip_callback_with_block+0x90>)
 8009296:	f00a f9eb 	bl	8013670 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800929a:	2008      	movs	r0, #8
 800929c:	f000 fc80 	bl	8009ba0 <memp_malloc>
 80092a0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80092a8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ac:	e01f      	b.n	80092ee <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2203      	movs	r2, #3
 80092b2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	609a      	str	r2, [r3, #8]
  if (block) {
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80092c6:	6979      	ldr	r1, [r7, #20]
 80092c8:	480b      	ldr	r0, [pc, #44]	; (80092f8 <tcpip_callback_with_block+0x84>)
 80092ca:	f009 fee3 	bl	8013094 <sys_mbox_post>
 80092ce:	e00d      	b.n	80092ec <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	4809      	ldr	r0, [pc, #36]	; (80092f8 <tcpip_callback_with_block+0x84>)
 80092d4:	f009 fef4 	bl	80130c0 <sys_mbox_trypost>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d006      	beq.n	80092ec <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80092de:	6979      	ldr	r1, [r7, #20]
 80092e0:	2008      	movs	r0, #8
 80092e2:	f000 fcaf 	bl	8009c44 <memp_free>
      return ERR_MEM;
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ea:	e000      	b.n	80092ee <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20008054 	.word	0x20008054
 80092fc:	080151dc 	.word	0x080151dc
 8009300:	08015254 	.word	0x08015254
 8009304:	0801522c 	.word	0x0801522c

08009308 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009314:	4806      	ldr	r0, [pc, #24]	; (8009330 <tcpip_send_msg_wait_sem+0x28>)
 8009316:	f00a f81d 	bl	8013354 <sys_mutex_lock>
  fn(apimsg);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68b8      	ldr	r0, [r7, #8]
 800931e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009320:	4803      	ldr	r0, [pc, #12]	; (8009330 <tcpip_send_msg_wait_sem+0x28>)
 8009322:	f00a f826 	bl	8013372 <sys_mutex_unlock>
  return ERR_OK;
 8009326:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20008058 	.word	0x20008058

08009334 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af02      	add	r7, sp, #8
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800933e:	f000 f868 	bl	8009412 <lwip_init>

  tcpip_init_done = initfunc;
 8009342:	4a17      	ldr	r2, [pc, #92]	; (80093a0 <tcpip_init+0x6c>)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009348:	4a16      	ldr	r2, [pc, #88]	; (80093a4 <tcpip_init+0x70>)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800934e:	2106      	movs	r1, #6
 8009350:	4815      	ldr	r0, [pc, #84]	; (80093a8 <tcpip_init+0x74>)
 8009352:	f009 fe6b 	bl	801302c <sys_mbox_new>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d006      	beq.n	800936a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800935c:	4b13      	ldr	r3, [pc, #76]	; (80093ac <tcpip_init+0x78>)
 800935e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009362:	4913      	ldr	r1, [pc, #76]	; (80093b0 <tcpip_init+0x7c>)
 8009364:	4813      	ldr	r0, [pc, #76]	; (80093b4 <tcpip_init+0x80>)
 8009366:	f00a f983 	bl	8013670 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800936a:	4813      	ldr	r0, [pc, #76]	; (80093b8 <tcpip_init+0x84>)
 800936c:	f009 ffd6 	bl	801331c <sys_mutex_new>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d006      	beq.n	8009384 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009376:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <tcpip_init+0x78>)
 8009378:	f240 12d9 	movw	r2, #473	; 0x1d9
 800937c:	490f      	ldr	r1, [pc, #60]	; (80093bc <tcpip_init+0x88>)
 800937e:	480d      	ldr	r0, [pc, #52]	; (80093b4 <tcpip_init+0x80>)
 8009380:	f00a f976 	bl	8013670 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009384:	2300      	movs	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938c:	2200      	movs	r2, #0
 800938e:	490c      	ldr	r1, [pc, #48]	; (80093c0 <tcpip_init+0x8c>)
 8009390:	480c      	ldr	r0, [pc, #48]	; (80093c4 <tcpip_init+0x90>)
 8009392:	f009 fffb 	bl	801338c <sys_thread_new>
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	2000804c 	.word	0x2000804c
 80093a4:	20008050 	.word	0x20008050
 80093a8:	20008054 	.word	0x20008054
 80093ac:	080151dc 	.word	0x080151dc
 80093b0:	08015264 	.word	0x08015264
 80093b4:	0801522c 	.word	0x0801522c
 80093b8:	20008058 	.word	0x20008058
 80093bc:	08015288 	.word	0x08015288
 80093c0:	080090d5 	.word	0x080090d5
 80093c4:	080152ac 	.word	0x080152ac

080093c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80093d2:	88fb      	ldrh	r3, [r7, #6]
 80093d4:	ba5b      	rev16	r3, r3
 80093d6:	b29b      	uxth	r3, r3
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	061a      	lsls	r2, r3, #24
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	0e1b      	lsrs	r3, r3, #24
 8009406:	4313      	orrs	r3, r2
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800941c:	f009 ff70 	bl	8013300 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009420:	f000 f8a6 	bl	8009570 <mem_init>
  memp_init();
 8009424:	f000 fb70 	bl	8009b08 <memp_init>
  pbuf_init();
  netif_init();
 8009428:	f000 fc36 	bl	8009c98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800942c:	f007 f838 	bl	80104a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009430:	f001 fc46 	bl	800acc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009434:	f006 feca 	bl	80101cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009448:	4b40      	ldr	r3, [pc, #256]	; (800954c <plug_holes+0x10c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	429a      	cmp	r2, r3
 8009450:	d206      	bcs.n	8009460 <plug_holes+0x20>
 8009452:	4b3f      	ldr	r3, [pc, #252]	; (8009550 <plug_holes+0x110>)
 8009454:	f240 125d 	movw	r2, #349	; 0x15d
 8009458:	493e      	ldr	r1, [pc, #248]	; (8009554 <plug_holes+0x114>)
 800945a:	483f      	ldr	r0, [pc, #252]	; (8009558 <plug_holes+0x118>)
 800945c:	f00a f908 	bl	8013670 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009460:	4b3e      	ldr	r3, [pc, #248]	; (800955c <plug_holes+0x11c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d306      	bcc.n	8009478 <plug_holes+0x38>
 800946a:	4b39      	ldr	r3, [pc, #228]	; (8009550 <plug_holes+0x110>)
 800946c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009470:	493b      	ldr	r1, [pc, #236]	; (8009560 <plug_holes+0x120>)
 8009472:	4839      	ldr	r0, [pc, #228]	; (8009558 <plug_holes+0x118>)
 8009474:	f00a f8fc 	bl	8013670 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	791b      	ldrb	r3, [r3, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d006      	beq.n	800948e <plug_holes+0x4e>
 8009480:	4b33      	ldr	r3, [pc, #204]	; (8009550 <plug_holes+0x110>)
 8009482:	f240 125f 	movw	r2, #351	; 0x15f
 8009486:	4937      	ldr	r1, [pc, #220]	; (8009564 <plug_holes+0x124>)
 8009488:	4833      	ldr	r0, [pc, #204]	; (8009558 <plug_holes+0x118>)
 800948a:	f00a f8f1 	bl	8013670 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009496:	d906      	bls.n	80094a6 <plug_holes+0x66>
 8009498:	4b2d      	ldr	r3, [pc, #180]	; (8009550 <plug_holes+0x110>)
 800949a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800949e:	4932      	ldr	r1, [pc, #200]	; (8009568 <plug_holes+0x128>)
 80094a0:	482d      	ldr	r0, [pc, #180]	; (8009558 <plug_holes+0x118>)
 80094a2:	f00a f8e5 	bl	8013670 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80094a6:	4b29      	ldr	r3, [pc, #164]	; (800954c <plug_holes+0x10c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	4413      	add	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d01f      	beq.n	80094fa <plug_holes+0xba>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d11b      	bne.n	80094fa <plug_holes+0xba>
 80094c2:	4b26      	ldr	r3, [pc, #152]	; (800955c <plug_holes+0x11c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d016      	beq.n	80094fa <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80094cc:	4b27      	ldr	r3, [pc, #156]	; (800956c <plug_holes+0x12c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d102      	bne.n	80094dc <plug_holes+0x9c>
      lfree = mem;
 80094d6:	4a25      	ldr	r2, [pc, #148]	; (800956c <plug_holes+0x12c>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	881a      	ldrh	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80094e4:	4b19      	ldr	r3, [pc, #100]	; (800954c <plug_holes+0x10c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	1ad1      	subs	r1, r2, r3
 80094ec:	4b17      	ldr	r3, [pc, #92]	; (800954c <plug_holes+0x10c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	8812      	ldrh	r2, [r2, #0]
 80094f4:	4413      	add	r3, r2
 80094f6:	b28a      	uxth	r2, r1
 80094f8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80094fa:	4b14      	ldr	r3, [pc, #80]	; (800954c <plug_holes+0x10c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	8852      	ldrh	r2, [r2, #2]
 8009502:	4413      	add	r3, r2
 8009504:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d01a      	beq.n	8009544 <plug_holes+0x104>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	791b      	ldrb	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d116      	bne.n	8009544 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009516:	4b15      	ldr	r3, [pc, #84]	; (800956c <plug_holes+0x12c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d102      	bne.n	8009526 <plug_holes+0xe6>
      lfree = pmem;
 8009520:	4a12      	ldr	r2, [pc, #72]	; (800956c <plug_holes+0x12c>)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	881a      	ldrh	r2, [r3, #0]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800952e:	4b07      	ldr	r3, [pc, #28]	; (800954c <plug_holes+0x10c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	1ad1      	subs	r1, r2, r3
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <plug_holes+0x10c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	8812      	ldrh	r2, [r2, #0]
 800953e:	4413      	add	r3, r2
 8009540:	b28a      	uxth	r2, r1
 8009542:	805a      	strh	r2, [r3, #2]
  }
}
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	200086c8 	.word	0x200086c8
 8009550:	080152bc 	.word	0x080152bc
 8009554:	080152ec 	.word	0x080152ec
 8009558:	08015304 	.word	0x08015304
 800955c:	200086cc 	.word	0x200086cc
 8009560:	0801532c 	.word	0x0801532c
 8009564:	08015348 	.word	0x08015348
 8009568:	08015364 	.word	0x08015364
 800956c:	200086d0 	.word	0x200086d0

08009570 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009576:	4b1e      	ldr	r3, [pc, #120]	; (80095f0 <mem_init+0x80>)
 8009578:	3303      	adds	r3, #3
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	461a      	mov	r2, r3
 8009580:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <mem_init+0x84>)
 8009582:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009584:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <mem_init+0x84>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009590:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800959e:	4b15      	ldr	r3, [pc, #84]	; (80095f4 <mem_init+0x84>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80095a6:	4a14      	ldr	r2, [pc, #80]	; (80095f8 <mem_init+0x88>)
 80095a8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80095aa:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <mem_init+0x88>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2201      	movs	r2, #1
 80095b0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80095b2:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <mem_init+0x88>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095ba:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80095bc:	4b0e      	ldr	r3, [pc, #56]	; (80095f8 <mem_init+0x88>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095c4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80095c6:	4b0b      	ldr	r3, [pc, #44]	; (80095f4 <mem_init+0x84>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a0c      	ldr	r2, [pc, #48]	; (80095fc <mem_init+0x8c>)
 80095cc:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80095ce:	480c      	ldr	r0, [pc, #48]	; (8009600 <mem_init+0x90>)
 80095d0:	f009 fea4 	bl	801331c <sys_mutex_new>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80095da:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <mem_init+0x94>)
 80095dc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80095e0:	4909      	ldr	r1, [pc, #36]	; (8009608 <mem_init+0x98>)
 80095e2:	480a      	ldr	r0, [pc, #40]	; (800960c <mem_init+0x9c>)
 80095e4:	f00a f844 	bl	8013670 <iprintf>
  }
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20008074 	.word	0x20008074
 80095f4:	200086c8 	.word	0x200086c8
 80095f8:	200086cc 	.word	0x200086cc
 80095fc:	200086d0 	.word	0x200086d0
 8009600:	200086d4 	.word	0x200086d4
 8009604:	080152bc 	.word	0x080152bc
 8009608:	08015390 	.word	0x08015390
 800960c:	08015304 	.word	0x08015304

08009610 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d050      	beq.n	80096c0 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d006      	beq.n	8009636 <mem_free+0x26>
 8009628:	4b27      	ldr	r3, [pc, #156]	; (80096c8 <mem_free+0xb8>)
 800962a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800962e:	4927      	ldr	r1, [pc, #156]	; (80096cc <mem_free+0xbc>)
 8009630:	4827      	ldr	r0, [pc, #156]	; (80096d0 <mem_free+0xc0>)
 8009632:	f00a f81d 	bl	8013670 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <mem_free+0xc4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d304      	bcc.n	800964a <mem_free+0x3a>
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <mem_free+0xc8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	429a      	cmp	r2, r3
 8009648:	d306      	bcc.n	8009658 <mem_free+0x48>
 800964a:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <mem_free+0xb8>)
 800964c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8009650:	4922      	ldr	r1, [pc, #136]	; (80096dc <mem_free+0xcc>)
 8009652:	481f      	ldr	r0, [pc, #124]	; (80096d0 <mem_free+0xc0>)
 8009654:	f00a f80c 	bl	8013670 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <mem_free+0xc4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	429a      	cmp	r2, r3
 8009660:	d304      	bcc.n	800966c <mem_free+0x5c>
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <mem_free+0xc8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	429a      	cmp	r2, r3
 800966a:	d306      	bcc.n	800967a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800966c:	f009 feb4 	bl	80133d8 <sys_arch_protect>
 8009670:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8009672:	68b8      	ldr	r0, [r7, #8]
 8009674:	f009 febe 	bl	80133f4 <sys_arch_unprotect>
    return;
 8009678:	e023      	b.n	80096c2 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800967a:	4819      	ldr	r0, [pc, #100]	; (80096e0 <mem_free+0xd0>)
 800967c:	f009 fe6a 	bl	8013354 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3b08      	subs	r3, #8
 8009684:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	791b      	ldrb	r3, [r3, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <mem_free+0x8c>
 800968e:	4b0e      	ldr	r3, [pc, #56]	; (80096c8 <mem_free+0xb8>)
 8009690:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8009694:	4913      	ldr	r1, [pc, #76]	; (80096e4 <mem_free+0xd4>)
 8009696:	480e      	ldr	r0, [pc, #56]	; (80096d0 <mem_free+0xc0>)
 8009698:	f009 ffea 	bl	8013670 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80096a2:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <mem_free+0xd8>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d202      	bcs.n	80096b2 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80096ac:	4a0e      	ldr	r2, [pc, #56]	; (80096e8 <mem_free+0xd8>)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff fec4 	bl	8009440 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80096b8:	4809      	ldr	r0, [pc, #36]	; (80096e0 <mem_free+0xd0>)
 80096ba:	f009 fe5a 	bl	8013372 <sys_mutex_unlock>
 80096be:	e000      	b.n	80096c2 <mem_free+0xb2>
    return;
 80096c0:	bf00      	nop
}
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	080152bc 	.word	0x080152bc
 80096cc:	080153ac 	.word	0x080153ac
 80096d0:	08015304 	.word	0x08015304
 80096d4:	200086c8 	.word	0x200086c8
 80096d8:	200086cc 	.word	0x200086cc
 80096dc:	080153d0 	.word	0x080153d0
 80096e0:	200086d4 	.word	0x200086d4
 80096e4:	080153e8 	.word	0x080153e8
 80096e8:	200086d0 	.word	0x200086d0

080096ec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80096f8:	887b      	ldrh	r3, [r7, #2]
 80096fa:	3303      	adds	r3, #3
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8009704:	887b      	ldrh	r3, [r7, #2]
 8009706:	2b0b      	cmp	r3, #11
 8009708:	d801      	bhi.n	800970e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800970a:	230c      	movs	r3, #12
 800970c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800970e:	887b      	ldrh	r3, [r7, #2]
 8009710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009714:	d901      	bls.n	800971a <mem_trim+0x2e>
    return NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	e0bd      	b.n	8009896 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800971a:	4b61      	ldr	r3, [pc, #388]	; (80098a0 <mem_trim+0x1b4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d304      	bcc.n	800972e <mem_trim+0x42>
 8009724:	4b5f      	ldr	r3, [pc, #380]	; (80098a4 <mem_trim+0x1b8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	d306      	bcc.n	800973c <mem_trim+0x50>
 800972e:	4b5e      	ldr	r3, [pc, #376]	; (80098a8 <mem_trim+0x1bc>)
 8009730:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009734:	495d      	ldr	r1, [pc, #372]	; (80098ac <mem_trim+0x1c0>)
 8009736:	485e      	ldr	r0, [pc, #376]	; (80098b0 <mem_trim+0x1c4>)
 8009738:	f009 ff9a 	bl	8013670 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800973c:	4b58      	ldr	r3, [pc, #352]	; (80098a0 <mem_trim+0x1b4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d304      	bcc.n	8009750 <mem_trim+0x64>
 8009746:	4b57      	ldr	r3, [pc, #348]	; (80098a4 <mem_trim+0x1b8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d307      	bcc.n	8009760 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8009750:	f009 fe42 	bl	80133d8 <sys_arch_protect>
 8009754:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f009 fe4c 	bl	80133f4 <sys_arch_unprotect>
    return rmem;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	e09a      	b.n	8009896 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3b08      	subs	r3, #8
 8009764:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8009766:	4b4e      	ldr	r3, [pc, #312]	; (80098a0 <mem_trim+0x1b4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	881a      	ldrh	r2, [r3, #0]
 8009774:	8b7b      	ldrh	r3, [r7, #26]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b08      	subs	r3, #8
 800977c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800977e:	887a      	ldrh	r2, [r7, #2]
 8009780:	8b3b      	ldrh	r3, [r7, #24]
 8009782:	429a      	cmp	r2, r3
 8009784:	d906      	bls.n	8009794 <mem_trim+0xa8>
 8009786:	4b48      	ldr	r3, [pc, #288]	; (80098a8 <mem_trim+0x1bc>)
 8009788:	f240 2206 	movw	r2, #518	; 0x206
 800978c:	4949      	ldr	r1, [pc, #292]	; (80098b4 <mem_trim+0x1c8>)
 800978e:	4848      	ldr	r0, [pc, #288]	; (80098b0 <mem_trim+0x1c4>)
 8009790:	f009 ff6e 	bl	8013670 <iprintf>
  if (newsize > size) {
 8009794:	887a      	ldrh	r2, [r7, #2]
 8009796:	8b3b      	ldrh	r3, [r7, #24]
 8009798:	429a      	cmp	r2, r3
 800979a:	d901      	bls.n	80097a0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	e07a      	b.n	8009896 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 80097a0:	887a      	ldrh	r2, [r7, #2]
 80097a2:	8b3b      	ldrh	r3, [r7, #24]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d101      	bne.n	80097ac <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	e074      	b.n	8009896 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80097ac:	4842      	ldr	r0, [pc, #264]	; (80098b8 <mem_trim+0x1cc>)
 80097ae:	f009 fdd1 	bl	8013354 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80097b2:	4b3b      	ldr	r3, [pc, #236]	; (80098a0 <mem_trim+0x1b4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	8812      	ldrh	r2, [r2, #0]
 80097ba:	4413      	add	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d131      	bne.n	800982a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80097cc:	8b7a      	ldrh	r2, [r7, #26]
 80097ce:	887b      	ldrh	r3, [r7, #2]
 80097d0:	4413      	add	r3, r2
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3308      	adds	r3, #8
 80097d6:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 80097d8:	4b38      	ldr	r3, [pc, #224]	; (80098bc <mem_trim+0x1d0>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d105      	bne.n	80097ee <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80097e2:	4b2f      	ldr	r3, [pc, #188]	; (80098a0 <mem_trim+0x1b4>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	8a7b      	ldrh	r3, [r7, #18]
 80097e8:	4413      	add	r3, r2
 80097ea:	4a34      	ldr	r2, [pc, #208]	; (80098bc <mem_trim+0x1d0>)
 80097ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80097ee:	4b2c      	ldr	r3, [pc, #176]	; (80098a0 <mem_trim+0x1b4>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	8a7b      	ldrh	r3, [r7, #18]
 80097f4:	4413      	add	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2200      	movs	r2, #0
 80097fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	8a3a      	ldrh	r2, [r7, #16]
 8009802:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	8b7a      	ldrh	r2, [r7, #26]
 8009808:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	8a7a      	ldrh	r2, [r7, #18]
 800980e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009818:	d039      	beq.n	800988e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800981a:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <mem_trim+0x1b4>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	8812      	ldrh	r2, [r2, #0]
 8009822:	4413      	add	r3, r2
 8009824:	8a7a      	ldrh	r2, [r7, #18]
 8009826:	805a      	strh	r2, [r3, #2]
 8009828:	e031      	b.n	800988e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800982a:	887b      	ldrh	r3, [r7, #2]
 800982c:	f103 0214 	add.w	r2, r3, #20
 8009830:	8b3b      	ldrh	r3, [r7, #24]
 8009832:	429a      	cmp	r2, r3
 8009834:	d82b      	bhi.n	800988e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009836:	8b7a      	ldrh	r2, [r7, #26]
 8009838:	887b      	ldrh	r3, [r7, #2]
 800983a:	4413      	add	r3, r2
 800983c:	b29b      	uxth	r3, r3
 800983e:	3308      	adds	r3, #8
 8009840:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <mem_trim+0x1b4>)
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	8a7b      	ldrh	r3, [r7, #18]
 8009848:	4413      	add	r3, r2
 800984a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800984c:	4b1b      	ldr	r3, [pc, #108]	; (80098bc <mem_trim+0x1d0>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	429a      	cmp	r2, r3
 8009854:	d202      	bcs.n	800985c <mem_trim+0x170>
      lfree = mem2;
 8009856:	4a19      	ldr	r2, [pc, #100]	; (80098bc <mem_trim+0x1d0>)
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2200      	movs	r2, #0
 8009860:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	881a      	ldrh	r2, [r3, #0]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	8b7a      	ldrh	r2, [r7, #26]
 800986e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	8a7a      	ldrh	r2, [r7, #18]
 8009874:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800987e:	d006      	beq.n	800988e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <mem_trim+0x1b4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	8812      	ldrh	r2, [r2, #0]
 8009888:	4413      	add	r3, r2
 800988a:	8a7a      	ldrh	r2, [r7, #18]
 800988c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800988e:	480a      	ldr	r0, [pc, #40]	; (80098b8 <mem_trim+0x1cc>)
 8009890:	f009 fd6f 	bl	8013372 <sys_mutex_unlock>
  return rmem;
 8009894:	687b      	ldr	r3, [r7, #4]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	200086c8 	.word	0x200086c8
 80098a4:	200086cc 	.word	0x200086cc
 80098a8:	080152bc 	.word	0x080152bc
 80098ac:	080153fc 	.word	0x080153fc
 80098b0:	08015304 	.word	0x08015304
 80098b4:	08015414 	.word	0x08015414
 80098b8:	200086d4 	.word	0x200086d4
 80098bc:	200086d0 	.word	0x200086d0

080098c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <mem_malloc+0x14>
    return NULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	e0d0      	b.n	8009a76 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	3303      	adds	r3, #3
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80098e0:	88fb      	ldrh	r3, [r7, #6]
 80098e2:	2b0b      	cmp	r3, #11
 80098e4:	d801      	bhi.n	80098ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80098e6:	230c      	movs	r3, #12
 80098e8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80098ea:	88fb      	ldrh	r3, [r7, #6]
 80098ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098f0:	d901      	bls.n	80098f6 <mem_malloc+0x36>
    return NULL;
 80098f2:	2300      	movs	r3, #0
 80098f4:	e0bf      	b.n	8009a76 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80098f6:	4862      	ldr	r0, [pc, #392]	; (8009a80 <mem_malloc+0x1c0>)
 80098f8:	f009 fd2c 	bl	8013354 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80098fc:	4b61      	ldr	r3, [pc, #388]	; (8009a84 <mem_malloc+0x1c4>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b61      	ldr	r3, [pc, #388]	; (8009a88 <mem_malloc+0x1c8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	83fb      	strh	r3, [r7, #30]
 8009908:	e0aa      	b.n	8009a60 <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800990a:	4b5f      	ldr	r3, [pc, #380]	; (8009a88 <mem_malloc+0x1c8>)
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	8bfb      	ldrh	r3, [r7, #30]
 8009910:	4413      	add	r3, r2
 8009912:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	791b      	ldrb	r3, [r3, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f040 809b 	bne.w	8009a54 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	8bfb      	ldrh	r3, [r7, #30]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	f1a3 0208 	sub.w	r2, r3, #8
 800992c:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800992e:	429a      	cmp	r2, r3
 8009930:	f0c0 8090 	bcc.w	8009a54 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	8bfb      	ldrh	r3, [r7, #30]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	f1a3 0208 	sub.w	r2, r3, #8
 8009942:	88fb      	ldrh	r3, [r7, #6]
 8009944:	3314      	adds	r3, #20
 8009946:	429a      	cmp	r2, r3
 8009948:	d327      	bcc.n	800999a <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800994a:	8bfa      	ldrh	r2, [r7, #30]
 800994c:	88fb      	ldrh	r3, [r7, #6]
 800994e:	4413      	add	r3, r2
 8009950:	b29b      	uxth	r3, r3
 8009952:	3308      	adds	r3, #8
 8009954:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8009956:	4b4c      	ldr	r3, [pc, #304]	; (8009a88 <mem_malloc+0x1c8>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	8a7b      	ldrh	r3, [r7, #18]
 800995c:	4413      	add	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	881a      	ldrh	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8bfa      	ldrh	r2, [r7, #30]
 8009972:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	8a7a      	ldrh	r2, [r7, #18]
 8009978:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2201      	movs	r2, #1
 800997e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009988:	d00a      	beq.n	80099a0 <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800998a:	4b3f      	ldr	r3, [pc, #252]	; (8009a88 <mem_malloc+0x1c8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	8812      	ldrh	r2, [r2, #0]
 8009992:	4413      	add	r3, r2
 8009994:	8a7a      	ldrh	r2, [r7, #18]
 8009996:	805a      	strh	r2, [r3, #2]
 8009998:	e002      	b.n	80099a0 <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2201      	movs	r2, #1
 800999e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80099a0:	4b38      	ldr	r3, [pc, #224]	; (8009a84 <mem_malloc+0x1c4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d127      	bne.n	80099fa <mem_malloc+0x13a>
          struct mem *cur = lfree;
 80099aa:	4b36      	ldr	r3, [pc, #216]	; (8009a84 <mem_malloc+0x1c4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80099b0:	e005      	b.n	80099be <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80099b2:	4b35      	ldr	r3, [pc, #212]	; (8009a88 <mem_malloc+0x1c8>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	4413      	add	r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	791b      	ldrb	r3, [r3, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <mem_malloc+0x110>
 80099c6:	4b31      	ldr	r3, [pc, #196]	; (8009a8c <mem_malloc+0x1cc>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d1f0      	bne.n	80099b2 <mem_malloc+0xf2>
          }
          lfree = cur;
 80099d0:	4a2c      	ldr	r2, [pc, #176]	; (8009a84 <mem_malloc+0x1c4>)
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80099d6:	4b2b      	ldr	r3, [pc, #172]	; (8009a84 <mem_malloc+0x1c4>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	4b2c      	ldr	r3, [pc, #176]	; (8009a8c <mem_malloc+0x1cc>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d00b      	beq.n	80099fa <mem_malloc+0x13a>
 80099e2:	4b28      	ldr	r3, [pc, #160]	; (8009a84 <mem_malloc+0x1c4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	791b      	ldrb	r3, [r3, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <mem_malloc+0x13a>
 80099ec:	4b28      	ldr	r3, [pc, #160]	; (8009a90 <mem_malloc+0x1d0>)
 80099ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80099f2:	4928      	ldr	r1, [pc, #160]	; (8009a94 <mem_malloc+0x1d4>)
 80099f4:	4828      	ldr	r0, [pc, #160]	; (8009a98 <mem_malloc+0x1d8>)
 80099f6:	f009 fe3b 	bl	8013670 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80099fa:	4821      	ldr	r0, [pc, #132]	; (8009a80 <mem_malloc+0x1c0>)
 80099fc:	f009 fcb9 	bl	8013372 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009a00:	88fa      	ldrh	r2, [r7, #6]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	3308      	adds	r3, #8
 8009a08:	4a20      	ldr	r2, [pc, #128]	; (8009a8c <mem_malloc+0x1cc>)
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d906      	bls.n	8009a1e <mem_malloc+0x15e>
 8009a10:	4b1f      	ldr	r3, [pc, #124]	; (8009a90 <mem_malloc+0x1d0>)
 8009a12:	f240 22d3 	movw	r2, #723	; 0x2d3
 8009a16:	4921      	ldr	r1, [pc, #132]	; (8009a9c <mem_malloc+0x1dc>)
 8009a18:	481f      	ldr	r0, [pc, #124]	; (8009a98 <mem_malloc+0x1d8>)
 8009a1a:	f009 fe29 	bl	8013670 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f003 0303 	and.w	r3, r3, #3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <mem_malloc+0x176>
 8009a28:	4b19      	ldr	r3, [pc, #100]	; (8009a90 <mem_malloc+0x1d0>)
 8009a2a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8009a2e:	491c      	ldr	r1, [pc, #112]	; (8009aa0 <mem_malloc+0x1e0>)
 8009a30:	4819      	ldr	r0, [pc, #100]	; (8009a98 <mem_malloc+0x1d8>)
 8009a32:	f009 fe1d 	bl	8013670 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <mem_malloc+0x18e>
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <mem_malloc+0x1d0>)
 8009a42:	f240 22d7 	movw	r2, #727	; 0x2d7
 8009a46:	4917      	ldr	r1, [pc, #92]	; (8009aa4 <mem_malloc+0x1e4>)
 8009a48:	4813      	ldr	r0, [pc, #76]	; (8009a98 <mem_malloc+0x1d8>)
 8009a4a:	f009 fe11 	bl	8013670 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	3308      	adds	r3, #8
 8009a52:	e010      	b.n	8009a76 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8009a54:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <mem_malloc+0x1c8>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	8bfb      	ldrh	r3, [r7, #30]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009a60:	8bfa      	ldrh	r2, [r7, #30]
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	f4ff af4e 	bcc.w	800990a <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009a6e:	4804      	ldr	r0, [pc, #16]	; (8009a80 <mem_malloc+0x1c0>)
 8009a70:	f009 fc7f 	bl	8013372 <sys_mutex_unlock>
  return NULL;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	200086d4 	.word	0x200086d4
 8009a84:	200086d0 	.word	0x200086d0
 8009a88:	200086c8 	.word	0x200086c8
 8009a8c:	200086cc 	.word	0x200086cc
 8009a90:	080152bc 	.word	0x080152bc
 8009a94:	08015434 	.word	0x08015434
 8009a98:	08015304 	.word	0x08015304
 8009a9c:	08015450 	.word	0x08015450
 8009aa0:	08015480 	.word	0x08015480
 8009aa4:	080154b0 	.word	0x080154b0

08009aa8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	3303      	adds	r3, #3
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]
 8009ac8:	e011      	b.n	8009aee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3301      	adds	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	885b      	ldrh	r3, [r3, #2]
 8009af2:	461a      	mov	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	dbe7      	blt.n	8009aca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bc80      	pop	{r7}
 8009b04:	4770      	bx	lr
	...

08009b08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009b0e:	2300      	movs	r3, #0
 8009b10:	80fb      	strh	r3, [r7, #6]
 8009b12:	e009      	b.n	8009b28 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <memp_init+0x30>)
 8009b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff ffc3 	bl	8009aa8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	3301      	adds	r3, #1
 8009b26:	80fb      	strh	r3, [r7, #6]
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	2b0c      	cmp	r3, #12
 8009b2c:	d9f2      	bls.n	8009b14 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	08016ff0 	.word	0x08016ff0

08009b3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009b44:	f009 fc48 	bl	80133d8 <sys_arch_protect>
 8009b48:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d015      	beq.n	8009b84 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d006      	beq.n	8009b7a <do_memp_malloc_pool+0x3e>
 8009b6c:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <do_memp_malloc_pool+0x58>)
 8009b6e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8009b72:	4909      	ldr	r1, [pc, #36]	; (8009b98 <do_memp_malloc_pool+0x5c>)
 8009b74:	4809      	ldr	r0, [pc, #36]	; (8009b9c <do_memp_malloc_pool+0x60>)
 8009b76:	f009 fd7b 	bl	8013670 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f009 fc3a 	bl	80133f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	e003      	b.n	8009b8c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f009 fc35 	bl	80133f4 <sys_arch_unprotect>
  return NULL;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	080154d4 	.word	0x080154d4
 8009b98:	08015504 	.word	0x08015504
 8009b9c:	08015528 	.word	0x08015528

08009ba0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	2b0c      	cmp	r3, #12
 8009bae:	d908      	bls.n	8009bc2 <memp_malloc+0x22>
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <memp_malloc+0x3c>)
 8009bb2:	f240 1287 	movw	r2, #391	; 0x187
 8009bb6:	490a      	ldr	r1, [pc, #40]	; (8009be0 <memp_malloc+0x40>)
 8009bb8:	480a      	ldr	r0, [pc, #40]	; (8009be4 <memp_malloc+0x44>)
 8009bba:	f009 fd59 	bl	8013670 <iprintf>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e008      	b.n	8009bd4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	4a08      	ldr	r2, [pc, #32]	; (8009be8 <memp_malloc+0x48>)
 8009bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff ffb6 	bl	8009b3c <do_memp_malloc_pool>
 8009bd0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	080154d4 	.word	0x080154d4
 8009be0:	08015564 	.word	0x08015564
 8009be4:	08015528 	.word	0x08015528
 8009be8:	08016ff0 	.word	0x08016ff0

08009bec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <do_memp_free_pool+0x22>
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <do_memp_free_pool+0x4c>)
 8009c02:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009c06:	490d      	ldr	r1, [pc, #52]	; (8009c3c <do_memp_free_pool+0x50>)
 8009c08:	480d      	ldr	r0, [pc, #52]	; (8009c40 <do_memp_free_pool+0x54>)
 8009c0a:	f009 fd31 	bl	8013670 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009c12:	f009 fbe1 	bl	80133d8 <sys_arch_protect>
 8009c16:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009c2a:	68b8      	ldr	r0, [r7, #8]
 8009c2c:	f009 fbe2 	bl	80133f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	080154d4 	.word	0x080154d4
 8009c3c:	08015584 	.word	0x08015584
 8009c40:	08015528 	.word	0x08015528

08009c44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	6039      	str	r1, [r7, #0]
 8009c4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	2b0c      	cmp	r3, #12
 8009c54:	d907      	bls.n	8009c66 <memp_free+0x22>
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <memp_free+0x44>)
 8009c58:	f240 12db 	movw	r2, #475	; 0x1db
 8009c5c:	490b      	ldr	r1, [pc, #44]	; (8009c8c <memp_free+0x48>)
 8009c5e:	480c      	ldr	r0, [pc, #48]	; (8009c90 <memp_free+0x4c>)
 8009c60:	f009 fd06 	bl	8013670 <iprintf>
 8009c64:	e00c      	b.n	8009c80 <memp_free+0x3c>

  if (mem == NULL) {
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d008      	beq.n	8009c7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009c6c:	79fb      	ldrb	r3, [r7, #7]
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <memp_free+0x50>)
 8009c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff ffb8 	bl	8009bec <do_memp_free_pool>
 8009c7c:	e000      	b.n	8009c80 <memp_free+0x3c>
    return;
 8009c7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	080154d4 	.word	0x080154d4
 8009c8c:	080155a4 	.word	0x080155a4
 8009c90:	08015528 	.word	0x08015528
 8009c94:	08016ff0 	.word	0x08016ff0

08009c98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009c9c:	bf00      	nop
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr

08009ca4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d105      	bne.n	8009cc4 <netif_add+0x20>
 8009cb8:	4b21      	ldr	r3, [pc, #132]	; (8009d40 <netif_add+0x9c>)
 8009cba:	22fb      	movs	r2, #251	; 0xfb
 8009cbc:	4921      	ldr	r1, [pc, #132]	; (8009d44 <netif_add+0xa0>)
 8009cbe:	4822      	ldr	r0, [pc, #136]	; (8009d48 <netif_add+0xa4>)
 8009cc0:	f009 fcd6 	bl	8013670 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2203      	movs	r2, #3
 8009ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8009cf2:	4b16      	ldr	r3, [pc, #88]	; (8009d4c <netif_add+0xa8>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	b2d1      	uxtb	r1, r2
 8009cfa:	4a14      	ldr	r2, [pc, #80]	; (8009d4c <netif_add+0xa8>)
 8009cfc:	7011      	strb	r1, [r2, #0]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f81f 	bl	8009d54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	4798      	blx	r3
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <netif_add+0x82>
    return NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	e007      	b.n	8009d36 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <netif_add+0xac>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009d2e:	4a08      	ldr	r2, [pc, #32]	; (8009d50 <netif_add+0xac>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8009d34:	68fb      	ldr	r3, [r7, #12]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	080155c0 	.word	0x080155c0
 8009d44:	080155f4 	.word	0x080155f4
 8009d48:	0801560c 	.word	0x0801560c
 8009d4c:	2000b7a8 	.word	0x2000b7a8
 8009d50:	2000b7a0 	.word	0x2000b7a0

08009d54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <netif_set_addr+0x1c>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10c      	bne.n	8009d8a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f81a 	bl	8009dac <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 f861 	bl	8009e42 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 f84a 	bl	8009e1c <netif_set_gw>
 8009d88:	e00c      	b.n	8009da4 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f858 	bl	8009e42 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f841 	bl	8009e1c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f805 	bl	8009dac <netif_set_ipaddr>
  }
}
 8009da2:	bf00      	nop
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <netif_set_ipaddr+0x18>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e002      	b.n	8009dca <netif_set_ipaddr+0x1e>
 8009dc4:	4b14      	ldr	r3, [pc, #80]	; (8009e18 <netif_set_ipaddr+0x6c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3304      	adds	r3, #4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d01c      	beq.n	8009e10 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	f107 020c 	add.w	r2, r7, #12
 8009dde:	4611      	mov	r1, r2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f002 fbcf 	bl	800c584 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3304      	adds	r3, #4
 8009dea:	f107 020c 	add.w	r2, r7, #12
 8009dee:	4611      	mov	r1, r2
 8009df0:	4618      	mov	r0, r3
 8009df2:	f006 fedf 	bl	8010bb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <netif_set_ipaddr+0x56>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	e000      	b.n	8009e04 <netif_set_ipaddr+0x58>
 8009e02:	2300      	movs	r3, #0
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009e08:	2101      	movs	r1, #1
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f85d 	bl	8009eca <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	08017064 	.word	0x08017064

08009e1c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <netif_set_gw+0x16>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	e000      	b.n	8009e34 <netif_set_gw+0x18>
 8009e32:	2300      	movs	r3, #0
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr

08009e42 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <netif_set_netmask+0x16>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	e000      	b.n	8009e5a <netif_set_netmask+0x18>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bc80      	pop	{r7}
 8009e66:	4770      	bx	lr

08009e68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009e70:	4a03      	ldr	r2, [pc, #12]	; (8009e80 <netif_set_default+0x18>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bc80      	pop	{r7}
 8009e7e:	4770      	bx	lr
 8009e80:	2000b7a4 	.word	0x2000b7a4

08009e84 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d113      	bne.n	8009ec2 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009eba:	2103      	movs	r1, #3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f804 	bl	8009eca <netif_issue_reports>
    }
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00c      	beq.n	8009f04 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f007 fd8a 	bl	8011a18 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d012      	beq.n	8009f48 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f28:	f023 0301 	bic.w	r3, r3, #1
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f007 f92e 	bl	80111a4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f5e:	f003 0304 	and.w	r3, r3, #4
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d11b      	bne.n	8009f9e <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f6c:	f043 0304 	orr.w	r3, r3, #4
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009f86:	2103      	movs	r1, #3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff ff9e 	bl	8009eca <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <netif_set_link_up+0x4e>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	4798      	blx	r3
  }
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d010      	beq.n	8009fde <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fc2:	f023 0304 	bic.w	r3, r3, #4
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <netif_set_link_down+0x38>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
  }
}
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  if (netif) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	61da      	str	r2, [r3, #28]
  }
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	bc80      	pop	{r7}
 800a004:	4770      	bx	lr
	...

0800a008 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a00e:	f009 f9e3 	bl	80133d8 <sys_arch_protect>
 800a012:	6038      	str	r0, [r7, #0]
 800a014:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <pbuf_free_ooseq+0x4c>)
 800a016:	2200      	movs	r2, #0
 800a018:	701a      	strb	r2, [r3, #0]
 800a01a:	6838      	ldr	r0, [r7, #0]
 800a01c:	f009 f9ea 	bl	80133f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a020:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <pbuf_free_ooseq+0x50>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	607b      	str	r3, [r7, #4]
 800a026:	e00f      	b.n	800a048 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d008      	beq.n	800a042 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a034:	4618      	mov	r0, r3
 800a036:	f001 ff26 	bl	800be86 <tcp_segs_free>
      pcb->ooseq = NULL;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800a040:	e005      	b.n	800a04e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	607b      	str	r3, [r7, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1ec      	bne.n	800a028 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	2000b7a9 	.word	0x2000b7a9
 800a058:	2000b7b8 	.word	0x2000b7b8

0800a05c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a064:	f7ff ffd0 	bl	800a008 <pbuf_free_ooseq>
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a076:	f009 f9af 	bl	80133d8 <sys_arch_protect>
 800a07a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <pbuf_pool_is_empty+0x50>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <pbuf_pool_is_empty+0x50>)
 800a084:	2201      	movs	r2, #1
 800a086:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f009 f9b3 	bl	80133f4 <sys_arch_unprotect>

  if (!queued) {
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d110      	bne.n	800a0b6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a094:	2200      	movs	r2, #0
 800a096:	2100      	movs	r1, #0
 800a098:	480a      	ldr	r0, [pc, #40]	; (800a0c4 <pbuf_pool_is_empty+0x54>)
 800a09a:	f7ff f8eb 	bl	8009274 <tcpip_callback_with_block>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d008      	beq.n	800a0b6 <pbuf_pool_is_empty+0x46>
 800a0a4:	f009 f998 	bl	80133d8 <sys_arch_protect>
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <pbuf_pool_is_empty+0x50>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f009 f99f 	bl	80133f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	2000b7a9 	.word	0x2000b7a9
 800a0c4:	0800a05d 	.word	0x0800a05d

0800a0c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	71fb      	strb	r3, [r7, #7]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	80bb      	strh	r3, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d81c      	bhi.n	800a11a <pbuf_alloc+0x52>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <pbuf_alloc+0x20>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a0fd 	.word	0x0800a0fd
 800a0ec:	0800a103 	.word	0x0800a103
 800a0f0:	0800a109 	.word	0x0800a109
 800a0f4:	0800a10f 	.word	0x0800a10f
 800a0f8:	0800a115 	.word	0x0800a115
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a0fc:	2336      	movs	r3, #54	; 0x36
 800a0fe:	82fb      	strh	r3, [r7, #22]
    break;
 800a100:	e014      	b.n	800a12c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a102:	2322      	movs	r3, #34	; 0x22
 800a104:	82fb      	strh	r3, [r7, #22]
    break;
 800a106:	e011      	b.n	800a12c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a108:	230e      	movs	r3, #14
 800a10a:	82fb      	strh	r3, [r7, #22]
    break;
 800a10c:	e00e      	b.n	800a12c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a10e:	2300      	movs	r3, #0
 800a110:	82fb      	strh	r3, [r7, #22]
    break;
 800a112:	e00b      	b.n	800a12c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	82fb      	strh	r3, [r7, #22]
    break;
 800a118:	e008      	b.n	800a12c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800a11a:	4ba1      	ldr	r3, [pc, #644]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a11c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800a120:	49a0      	ldr	r1, [pc, #640]	; (800a3a4 <pbuf_alloc+0x2dc>)
 800a122:	48a1      	ldr	r0, [pc, #644]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a124:	f009 faa4 	bl	8013670 <iprintf>
    return NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	e15c      	b.n	800a3e6 <pbuf_alloc+0x31e>
  }

  switch (type) {
 800a12c:	79bb      	ldrb	r3, [r7, #6]
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d00d      	beq.n	800a14e <pbuf_alloc+0x86>
 800a132:	2b03      	cmp	r3, #3
 800a134:	f300 8146 	bgt.w	800a3c4 <pbuf_alloc+0x2fc>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80d0 	beq.w	800a2de <pbuf_alloc+0x216>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f2c0 8140 	blt.w	800a3c4 <pbuf_alloc+0x2fc>
 800a144:	3b01      	subs	r3, #1
 800a146:	2b01      	cmp	r3, #1
 800a148:	f200 813c 	bhi.w	800a3c4 <pbuf_alloc+0x2fc>
 800a14c:	e10d      	b.n	800a36a <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a14e:	200c      	movs	r0, #12
 800a150:	f7ff fd26 	bl	8009ba0 <memp_malloc>
 800a154:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800a15c:	f7ff ff88 	bl	800a070 <pbuf_pool_is_empty>
      return NULL;
 800a160:	2300      	movs	r3, #0
 800a162:	e140      	b.n	800a3e6 <pbuf_alloc+0x31e>
    }
    p->type = type;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	79ba      	ldrb	r2, [r7, #6]
 800a168:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	2200      	movs	r2, #0
 800a16e:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a170:	8afb      	ldrh	r3, [r7, #22]
 800a172:	3310      	adds	r3, #16
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	4413      	add	r3, r2
 800a178:	3303      	adds	r3, #3
 800a17a:	f023 0303 	bic.w	r3, r3, #3
 800a17e:	461a      	mov	r2, r3
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f003 0303 	and.w	r3, r3, #3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <pbuf_alloc+0xd6>
 800a190:	4b83      	ldr	r3, [pc, #524]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a192:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a196:	4985      	ldr	r1, [pc, #532]	; (800a3ac <pbuf_alloc+0x2e4>)
 800a198:	4883      	ldr	r0, [pc, #524]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a19a:	f009 fa69 	bl	8013670 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	88ba      	ldrh	r2, [r7, #4]
 800a1a2:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a1a4:	8afb      	ldrh	r3, [r7, #22]
 800a1a6:	3303      	adds	r3, #3
 800a1a8:	f023 0303 	bic.w	r3, r3, #3
 800a1ac:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800a1b0:	88bb      	ldrh	r3, [r7, #4]
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	bf28      	it	cs
 800a1b6:	4613      	movcs	r3, r2
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	8952      	ldrh	r2, [r2, #10]
 800a1c6:	441a      	add	r2, r3
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d906      	bls.n	800a1e0 <pbuf_alloc+0x118>
 800a1d2:	4b73      	ldr	r3, [pc, #460]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a1d4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a1d8:	4975      	ldr	r1, [pc, #468]	; (800a3b0 <pbuf_alloc+0x2e8>)
 800a1da:	4873      	ldr	r0, [pc, #460]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a1dc:	f009 fa48 	bl	8013670 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a1e0:	8afb      	ldrh	r3, [r7, #22]
 800a1e2:	3303      	adds	r3, #3
 800a1e4:	f023 0303 	bic.w	r3, r3, #3
 800a1e8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a1ec:	d106      	bne.n	800a1fc <pbuf_alloc+0x134>
 800a1ee:	4b6c      	ldr	r3, [pc, #432]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a1f0:	f240 1231 	movw	r2, #305	; 0x131
 800a1f4:	496f      	ldr	r1, [pc, #444]	; (800a3b4 <pbuf_alloc+0x2ec>)
 800a1f6:	486c      	ldr	r0, [pc, #432]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a1f8:	f009 fa3a 	bl	8013670 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	2201      	movs	r2, #1
 800a200:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800a206:	88bb      	ldrh	r3, [r7, #4]
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	8952      	ldrh	r2, [r2, #10]
 800a20c:	1a9b      	subs	r3, r3, r2
 800a20e:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800a210:	e061      	b.n	800a2d6 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a212:	200c      	movs	r0, #12
 800a214:	f7ff fcc4 	bl	8009ba0 <memp_malloc>
 800a218:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800a220:	f7ff ff26 	bl	800a070 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800a224:	69f8      	ldr	r0, [r7, #28]
 800a226:	f000 fac7 	bl	800a7b8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e0db      	b.n	800a3e6 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	79ba      	ldrb	r2, [r7, #6]
 800a232:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a24c:	4293      	cmp	r3, r2
 800a24e:	dd06      	ble.n	800a25e <pbuf_alloc+0x196>
 800a250:	4b53      	ldr	r3, [pc, #332]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a252:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800a256:	4958      	ldr	r1, [pc, #352]	; (800a3b8 <pbuf_alloc+0x2f0>)
 800a258:	4853      	ldr	r0, [pc, #332]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a25a:	f009 fa09 	bl	8013670 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a26e:	bf28      	it	cs
 800a270:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f103 0210 	add.w	r2, r3, #16
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f003 0303 	and.w	r3, r3, #3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <pbuf_alloc+0x1d6>
 800a290:	4b43      	ldr	r3, [pc, #268]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a292:	f240 1251 	movw	r2, #337	; 0x151
 800a296:	4949      	ldr	r1, [pc, #292]	; (800a3bc <pbuf_alloc+0x2f4>)
 800a298:	4843      	ldr	r0, [pc, #268]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a29a:	f009 f9e9 	bl	8013670 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	8952      	ldrh	r2, [r2, #10]
 800a2a6:	441a      	add	r2, r3
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d906      	bls.n	800a2c0 <pbuf_alloc+0x1f8>
 800a2b2:	4b3b      	ldr	r3, [pc, #236]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a2b4:	f240 1253 	movw	r2, #339	; 0x153
 800a2b8:	493d      	ldr	r1, [pc, #244]	; (800a3b0 <pbuf_alloc+0x2e8>)
 800a2ba:	483b      	ldr	r0, [pc, #236]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a2bc:	f009 f9d8 	bl	8013670 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	895b      	ldrh	r3, [r3, #10]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	1a9b      	subs	r3, r3, r2
 800a2d0:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dc9a      	bgt.n	800a212 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800a2dc:	e07c      	b.n	800a3d8 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800a2de:	8afb      	ldrh	r3, [r7, #22]
 800a2e0:	3313      	adds	r3, #19
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	88bb      	ldrh	r3, [r7, #4]
 800a2ec:	3303      	adds	r3, #3
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800a2fa:	897a      	ldrh	r2, [r7, #10]
 800a2fc:	88bb      	ldrh	r3, [r7, #4]
 800a2fe:	3303      	adds	r3, #3
 800a300:	f023 0303 	bic.w	r3, r3, #3
 800a304:	429a      	cmp	r2, r3
 800a306:	d201      	bcs.n	800a30c <pbuf_alloc+0x244>
        return NULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	e06c      	b.n	800a3e6 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800a30c:	897b      	ldrh	r3, [r7, #10]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fad6 	bl	80098c0 <mem_malloc>
 800a314:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <pbuf_alloc+0x258>
      return NULL;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e062      	b.n	800a3e6 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800a320:	8afb      	ldrh	r3, [r7, #22]
 800a322:	3310      	adds	r3, #16
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	4413      	add	r3, r2
 800a328:	3303      	adds	r3, #3
 800a32a:	f023 0303 	bic.w	r3, r3, #3
 800a32e:	461a      	mov	r2, r3
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	88ba      	ldrh	r2, [r7, #4]
 800a338:	811a      	strh	r2, [r3, #8]
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	891a      	ldrh	r2, [r3, #8]
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	79ba      	ldrb	r2, [r7, #6]
 800a34c:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d03d      	beq.n	800a3d6 <pbuf_alloc+0x30e>
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <pbuf_alloc+0x2d8>)
 800a35c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800a360:	4917      	ldr	r1, [pc, #92]	; (800a3c0 <pbuf_alloc+0x2f8>)
 800a362:	4811      	ldr	r0, [pc, #68]	; (800a3a8 <pbuf_alloc+0x2e0>)
 800a364:	f009 f984 	bl	8013670 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800a368:	e035      	b.n	800a3d6 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a36a:	200b      	movs	r0, #11
 800a36c:	f7ff fc18 	bl	8009ba0 <memp_malloc>
 800a370:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	e034      	b.n	800a3e6 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	2200      	movs	r2, #0
 800a380:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	88ba      	ldrh	r2, [r7, #4]
 800a386:	811a      	strh	r2, [r3, #8]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	891a      	ldrh	r2, [r3, #8]
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	79ba      	ldrb	r2, [r7, #6]
 800a39a:	731a      	strb	r2, [r3, #12]
    break;
 800a39c:	e01c      	b.n	800a3d8 <pbuf_alloc+0x310>
 800a39e:	bf00      	nop
 800a3a0:	08015634 	.word	0x08015634
 800a3a4:	08015664 	.word	0x08015664
 800a3a8:	08015680 	.word	0x08015680
 800a3ac:	080156a8 	.word	0x080156a8
 800a3b0:	080156d8 	.word	0x080156d8
 800a3b4:	0801570c 	.word	0x0801570c
 800a3b8:	08015740 	.word	0x08015740
 800a3bc:	08015754 	.word	0x08015754
 800a3c0:	08015784 	.word	0x08015784
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <pbuf_alloc+0x328>)
 800a3c6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800a3ca:	490a      	ldr	r1, [pc, #40]	; (800a3f4 <pbuf_alloc+0x32c>)
 800a3cc:	480a      	ldr	r0, [pc, #40]	; (800a3f8 <pbuf_alloc+0x330>)
 800a3ce:	f009 f94f 	bl	8013670 <iprintf>
    return NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e007      	b.n	800a3e6 <pbuf_alloc+0x31e>
    break;
 800a3d6:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a3e4:	69fb      	ldr	r3, [r7, #28]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	08015634 	.word	0x08015634
 800a3f4:	080157b0 	.word	0x080157b0
 800a3f8:	08015680 	.word	0x08015680

0800a3fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	4603      	mov	r3, r0
 800a406:	71fb      	strb	r3, [r7, #7]
 800a408:	460b      	mov	r3, r1
 800a40a:	80bb      	strh	r3, [r7, #4]
 800a40c:	4613      	mov	r3, r2
 800a40e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	2b04      	cmp	r3, #4
 800a414:	d81b      	bhi.n	800a44e <pbuf_alloced_custom+0x52>
 800a416:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <pbuf_alloced_custom+0x20>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a431 	.word	0x0800a431
 800a420:	0800a437 	.word	0x0800a437
 800a424:	0800a43d 	.word	0x0800a43d
 800a428:	0800a443 	.word	0x0800a443
 800a42c:	0800a449 	.word	0x0800a449
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a430:	2336      	movs	r3, #54	; 0x36
 800a432:	81fb      	strh	r3, [r7, #14]
    break;
 800a434:	e014      	b.n	800a460 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a436:	2322      	movs	r3, #34	; 0x22
 800a438:	81fb      	strh	r3, [r7, #14]
    break;
 800a43a:	e011      	b.n	800a460 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a43c:	230e      	movs	r3, #14
 800a43e:	81fb      	strh	r3, [r7, #14]
    break;
 800a440:	e00e      	b.n	800a460 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a442:	2300      	movs	r3, #0
 800a444:	81fb      	strh	r3, [r7, #14]
    break;
 800a446:	e00b      	b.n	800a460 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	81fb      	strh	r3, [r7, #14]
    break;
 800a44c:	e008      	b.n	800a460 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <pbuf_alloced_custom+0xc8>)
 800a450:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a454:	491c      	ldr	r1, [pc, #112]	; (800a4c8 <pbuf_alloced_custom+0xcc>)
 800a456:	481d      	ldr	r0, [pc, #116]	; (800a4cc <pbuf_alloced_custom+0xd0>)
 800a458:	f009 f90a 	bl	8013670 <iprintf>
    return NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	e02d      	b.n	800a4bc <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a460:	89fb      	ldrh	r3, [r7, #14]
 800a462:	3303      	adds	r3, #3
 800a464:	f023 0203 	bic.w	r2, r3, #3
 800a468:	88bb      	ldrh	r3, [r7, #4]
 800a46a:	441a      	add	r2, r3
 800a46c:	8bbb      	ldrh	r3, [r7, #28]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d901      	bls.n	800a476 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a472:	2300      	movs	r3, #0
 800a474:	e022      	b.n	800a4bc <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a482:	89fb      	ldrh	r3, [r7, #14]
 800a484:	3303      	adds	r3, #3
 800a486:	f023 0303 	bic.w	r3, r3, #3
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	441a      	add	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	605a      	str	r2, [r3, #4]
 800a492:	e002      	b.n	800a49a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2200      	movs	r2, #0
 800a498:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2202      	movs	r2, #2
 800a49e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	88ba      	ldrh	r2, [r7, #4]
 800a4a4:	811a      	strh	r2, [r3, #8]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	891a      	ldrh	r2, [r3, #8]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	79ba      	ldrb	r2, [r7, #6]
 800a4b2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800a4ba:	683b      	ldr	r3, [r7, #0]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	08015634 	.word	0x08015634
 800a4c8:	080157cc 	.word	0x080157cc
 800a4cc:	08015680 	.word	0x08015680

0800a4d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <pbuf_realloc+0x20>
 800a4e2:	4b4b      	ldr	r3, [pc, #300]	; (800a610 <pbuf_realloc+0x140>)
 800a4e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a4e8:	494a      	ldr	r1, [pc, #296]	; (800a614 <pbuf_realloc+0x144>)
 800a4ea:	484b      	ldr	r0, [pc, #300]	; (800a618 <pbuf_realloc+0x148>)
 800a4ec:	f009 f8c0 	bl	8013670 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	7b1b      	ldrb	r3, [r3, #12]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d012      	beq.n	800a51e <pbuf_realloc+0x4e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7b1b      	ldrb	r3, [r3, #12]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d00e      	beq.n	800a51e <pbuf_realloc+0x4e>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	7b1b      	ldrb	r3, [r3, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00a      	beq.n	800a51e <pbuf_realloc+0x4e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	7b1b      	ldrb	r3, [r3, #12]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d006      	beq.n	800a51e <pbuf_realloc+0x4e>
 800a510:	4b3f      	ldr	r3, [pc, #252]	; (800a610 <pbuf_realloc+0x140>)
 800a512:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a516:	4941      	ldr	r1, [pc, #260]	; (800a61c <pbuf_realloc+0x14c>)
 800a518:	483f      	ldr	r0, [pc, #252]	; (800a618 <pbuf_realloc+0x148>)
 800a51a:	f009 f8a9 	bl	8013670 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	891b      	ldrh	r3, [r3, #8]
 800a522:	887a      	ldrh	r2, [r7, #2]
 800a524:	429a      	cmp	r2, r3
 800a526:	d26e      	bcs.n	800a606 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800a528:	887b      	ldrh	r3, [r7, #2]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	8912      	ldrh	r2, [r2, #8]
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a532:	887b      	ldrh	r3, [r7, #2]
 800a534:	827b      	strh	r3, [r7, #18]
  q = p;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a53a:	e025      	b.n	800a588 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	895b      	ldrh	r3, [r3, #10]
 800a540:	8a7a      	ldrh	r2, [r7, #18]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a54c:	4293      	cmp	r3, r2
 800a54e:	dd06      	ble.n	800a55e <pbuf_realloc+0x8e>
 800a550:	4b2f      	ldr	r3, [pc, #188]	; (800a610 <pbuf_realloc+0x140>)
 800a552:	f240 220b 	movw	r2, #523	; 0x20b
 800a556:	4932      	ldr	r1, [pc, #200]	; (800a620 <pbuf_realloc+0x150>)
 800a558:	482f      	ldr	r0, [pc, #188]	; (800a618 <pbuf_realloc+0x148>)
 800a55a:	f009 f889 	bl	8013670 <iprintf>
    q->tot_len += (u16_t)grow;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	891a      	ldrh	r2, [r3, #8]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	b29b      	uxth	r3, r3
 800a566:	4413      	add	r3, r2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <pbuf_realloc+0xb8>
 800a57a:	4b25      	ldr	r3, [pc, #148]	; (800a610 <pbuf_realloc+0x140>)
 800a57c:	f240 220f 	movw	r2, #527	; 0x20f
 800a580:	4928      	ldr	r1, [pc, #160]	; (800a624 <pbuf_realloc+0x154>)
 800a582:	4825      	ldr	r0, [pc, #148]	; (800a618 <pbuf_realloc+0x148>)
 800a584:	f009 f874 	bl	8013670 <iprintf>
  while (rem_len > q->len) {
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	895b      	ldrh	r3, [r3, #10]
 800a58c:	8a7a      	ldrh	r2, [r7, #18]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d8d4      	bhi.n	800a53c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	7b1b      	ldrb	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d121      	bne.n	800a5de <pbuf_realloc+0x10e>
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	895b      	ldrh	r3, [r3, #10]
 800a59e:	8a7a      	ldrh	r2, [r7, #18]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d01c      	beq.n	800a5de <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	7b5b      	ldrb	r3, [r3, #13]
 800a5a8:	f003 0302 	and.w	r3, r3, #2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d116      	bne.n	800a5de <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	8a7b      	ldrh	r3, [r7, #18]
 800a5bc:	4413      	add	r3, r2
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6978      	ldr	r0, [r7, #20]
 800a5c4:	f7ff f892 	bl	80096ec <mem_trim>
 800a5c8:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <pbuf_realloc+0x10e>
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <pbuf_realloc+0x140>)
 800a5d2:	f240 221d 	movw	r2, #541	; 0x21d
 800a5d6:	4914      	ldr	r1, [pc, #80]	; (800a628 <pbuf_realloc+0x158>)
 800a5d8:	480f      	ldr	r0, [pc, #60]	; (800a618 <pbuf_realloc+0x148>)
 800a5da:	f009 f849 	bl	8013670 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	8a7a      	ldrh	r2, [r7, #18]
 800a5e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	895a      	ldrh	r2, [r3, #10]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d004      	beq.n	800a5fe <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 f8dd 	bl	800a7b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e000      	b.n	800a608 <pbuf_realloc+0x138>
    return;
 800a606:	bf00      	nop

}
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	08015634 	.word	0x08015634
 800a614:	080157f0 	.word	0x080157f0
 800a618:	08015680 	.word	0x08015680
 800a61c:	08015808 	.word	0x08015808
 800a620:	08015824 	.word	0x08015824
 800a624:	08015838 	.word	0x08015838
 800a628:	08015850 	.word	0x08015850

0800a62c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	807b      	strh	r3, [r7, #2]
 800a638:	4613      	mov	r3, r2
 800a63a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <pbuf_header_impl+0x24>
 800a642:	4b46      	ldr	r3, [pc, #280]	; (800a75c <pbuf_header_impl+0x130>)
 800a644:	f240 223f 	movw	r2, #575	; 0x23f
 800a648:	4945      	ldr	r1, [pc, #276]	; (800a760 <pbuf_header_impl+0x134>)
 800a64a:	4846      	ldr	r0, [pc, #280]	; (800a764 <pbuf_header_impl+0x138>)
 800a64c:	f009 f810 	bl	8013670 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800a650:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <pbuf_header_impl+0x32>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <pbuf_header_impl+0x36>
    return 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	e078      	b.n	800a754 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800a662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a666:	2b00      	cmp	r3, #0
 800a668:	da10      	bge.n	800a68c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800a66a:	887b      	ldrh	r3, [r7, #2]
 800a66c:	425b      	negs	r3, r3
 800a66e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	895b      	ldrh	r3, [r3, #10]
 800a674:	89fa      	ldrh	r2, [r7, #14]
 800a676:	429a      	cmp	r2, r3
 800a678:	d90a      	bls.n	800a690 <pbuf_header_impl+0x64>
 800a67a:	4b38      	ldr	r3, [pc, #224]	; (800a75c <pbuf_header_impl+0x130>)
 800a67c:	f240 2247 	movw	r2, #583	; 0x247
 800a680:	4939      	ldr	r1, [pc, #228]	; (800a768 <pbuf_header_impl+0x13c>)
 800a682:	4838      	ldr	r0, [pc, #224]	; (800a764 <pbuf_header_impl+0x138>)
 800a684:	f008 fff4 	bl	8013670 <iprintf>
 800a688:	2301      	movs	r3, #1
 800a68a:	e063      	b.n	800a754 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800a68c:	887b      	ldrh	r3, [r7, #2]
 800a68e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	7b1b      	ldrb	r3, [r3, #12]
 800a694:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a69c:	89bb      	ldrh	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <pbuf_header_impl+0x7c>
 800a6a2:	89bb      	ldrh	r3, [r7, #12]
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d112      	bne.n	800a6ce <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6b0:	425b      	negs	r3, r3
 800a6b2:	441a      	add	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3310      	adds	r3, #16
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d238      	bcs.n	800a736 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e042      	b.n	800a754 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a6ce:	89bb      	ldrh	r3, [r7, #12]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d002      	beq.n	800a6da <pbuf_header_impl+0xae>
 800a6d4:	89bb      	ldrh	r3, [r7, #12]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d124      	bne.n	800a724 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a6da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da0d      	bge.n	800a6fe <pbuf_header_impl+0xd2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	895b      	ldrh	r3, [r3, #10]
 800a6e6:	89fa      	ldrh	r2, [r7, #14]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d808      	bhi.n	800a6fe <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6f4:	425b      	negs	r3, r3
 800a6f6:	441a      	add	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	605a      	str	r2, [r3, #4]
 800a6fc:	e011      	b.n	800a722 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800a6fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd0b      	ble.n	800a71e <pbuf_header_impl+0xf2>
 800a706:	787b      	ldrb	r3, [r7, #1]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d008      	beq.n	800a71e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a714:	425b      	negs	r3, r3
 800a716:	441a      	add	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	605a      	str	r2, [r3, #4]
 800a71c:	e001      	b.n	800a722 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a71e:	2301      	movs	r3, #1
 800a720:	e018      	b.n	800a754 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a722:	e008      	b.n	800a736 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800a724:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <pbuf_header_impl+0x130>)
 800a726:	f240 2277 	movw	r2, #631	; 0x277
 800a72a:	4910      	ldr	r1, [pc, #64]	; (800a76c <pbuf_header_impl+0x140>)
 800a72c:	480d      	ldr	r0, [pc, #52]	; (800a764 <pbuf_header_impl+0x138>)
 800a72e:	f008 ff9f 	bl	8013670 <iprintf>
    return 1;
 800a732:	2301      	movs	r3, #1
 800a734:	e00e      	b.n	800a754 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	895a      	ldrh	r2, [r3, #10]
 800a73a:	887b      	ldrh	r3, [r7, #2]
 800a73c:	4413      	add	r3, r2
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	891a      	ldrh	r2, [r3, #8]
 800a748:	887b      	ldrh	r3, [r7, #2]
 800a74a:	4413      	add	r3, r2
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	08015634 	.word	0x08015634
 800a760:	0801586c 	.word	0x0801586c
 800a764:	08015680 	.word	0x08015680
 800a768:	08015878 	.word	0x08015878
 800a76c:	08015898 	.word	0x08015898

0800a770 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800a77c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a780:	2200      	movs	r2, #0
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff ff51 	bl	800a62c <pbuf_header_impl>
 800a78a:	4603      	mov	r3, r0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800a7a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7ff ff3f 	bl	800a62c <pbuf_header_impl>
 800a7ae:	4603      	mov	r3, r0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d106      	bne.n	800a7da <pbuf_free+0x22>
 800a7cc:	4b41      	ldr	r3, [pc, #260]	; (800a8d4 <pbuf_free+0x11c>)
 800a7ce:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a7d2:	4941      	ldr	r1, [pc, #260]	; (800a8d8 <pbuf_free+0x120>)
 800a7d4:	4841      	ldr	r0, [pc, #260]	; (800a8dc <pbuf_free+0x124>)
 800a7d6:	f008 ff4b 	bl	8013670 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e076      	b.n	800a8cc <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7b1b      	ldrb	r3, [r3, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d012      	beq.n	800a80c <pbuf_free+0x54>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7b1b      	ldrb	r3, [r3, #12]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d00e      	beq.n	800a80c <pbuf_free+0x54>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	7b1b      	ldrb	r3, [r3, #12]
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d00a      	beq.n	800a80c <pbuf_free+0x54>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	7b1b      	ldrb	r3, [r3, #12]
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d006      	beq.n	800a80c <pbuf_free+0x54>
 800a7fe:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <pbuf_free+0x11c>)
 800a800:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a804:	4936      	ldr	r1, [pc, #216]	; (800a8e0 <pbuf_free+0x128>)
 800a806:	4835      	ldr	r0, [pc, #212]	; (800a8dc <pbuf_free+0x124>)
 800a808:	f008 ff32 	bl	8013670 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a810:	e058      	b.n	800a8c4 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a812:	f008 fde1 	bl	80133d8 <sys_arch_protect>
 800a816:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	89db      	ldrh	r3, [r3, #14]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <pbuf_free+0x76>
 800a820:	4b2c      	ldr	r3, [pc, #176]	; (800a8d4 <pbuf_free+0x11c>)
 800a822:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a826:	492f      	ldr	r1, [pc, #188]	; (800a8e4 <pbuf_free+0x12c>)
 800a828:	482c      	ldr	r0, [pc, #176]	; (800a8dc <pbuf_free+0x124>)
 800a82a:	f008 ff21 	bl	8013670 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	89db      	ldrh	r3, [r3, #14]
 800a832:	3b01      	subs	r3, #1
 800a834:	b29a      	uxth	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	81da      	strh	r2, [r3, #14]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	89db      	ldrh	r3, [r3, #14]
 800a83e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800a840:	69b8      	ldr	r0, [r7, #24]
 800a842:	f008 fdd7 	bl	80133f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a846:	8afb      	ldrh	r3, [r7, #22]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d139      	bne.n	800a8c0 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	7b1b      	ldrb	r3, [r3, #12]
 800a856:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7b5b      	ldrb	r3, [r3, #13]
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d011      	beq.n	800a888 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <pbuf_free+0xc6>
 800a870:	4b18      	ldr	r3, [pc, #96]	; (800a8d4 <pbuf_free+0x11c>)
 800a872:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a876:	491c      	ldr	r1, [pc, #112]	; (800a8e8 <pbuf_free+0x130>)
 800a878:	4818      	ldr	r0, [pc, #96]	; (800a8dc <pbuf_free+0x124>)
 800a87a:	f008 fef9 	bl	8013670 <iprintf>
        pc->custom_free_function(p);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
 800a886:	e015      	b.n	800a8b4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800a888:	89fb      	ldrh	r3, [r7, #14]
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d104      	bne.n	800a898 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	200c      	movs	r0, #12
 800a892:	f7ff f9d7 	bl	8009c44 <memp_free>
 800a896:	e00d      	b.n	800a8b4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800a898:	89fb      	ldrh	r3, [r7, #14]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d002      	beq.n	800a8a4 <pbuf_free+0xec>
 800a89e:	89fb      	ldrh	r3, [r7, #14]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d104      	bne.n	800a8ae <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	200b      	movs	r0, #11
 800a8a8:	f7ff f9cc 	bl	8009c44 <memp_free>
 800a8ac:	e002      	b.n	800a8b4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7fe feae 	bl	8009610 <mem_free>
        }
      }
      count++;
 800a8b4:	7ffb      	ldrb	r3, [r7, #31]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	e001      	b.n	800a8c4 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1a3      	bne.n	800a812 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a8ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3720      	adds	r7, #32
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	08015634 	.word	0x08015634
 800a8d8:	0801586c 	.word	0x0801586c
 800a8dc:	08015680 	.word	0x08015680
 800a8e0:	080158a8 	.word	0x080158a8
 800a8e4:	080158c0 	.word	0x080158c0
 800a8e8:	080158d8 	.word	0x080158d8

0800a8ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a8f8:	e005      	b.n	800a906 <pbuf_clen+0x1a>
    ++len;
 800a8fa:	89fb      	ldrh	r3, [r7, #14]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f6      	bne.n	800a8fa <pbuf_clen+0xe>
  }
  return len;
 800a90c:	89fb      	ldrh	r3, [r7, #14]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	bc80      	pop	{r7}
 800a916:	4770      	bx	lr

0800a918 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d016      	beq.n	800a954 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800a926:	f008 fd57 	bl	80133d8 <sys_arch_protect>
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	89db      	ldrh	r3, [r3, #14]
 800a930:	3301      	adds	r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	81da      	strh	r2, [r3, #14]
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f008 fd5b 	bl	80133f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	89db      	ldrh	r3, [r3, #14]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <pbuf_ref+0x3c>
 800a946:	4b05      	ldr	r3, [pc, #20]	; (800a95c <pbuf_ref+0x44>)
 800a948:	f240 3239 	movw	r2, #825	; 0x339
 800a94c:	4904      	ldr	r1, [pc, #16]	; (800a960 <pbuf_ref+0x48>)
 800a94e:	4805      	ldr	r0, [pc, #20]	; (800a964 <pbuf_ref+0x4c>)
 800a950:	f008 fe8e 	bl	8013670 <iprintf>
  }
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	08015634 	.word	0x08015634
 800a960:	080158fc 	.word	0x080158fc
 800a964:	08015680 	.word	0x08015680

0800a968 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <pbuf_cat+0x16>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d107      	bne.n	800a98e <pbuf_cat+0x26>
 800a97e:	4b20      	ldr	r3, [pc, #128]	; (800aa00 <pbuf_cat+0x98>)
 800a980:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a984:	491f      	ldr	r1, [pc, #124]	; (800aa04 <pbuf_cat+0x9c>)
 800a986:	4820      	ldr	r0, [pc, #128]	; (800aa08 <pbuf_cat+0xa0>)
 800a988:	f008 fe72 	bl	8013670 <iprintf>
 800a98c:	e034      	b.n	800a9f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	e00a      	b.n	800a9aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	891a      	ldrh	r2, [r3, #8]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	891b      	ldrh	r3, [r3, #8]
 800a99c:	4413      	add	r3, r2
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f0      	bne.n	800a994 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	891a      	ldrh	r2, [r3, #8]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	895b      	ldrh	r3, [r3, #10]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d006      	beq.n	800a9cc <pbuf_cat+0x64>
 800a9be:	4b10      	ldr	r3, [pc, #64]	; (800aa00 <pbuf_cat+0x98>)
 800a9c0:	f240 3255 	movw	r2, #853	; 0x355
 800a9c4:	4911      	ldr	r1, [pc, #68]	; (800aa0c <pbuf_cat+0xa4>)
 800a9c6:	4810      	ldr	r0, [pc, #64]	; (800aa08 <pbuf_cat+0xa0>)
 800a9c8:	f008 fe52 	bl	8013670 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d006      	beq.n	800a9e2 <pbuf_cat+0x7a>
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <pbuf_cat+0x98>)
 800a9d6:	f240 3256 	movw	r2, #854	; 0x356
 800a9da:	490d      	ldr	r1, [pc, #52]	; (800aa10 <pbuf_cat+0xa8>)
 800a9dc:	480a      	ldr	r0, [pc, #40]	; (800aa08 <pbuf_cat+0xa0>)
 800a9de:	f008 fe47 	bl	8013670 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	891a      	ldrh	r2, [r3, #8]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	891b      	ldrh	r3, [r3, #8]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	08015634 	.word	0x08015634
 800aa04:	08015910 	.word	0x08015910
 800aa08:	08015680 	.word	0x08015680
 800aa0c:	08015948 	.word	0x08015948
 800aa10:	08015978 	.word	0x08015978

0800aa14 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff ffa1 	bl	800a968 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800aa26:	6838      	ldr	r0, [r7, #0]
 800aa28:	f7ff ff76 	bl	800a918 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	81fb      	strh	r3, [r7, #14]
 800aa42:	2300      	movs	r3, #0
 800aa44:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d008      	beq.n	800aa5e <pbuf_copy+0x2a>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d005      	beq.n	800aa5e <pbuf_copy+0x2a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	891a      	ldrh	r2, [r3, #8]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	891b      	ldrh	r3, [r3, #8]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d209      	bcs.n	800aa72 <pbuf_copy+0x3e>
 800aa5e:	4b54      	ldr	r3, [pc, #336]	; (800abb0 <pbuf_copy+0x17c>)
 800aa60:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800aa64:	4953      	ldr	r1, [pc, #332]	; (800abb4 <pbuf_copy+0x180>)
 800aa66:	4854      	ldr	r0, [pc, #336]	; (800abb8 <pbuf_copy+0x184>)
 800aa68:	f008 fe02 	bl	8013670 <iprintf>
 800aa6c:	f06f 030f 	mvn.w	r3, #15
 800aa70:	e099      	b.n	800aba6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	895b      	ldrh	r3, [r3, #10]
 800aa76:	461a      	mov	r2, r3
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	1ad2      	subs	r2, r2, r3
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	895b      	ldrh	r3, [r3, #10]
 800aa80:	4619      	mov	r1, r3
 800aa82:	89bb      	ldrh	r3, [r7, #12]
 800aa84:	1acb      	subs	r3, r1, r3
 800aa86:	429a      	cmp	r2, r3
 800aa88:	db05      	blt.n	800aa96 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	895a      	ldrh	r2, [r3, #10]
 800aa8e:	89bb      	ldrh	r3, [r7, #12]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	817b      	strh	r3, [r7, #10]
 800aa94:	e004      	b.n	800aaa0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	895a      	ldrh	r2, [r3, #10]
 800aa9a:	89fb      	ldrh	r3, [r7, #14]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	89fb      	ldrh	r3, [r7, #14]
 800aaa6:	18d0      	adds	r0, r2, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	89bb      	ldrh	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	897a      	ldrh	r2, [r7, #10]
 800aab2:	4619      	mov	r1, r3
 800aab4:	f008 fcea 	bl	801348c <memcpy>
    offset_to += len;
 800aab8:	89fa      	ldrh	r2, [r7, #14]
 800aaba:	897b      	ldrh	r3, [r7, #10]
 800aabc:	4413      	add	r3, r2
 800aabe:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800aac0:	89ba      	ldrh	r2, [r7, #12]
 800aac2:	897b      	ldrh	r3, [r7, #10]
 800aac4:	4413      	add	r3, r2
 800aac6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	895b      	ldrh	r3, [r3, #10]
 800aacc:	89fa      	ldrh	r2, [r7, #14]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d906      	bls.n	800aae0 <pbuf_copy+0xac>
 800aad2:	4b37      	ldr	r3, [pc, #220]	; (800abb0 <pbuf_copy+0x17c>)
 800aad4:	f240 32cd 	movw	r2, #973	; 0x3cd
 800aad8:	4938      	ldr	r1, [pc, #224]	; (800abbc <pbuf_copy+0x188>)
 800aada:	4837      	ldr	r0, [pc, #220]	; (800abb8 <pbuf_copy+0x184>)
 800aadc:	f008 fdc8 	bl	8013670 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	895b      	ldrh	r3, [r3, #10]
 800aae4:	89ba      	ldrh	r2, [r7, #12]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d906      	bls.n	800aaf8 <pbuf_copy+0xc4>
 800aaea:	4b31      	ldr	r3, [pc, #196]	; (800abb0 <pbuf_copy+0x17c>)
 800aaec:	f240 32ce 	movw	r2, #974	; 0x3ce
 800aaf0:	4933      	ldr	r1, [pc, #204]	; (800abc0 <pbuf_copy+0x18c>)
 800aaf2:	4831      	ldr	r0, [pc, #196]	; (800abb8 <pbuf_copy+0x184>)
 800aaf4:	f008 fdbc 	bl	8013670 <iprintf>
    if (offset_from >= p_from->len) {
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	895b      	ldrh	r3, [r3, #10]
 800aafc:	89ba      	ldrh	r2, [r7, #12]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d304      	bcc.n	800ab0c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	895b      	ldrh	r3, [r3, #10]
 800ab10:	89fa      	ldrh	r2, [r7, #14]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d114      	bne.n	800ab40 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10c      	bne.n	800ab40 <pbuf_copy+0x10c>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d009      	beq.n	800ab40 <pbuf_copy+0x10c>
 800ab2c:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <pbuf_copy+0x17c>)
 800ab2e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ab32:	4924      	ldr	r1, [pc, #144]	; (800abc4 <pbuf_copy+0x190>)
 800ab34:	4820      	ldr	r0, [pc, #128]	; (800abb8 <pbuf_copy+0x184>)
 800ab36:	f008 fd9b 	bl	8013670 <iprintf>
 800ab3a:	f06f 030f 	mvn.w	r3, #15
 800ab3e:	e032      	b.n	800aba6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d013      	beq.n	800ab6e <pbuf_copy+0x13a>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	895a      	ldrh	r2, [r3, #10]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	891b      	ldrh	r3, [r3, #8]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d10d      	bne.n	800ab6e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d009      	beq.n	800ab6e <pbuf_copy+0x13a>
 800ab5a:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <pbuf_copy+0x17c>)
 800ab5c:	f240 32dd 	movw	r2, #989	; 0x3dd
 800ab60:	4919      	ldr	r1, [pc, #100]	; (800abc8 <pbuf_copy+0x194>)
 800ab62:	4815      	ldr	r0, [pc, #84]	; (800abb8 <pbuf_copy+0x184>)
 800ab64:	f008 fd84 	bl	8013670 <iprintf>
 800ab68:	f06f 0305 	mvn.w	r3, #5
 800ab6c:	e01b      	b.n	800aba6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d013      	beq.n	800ab9c <pbuf_copy+0x168>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	895a      	ldrh	r2, [r3, #10]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	891b      	ldrh	r3, [r3, #8]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d10d      	bne.n	800ab9c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d009      	beq.n	800ab9c <pbuf_copy+0x168>
 800ab88:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <pbuf_copy+0x17c>)
 800ab8a:	f240 32e2 	movw	r2, #994	; 0x3e2
 800ab8e:	490e      	ldr	r1, [pc, #56]	; (800abc8 <pbuf_copy+0x194>)
 800ab90:	4809      	ldr	r0, [pc, #36]	; (800abb8 <pbuf_copy+0x184>)
 800ab92:	f008 fd6d 	bl	8013670 <iprintf>
 800ab96:	f06f 0305 	mvn.w	r3, #5
 800ab9a:	e004      	b.n	800aba6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f47f af67 	bne.w	800aa72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	08015634 	.word	0x08015634
 800abb4:	080159c4 	.word	0x080159c4
 800abb8:	08015680 	.word	0x08015680
 800abbc:	080159f4 	.word	0x080159f4
 800abc0:	08015a0c 	.word	0x08015a0c
 800abc4:	08015a28 	.word	0x08015a28
 800abc8:	08015a38 	.word	0x08015a38

0800abcc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4611      	mov	r1, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	460b      	mov	r3, r1
 800abdc:	80fb      	strh	r3, [r7, #6]
 800abde:	4613      	mov	r3, r2
 800abe0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d108      	bne.n	800abfe <pbuf_copy_partial+0x32>
 800abec:	4b30      	ldr	r3, [pc, #192]	; (800acb0 <pbuf_copy_partial+0xe4>)
 800abee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800abf2:	4930      	ldr	r1, [pc, #192]	; (800acb4 <pbuf_copy_partial+0xe8>)
 800abf4:	4830      	ldr	r0, [pc, #192]	; (800acb8 <pbuf_copy_partial+0xec>)
 800abf6:	f008 fd3b 	bl	8013670 <iprintf>
 800abfa:	2300      	movs	r3, #0
 800abfc:	e054      	b.n	800aca8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d108      	bne.n	800ac16 <pbuf_copy_partial+0x4a>
 800ac04:	4b2a      	ldr	r3, [pc, #168]	; (800acb0 <pbuf_copy_partial+0xe4>)
 800ac06:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ac0a:	492c      	ldr	r1, [pc, #176]	; (800acbc <pbuf_copy_partial+0xf0>)
 800ac0c:	482a      	ldr	r0, [pc, #168]	; (800acb8 <pbuf_copy_partial+0xec>)
 800ac0e:	f008 fd2f 	bl	8013670 <iprintf>
 800ac12:	2300      	movs	r3, #0
 800ac14:	e048      	b.n	800aca8 <pbuf_copy_partial+0xdc>

  left = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <pbuf_copy_partial+0x5a>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <pbuf_copy_partial+0x5e>
    return 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e03e      	b.n	800aca8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	e034      	b.n	800ac9a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800ac30:	88bb      	ldrh	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00a      	beq.n	800ac4c <pbuf_copy_partial+0x80>
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	895b      	ldrh	r3, [r3, #10]
 800ac3a:	88ba      	ldrh	r2, [r7, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d305      	bcc.n	800ac4c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	895b      	ldrh	r3, [r3, #10]
 800ac44:	88ba      	ldrh	r2, [r7, #4]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	80bb      	strh	r3, [r7, #4]
 800ac4a:	e023      	b.n	800ac94 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	895a      	ldrh	r2, [r3, #10]
 800ac50:	88bb      	ldrh	r3, [r7, #4]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ac56:	8b3a      	ldrh	r2, [r7, #24]
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d901      	bls.n	800ac62 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800ac5e:	88fb      	ldrh	r3, [r7, #6]
 800ac60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800ac62:	8b7b      	ldrh	r3, [r7, #26]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	18d0      	adds	r0, r2, r3
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	88bb      	ldrh	r3, [r7, #4]
 800ac6e:	4413      	add	r3, r2
 800ac70:	8b3a      	ldrh	r2, [r7, #24]
 800ac72:	4619      	mov	r1, r3
 800ac74:	f008 fc0a 	bl	801348c <memcpy>
      copied_total += buf_copy_len;
 800ac78:	8afa      	ldrh	r2, [r7, #22]
 800ac7a:	8b3b      	ldrh	r3, [r7, #24]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800ac80:	8b7a      	ldrh	r2, [r7, #26]
 800ac82:	8b3b      	ldrh	r3, [r7, #24]
 800ac84:	4413      	add	r3, r2
 800ac86:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800ac88:	88fa      	ldrh	r2, [r7, #6]
 800ac8a:	8b3b      	ldrh	r3, [r7, #24]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	61fb      	str	r3, [r7, #28]
 800ac9a:	88fb      	ldrh	r3, [r7, #6]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <pbuf_copy_partial+0xda>
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1c4      	bne.n	800ac30 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800aca6:	8afb      	ldrh	r3, [r7, #22]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	08015634 	.word	0x08015634
 800acb4:	08015a64 	.word	0x08015a64
 800acb8:	08015680 	.word	0x08015680
 800acbc:	08015a84 	.word	0x08015a84

0800acc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800acc4:	bf00      	nop
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bc80      	pop	{r7}
 800acca:	4770      	bx	lr

0800accc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800acd0:	f001 f80c 	bl	800bcec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800acd4:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <tcp_tmr+0x28>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	3301      	adds	r3, #1
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <tcp_tmr+0x28>)
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <tcp_tmr+0x28>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800acec:	f000 fd3c 	bl	800b768 <tcp_slowtmr>
  }
}
 800acf0:	bf00      	nop
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	2000b7c1 	.word	0x2000b7c1

0800acf8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	e00a      	b.n	800ad1e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d102      	bne.n	800ad18 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1f1      	bne.n	800ad08 <tcp_remove_listener+0x10>
      }
   }
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bc80      	pop	{r7}
 800ad2e:	4770      	bx	lr

0800ad30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d105      	bne.n	800ad4a <tcp_listen_closed+0x1a>
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <tcp_listen_closed+0x5c>)
 800ad40:	22c0      	movs	r2, #192	; 0xc0
 800ad42:	4913      	ldr	r1, [pc, #76]	; (800ad90 <tcp_listen_closed+0x60>)
 800ad44:	4813      	ldr	r0, [pc, #76]	; (800ad94 <tcp_listen_closed+0x64>)
 800ad46:	f008 fc93 	bl	8013670 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7d1b      	ldrb	r3, [r3, #20]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d005      	beq.n	800ad5e <tcp_listen_closed+0x2e>
 800ad52:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <tcp_listen_closed+0x5c>)
 800ad54:	22c1      	movs	r2, #193	; 0xc1
 800ad56:	4910      	ldr	r1, [pc, #64]	; (800ad98 <tcp_listen_closed+0x68>)
 800ad58:	480e      	ldr	r0, [pc, #56]	; (800ad94 <tcp_listen_closed+0x64>)
 800ad5a:	f008 fc89 	bl	8013670 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ad5e:	2301      	movs	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	e00b      	b.n	800ad7c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800ad64:	4a0d      	ldr	r2, [pc, #52]	; (800ad9c <tcp_listen_closed+0x6c>)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff ffc1 	bl	800acf8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d9f0      	bls.n	800ad64 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ad82:	bf00      	nop
 800ad84:	bf00      	nop
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	08015bb8 	.word	0x08015bb8
 800ad90:	08015be8 	.word	0x08015be8
 800ad94:	08015bf4 	.word	0x08015bf4
 800ad98:	08015c1c 	.word	0x08015c1c
 800ad9c:	0801703c 	.word	0x0801703c

0800ada0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ada0:	b5b0      	push	{r4, r5, r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d075      	beq.n	800ae9e <tcp_close_shutdown+0xfe>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7d1b      	ldrb	r3, [r3, #20]
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d003      	beq.n	800adc2 <tcp_close_shutdown+0x22>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	7d1b      	ldrb	r3, [r3, #20]
 800adbe:	2b07      	cmp	r3, #7
 800adc0:	d16d      	bne.n	800ae9e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d104      	bne.n	800add4 <tcp_close_shutdown+0x34>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800add2:	d064      	beq.n	800ae9e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	7e9b      	ldrb	r3, [r3, #26]
 800add8:	f003 0310 	and.w	r3, r3, #16
 800addc:	2b00      	cmp	r3, #0
 800adde:	d106      	bne.n	800adee <tcp_close_shutdown+0x4e>
 800ade0:	4b5b      	ldr	r3, [pc, #364]	; (800af50 <tcp_close_shutdown+0x1b0>)
 800ade2:	f240 120f 	movw	r2, #271	; 0x10f
 800ade6:	495b      	ldr	r1, [pc, #364]	; (800af54 <tcp_close_shutdown+0x1b4>)
 800ade8:	485b      	ldr	r0, [pc, #364]	; (800af58 <tcp_close_shutdown+0x1b8>)
 800adea:	f008 fc41 	bl	8013670 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800adf6:	687c      	ldr	r4, [r7, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	1d1d      	adds	r5, r3, #4
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	8adb      	ldrh	r3, [r3, #22]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	8b12      	ldrh	r2, [r2, #24]
 800ae04:	9201      	str	r2, [sp, #4]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	462b      	mov	r3, r5
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	f004 ff60 	bl	800fcd0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 fa9d 	bl	800c350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ae16:	4b51      	ldr	r3, [pc, #324]	; (800af5c <tcp_close_shutdown+0x1bc>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d105      	bne.n	800ae2c <tcp_close_shutdown+0x8c>
 800ae20:	4b4e      	ldr	r3, [pc, #312]	; (800af5c <tcp_close_shutdown+0x1bc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	4a4d      	ldr	r2, [pc, #308]	; (800af5c <tcp_close_shutdown+0x1bc>)
 800ae28:	6013      	str	r3, [r2, #0]
 800ae2a:	e013      	b.n	800ae54 <tcp_close_shutdown+0xb4>
 800ae2c:	4b4b      	ldr	r3, [pc, #300]	; (800af5c <tcp_close_shutdown+0x1bc>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]
 800ae32:	e00c      	b.n	800ae4e <tcp_close_shutdown+0xae>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d104      	bne.n	800ae48 <tcp_close_shutdown+0xa8>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	60da      	str	r2, [r3, #12]
 800ae46:	e005      	b.n	800ae54 <tcp_close_shutdown+0xb4>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	60fb      	str	r3, [r7, #12]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1ef      	bne.n	800ae34 <tcp_close_shutdown+0x94>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	60da      	str	r2, [r3, #12]
 800ae5a:	4b41      	ldr	r3, [pc, #260]	; (800af60 <tcp_close_shutdown+0x1c0>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7d1b      	ldrb	r3, [r3, #20]
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d10c      	bne.n	800ae82 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	220a      	movs	r2, #10
 800ae6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae6e:	4b3d      	ldr	r3, [pc, #244]	; (800af64 <tcp_close_shutdown+0x1c4>)
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	4a3b      	ldr	r2, [pc, #236]	; (800af64 <tcp_close_shutdown+0x1c4>)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	f005 f970 	bl	8010160 <tcp_timer_needed>
 800ae80:	e00b      	b.n	800ae9a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800ae82:	4b39      	ldr	r3, [pc, #228]	; (800af68 <tcp_close_shutdown+0x1c8>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d102      	bne.n	800ae92 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800ae8c:	f003 fdc0 	bl	800ea10 <tcp_trigger_input_pcb_close>
 800ae90:	e003      	b.n	800ae9a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	2001      	movs	r0, #1
 800ae96:	f7fe fed5 	bl	8009c44 <memp_free>
        }
      }
      return ERR_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e053      	b.n	800af46 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7d1b      	ldrb	r3, [r3, #20]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d03d      	beq.n	800af22 <tcp_close_shutdown+0x182>
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	dc47      	bgt.n	800af3a <tcp_close_shutdown+0x19a>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <tcp_close_shutdown+0x114>
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d02b      	beq.n	800af0a <tcp_close_shutdown+0x16a>
 800aeb2:	e042      	b.n	800af3a <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8adb      	ldrh	r3, [r3, #22]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d021      	beq.n	800af00 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800aebc:	4b2b      	ldr	r3, [pc, #172]	; (800af6c <tcp_close_shutdown+0x1cc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d105      	bne.n	800aed2 <tcp_close_shutdown+0x132>
 800aec6:	4b29      	ldr	r3, [pc, #164]	; (800af6c <tcp_close_shutdown+0x1cc>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	4a27      	ldr	r2, [pc, #156]	; (800af6c <tcp_close_shutdown+0x1cc>)
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	e013      	b.n	800aefa <tcp_close_shutdown+0x15a>
 800aed2:	4b26      	ldr	r3, [pc, #152]	; (800af6c <tcp_close_shutdown+0x1cc>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	e00c      	b.n	800aef4 <tcp_close_shutdown+0x154>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d104      	bne.n	800aeee <tcp_close_shutdown+0x14e>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	60da      	str	r2, [r3, #12]
 800aeec:	e005      	b.n	800aefa <tcp_close_shutdown+0x15a>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	60bb      	str	r3, [r7, #8]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1ef      	bne.n	800aeda <tcp_close_shutdown+0x13a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	2001      	movs	r0, #1
 800af04:	f7fe fe9e 	bl	8009c44 <memp_free>
    break;
 800af08:	e01c      	b.n	800af44 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff ff10 	bl	800ad30 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4817      	ldr	r0, [pc, #92]	; (800af70 <tcp_close_shutdown+0x1d0>)
 800af14:	f001 fa5e 	bl	800c3d4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	2002      	movs	r0, #2
 800af1c:	f7fe fe92 	bl	8009c44 <memp_free>
    break;
 800af20:	e010      	b.n	800af44 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	480d      	ldr	r0, [pc, #52]	; (800af5c <tcp_close_shutdown+0x1bc>)
 800af26:	f001 fa55 	bl	800c3d4 <tcp_pcb_remove>
 800af2a:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <tcp_close_shutdown+0x1c0>)
 800af2c:	2201      	movs	r2, #1
 800af2e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	2001      	movs	r0, #1
 800af34:	f7fe fe86 	bl	8009c44 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800af38:	e004      	b.n	800af44 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f81a 	bl	800af74 <tcp_close_shutdown_fin>
 800af40:	4603      	mov	r3, r0
 800af42:	e000      	b.n	800af46 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bdb0      	pop	{r4, r5, r7, pc}
 800af4e:	bf00      	nop
 800af50:	08015bb8 	.word	0x08015bb8
 800af54:	08015c34 	.word	0x08015c34
 800af58:	08015bf4 	.word	0x08015bf4
 800af5c:	2000b7b8 	.word	0x2000b7b8
 800af60:	2000b7c0 	.word	0x2000b7c0
 800af64:	2000b7bc 	.word	0x2000b7bc
 800af68:	2000b7f8 	.word	0x2000b7f8
 800af6c:	2000b7b0 	.word	0x2000b7b0
 800af70:	2000b7b4 	.word	0x2000b7b4

0800af74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <tcp_close_shutdown_fin+0x1c>
 800af82:	4b2e      	ldr	r3, [pc, #184]	; (800b03c <tcp_close_shutdown_fin+0xc8>)
 800af84:	f240 124d 	movw	r2, #333	; 0x14d
 800af88:	492d      	ldr	r1, [pc, #180]	; (800b040 <tcp_close_shutdown_fin+0xcc>)
 800af8a:	482e      	ldr	r0, [pc, #184]	; (800b044 <tcp_close_shutdown_fin+0xd0>)
 800af8c:	f008 fb70 	bl	8013670 <iprintf>

  switch (pcb->state) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	7d1b      	ldrb	r3, [r3, #20]
 800af94:	2b07      	cmp	r3, #7
 800af96:	d020      	beq.n	800afda <tcp_close_shutdown_fin+0x66>
 800af98:	2b07      	cmp	r3, #7
 800af9a:	dc2b      	bgt.n	800aff4 <tcp_close_shutdown_fin+0x80>
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d002      	beq.n	800afa6 <tcp_close_shutdown_fin+0x32>
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d00d      	beq.n	800afc0 <tcp_close_shutdown_fin+0x4c>
 800afa4:	e026      	b.n	800aff4 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f003 fdbc 	bl	800eb24 <tcp_send_fin>
 800afac:	4603      	mov	r3, r0
 800afae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800afb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d11f      	bne.n	800aff8 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2205      	movs	r2, #5
 800afbc:	751a      	strb	r2, [r3, #20]
    }
    break;
 800afbe:	e01b      	b.n	800aff8 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f003 fdaf 	bl	800eb24 <tcp_send_fin>
 800afc6:	4603      	mov	r3, r0
 800afc8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800afca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d114      	bne.n	800affc <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2205      	movs	r2, #5
 800afd6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800afd8:	e010      	b.n	800affc <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f003 fda2 	bl	800eb24 <tcp_send_fin>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800afe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2209      	movs	r2, #9
 800aff0:	751a      	strb	r2, [r3, #20]
    }
    break;
 800aff2:	e005      	b.n	800b000 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e01c      	b.n	800b032 <tcp_close_shutdown_fin+0xbe>
    break;
 800aff8:	bf00      	nop
 800affa:	e002      	b.n	800b002 <tcp_close_shutdown_fin+0x8e>
    break;
 800affc:	bf00      	nop
 800affe:	e000      	b.n	800b002 <tcp_close_shutdown_fin+0x8e>
    break;
 800b000:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d103      	bne.n	800b012 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f004 fbdc 	bl	800f7c8 <tcp_output>
 800b010:	e00d      	b.n	800b02e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01a:	d108      	bne.n	800b02e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7e9b      	ldrb	r3, [r3, #26]
 800b020:	f043 0308 	orr.w	r3, r3, #8
 800b024:	b2da      	uxtb	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e001      	b.n	800b032 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	08015bb8 	.word	0x08015bb8
 800b040:	08015be8 	.word	0x08015be8
 800b044:	08015bf4 	.word	0x08015bf4

0800b048 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7d1b      	ldrb	r3, [r3, #20]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d006      	beq.n	800b066 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7e9b      	ldrb	r3, [r3, #26]
 800b05c:	f043 0310 	orr.w	r3, r3, #16
 800b060:	b2da      	uxtb	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b066:	2101      	movs	r1, #1
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff fe99 	bl	800ada0 <tcp_close_shutdown>
 800b06e:	4603      	mov	r3, r0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	7d1b      	ldrb	r3, [r3, #20]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d102      	bne.n	800b092 <tcp_shutdown+0x1a>
    return ERR_CONN;
 800b08c:	f06f 030a 	mvn.w	r3, #10
 800b090:	e036      	b.n	800b100 <tcp_shutdown+0x88>
  }
  if (shut_rx) {
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01b      	beq.n	800b0d0 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	7e9b      	ldrb	r3, [r3, #26]
 800b09c:	f043 0310 	orr.w	r3, r3, #16
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d005      	beq.n	800b0b8 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7ff fe76 	bl	800ada0 <tcp_close_shutdown>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	e023      	b.n	800b100 <tcp_shutdown+0x88>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d007      	beq.n	800b0d0 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff fb77 	bl	800a7b8 <pbuf_free>
      pcb->refused_data = NULL;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d013      	beq.n	800b0fe <tcp_shutdown+0x86>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	7d1b      	ldrb	r3, [r3, #20]
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	dc02      	bgt.n	800b0e4 <tcp_shutdown+0x6c>
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	da02      	bge.n	800b0e8 <tcp_shutdown+0x70>
 800b0e2:	e009      	b.n	800b0f8 <tcp_shutdown+0x80>
 800b0e4:	2b07      	cmp	r3, #7
 800b0e6:	d107      	bne.n	800b0f8 <tcp_shutdown+0x80>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fe56 	bl	800ada0 <tcp_close_shutdown>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	e003      	b.n	800b100 <tcp_shutdown+0x88>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800b0f8:	f06f 030a 	mvn.w	r3, #10
 800b0fc:	e000      	b.n	800b100 <tcp_shutdown+0x88>
    }
  }
  return ERR_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08c      	sub	sp, #48	; 0x30
 800b10c:	af02      	add	r7, sp, #8
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	7d1b      	ldrb	r3, [r3, #20]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d106      	bne.n	800b128 <tcp_abandon+0x20>
 800b11a:	4b4d      	ldr	r3, [pc, #308]	; (800b250 <tcp_abandon+0x148>)
 800b11c:	f240 12df 	movw	r2, #479	; 0x1df
 800b120:	494c      	ldr	r1, [pc, #304]	; (800b254 <tcp_abandon+0x14c>)
 800b122:	484d      	ldr	r0, [pc, #308]	; (800b258 <tcp_abandon+0x150>)
 800b124:	f008 faa4 	bl	8013670 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7d1b      	ldrb	r3, [r3, #20]
 800b12c:	2b0a      	cmp	r3, #10
 800b12e:	d108      	bne.n	800b142 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	484a      	ldr	r0, [pc, #296]	; (800b25c <tcp_abandon+0x154>)
 800b134:	f001 f94e 	bl	800c3d4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	2001      	movs	r0, #1
 800b13c:	f7fe fd82 	bl	8009c44 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800b140:	e081      	b.n	800b246 <tcp_abandon+0x13e>
    int send_rst = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b15c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	7d1b      	ldrb	r3, [r3, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d126      	bne.n	800b1ba <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8adb      	ldrh	r3, [r3, #22]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d02e      	beq.n	800b1d2 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b174:	4b3a      	ldr	r3, [pc, #232]	; (800b260 <tcp_abandon+0x158>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d105      	bne.n	800b18a <tcp_abandon+0x82>
 800b17e:	4b38      	ldr	r3, [pc, #224]	; (800b260 <tcp_abandon+0x158>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	4a36      	ldr	r2, [pc, #216]	; (800b260 <tcp_abandon+0x158>)
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	e013      	b.n	800b1b2 <tcp_abandon+0xaa>
 800b18a:	4b35      	ldr	r3, [pc, #212]	; (800b260 <tcp_abandon+0x158>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	61fb      	str	r3, [r7, #28]
 800b190:	e00c      	b.n	800b1ac <tcp_abandon+0xa4>
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d104      	bne.n	800b1a6 <tcp_abandon+0x9e>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68da      	ldr	r2, [r3, #12]
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	60da      	str	r2, [r3, #12]
 800b1a4:	e005      	b.n	800b1b2 <tcp_abandon+0xaa>
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	61fb      	str	r3, [r7, #28]
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1ef      	bne.n	800b192 <tcp_abandon+0x8a>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	60da      	str	r2, [r3, #12]
 800b1b8:	e00b      	b.n	800b1d2 <tcp_abandon+0xca>
      send_rst = reset;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8adb      	ldrh	r3, [r3, #22]
 800b1c2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	4827      	ldr	r0, [pc, #156]	; (800b264 <tcp_abandon+0x15c>)
 800b1c8:	f001 f904 	bl	800c3d4 <tcp_pcb_remove>
 800b1cc:	4b26      	ldr	r3, [pc, #152]	; (800b268 <tcp_abandon+0x160>)
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fe51 	bl	800be86 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d004      	beq.n	800b1f6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 fe48 	bl	800be86 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fe3f 	bl	800be86 <tcp_segs_free>
    if (send_rst) {
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00c      	beq.n	800b228 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	1d19      	adds	r1, r3, #4
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	8b1b      	ldrh	r3, [r3, #24]
 800b218:	9301      	str	r3, [sp, #4]
 800b21a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	460b      	mov	r3, r1
 800b220:	6979      	ldr	r1, [r7, #20]
 800b222:	69b8      	ldr	r0, [r7, #24]
 800b224:	f004 fd54 	bl	800fcd0 <tcp_rst>
    last_state = pcb->state;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7d1b      	ldrb	r3, [r3, #20]
 800b22c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	2001      	movs	r0, #1
 800b232:	f7fe fd07 	bl	8009c44 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <tcp_abandon+0x13e>
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	f06f 010c 	mvn.w	r1, #12
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	4798      	blx	r3
}
 800b246:	bf00      	nop
 800b248:	3728      	adds	r7, #40	; 0x28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	08015bb8 	.word	0x08015bb8
 800b254:	08015c50 	.word	0x08015c50
 800b258:	08015bf4 	.word	0x08015bf4
 800b25c:	2000b7bc 	.word	0x2000b7bc
 800b260:	2000b7b0 	.word	0x2000b7b0
 800b264:	2000b7b8 	.word	0x2000b7b8
 800b268:	2000b7c0 	.word	0x2000b7c0

0800b26c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b274:	2101      	movs	r1, #1
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff ff46 	bl	800b108 <tcp_abandon>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b292:	2304      	movs	r3, #4
 800b294:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b29c:	4b3c      	ldr	r3, [pc, #240]	; (800b390 <tcp_bind+0x10c>)
 800b29e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <tcp_bind+0x28>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <tcp_bind+0x2e>
    return ERR_VAL;
 800b2ac:	f06f 0305 	mvn.w	r3, #5
 800b2b0:	e06a      	b.n	800b388 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	7d1b      	ldrb	r3, [r3, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <tcp_bind+0x4a>
 800b2ba:	4b36      	ldr	r3, [pc, #216]	; (800b394 <tcp_bind+0x110>)
 800b2bc:	f44f 7211 	mov.w	r2, #580	; 0x244
 800b2c0:	4935      	ldr	r1, [pc, #212]	; (800b398 <tcp_bind+0x114>)
 800b2c2:	4836      	ldr	r0, [pc, #216]	; (800b39c <tcp_bind+0x118>)
 800b2c4:	f008 f9d4 	bl	8013670 <iprintf>
 800b2c8:	f06f 0305 	mvn.w	r3, #5
 800b2cc:	e05c      	b.n	800b388 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d109      	bne.n	800b2e8 <tcp_bind+0x64>
    port = tcp_new_port();
 800b2d4:	f000 f910 	bl	800b4f8 <tcp_new_port>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d135      	bne.n	800b34e <tcp_bind+0xca>
      return ERR_BUF;
 800b2e2:	f06f 0301 	mvn.w	r3, #1
 800b2e6:	e04f      	b.n	800b388 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	e02b      	b.n	800b346 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b2ee:	4a2c      	ldr	r2, [pc, #176]	; (800b3a0 <tcp_bind+0x11c>)
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	61bb      	str	r3, [r7, #24]
 800b2fa:	e01e      	b.n	800b33a <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	8adb      	ldrh	r3, [r3, #22]
 800b300:	88fa      	ldrh	r2, [r7, #6]
 800b302:	429a      	cmp	r2, r3
 800b304:	d116      	bne.n	800b334 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b306:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d010      	beq.n	800b32e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00c      	beq.n	800b32e <tcp_bind+0xaa>
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d009      	beq.n	800b32e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d005      	beq.n	800b32e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d102      	bne.n	800b334 <tcp_bind+0xb0>
              return ERR_USE;
 800b32e:	f06f 0307 	mvn.w	r3, #7
 800b332:	e029      	b.n	800b388 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	61bb      	str	r3, [r7, #24]
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1dd      	bne.n	800b2fc <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	3301      	adds	r3, #1
 800b344:	61fb      	str	r3, [r7, #28]
 800b346:	69fa      	ldr	r2, [r7, #28]
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	dbcf      	blt.n	800b2ee <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00c      	beq.n	800b36e <tcp_bind+0xea>
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d008      	beq.n	800b36e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <tcp_bind+0xe4>
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	e000      	b.n	800b36a <tcp_bind+0xe6>
 800b368:	2300      	movs	r3, #0
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	88fa      	ldrh	r2, [r7, #6]
 800b372:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b374:	4b0b      	ldr	r3, [pc, #44]	; (800b3a4 <tcp_bind+0x120>)
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	60da      	str	r2, [r3, #12]
 800b37c:	4a09      	ldr	r2, [pc, #36]	; (800b3a4 <tcp_bind+0x120>)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	f004 feed 	bl	8010160 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	08017064 	.word	0x08017064
 800b394:	08015bb8 	.word	0x08015bb8
 800b398:	08015c84 	.word	0x08015c84
 800b39c:	08015bf4 	.word	0x08015bf4
 800b3a0:	0801703c 	.word	0x0801703c
 800b3a4:	2000b7b0 	.word	0x2000b7b0

0800b3a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b3b8:	4413      	add	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b3c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b3c8:	bf28      	it	cs
 800b3ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b3ce:	b292      	uxth	r2, r2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	db08      	blt.n	800b3ec <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	e020      	b.n	800b42e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	dd03      	ble.n	800b402 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b400:	e014      	b.n	800b42c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b414:	d306      	bcc.n	800b424 <tcp_update_rcv_ann_wnd+0x7c>
 800b416:	4b08      	ldr	r3, [pc, #32]	; (800b438 <tcp_update_rcv_ann_wnd+0x90>)
 800b418:	f44f 7242 	mov.w	r2, #776	; 0x308
 800b41c:	4907      	ldr	r1, [pc, #28]	; (800b43c <tcp_update_rcv_ann_wnd+0x94>)
 800b41e:	4808      	ldr	r0, [pc, #32]	; (800b440 <tcp_update_rcv_ann_wnd+0x98>)
 800b420:	f008 f926 	bl	8013670 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b42c:	2300      	movs	r3, #0
  }
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	08015bb8 	.word	0x08015bb8
 800b43c:	08015cd0 	.word	0x08015cd0
 800b440:	08015bf4 	.word	0x08015bf4

0800b444 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	7d1b      	ldrb	r3, [r3, #20]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d106      	bne.n	800b466 <tcp_recved+0x22>
 800b458:	4b23      	ldr	r3, [pc, #140]	; (800b4e8 <tcp_recved+0xa4>)
 800b45a:	f240 321f 	movw	r2, #799	; 0x31f
 800b45e:	4923      	ldr	r1, [pc, #140]	; (800b4ec <tcp_recved+0xa8>)
 800b460:	4823      	ldr	r0, [pc, #140]	; (800b4f0 <tcp_recved+0xac>)
 800b462:	f008 f905 	bl	8013670 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b46a:	887b      	ldrh	r3, [r7, #2]
 800b46c:	4413      	add	r3, r2
 800b46e:	b29a      	uxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b478:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b47c:	d904      	bls.n	800b488 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b484:	851a      	strh	r2, [r3, #40]	; 0x28
 800b486:	e017      	b.n	800b4b8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d113      	bne.n	800b4b8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7d1b      	ldrb	r3, [r3, #20]
 800b494:	2b07      	cmp	r3, #7
 800b496:	d003      	beq.n	800b4a0 <tcp_recved+0x5c>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7d1b      	ldrb	r3, [r3, #20]
 800b49c:	2b09      	cmp	r3, #9
 800b49e:	d104      	bne.n	800b4aa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800b4a8:	e006      	b.n	800b4b8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800b4aa:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <tcp_recved+0xa4>)
 800b4ac:	f240 322d 	movw	r2, #813	; 0x32d
 800b4b0:	4910      	ldr	r1, [pc, #64]	; (800b4f4 <tcp_recved+0xb0>)
 800b4b2:	480f      	ldr	r0, [pc, #60]	; (800b4f0 <tcp_recved+0xac>)
 800b4b4:	f008 f8dc 	bl	8013670 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff ff75 	bl	800b3a8 <tcp_update_rcv_ann_wnd>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b4c8:	db09      	blt.n	800b4de <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7e9b      	ldrb	r3, [r3, #26]
 800b4ce:	f043 0302 	orr.w	r3, r3, #2
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f004 f975 	bl	800f7c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b4de:	bf00      	nop
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	08015bb8 	.word	0x08015bb8
 800b4ec:	08015cec 	.word	0x08015cec
 800b4f0:	08015bf4 	.word	0x08015bf4
 800b4f4:	08015d14 	.word	0x08015d14

0800b4f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b502:	4b1d      	ldr	r3, [pc, #116]	; (800b578 <tcp_new_port+0x80>)
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	1c5a      	adds	r2, r3, #1
 800b508:	b291      	uxth	r1, r2
 800b50a:	4a1b      	ldr	r2, [pc, #108]	; (800b578 <tcp_new_port+0x80>)
 800b50c:	8011      	strh	r1, [r2, #0]
 800b50e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b512:	4293      	cmp	r3, r2
 800b514:	d103      	bne.n	800b51e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b516:	4b18      	ldr	r3, [pc, #96]	; (800b578 <tcp_new_port+0x80>)
 800b518:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b51c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b51e:	2300      	movs	r3, #0
 800b520:	71fb      	strb	r3, [r7, #7]
 800b522:	e01e      	b.n	800b562 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	4a15      	ldr	r2, [pc, #84]	; (800b57c <tcp_new_port+0x84>)
 800b528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	e011      	b.n	800b556 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	8ada      	ldrh	r2, [r3, #22]
 800b536:	4b10      	ldr	r3, [pc, #64]	; (800b578 <tcp_new_port+0x80>)
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d108      	bne.n	800b550 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b53e:	88bb      	ldrh	r3, [r7, #4]
 800b540:	3301      	adds	r3, #1
 800b542:	80bb      	strh	r3, [r7, #4]
 800b544:	88bb      	ldrh	r3, [r7, #4]
 800b546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b54a:	d3da      	bcc.n	800b502 <tcp_new_port+0xa>
          return 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e00d      	b.n	800b56c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	603b      	str	r3, [r7, #0]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1ea      	bne.n	800b532 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	3301      	adds	r3, #1
 800b560:	71fb      	strb	r3, [r7, #7]
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	2b03      	cmp	r3, #3
 800b566:	d9dd      	bls.n	800b524 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b568:	4b03      	ldr	r3, [pc, #12]	; (800b578 <tcp_new_port+0x80>)
 800b56a:	881b      	ldrh	r3, [r3, #0]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	20000014 	.word	0x20000014
 800b57c:	0801703c 	.word	0x0801703c

0800b580 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <tcp_connect+0x1c>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <tcp_connect+0x22>
    return ERR_VAL;
 800b59c:	f06f 0305 	mvn.w	r3, #5
 800b5a0:	e0d1      	b.n	800b746 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	7d1b      	ldrb	r3, [r3, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <tcp_connect+0x3e>
 800b5aa:	4b69      	ldr	r3, [pc, #420]	; (800b750 <tcp_connect+0x1d0>)
 800b5ac:	f44f 725e 	mov.w	r2, #888	; 0x378
 800b5b0:	4968      	ldr	r1, [pc, #416]	; (800b754 <tcp_connect+0x1d4>)
 800b5b2:	4869      	ldr	r0, [pc, #420]	; (800b758 <tcp_connect+0x1d8>)
 800b5b4:	f008 f85c 	bl	8013670 <iprintf>
 800b5b8:	f06f 0309 	mvn.w	r3, #9
 800b5bc:	e0c3      	b.n	800b746 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <tcp_connect+0x4a>
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	e000      	b.n	800b5cc <tcp_connect+0x4c>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	88fa      	ldrh	r2, [r7, #6]
 800b5d4:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <tcp_connect+0x64>
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d11a      	bne.n	800b61a <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f006 fbb5 	bl	8011d58 <ip4_route>
 800b5ee:	6238      	str	r0, [r7, #32]
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <tcp_connect+0x7c>
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	e000      	b.n	800b5fe <tcp_connect+0x7e>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <tcp_connect+0x8c>
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800b60c:	f06f 0303 	mvn.w	r3, #3
 800b610:	e099      	b.n	800b746 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	8adb      	ldrh	r3, [r3, #22]
 800b61e:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8adb      	ldrh	r3, [r3, #22]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10c      	bne.n	800b642 <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800b628:	f7ff ff66 	bl	800b4f8 <tcp_new_port>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8adb      	ldrh	r3, [r3, #22]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d102      	bne.n	800b642 <tcp_connect+0xc2>
      return ERR_BUF;
 800b63c:	f06f 0301 	mvn.w	r3, #1
 800b640:	e081      	b.n	800b746 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 ff42 	bl	800c4cc <tcp_next_iss>
 800b648:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	1e5a      	subs	r2, r3, #1
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	1e5a      	subs	r2, r3, #1
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b674:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b68c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b696:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	f000 ff28 	bl	800c4f8 <tcp_eff_send_mss_impl>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b6c0:	2102      	movs	r1, #2
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f003 ff28 	bl	800f518 <tcp_enqueue_flags>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800b6cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d136      	bne.n	800b742 <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800b6da:	8b7b      	ldrh	r3, [r7, #26]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d021      	beq.n	800b724 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b6e0:	4b1e      	ldr	r3, [pc, #120]	; (800b75c <tcp_connect+0x1dc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d105      	bne.n	800b6f6 <tcp_connect+0x176>
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <tcp_connect+0x1dc>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	4a1a      	ldr	r2, [pc, #104]	; (800b75c <tcp_connect+0x1dc>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	e013      	b.n	800b71e <tcp_connect+0x19e>
 800b6f6:	4b19      	ldr	r3, [pc, #100]	; (800b75c <tcp_connect+0x1dc>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b6fc:	e00c      	b.n	800b718 <tcp_connect+0x198>
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	429a      	cmp	r2, r3
 800b706:	d104      	bne.n	800b712 <tcp_connect+0x192>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68da      	ldr	r2, [r3, #12]
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	60da      	str	r2, [r3, #12]
 800b710:	e005      	b.n	800b71e <tcp_connect+0x19e>
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	627b      	str	r3, [r7, #36]	; 0x24
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1ef      	bne.n	800b6fe <tcp_connect+0x17e>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800b724:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <tcp_connect+0x1e0>)
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	60da      	str	r2, [r3, #12]
 800b72c:	4a0c      	ldr	r2, [pc, #48]	; (800b760 <tcp_connect+0x1e0>)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	f004 fd15 	bl	8010160 <tcp_timer_needed>
 800b736:	4b0b      	ldr	r3, [pc, #44]	; (800b764 <tcp_connect+0x1e4>)
 800b738:	2201      	movs	r2, #1
 800b73a:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f004 f843 	bl	800f7c8 <tcp_output>
  }
  return ret;
 800b742:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3728      	adds	r7, #40	; 0x28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	08015bb8 	.word	0x08015bb8
 800b754:	08015d38 	.word	0x08015d38
 800b758:	08015bf4 	.word	0x08015bf4
 800b75c:	2000b7b0 	.word	0x2000b7b0
 800b760:	2000b7b8 	.word	0x2000b7b8
 800b764:	2000b7c0 	.word	0x2000b7c0

0800b768 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b768:	b5b0      	push	{r4, r5, r7, lr}
 800b76a:	b08c      	sub	sp, #48	; 0x30
 800b76c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800b772:	4b97      	ldr	r3, [pc, #604]	; (800b9d0 <tcp_slowtmr+0x268>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3301      	adds	r3, #1
 800b778:	4a95      	ldr	r2, [pc, #596]	; (800b9d0 <tcp_slowtmr+0x268>)
 800b77a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b77c:	4b95      	ldr	r3, [pc, #596]	; (800b9d4 <tcp_slowtmr+0x26c>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	b2da      	uxtb	r2, r3
 800b784:	4b93      	ldr	r3, [pc, #588]	; (800b9d4 <tcp_slowtmr+0x26c>)
 800b786:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b788:	2300      	movs	r3, #0
 800b78a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800b78c:	4b92      	ldr	r3, [pc, #584]	; (800b9d8 <tcp_slowtmr+0x270>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b792:	e227      	b.n	800bbe4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	7d1b      	ldrb	r3, [r3, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d106      	bne.n	800b7aa <tcp_slowtmr+0x42>
 800b79c:	4b8f      	ldr	r3, [pc, #572]	; (800b9dc <tcp_slowtmr+0x274>)
 800b79e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800b7a2:	498f      	ldr	r1, [pc, #572]	; (800b9e0 <tcp_slowtmr+0x278>)
 800b7a4:	488f      	ldr	r0, [pc, #572]	; (800b9e4 <tcp_slowtmr+0x27c>)
 800b7a6:	f007 ff63 	bl	8013670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	7d1b      	ldrb	r3, [r3, #20]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d106      	bne.n	800b7c0 <tcp_slowtmr+0x58>
 800b7b2:	4b8a      	ldr	r3, [pc, #552]	; (800b9dc <tcp_slowtmr+0x274>)
 800b7b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b7b8:	498b      	ldr	r1, [pc, #556]	; (800b9e8 <tcp_slowtmr+0x280>)
 800b7ba:	488a      	ldr	r0, [pc, #552]	; (800b9e4 <tcp_slowtmr+0x27c>)
 800b7bc:	f007 ff58 	bl	8013670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	7d1b      	ldrb	r3, [r3, #20]
 800b7c4:	2b0a      	cmp	r3, #10
 800b7c6:	d106      	bne.n	800b7d6 <tcp_slowtmr+0x6e>
 800b7c8:	4b84      	ldr	r3, [pc, #528]	; (800b9dc <tcp_slowtmr+0x274>)
 800b7ca:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800b7ce:	4987      	ldr	r1, [pc, #540]	; (800b9ec <tcp_slowtmr+0x284>)
 800b7d0:	4884      	ldr	r0, [pc, #528]	; (800b9e4 <tcp_slowtmr+0x27c>)
 800b7d2:	f007 ff4d 	bl	8013670 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	7f5a      	ldrb	r2, [r3, #29]
 800b7da:	4b7e      	ldr	r3, [pc, #504]	; (800b9d4 <tcp_slowtmr+0x26c>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d103      	bne.n	800b7ea <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800b7e8:	e1fc      	b.n	800bbe4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b7ea:	4b7a      	ldr	r3, [pc, #488]	; (800b9d4 <tcp_slowtmr+0x26c>)
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	7d1b      	ldrb	r3, [r3, #20]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d108      	bne.n	800b814 <tcp_slowtmr+0xac>
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b808:	2b05      	cmp	r3, #5
 800b80a:	d903      	bls.n	800b814 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800b80c:	7ffb      	ldrb	r3, [r7, #31]
 800b80e:	3301      	adds	r3, #1
 800b810:	77fb      	strb	r3, [r7, #31]
 800b812:	e0a2      	b.n	800b95a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b81a:	2b0b      	cmp	r3, #11
 800b81c:	d903      	bls.n	800b826 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b81e:	7ffb      	ldrb	r3, [r7, #31]
 800b820:	3301      	adds	r3, #1
 800b822:	77fb      	strb	r3, [r7, #31]
 800b824:	e099      	b.n	800b95a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d032      	beq.n	800b896 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b836:	3b01      	subs	r3, #1
 800b838:	4a6d      	ldr	r2, [pc, #436]	; (800b9f0 <tcp_slowtmr+0x288>)
 800b83a:	5cd3      	ldrb	r3, [r2, r3]
 800b83c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b844:	7cfa      	ldrb	r2, [r7, #19]
 800b846:	429a      	cmp	r2, r3
 800b848:	d907      	bls.n	800b85a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b850:	3301      	adds	r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b860:	7cfa      	ldrb	r2, [r7, #19]
 800b862:	429a      	cmp	r2, r3
 800b864:	d879      	bhi.n	800b95a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800b866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b868:	f004 fbb9 	bl	800ffde <tcp_zero_window_probe>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d173      	bne.n	800b95a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b880:	2b06      	cmp	r3, #6
 800b882:	d86a      	bhi.n	800b95a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b88a:	3301      	adds	r3, #1
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b894:	e061      	b.n	800b95a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	db08      	blt.n	800b8b2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	b21a      	sxth	r2, r3
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d04f      	beq.n	800b95a <tcp_slowtmr+0x1f2>
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	db47      	blt.n	800b95a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	7d1b      	ldrb	r3, [r3, #20]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d018      	beq.n	800b904 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8d8:	2b0c      	cmp	r3, #12
 800b8da:	bf28      	it	cs
 800b8dc:	230c      	movcs	r3, #12
 800b8de:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8e6:	10db      	asrs	r3, r3, #3
 800b8e8:	b21b      	sxth	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8f2:	4413      	add	r3, r2
 800b8f4:	7dfa      	ldrb	r2, [r7, #23]
 800b8f6:	493f      	ldr	r1, [pc, #252]	; (800b9f4 <tcp_slowtmr+0x28c>)
 800b8f8:	5c8a      	ldrb	r2, [r1, r2]
 800b8fa:	4093      	lsls	r3, r2
 800b8fc:	b21a      	sxth	r2, r3
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	2200      	movs	r2, #0
 800b908:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b916:	4293      	cmp	r3, r2
 800b918:	bf28      	it	cs
 800b91a:	4613      	movcs	r3, r2
 800b91c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800b91e:	8abb      	ldrh	r3, [r7, #20]
 800b920:	085b      	lsrs	r3, r3, #1
 800b922:	b29a      	uxth	r2, r3
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	b29b      	uxth	r3, r3
 800b938:	429a      	cmp	r2, r3
 800b93a:	d206      	bcs.n	800b94a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	b29a      	uxth	r2, r3
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b956:	f004 fa31 	bl	800fdbc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	7d1b      	ldrb	r3, [r3, #20]
 800b95e:	2b06      	cmp	r3, #6
 800b960:	d10f      	bne.n	800b982 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	7e9b      	ldrb	r3, [r3, #26]
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b96e:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <tcp_slowtmr+0x268>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	2b28      	cmp	r3, #40	; 0x28
 800b97a:	d902      	bls.n	800b982 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b97c:	7ffb      	ldrb	r3, [r7, #31]
 800b97e:	3301      	adds	r3, #1
 800b980:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	7a1b      	ldrb	r3, [r3, #8]
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d05d      	beq.n	800ba4a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b992:	2b04      	cmp	r3, #4
 800b994:	d003      	beq.n	800b99e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800b99a:	2b07      	cmp	r3, #7
 800b99c:	d155      	bne.n	800ba4a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b99e:	4b0c      	ldr	r3, [pc, #48]	; (800b9d0 <tcp_slowtmr+0x268>)
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ae:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b9b2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b9b6:	4910      	ldr	r1, [pc, #64]	; (800b9f8 <tcp_slowtmr+0x290>)
 800b9b8:	fba1 1303 	umull	r1, r3, r1, r3
 800b9bc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d91c      	bls.n	800b9fc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b9c2:	7ffb      	ldrb	r3, [r7, #31]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800b9c8:	7fbb      	ldrb	r3, [r7, #30]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	77bb      	strb	r3, [r7, #30]
 800b9ce:	e03c      	b.n	800ba4a <tcp_slowtmr+0x2e2>
 800b9d0:	2000b7ac 	.word	0x2000b7ac
 800b9d4:	2000b7c2 	.word	0x2000b7c2
 800b9d8:	2000b7b8 	.word	0x2000b7b8
 800b9dc:	08015bb8 	.word	0x08015bb8
 800b9e0:	08015d68 	.word	0x08015d68
 800b9e4:	08015bf4 	.word	0x08015bf4
 800b9e8:	08015d94 	.word	0x08015d94
 800b9ec:	08015dc0 	.word	0x08015dc0
 800b9f0:	08017034 	.word	0x08017034
 800b9f4:	08017024 	.word	0x08017024
 800b9f8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b9fc:	4b97      	ldr	r3, [pc, #604]	; (800bc5c <tcp_slowtmr+0x4f4>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ba12:	4618      	mov	r0, r3
 800ba14:	4b92      	ldr	r3, [pc, #584]	; (800bc60 <tcp_slowtmr+0x4f8>)
 800ba16:	fb00 f303 	mul.w	r3, r0, r3
 800ba1a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800ba1c:	4991      	ldr	r1, [pc, #580]	; (800bc64 <tcp_slowtmr+0x4fc>)
 800ba1e:	fba1 1303 	umull	r1, r3, r1, r3
 800ba22:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d910      	bls.n	800ba4a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800ba28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba2a:	f004 fa9b 	bl	800ff64 <tcp_keepalive>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800ba32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d107      	bne.n	800ba4a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ba40:	3301      	adds	r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d016      	beq.n	800ba80 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800ba52:	4b82      	ldr	r3, [pc, #520]	; (800bc5c <tcp_slowtmr+0x4f4>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	1ad2      	subs	r2, r2, r3
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ba62:	4619      	mov	r1, r3
 800ba64:	460b      	mov	r3, r1
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	440b      	add	r3, r1
 800ba6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d307      	bcc.n	800ba80 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba74:	4618      	mov	r0, r3
 800ba76:	f000 fa06 	bl	800be86 <tcp_segs_free>
      pcb->ooseq = NULL;
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	7d1b      	ldrb	r3, [r3, #20]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d109      	bne.n	800ba9c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ba88:	4b74      	ldr	r3, [pc, #464]	; (800bc5c <tcp_slowtmr+0x4f4>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	2b28      	cmp	r3, #40	; 0x28
 800ba94:	d902      	bls.n	800ba9c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ba96:	7ffb      	ldrb	r3, [r7, #31]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	7d1b      	ldrb	r3, [r3, #20]
 800baa0:	2b09      	cmp	r3, #9
 800baa2:	d109      	bne.n	800bab8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800baa4:	4b6d      	ldr	r3, [pc, #436]	; (800bc5c <tcp_slowtmr+0x4f4>)
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	6a1b      	ldr	r3, [r3, #32]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	2bf0      	cmp	r3, #240	; 0xf0
 800bab0:	d902      	bls.n	800bab8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800bab2:	7ffb      	ldrb	r3, [r7, #31]
 800bab4:	3301      	adds	r3, #1
 800bab6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bab8:	7ffb      	ldrb	r3, [r7, #31]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d05d      	beq.n	800bb7a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bac8:	f000 fc42 	bl	800c350 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d010      	beq.n	800baf4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bad2:	4b65      	ldr	r3, [pc, #404]	; (800bc68 <tcp_slowtmr+0x500>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad8:	429a      	cmp	r2, r3
 800bada:	d106      	bne.n	800baea <tcp_slowtmr+0x382>
 800badc:	4b63      	ldr	r3, [pc, #396]	; (800bc6c <tcp_slowtmr+0x504>)
 800bade:	f240 4289 	movw	r2, #1161	; 0x489
 800bae2:	4963      	ldr	r1, [pc, #396]	; (800bc70 <tcp_slowtmr+0x508>)
 800bae4:	4863      	ldr	r0, [pc, #396]	; (800bc74 <tcp_slowtmr+0x50c>)
 800bae6:	f007 fdc3 	bl	8013670 <iprintf>
        prev->next = pcb->next;
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	68da      	ldr	r2, [r3, #12]
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	60da      	str	r2, [r3, #12]
 800baf2:	e00f      	b.n	800bb14 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800baf4:	4b5c      	ldr	r3, [pc, #368]	; (800bc68 <tcp_slowtmr+0x500>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d006      	beq.n	800bb0c <tcp_slowtmr+0x3a4>
 800bafe:	4b5b      	ldr	r3, [pc, #364]	; (800bc6c <tcp_slowtmr+0x504>)
 800bb00:	f240 428d 	movw	r2, #1165	; 0x48d
 800bb04:	495c      	ldr	r1, [pc, #368]	; (800bc78 <tcp_slowtmr+0x510>)
 800bb06:	485b      	ldr	r0, [pc, #364]	; (800bc74 <tcp_slowtmr+0x50c>)
 800bb08:	f007 fdb2 	bl	8013670 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	4a55      	ldr	r2, [pc, #340]	; (800bc68 <tcp_slowtmr+0x500>)
 800bb12:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bb14:	7fbb      	ldrb	r3, [r7, #30]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d010      	beq.n	800bb3c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bb22:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	1d1d      	adds	r5, r3, #4
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	8adb      	ldrh	r3, [r3, #22]
 800bb2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2e:	8b12      	ldrh	r2, [r2, #24]
 800bb30:	9201      	str	r2, [sp, #4]
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	462b      	mov	r3, r5
 800bb36:	4622      	mov	r2, r4
 800bb38:	f004 f8ca 	bl	800fcd0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb44:	7d1b      	ldrb	r3, [r3, #20]
 800bb46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	2001      	movs	r0, #1
 800bb56:	f7fe f875 	bl	8009c44 <memp_free>

      tcp_active_pcbs_changed = 0;
 800bb5a:	4b48      	ldr	r3, [pc, #288]	; (800bc7c <tcp_slowtmr+0x514>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d004      	beq.n	800bb70 <tcp_slowtmr+0x408>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f06f 010c 	mvn.w	r1, #12
 800bb6c:	68b8      	ldr	r0, [r7, #8]
 800bb6e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bb70:	4b42      	ldr	r3, [pc, #264]	; (800bc7c <tcp_slowtmr+0x514>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d035      	beq.n	800bbe4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800bb78:	e606      	b.n	800b788 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	7edb      	ldrb	r3, [r3, #27]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	6a3b      	ldr	r3, [r7, #32]
 800bb8e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	7eda      	ldrb	r2, [r3, #27]
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	7f1b      	ldrb	r3, [r3, #28]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d323      	bcc.n	800bbe4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bba2:	4b36      	ldr	r3, [pc, #216]	; (800bc7c <tcp_slowtmr+0x514>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00a      	beq.n	800bbc8 <tcp_slowtmr+0x460>
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb8:	6a3a      	ldr	r2, [r7, #32]
 800bbba:	6912      	ldr	r2, [r2, #16]
 800bbbc:	6a39      	ldr	r1, [r7, #32]
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	4798      	blx	r3
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	777b      	strb	r3, [r7, #29]
 800bbc6:	e001      	b.n	800bbcc <tcp_slowtmr+0x464>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800bbcc:	4b2b      	ldr	r3, [pc, #172]	; (800bc7c <tcp_slowtmr+0x514>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d000      	beq.n	800bbd6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800bbd4:	e5d8      	b.n	800b788 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bbd6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d102      	bne.n	800bbe4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800bbde:	6a38      	ldr	r0, [r7, #32]
 800bbe0:	f003 fdf2 	bl	800f7c8 <tcp_output>
  while (pcb != NULL) {
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f47f add4 	bne.w	800b794 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800bbf0:	4b23      	ldr	r3, [pc, #140]	; (800bc80 <tcp_slowtmr+0x518>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800bbf6:	e068      	b.n	800bcca <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	7d1b      	ldrb	r3, [r3, #20]
 800bbfc:	2b0a      	cmp	r3, #10
 800bbfe:	d006      	beq.n	800bc0e <tcp_slowtmr+0x4a6>
 800bc00:	4b1a      	ldr	r3, [pc, #104]	; (800bc6c <tcp_slowtmr+0x504>)
 800bc02:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800bc06:	491f      	ldr	r1, [pc, #124]	; (800bc84 <tcp_slowtmr+0x51c>)
 800bc08:	481a      	ldr	r0, [pc, #104]	; (800bc74 <tcp_slowtmr+0x50c>)
 800bc0a:	f007 fd31 	bl	8013670 <iprintf>
    pcb_remove = 0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bc12:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <tcp_slowtmr+0x4f4>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2bf0      	cmp	r3, #240	; 0xf0
 800bc1e:	d902      	bls.n	800bc26 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800bc20:	7ffb      	ldrb	r3, [r7, #31]
 800bc22:	3301      	adds	r3, #1
 800bc24:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bc26:	7ffb      	ldrb	r3, [r7, #31]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d049      	beq.n	800bcc0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bc2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc2e:	f000 fb8f 	bl	800c350 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bc32:	6a3b      	ldr	r3, [r7, #32]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d029      	beq.n	800bc8c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bc38:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <tcp_slowtmr+0x518>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d106      	bne.n	800bc50 <tcp_slowtmr+0x4e8>
 800bc42:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <tcp_slowtmr+0x504>)
 800bc44:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800bc48:	490f      	ldr	r1, [pc, #60]	; (800bc88 <tcp_slowtmr+0x520>)
 800bc4a:	480a      	ldr	r0, [pc, #40]	; (800bc74 <tcp_slowtmr+0x50c>)
 800bc4c:	f007 fd10 	bl	8013670 <iprintf>
        prev->next = pcb->next;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	60da      	str	r2, [r3, #12]
 800bc58:	e028      	b.n	800bcac <tcp_slowtmr+0x544>
 800bc5a:	bf00      	nop
 800bc5c:	2000b7ac 	.word	0x2000b7ac
 800bc60:	000124f8 	.word	0x000124f8
 800bc64:	10624dd3 	.word	0x10624dd3
 800bc68:	2000b7b8 	.word	0x2000b7b8
 800bc6c:	08015bb8 	.word	0x08015bb8
 800bc70:	08015df0 	.word	0x08015df0
 800bc74:	08015bf4 	.word	0x08015bf4
 800bc78:	08015e1c 	.word	0x08015e1c
 800bc7c:	2000b7c0 	.word	0x2000b7c0
 800bc80:	2000b7bc 	.word	0x2000b7bc
 800bc84:	08015e48 	.word	0x08015e48
 800bc88:	08015e78 	.word	0x08015e78
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bc8c:	4b13      	ldr	r3, [pc, #76]	; (800bcdc <tcp_slowtmr+0x574>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d006      	beq.n	800bca4 <tcp_slowtmr+0x53c>
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <tcp_slowtmr+0x578>)
 800bc98:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800bc9c:	4911      	ldr	r1, [pc, #68]	; (800bce4 <tcp_slowtmr+0x57c>)
 800bc9e:	4812      	ldr	r0, [pc, #72]	; (800bce8 <tcp_slowtmr+0x580>)
 800bca0:	f007 fce6 	bl	8013670 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	4a0c      	ldr	r2, [pc, #48]	; (800bcdc <tcp_slowtmr+0x574>)
 800bcaa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcae:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800bcb6:	69b9      	ldr	r1, [r7, #24]
 800bcb8:	2001      	movs	r0, #1
 800bcba:	f7fd ffc3 	bl	8009c44 <memp_free>
 800bcbe:	e004      	b.n	800bcca <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d193      	bne.n	800bbf8 <tcp_slowtmr+0x490>
    }
  }
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	3728      	adds	r7, #40	; 0x28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bdb0      	pop	{r4, r5, r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	2000b7bc 	.word	0x2000b7bc
 800bce0:	08015bb8 	.word	0x08015bb8
 800bce4:	08015ea0 	.word	0x08015ea0
 800bce8:	08015bf4 	.word	0x08015bf4

0800bcec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bcf2:	4b2d      	ldr	r3, [pc, #180]	; (800bda8 <tcp_fasttmr+0xbc>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b2b      	ldr	r3, [pc, #172]	; (800bda8 <tcp_fasttmr+0xbc>)
 800bcfc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bcfe:	4b2b      	ldr	r3, [pc, #172]	; (800bdac <tcp_fasttmr+0xc0>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bd04:	e048      	b.n	800bd98 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7f5a      	ldrb	r2, [r3, #29]
 800bd0a:	4b27      	ldr	r3, [pc, #156]	; (800bda8 <tcp_fasttmr+0xbc>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d03f      	beq.n	800bd92 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bd12:	4b25      	ldr	r3, [pc, #148]	; (800bda8 <tcp_fasttmr+0xbc>)
 800bd14:	781a      	ldrb	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7e9b      	ldrb	r3, [r3, #26]
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d010      	beq.n	800bd48 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7e9b      	ldrb	r3, [r3, #26]
 800bd2a:	f043 0302 	orr.w	r3, r3, #2
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f003 fd47 	bl	800f7c8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7e9b      	ldrb	r3, [r3, #26]
 800bd3e:	f023 0303 	bic.w	r3, r3, #3
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7e9b      	ldrb	r3, [r3, #26]
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d009      	beq.n	800bd68 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7e9b      	ldrb	r3, [r3, #26]
 800bd58:	f023 0308 	bic.w	r3, r3, #8
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff f906 	bl	800af74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bd76:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <tcp_fasttmr+0xc4>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f819 	bl	800bdb4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bd82:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <tcp_fasttmr+0xc4>)
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d000      	beq.n	800bd8c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bd8a:	e7b8      	b.n	800bcfe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	607b      	str	r3, [r7, #4]
 800bd90:	e002      	b.n	800bd98 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1b3      	bne.n	800bd06 <tcp_fasttmr+0x1a>
    }
  }
}
 800bd9e:	bf00      	nop
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	2000b7c2 	.word	0x2000b7c2
 800bdac:	2000b7b8 	.word	0x2000b7b8
 800bdb0:	2000b7c0 	.word	0x2000b7c0

0800bdb4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc0:	7b5b      	ldrb	r3, [r3, #13]
 800bdc2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdc8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00b      	beq.n	800bdf2 <tcp_process_refused_data+0x3e>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6918      	ldr	r0, [r3, #16]
 800bde4:	2300      	movs	r3, #0
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	47a0      	blx	r4
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]
 800bdf0:	e007      	b.n	800be02 <tcp_process_refused_data+0x4e>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	f000 f88d 	bl	800bf18 <tcp_recv_null>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800be02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d12a      	bne.n	800be60 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	f003 0320 	and.w	r3, r3, #32
 800be10:	2b00      	cmp	r3, #0
 800be12:	d033      	beq.n	800be7c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be18:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be1c:	d005      	beq.n	800be2a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be22:	3301      	adds	r3, #1
 800be24:	b29a      	uxth	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <tcp_process_refused_data+0x98>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6918      	ldr	r0, [r3, #16]
 800be3e:	2300      	movs	r3, #0
 800be40:	2200      	movs	r2, #0
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	47a0      	blx	r4
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]
 800be4a:	e001      	b.n	800be50 <tcp_process_refused_data+0x9c>
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800be50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be54:	f113 0f0d 	cmn.w	r3, #13
 800be58:	d110      	bne.n	800be7c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800be5a:	f06f 030c 	mvn.w	r3, #12
 800be5e:	e00e      	b.n	800be7e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800be60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be64:	f113 0f0d 	cmn.w	r3, #13
 800be68:	d102      	bne.n	800be70 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800be6a:	f06f 030c 	mvn.w	r3, #12
 800be6e:	e006      	b.n	800be7e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800be76:	f06f 0304 	mvn.w	r3, #4
 800be7a:	e000      	b.n	800be7e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	bd90      	pop	{r4, r7, pc}

0800be86 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800be8e:	e007      	b.n	800bea0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f80a 	bl	800beb0 <tcp_seg_free>
    seg = next;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1f4      	bne.n	800be90 <tcp_segs_free+0xa>
  }
}
 800bea6:	bf00      	nop
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00c      	beq.n	800bed8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d004      	beq.n	800bed0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fc74 	bl	800a7b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	2003      	movs	r0, #3
 800bed4:	f7fd feb6 	bl	8009c44 <memp_free>
  }
}
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bee8:	2003      	movs	r0, #3
 800beea:	f7fd fe59 	bl	8009ba0 <memp_malloc>
 800beee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <tcp_seg_copy+0x1a>
    return NULL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e00a      	b.n	800bf10 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800befa:	2210      	movs	r2, #16
 800befc:	6879      	ldr	r1, [r7, #4]
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f007 fac4 	bl	801348c <memcpy>
  pbuf_ref(cseg->p);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe fd05 	bl	800a918 <pbuf_ref>
  return cseg;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d009      	beq.n	800bf40 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	891b      	ldrh	r3, [r3, #8]
 800bf30:	4619      	mov	r1, r3
 800bf32:	68b8      	ldr	r0, [r7, #8]
 800bf34:	f7ff fa86 	bl	800b444 <tcp_recved>
    pbuf_free(p);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7fe fc3d 	bl	800a7b8 <pbuf_free>
 800bf3e:	e008      	b.n	800bf52 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800bf40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d104      	bne.n	800bf52 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800bf48:	68b8      	ldr	r0, [r7, #8]
 800bf4a:	f7ff f87d 	bl	800b048 <tcp_close>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	e000      	b.n	800bf54 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bf66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	db01      	blt.n	800bf72 <tcp_kill_prio+0x16>
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
 800bf70:	e000      	b.n	800bf74 <tcp_kill_prio+0x18>
 800bf72:	237f      	movs	r3, #127	; 0x7f
 800bf74:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf7e:	4b16      	ldr	r3, [pc, #88]	; (800bfd8 <tcp_kill_prio+0x7c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	e01a      	b.n	800bfbc <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	7d5b      	ldrb	r3, [r3, #21]
 800bf8a:	7afa      	ldrb	r2, [r7, #11]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d312      	bcc.n	800bfb6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf90:	4b12      	ldr	r3, [pc, #72]	; (800bfdc <tcp_kill_prio+0x80>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d80a      	bhi.n	800bfb6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800bfa0:	4b0e      	ldr	r3, [pc, #56]	; (800bfdc <tcp_kill_prio+0x80>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	6a1b      	ldr	r3, [r3, #32]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	7d5b      	ldrb	r3, [r3, #21]
 800bfb4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1e1      	bne.n	800bf86 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bfc8:	6938      	ldr	r0, [r7, #16]
 800bfca:	f7ff f94f 	bl	800b26c <tcp_abort>
  }
}
 800bfce:	bf00      	nop
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2000b7b8 	.word	0x2000b7b8
 800bfdc:	2000b7ac 	.word	0x2000b7ac

0800bfe0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d009      	beq.n	800c004 <tcp_kill_state+0x24>
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	2b09      	cmp	r3, #9
 800bff4:	d006      	beq.n	800c004 <tcp_kill_state+0x24>
 800bff6:	4b1a      	ldr	r3, [pc, #104]	; (800c060 <tcp_kill_state+0x80>)
 800bff8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bffc:	4919      	ldr	r1, [pc, #100]	; (800c064 <tcp_kill_state+0x84>)
 800bffe:	481a      	ldr	r0, [pc, #104]	; (800c068 <tcp_kill_state+0x88>)
 800c000:	f007 fb36 	bl	8013670 <iprintf>

  inactivity = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c00c:	4b17      	ldr	r3, [pc, #92]	; (800c06c <tcp_kill_state+0x8c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	e017      	b.n	800c044 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	7d1b      	ldrb	r3, [r3, #20]
 800c018:	79fa      	ldrb	r2, [r7, #7]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d10f      	bne.n	800c03e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c01e:	4b14      	ldr	r3, [pc, #80]	; (800c070 <tcp_kill_state+0x90>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	6a1b      	ldr	r3, [r3, #32]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d807      	bhi.n	800c03e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c02e:	4b10      	ldr	r3, [pc, #64]	; (800c070 <tcp_kill_state+0x90>)
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e4      	bne.n	800c014 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c050:	2100      	movs	r1, #0
 800c052:	6938      	ldr	r0, [r7, #16]
 800c054:	f7ff f858 	bl	800b108 <tcp_abandon>
  }
}
 800c058:	bf00      	nop
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	08015bb8 	.word	0x08015bb8
 800c064:	08015ec8 	.word	0x08015ec8
 800c068:	08015bf4 	.word	0x08015bf4
 800c06c:	2000b7b8 	.word	0x2000b7b8
 800c070:	2000b7ac 	.word	0x2000b7ac

0800c074 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <tcp_kill_timewait+0x58>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	e012      	b.n	800c0b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <tcp_kill_timewait+0x5c>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d807      	bhi.n	800c0aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c09a:	4b0d      	ldr	r3, [pc, #52]	; (800c0d0 <tcp_kill_timewait+0x5c>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e9      	bne.n	800c08a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c0bc:	68b8      	ldr	r0, [r7, #8]
 800c0be:	f7ff f8d5 	bl	800b26c <tcp_abort>
  }
}
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	2000b7bc 	.word	0x2000b7bc
 800c0d0:	2000b7ac 	.word	0x2000b7ac

0800c0d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c0de:	2001      	movs	r0, #1
 800c0e0:	f7fd fd5e 	bl	8009ba0 <memp_malloc>
 800c0e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d124      	bne.n	800c136 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c0ec:	f7ff ffc2 	bl	800c074 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	f7fd fd55 	bl	8009ba0 <memp_malloc>
 800c0f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d11b      	bne.n	800c136 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c0fe:	2009      	movs	r0, #9
 800c100:	f7ff ff6e 	bl	800bfe0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c104:	2001      	movs	r0, #1
 800c106:	f7fd fd4b 	bl	8009ba0 <memp_malloc>
 800c10a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d111      	bne.n	800c136 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c112:	2008      	movs	r0, #8
 800c114:	f7ff ff64 	bl	800bfe0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c118:	2001      	movs	r0, #1
 800c11a:	f7fd fd41 	bl	8009ba0 <memp_malloc>
 800c11e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d107      	bne.n	800c136 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c126:	79fb      	ldrb	r3, [r7, #7]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff ff17 	bl	800bf5c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c12e:	2001      	movs	r0, #1
 800c130:	f7fd fd36 	bl	8009ba0 <memp_malloc>
 800c134:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d03f      	beq.n	800c1bc <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c13c:	2298      	movs	r2, #152	; 0x98
 800c13e:	2100      	movs	r1, #0
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f007 f9b1 	bl	80134a8 <memset>
    pcb->prio = prio;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	79fa      	ldrb	r2, [r7, #7]
 800c14a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c15c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	22ff      	movs	r2, #255	; 0xff
 800c16a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c172:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2206      	movs	r2, #6
 800c178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2206      	movs	r2, #6
 800c180:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c188:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c192:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <tcp_alloc+0xf4>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c19a:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <tcp_alloc+0xf8>)
 800c19c:	781a      	ldrb	r2, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c1a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4a08      	ldr	r2, [pc, #32]	; (800c1d0 <tcp_alloc+0xfc>)
 800c1b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	4a07      	ldr	r2, [pc, #28]	; (800c1d4 <tcp_alloc+0x100>)
 800c1b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000b7ac 	.word	0x2000b7ac
 800c1cc:	2000b7c2 	.word	0x2000b7c2
 800c1d0:	0800bf19 	.word	0x0800bf19
 800c1d4:	006ddd00 	.word	0x006ddd00

0800c1d8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c1e2:	2040      	movs	r0, #64	; 0x40
 800c1e4:	f7ff ff76 	bl	800c0d4 <tcp_alloc>
 800c1e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	611a      	str	r2, [r3, #16]
  }
}
 800c20a:	bf00      	nop
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bc80      	pop	{r7}
 800c212:	4770      	bx	lr

0800c214 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00e      	beq.n	800c242 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7d1b      	ldrb	r3, [r3, #20]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d106      	bne.n	800c23a <tcp_recv+0x26>
 800c22c:	4b07      	ldr	r3, [pc, #28]	; (800c24c <tcp_recv+0x38>)
 800c22e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800c232:	4907      	ldr	r1, [pc, #28]	; (800c250 <tcp_recv+0x3c>)
 800c234:	4807      	ldr	r0, [pc, #28]	; (800c254 <tcp_recv+0x40>)
 800c236:	f007 fa1b 	bl	8013670 <iprintf>
    pcb->recv = recv;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	08015bb8 	.word	0x08015bb8
 800c250:	08015ed8 	.word	0x08015ed8
 800c254:	08015bf4 	.word	0x08015bf4

0800c258 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00d      	beq.n	800c284 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7d1b      	ldrb	r3, [r3, #20]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d106      	bne.n	800c27e <tcp_sent+0x26>
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <tcp_sent+0x34>)
 800c272:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800c276:	4906      	ldr	r1, [pc, #24]	; (800c290 <tcp_sent+0x38>)
 800c278:	4806      	ldr	r0, [pc, #24]	; (800c294 <tcp_sent+0x3c>)
 800c27a:	f007 f9f9 	bl	8013670 <iprintf>
    pcb->sent = sent;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	08015bb8 	.word	0x08015bb8
 800c290:	08015f00 	.word	0x08015f00
 800c294:	08015bf4 	.word	0x08015bf4

0800c298 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00e      	beq.n	800c2c6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7d1b      	ldrb	r3, [r3, #20]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d106      	bne.n	800c2be <tcp_err+0x26>
 800c2b0:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <tcp_err+0x38>)
 800c2b2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800c2b6:	4907      	ldr	r1, [pc, #28]	; (800c2d4 <tcp_err+0x3c>)
 800c2b8:	4807      	ldr	r0, [pc, #28]	; (800c2d8 <tcp_err+0x40>)
 800c2ba:	f007 f9d9 	bl	8013670 <iprintf>
    pcb->errf = err;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	08015bb8 	.word	0x08015bb8
 800c2d4:	08015f28 	.word	0x08015f28
 800c2d8:	08015bf4 	.word	0x08015bf4

0800c2dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d008      	beq.n	800c2fe <tcp_accept+0x22>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7d1b      	ldrb	r3, [r3, #20]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d104      	bne.n	800c2fe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	619a      	str	r2, [r3, #24]
  }
}
 800c2fe:	bf00      	nop
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr

0800c308 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	4613      	mov	r3, r2
 800c314:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	7d1b      	ldrb	r3, [r3, #20]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d106      	bne.n	800c32c <tcp_poll+0x24>
 800c31e:	4b09      	ldr	r3, [pc, #36]	; (800c344 <tcp_poll+0x3c>)
 800c320:	f240 7203 	movw	r2, #1795	; 0x703
 800c324:	4908      	ldr	r1, [pc, #32]	; (800c348 <tcp_poll+0x40>)
 800c326:	4809      	ldr	r0, [pc, #36]	; (800c34c <tcp_poll+0x44>)
 800c328:	f007 f9a2 	bl	8013670 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	68ba      	ldr	r2, [r7, #8]
 800c330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	79fa      	ldrb	r2, [r7, #7]
 800c338:	771a      	strb	r2, [r3, #28]
}
 800c33a:	bf00      	nop
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	08015bb8 	.word	0x08015bb8
 800c348:	08015f50 	.word	0x08015f50
 800c34c:	08015bf4 	.word	0x08015bf4

0800c350 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7d1b      	ldrb	r3, [r3, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d034      	beq.n	800c3ca <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c364:	2b0a      	cmp	r3, #10
 800c366:	d030      	beq.n	800c3ca <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d02c      	beq.n	800c3ca <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c374:	2b00      	cmp	r3, #0
 800c376:	d007      	beq.n	800c388 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fe fa1b 	bl	800a7b8 <pbuf_free>
      pcb->refused_data = NULL;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff fd7a 	bl	800be86 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c39e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7ff fd6e 	bl	800be86 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff fd69 	bl	800be86 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	669a      	str	r2, [r3, #104]	; 0x68
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d105      	bne.n	800c3f4 <tcp_pcb_remove+0x20>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68da      	ldr	r2, [r3, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	e013      	b.n	800c41c <tcp_pcb_remove+0x48>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	e00c      	b.n	800c416 <tcp_pcb_remove+0x42>
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d104      	bne.n	800c410 <tcp_pcb_remove+0x3c>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68da      	ldr	r2, [r3, #12]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	60da      	str	r2, [r3, #12]
 800c40e:	e005      	b.n	800c41c <tcp_pcb_remove+0x48>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	60fb      	str	r3, [r7, #12]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1ef      	bne.n	800c3fc <tcp_pcb_remove+0x28>
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2200      	movs	r2, #0
 800c420:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c422:	6838      	ldr	r0, [r7, #0]
 800c424:	f7ff ff94 	bl	800c350 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	7d1b      	ldrb	r3, [r3, #20]
 800c42c:	2b0a      	cmp	r3, #10
 800c42e:	d013      	beq.n	800c458 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800c434:	2b01      	cmp	r3, #1
 800c436:	d00f      	beq.n	800c458 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	7e9b      	ldrb	r3, [r3, #26]
 800c43c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800c440:	2b00      	cmp	r3, #0
 800c442:	d009      	beq.n	800c458 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	7e9b      	ldrb	r3, [r3, #26]
 800c448:	f043 0302 	orr.w	r3, r3, #2
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c452:	6838      	ldr	r0, [r7, #0]
 800c454:	f003 f9b8 	bl	800f7c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	7d1b      	ldrb	r3, [r3, #20]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d020      	beq.n	800c4a2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c464:	2b00      	cmp	r3, #0
 800c466:	d006      	beq.n	800c476 <tcp_pcb_remove+0xa2>
 800c468:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <tcp_pcb_remove+0xe4>)
 800c46a:	f240 7253 	movw	r2, #1875	; 0x753
 800c46e:	4913      	ldr	r1, [pc, #76]	; (800c4bc <tcp_pcb_remove+0xe8>)
 800c470:	4813      	ldr	r0, [pc, #76]	; (800c4c0 <tcp_pcb_remove+0xec>)
 800c472:	f007 f8fd 	bl	8013670 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d006      	beq.n	800c48c <tcp_pcb_remove+0xb8>
 800c47e:	4b0e      	ldr	r3, [pc, #56]	; (800c4b8 <tcp_pcb_remove+0xe4>)
 800c480:	f240 7254 	movw	r2, #1876	; 0x754
 800c484:	490f      	ldr	r1, [pc, #60]	; (800c4c4 <tcp_pcb_remove+0xf0>)
 800c486:	480e      	ldr	r0, [pc, #56]	; (800c4c0 <tcp_pcb_remove+0xec>)
 800c488:	f007 f8f2 	bl	8013670 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c490:	2b00      	cmp	r3, #0
 800c492:	d006      	beq.n	800c4a2 <tcp_pcb_remove+0xce>
 800c494:	4b08      	ldr	r3, [pc, #32]	; (800c4b8 <tcp_pcb_remove+0xe4>)
 800c496:	f240 7256 	movw	r2, #1878	; 0x756
 800c49a:	490b      	ldr	r1, [pc, #44]	; (800c4c8 <tcp_pcb_remove+0xf4>)
 800c49c:	4808      	ldr	r0, [pc, #32]	; (800c4c0 <tcp_pcb_remove+0xec>)
 800c49e:	f007 f8e7 	bl	8013670 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	08015bb8 	.word	0x08015bb8
 800c4bc:	08015f70 	.word	0x08015f70
 800c4c0:	08015bf4 	.word	0x08015bf4
 800c4c4:	08015f88 	.word	0x08015f88
 800c4c8:	08015fa4 	.word	0x08015fa4

0800c4cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c4d4:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <tcp_next_iss+0x24>)
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	4b06      	ldr	r3, [pc, #24]	; (800c4f4 <tcp_next_iss+0x28>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4413      	add	r3, r2
 800c4de:	4a04      	ldr	r2, [pc, #16]	; (800c4f0 <tcp_next_iss+0x24>)
 800c4e0:	6013      	str	r3, [r2, #0]
  return iss;
 800c4e2:	4b03      	ldr	r3, [pc, #12]	; (800c4f0 <tcp_next_iss+0x24>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bc80      	pop	{r7}
 800c4ee:	4770      	bx	lr
 800c4f0:	20000018 	.word	0x20000018
 800c4f4:	2000b7ac 	.word	0x2000b7ac

0800c4f8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	6039      	str	r1, [r7, #0]
 800c502:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800c504:	6838      	ldr	r0, [r7, #0]
 800c506:	f005 fc27 	bl	8011d58 <ip4_route>
 800c50a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800c512:	88fb      	ldrh	r3, [r7, #6]
 800c514:	e010      	b.n	800c538 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c51a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c51c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d008      	beq.n	800c536 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800c524:	897b      	ldrh	r3, [r7, #10]
 800c526:	3b28      	subs	r3, #40	; 0x28
 800c528:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c52a:	893a      	ldrh	r2, [r7, #8]
 800c52c:	88fb      	ldrh	r3, [r7, #6]
 800c52e:	4293      	cmp	r3, r2
 800c530:	bf28      	it	cs
 800c532:	4613      	movcs	r3, r2
 800c534:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800c536:	88fb      	ldrh	r3, [r7, #6]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c54e:	e011      	b.n	800c574 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d108      	bne.n	800c56e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7fe fe82 	bl	800b26c <tcp_abort>
      pcb = next;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	e002      	b.n	800c574 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1ea      	bne.n	800c550 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800c57a:	bf00      	nop
 800c57c:	bf00      	nop
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02c      	beq.n	800c5ee <tcp_netif_ip_addr_changed+0x6a>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d028      	beq.n	800c5ee <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c59c:	4b16      	ldr	r3, [pc, #88]	; (800c5f8 <tcp_netif_ip_addr_changed+0x74>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff ffcc 	bl	800c540 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c5a8:	4b14      	ldr	r3, [pc, #80]	; (800c5fc <tcp_netif_ip_addr_changed+0x78>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff ffc6 	bl	800c540 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d019      	beq.n	800c5ee <tcp_netif_ip_addr_changed+0x6a>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d015      	beq.n	800c5ee <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c5c2:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <tcp_netif_ip_addr_changed+0x7c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]
 800c5c8:	e00e      	b.n	800c5e8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d103      	bne.n	800c5e4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	60fb      	str	r3, [r7, #12]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1ed      	bne.n	800c5ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c5ee:	bf00      	nop
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	2000b7b8 	.word	0x2000b7b8
 800c5fc:	2000b7b0 	.word	0x2000b7b0
 800c600:	2000b7b4 	.word	0x2000b7b4

0800c604 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c604:	b590      	push	{r4, r7, lr}
 800c606:	b08b      	sub	sp, #44	; 0x2c
 800c608:	af02      	add	r7, sp, #8
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	4a82      	ldr	r2, [pc, #520]	; (800c81c <tcp_input+0x218>)
 800c614:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	895b      	ldrh	r3, [r3, #10]
 800c61a:	2b13      	cmp	r3, #19
 800c61c:	f240 8398 	bls.w	800cd50 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c620:	4b7f      	ldr	r3, [pc, #508]	; (800c820 <tcp_input+0x21c>)
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	4a7e      	ldr	r2, [pc, #504]	; (800c820 <tcp_input+0x21c>)
 800c626:	6812      	ldr	r2, [r2, #0]
 800c628:	4611      	mov	r1, r2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f005 fe10 	bl	8012250 <ip4_addr_isbroadcast_u32>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	f040 838e 	bne.w	800cd54 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c638:	4b79      	ldr	r3, [pc, #484]	; (800c820 <tcp_input+0x21c>)
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c640:	2be0      	cmp	r3, #224	; 0xe0
 800c642:	f000 8387 	beq.w	800cd54 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800c646:	4b75      	ldr	r3, [pc, #468]	; (800c81c <tcp_input+0x218>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	899b      	ldrh	r3, [r3, #12]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fc feba 	bl	80093c8 <lwip_htons>
 800c654:	4603      	mov	r3, r0
 800c656:	0b1b      	lsrs	r3, r3, #12
 800c658:	b29b      	uxth	r3, r3
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c660:	7cbb      	ldrb	r3, [r7, #18]
 800c662:	2b13      	cmp	r3, #19
 800c664:	f240 8378 	bls.w	800cd58 <tcp_input+0x754>
 800c668:	7cbb      	ldrb	r3, [r7, #18]
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	891b      	ldrh	r3, [r3, #8]
 800c670:	429a      	cmp	r2, r3
 800c672:	f200 8371 	bhi.w	800cd58 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800c676:	7cbb      	ldrb	r3, [r7, #18]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	3b14      	subs	r3, #20
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	4b69      	ldr	r3, [pc, #420]	; (800c824 <tcp_input+0x220>)
 800c680:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c682:	4b69      	ldr	r3, [pc, #420]	; (800c828 <tcp_input+0x224>)
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	895a      	ldrh	r2, [r3, #10]
 800c68c:	7cbb      	ldrb	r3, [r7, #18]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	429a      	cmp	r2, r3
 800c692:	d30d      	bcc.n	800c6b0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c694:	4b63      	ldr	r3, [pc, #396]	; (800c824 <tcp_input+0x220>)
 800c696:	881a      	ldrh	r2, [r3, #0]
 800c698:	4b64      	ldr	r3, [pc, #400]	; (800c82c <tcp_input+0x228>)
 800c69a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800c69c:	7cbb      	ldrb	r3, [r7, #18]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	425b      	negs	r3, r3
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	b21b      	sxth	r3, r3
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7fe f861 	bl	800a770 <pbuf_header>
 800c6ae:	e055      	b.n	800c75c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d105      	bne.n	800c6c4 <tcp_input+0xc0>
 800c6b8:	4b5d      	ldr	r3, [pc, #372]	; (800c830 <tcp_input+0x22c>)
 800c6ba:	22b2      	movs	r2, #178	; 0xb2
 800c6bc:	495d      	ldr	r1, [pc, #372]	; (800c834 <tcp_input+0x230>)
 800c6be:	485e      	ldr	r0, [pc, #376]	; (800c838 <tcp_input+0x234>)
 800c6c0:	f006 ffd6 	bl	8013670 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800c6c4:	f06f 0113 	mvn.w	r1, #19
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7fe f851 	bl	800a770 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	895a      	ldrh	r2, [r3, #10]
 800c6d2:	4b56      	ldr	r3, [pc, #344]	; (800c82c <tcp_input+0x228>)
 800c6d4:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800c6d6:	4b53      	ldr	r3, [pc, #332]	; (800c824 <tcp_input+0x220>)
 800c6d8:	881a      	ldrh	r2, [r3, #0]
 800c6da:	4b54      	ldr	r3, [pc, #336]	; (800c82c <tcp_input+0x228>)
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c6e2:	4b52      	ldr	r3, [pc, #328]	; (800c82c <tcp_input+0x228>)
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	425b      	negs	r3, r3
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	b21b      	sxth	r3, r3
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7fe f83e 	bl	800a770 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	895b      	ldrh	r3, [r3, #10]
 800c6fa:	8a3a      	ldrh	r2, [r7, #16]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	f200 832d 	bhi.w	800cd5c <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	4a47      	ldr	r2, [pc, #284]	; (800c828 <tcp_input+0x224>)
 800c70a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	8a3b      	ldrh	r3, [r7, #16]
 800c712:	425b      	negs	r3, r3
 800c714:	b29b      	uxth	r3, r3
 800c716:	b21b      	sxth	r3, r3
 800c718:	4619      	mov	r1, r3
 800c71a:	4610      	mov	r0, r2
 800c71c:	f7fe f828 	bl	800a770 <pbuf_header>
    p->tot_len -= opt2len;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	891a      	ldrh	r2, [r3, #8]
 800c724:	8a3b      	ldrh	r3, [r7, #16]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	b29a      	uxth	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	895b      	ldrh	r3, [r3, #10]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <tcp_input+0x13e>
 800c736:	4b3e      	ldr	r3, [pc, #248]	; (800c830 <tcp_input+0x22c>)
 800c738:	22cf      	movs	r2, #207	; 0xcf
 800c73a:	4940      	ldr	r1, [pc, #256]	; (800c83c <tcp_input+0x238>)
 800c73c:	483e      	ldr	r0, [pc, #248]	; (800c838 <tcp_input+0x234>)
 800c73e:	f006 ff97 	bl	8013670 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	891a      	ldrh	r2, [r3, #8]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	891b      	ldrh	r3, [r3, #8]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d005      	beq.n	800c75c <tcp_input+0x158>
 800c750:	4b37      	ldr	r3, [pc, #220]	; (800c830 <tcp_input+0x22c>)
 800c752:	22d0      	movs	r2, #208	; 0xd0
 800c754:	493a      	ldr	r1, [pc, #232]	; (800c840 <tcp_input+0x23c>)
 800c756:	4838      	ldr	r0, [pc, #224]	; (800c838 <tcp_input+0x234>)
 800c758:	f006 ff8a 	bl	8013670 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c75c:	4b2f      	ldr	r3, [pc, #188]	; (800c81c <tcp_input+0x218>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	b29b      	uxth	r3, r3
 800c764:	4a2d      	ldr	r2, [pc, #180]	; (800c81c <tcp_input+0x218>)
 800c766:	6814      	ldr	r4, [r2, #0]
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fc fe2d 	bl	80093c8 <lwip_htons>
 800c76e:	4603      	mov	r3, r0
 800c770:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c772:	4b2a      	ldr	r3, [pc, #168]	; (800c81c <tcp_input+0x218>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	885b      	ldrh	r3, [r3, #2]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	4a28      	ldr	r2, [pc, #160]	; (800c81c <tcp_input+0x218>)
 800c77c:	6814      	ldr	r4, [r2, #0]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fc fe22 	bl	80093c8 <lwip_htons>
 800c784:	4603      	mov	r3, r0
 800c786:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c788:	4b24      	ldr	r3, [pc, #144]	; (800c81c <tcp_input+0x218>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	4a23      	ldr	r2, [pc, #140]	; (800c81c <tcp_input+0x218>)
 800c790:	6814      	ldr	r4, [r2, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f7fc fe25 	bl	80093e2 <lwip_htonl>
 800c798:	4603      	mov	r3, r0
 800c79a:	6063      	str	r3, [r4, #4]
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	4a29      	ldr	r2, [pc, #164]	; (800c844 <tcp_input+0x240>)
 800c7a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c7a2:	4b1e      	ldr	r3, [pc, #120]	; (800c81c <tcp_input+0x218>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	4a1c      	ldr	r2, [pc, #112]	; (800c81c <tcp_input+0x218>)
 800c7aa:	6814      	ldr	r4, [r2, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fc fe18 	bl	80093e2 <lwip_htonl>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	4a23      	ldr	r2, [pc, #140]	; (800c848 <tcp_input+0x244>)
 800c7ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c7bc:	4b17      	ldr	r3, [pc, #92]	; (800c81c <tcp_input+0x218>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	89db      	ldrh	r3, [r3, #14]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4a15      	ldr	r2, [pc, #84]	; (800c81c <tcp_input+0x218>)
 800c7c6:	6814      	ldr	r4, [r2, #0]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fc fdfd 	bl	80093c8 <lwip_htons>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c7d2:	4b12      	ldr	r3, [pc, #72]	; (800c81c <tcp_input+0x218>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	899b      	ldrh	r3, [r3, #12]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fc fdf4 	bl	80093c8 <lwip_htons>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	4b18      	ldr	r3, [pc, #96]	; (800c84c <tcp_input+0x248>)
 800c7ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	891a      	ldrh	r2, [r3, #8]
 800c7f2:	4b16      	ldr	r3, [pc, #88]	; (800c84c <tcp_input+0x248>)
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	f003 0303 	and.w	r3, r3, #3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bf14      	ite	ne
 800c7fe:	2301      	movne	r3, #1
 800c800:	2300      	moveq	r3, #0
 800c802:	b2db      	uxtb	r3, r3
 800c804:	b29b      	uxth	r3, r3
 800c806:	4413      	add	r3, r2
 800c808:	b29a      	uxth	r2, r3
 800c80a:	4b11      	ldr	r3, [pc, #68]	; (800c850 <tcp_input+0x24c>)
 800c80c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c812:	4b10      	ldr	r3, [pc, #64]	; (800c854 <tcp_input+0x250>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	e082      	b.n	800c920 <tcp_input+0x31c>
 800c81a:	bf00      	nop
 800c81c:	2000b7d4 	.word	0x2000b7d4
 800c820:	2000805c 	.word	0x2000805c
 800c824:	2000b7d8 	.word	0x2000b7d8
 800c828:	2000b7dc 	.word	0x2000b7dc
 800c82c:	2000b7da 	.word	0x2000b7da
 800c830:	08015fbc 	.word	0x08015fbc
 800c834:	08015ff0 	.word	0x08015ff0
 800c838:	08016000 	.word	0x08016000
 800c83c:	08016028 	.word	0x08016028
 800c840:	08016034 	.word	0x08016034
 800c844:	2000b7e4 	.word	0x2000b7e4
 800c848:	2000b7e8 	.word	0x2000b7e8
 800c84c:	2000b7f0 	.word	0x2000b7f0
 800c850:	2000b7ee 	.word	0x2000b7ee
 800c854:	2000b7b8 	.word	0x2000b7b8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d105      	bne.n	800c86c <tcp_input+0x268>
 800c860:	4b6e      	ldr	r3, [pc, #440]	; (800ca1c <tcp_input+0x418>)
 800c862:	22e2      	movs	r2, #226	; 0xe2
 800c864:	496e      	ldr	r1, [pc, #440]	; (800ca20 <tcp_input+0x41c>)
 800c866:	486f      	ldr	r0, [pc, #444]	; (800ca24 <tcp_input+0x420>)
 800c868:	f006 ff02 	bl	8013670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	7d1b      	ldrb	r3, [r3, #20]
 800c870:	2b0a      	cmp	r3, #10
 800c872:	d105      	bne.n	800c880 <tcp_input+0x27c>
 800c874:	4b69      	ldr	r3, [pc, #420]	; (800ca1c <tcp_input+0x418>)
 800c876:	22e3      	movs	r2, #227	; 0xe3
 800c878:	496b      	ldr	r1, [pc, #428]	; (800ca28 <tcp_input+0x424>)
 800c87a:	486a      	ldr	r0, [pc, #424]	; (800ca24 <tcp_input+0x420>)
 800c87c:	f006 fef8 	bl	8013670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	7d1b      	ldrb	r3, [r3, #20]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d105      	bne.n	800c894 <tcp_input+0x290>
 800c888:	4b64      	ldr	r3, [pc, #400]	; (800ca1c <tcp_input+0x418>)
 800c88a:	22e4      	movs	r2, #228	; 0xe4
 800c88c:	4967      	ldr	r1, [pc, #412]	; (800ca2c <tcp_input+0x428>)
 800c88e:	4865      	ldr	r0, [pc, #404]	; (800ca24 <tcp_input+0x420>)
 800c890:	f006 feee 	bl	8013670 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	8b1a      	ldrh	r2, [r3, #24]
 800c898:	4b65      	ldr	r3, [pc, #404]	; (800ca30 <tcp_input+0x42c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d138      	bne.n	800c916 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	8ada      	ldrh	r2, [r3, #22]
 800c8a8:	4b61      	ldr	r3, [pc, #388]	; (800ca30 <tcp_input+0x42c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d130      	bne.n	800c916 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	4b5e      	ldr	r3, [pc, #376]	; (800ca34 <tcp_input+0x430>)
 800c8ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d12a      	bne.n	800c916 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	4b5b      	ldr	r3, [pc, #364]	; (800ca34 <tcp_input+0x430>)
 800c8c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d124      	bne.n	800c916 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	69fa      	ldr	r2, [r7, #28]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d105      	bne.n	800c8e2 <tcp_input+0x2de>
 800c8d6:	4b51      	ldr	r3, [pc, #324]	; (800ca1c <tcp_input+0x418>)
 800c8d8:	22ec      	movs	r2, #236	; 0xec
 800c8da:	4957      	ldr	r1, [pc, #348]	; (800ca38 <tcp_input+0x434>)
 800c8dc:	4851      	ldr	r0, [pc, #324]	; (800ca24 <tcp_input+0x420>)
 800c8de:	f006 fec7 	bl	8013670 <iprintf>
      if (prev != NULL) {
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00a      	beq.n	800c8fe <tcp_input+0x2fa>
        prev->next = pcb->next;
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	68da      	ldr	r2, [r3, #12]
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c8f0:	4b52      	ldr	r3, [pc, #328]	; (800ca3c <tcp_input+0x438>)
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c8f8:	4a50      	ldr	r2, [pc, #320]	; (800ca3c <tcp_input+0x438>)
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	69fa      	ldr	r2, [r7, #28]
 800c904:	429a      	cmp	r2, r3
 800c906:	d10f      	bne.n	800c928 <tcp_input+0x324>
 800c908:	4b44      	ldr	r3, [pc, #272]	; (800ca1c <tcp_input+0x418>)
 800c90a:	22f4      	movs	r2, #244	; 0xf4
 800c90c:	494c      	ldr	r1, [pc, #304]	; (800ca40 <tcp_input+0x43c>)
 800c90e:	4845      	ldr	r0, [pc, #276]	; (800ca24 <tcp_input+0x420>)
 800c910:	f006 feae 	bl	8013670 <iprintf>
      break;
 800c914:	e008      	b.n	800c928 <tcp_input+0x324>
    }
    prev = pcb;
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	61fb      	str	r3, [r7, #28]
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d198      	bne.n	800c858 <tcp_input+0x254>
 800c926:	e000      	b.n	800c92a <tcp_input+0x326>
      break;
 800c928:	bf00      	nop
  }

  if (pcb == NULL) {
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f040 808f 	bne.w	800ca50 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c932:	4b44      	ldr	r3, [pc, #272]	; (800ca44 <tcp_input+0x440>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	61fb      	str	r3, [r7, #28]
 800c938:	e02f      	b.n	800c99a <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	7d1b      	ldrb	r3, [r3, #20]
 800c93e:	2b0a      	cmp	r3, #10
 800c940:	d005      	beq.n	800c94e <tcp_input+0x34a>
 800c942:	4b36      	ldr	r3, [pc, #216]	; (800ca1c <tcp_input+0x418>)
 800c944:	22fe      	movs	r2, #254	; 0xfe
 800c946:	4940      	ldr	r1, [pc, #256]	; (800ca48 <tcp_input+0x444>)
 800c948:	4836      	ldr	r0, [pc, #216]	; (800ca24 <tcp_input+0x420>)
 800c94a:	f006 fe91 	bl	8013670 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	8b1a      	ldrh	r2, [r3, #24]
 800c952:	4b37      	ldr	r3, [pc, #220]	; (800ca30 <tcp_input+0x42c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d11a      	bne.n	800c994 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	8ada      	ldrh	r2, [r3, #22]
 800c962:	4b33      	ldr	r3, [pc, #204]	; (800ca30 <tcp_input+0x42c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	885b      	ldrh	r3, [r3, #2]
 800c968:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d112      	bne.n	800c994 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	4b30      	ldr	r3, [pc, #192]	; (800ca34 <tcp_input+0x430>)
 800c974:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c976:	429a      	cmp	r2, r3
 800c978:	d10c      	bne.n	800c994 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	4b2d      	ldr	r3, [pc, #180]	; (800ca34 <tcp_input+0x430>)
 800c980:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c982:	429a      	cmp	r2, r3
 800c984:	d106      	bne.n	800c994 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800c986:	69f8      	ldr	r0, [r7, #28]
 800c988:	f000 fb16 	bl	800cfb8 <tcp_timewait_input>
        pbuf_free(p);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7fd ff13 	bl	800a7b8 <pbuf_free>
        return;
 800c992:	e1e9      	b.n	800cd68 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	61fb      	str	r3, [r7, #28]
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1cc      	bne.n	800c93a <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9a4:	4b29      	ldr	r3, [pc, #164]	; (800ca4c <tcp_input+0x448>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	617b      	str	r3, [r7, #20]
 800c9aa:	e019      	b.n	800c9e0 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	8ada      	ldrh	r2, [r3, #22]
 800c9b0:	4b1f      	ldr	r3, [pc, #124]	; (800ca30 <tcp_input+0x42c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d10c      	bne.n	800c9d6 <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	4b1c      	ldr	r3, [pc, #112]	; (800ca34 <tcp_input+0x430>)
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d00f      	beq.n	800c9e8 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00d      	beq.n	800c9ea <tcp_input+0x3e6>
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d009      	beq.n	800c9ea <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	617b      	str	r3, [r7, #20]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e2      	bne.n	800c9ac <tcp_input+0x3a8>
 800c9e6:	e000      	b.n	800c9ea <tcp_input+0x3e6>
            break;
 800c9e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d02f      	beq.n	800ca50 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00a      	beq.n	800ca0c <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	68da      	ldr	r2, [r3, #12]
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <tcp_input+0x448>)
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ca06:	4a11      	ldr	r2, [pc, #68]	; (800ca4c <tcp_input+0x448>)
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800ca0c:	6978      	ldr	r0, [r7, #20]
 800ca0e:	f000 f9f3 	bl	800cdf8 <tcp_listen_input>
      pbuf_free(p);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7fd fed0 	bl	800a7b8 <pbuf_free>
      return;
 800ca18:	e1a6      	b.n	800cd68 <tcp_input+0x764>
 800ca1a:	bf00      	nop
 800ca1c:	08015fbc 	.word	0x08015fbc
 800ca20:	08016054 	.word	0x08016054
 800ca24:	08016000 	.word	0x08016000
 800ca28:	0801607c 	.word	0x0801607c
 800ca2c:	080160a8 	.word	0x080160a8
 800ca30:	2000b7d4 	.word	0x2000b7d4
 800ca34:	2000805c 	.word	0x2000805c
 800ca38:	080160d0 	.word	0x080160d0
 800ca3c:	2000b7b8 	.word	0x2000b7b8
 800ca40:	080160fc 	.word	0x080160fc
 800ca44:	2000b7bc 	.word	0x2000b7bc
 800ca48:	08016128 	.word	0x08016128
 800ca4c:	2000b7b4 	.word	0x2000b7b4
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 8156 	beq.w	800cd04 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ca58:	4b94      	ldr	r3, [pc, #592]	; (800ccac <tcp_input+0x6a8>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	891a      	ldrh	r2, [r3, #8]
 800ca62:	4b92      	ldr	r3, [pc, #584]	; (800ccac <tcp_input+0x6a8>)
 800ca64:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ca66:	4a91      	ldr	r2, [pc, #580]	; (800ccac <tcp_input+0x6a8>)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ca6c:	4b90      	ldr	r3, [pc, #576]	; (800ccb0 <tcp_input+0x6ac>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a8e      	ldr	r2, [pc, #568]	; (800ccac <tcp_input+0x6a8>)
 800ca72:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ca74:	4b8f      	ldr	r3, [pc, #572]	; (800ccb4 <tcp_input+0x6b0>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ca7a:	4b8f      	ldr	r3, [pc, #572]	; (800ccb8 <tcp_input+0x6b4>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ca80:	4b8e      	ldr	r3, [pc, #568]	; (800ccbc <tcp_input+0x6b8>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ca86:	4b8e      	ldr	r3, [pc, #568]	; (800ccc0 <tcp_input+0x6bc>)
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	f003 0308 	and.w	r3, r3, #8
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d006      	beq.n	800caa0 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	7b5b      	ldrb	r3, [r3, #13]
 800ca96:	f043 0301 	orr.w	r3, r3, #1
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d017      	beq.n	800cad8 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800caa8:	69f8      	ldr	r0, [r7, #28]
 800caaa:	f7ff f983 	bl	800bdb4 <tcp_process_refused_data>
 800caae:	4603      	mov	r3, r0
 800cab0:	f113 0f0d 	cmn.w	r3, #13
 800cab4:	d007      	beq.n	800cac6 <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00c      	beq.n	800cad8 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cabe:	4b81      	ldr	r3, [pc, #516]	; (800ccc4 <tcp_input+0x6c0>)
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d008      	beq.n	800cad8 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f040 80e2 	bne.w	800cc94 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cad0:	69f8      	ldr	r0, [r7, #28]
 800cad2:	f002 fe1d 	bl	800f710 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cad6:	e0dd      	b.n	800cc94 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 800cad8:	4a7b      	ldr	r2, [pc, #492]	; (800ccc8 <tcp_input+0x6c4>)
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cade:	69f8      	ldr	r0, [r7, #28]
 800cae0:	f000 fad2 	bl	800d088 <tcp_process>
 800cae4:	4603      	mov	r3, r0
 800cae6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cae8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caec:	f113 0f0d 	cmn.w	r3, #13
 800caf0:	f000 80d2 	beq.w	800cc98 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 800caf4:	4b70      	ldr	r3, [pc, #448]	; (800ccb8 <tcp_input+0x6b4>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 0308 	and.w	r3, r3, #8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d016      	beq.n	800cb2e <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d008      	beq.n	800cb1c <tcp_input+0x518>
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb10:	69fa      	ldr	r2, [r7, #28]
 800cb12:	6912      	ldr	r2, [r2, #16]
 800cb14:	f06f 010d 	mvn.w	r1, #13
 800cb18:	4610      	mov	r0, r2
 800cb1a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb1c:	69f9      	ldr	r1, [r7, #28]
 800cb1e:	486b      	ldr	r0, [pc, #428]	; (800cccc <tcp_input+0x6c8>)
 800cb20:	f7ff fc58 	bl	800c3d4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	2001      	movs	r0, #1
 800cb28:	f7fd f88c 	bl	8009c44 <memp_free>
 800cb2c:	e0d7      	b.n	800ccde <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cb32:	4b62      	ldr	r3, [pc, #392]	; (800ccbc <tcp_input+0x6b8>)
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d01b      	beq.n	800cb72 <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cb3a:	4b60      	ldr	r3, [pc, #384]	; (800ccbc <tcp_input+0x6b8>)
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d009      	beq.n	800cb5c <tcp_input+0x558>
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb4c:	69fa      	ldr	r2, [r7, #28]
 800cb4e:	6910      	ldr	r0, [r2, #16]
 800cb50:	89fa      	ldrh	r2, [r7, #14]
 800cb52:	69f9      	ldr	r1, [r7, #28]
 800cb54:	4798      	blx	r3
 800cb56:	4603      	mov	r3, r0
 800cb58:	74fb      	strb	r3, [r7, #19]
 800cb5a:	e001      	b.n	800cb60 <tcp_input+0x55c>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb64:	f113 0f0d 	cmn.w	r3, #13
 800cb68:	f000 8098 	beq.w	800cc9c <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cb6c:	4b53      	ldr	r3, [pc, #332]	; (800ccbc <tcp_input+0x6b8>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cb72:	69f8      	ldr	r0, [r7, #28]
 800cb74:	f000 f90e 	bl	800cd94 <tcp_input_delayed_close>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f040 8090 	bne.w	800cca0 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cb80:	4b4c      	ldr	r3, [pc, #304]	; (800ccb4 <tcp_input+0x6b0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d041      	beq.n	800cc0c <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d006      	beq.n	800cb9e <tcp_input+0x59a>
 800cb90:	4b4f      	ldr	r3, [pc, #316]	; (800ccd0 <tcp_input+0x6cc>)
 800cb92:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800cb96:	494f      	ldr	r1, [pc, #316]	; (800ccd4 <tcp_input+0x6d0>)
 800cb98:	484f      	ldr	r0, [pc, #316]	; (800ccd8 <tcp_input+0x6d4>)
 800cb9a:	f006 fd69 	bl	8013670 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	7e9b      	ldrb	r3, [r3, #26]
 800cba2:	f003 0310 	and.w	r3, r3, #16
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d008      	beq.n	800cbbc <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cbaa:	4b42      	ldr	r3, [pc, #264]	; (800ccb4 <tcp_input+0x6b0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fd fe02 	bl	800a7b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cbb4:	69f8      	ldr	r0, [r7, #28]
 800cbb6:	f7fe fb59 	bl	800b26c <tcp_abort>
            goto aborted;
 800cbba:	e090      	b.n	800ccde <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00c      	beq.n	800cbe0 <tcp_input+0x5dc>
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	6918      	ldr	r0, [r3, #16]
 800cbd0:	4b38      	ldr	r3, [pc, #224]	; (800ccb4 <tcp_input+0x6b0>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	69f9      	ldr	r1, [r7, #28]
 800cbd8:	47a0      	blx	r4
 800cbda:	4603      	mov	r3, r0
 800cbdc:	74fb      	strb	r3, [r7, #19]
 800cbde:	e008      	b.n	800cbf2 <tcp_input+0x5ee>
 800cbe0:	4b34      	ldr	r3, [pc, #208]	; (800ccb4 <tcp_input+0x6b0>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	69f9      	ldr	r1, [r7, #28]
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f7ff f995 	bl	800bf18 <tcp_recv_null>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cbf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbf6:	f113 0f0d 	cmn.w	r3, #13
 800cbfa:	d053      	beq.n	800cca4 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cbfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d003      	beq.n	800cc0c <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cc04:	4b2b      	ldr	r3, [pc, #172]	; (800ccb4 <tcp_input+0x6b0>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cc0c:	4b2a      	ldr	r3, [pc, #168]	; (800ccb8 <tcp_input+0x6b4>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	f003 0320 	and.w	r3, r3, #32
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d030      	beq.n	800cc7a <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d009      	beq.n	800cc34 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc24:	7b5a      	ldrb	r2, [r3, #13]
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc2a:	f042 0220 	orr.w	r2, r2, #32
 800cc2e:	b2d2      	uxtb	r2, r2
 800cc30:	735a      	strb	r2, [r3, #13]
 800cc32:	e022      	b.n	800cc7a <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc3c:	d005      	beq.n	800cc4a <tcp_input+0x646>
              pcb->rcv_wnd++;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc42:	3301      	adds	r3, #1
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00b      	beq.n	800cc6c <tcp_input+0x668>
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	6918      	ldr	r0, [r3, #16]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	2200      	movs	r2, #0
 800cc62:	69f9      	ldr	r1, [r7, #28]
 800cc64:	47a0      	blx	r4
 800cc66:	4603      	mov	r3, r0
 800cc68:	74fb      	strb	r3, [r7, #19]
 800cc6a:	e001      	b.n	800cc70 <tcp_input+0x66c>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cc70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc74:	f113 0f0d 	cmn.w	r3, #13
 800cc78:	d016      	beq.n	800cca8 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cc7a:	4b13      	ldr	r3, [pc, #76]	; (800ccc8 <tcp_input+0x6c4>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cc80:	69f8      	ldr	r0, [r7, #28]
 800cc82:	f000 f887 	bl	800cd94 <tcp_input_delayed_close>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d127      	bne.n	800ccdc <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cc8c:	69f8      	ldr	r0, [r7, #28]
 800cc8e:	f002 fd9b 	bl	800f7c8 <tcp_output>
 800cc92:	e024      	b.n	800ccde <tcp_input+0x6da>
        goto aborted;
 800cc94:	bf00      	nop
 800cc96:	e022      	b.n	800ccde <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cc98:	bf00      	nop
 800cc9a:	e020      	b.n	800ccde <tcp_input+0x6da>
              goto aborted;
 800cc9c:	bf00      	nop
 800cc9e:	e01e      	b.n	800ccde <tcp_input+0x6da>
          goto aborted;
 800cca0:	bf00      	nop
 800cca2:	e01c      	b.n	800ccde <tcp_input+0x6da>
            goto aborted;
 800cca4:	bf00      	nop
 800cca6:	e01a      	b.n	800ccde <tcp_input+0x6da>
              goto aborted;
 800cca8:	bf00      	nop
 800ccaa:	e018      	b.n	800ccde <tcp_input+0x6da>
 800ccac:	2000b7c4 	.word	0x2000b7c4
 800ccb0:	2000b7d4 	.word	0x2000b7d4
 800ccb4:	2000b7f4 	.word	0x2000b7f4
 800ccb8:	2000b7f1 	.word	0x2000b7f1
 800ccbc:	2000b7ec 	.word	0x2000b7ec
 800ccc0:	2000b7f0 	.word	0x2000b7f0
 800ccc4:	2000b7ee 	.word	0x2000b7ee
 800ccc8:	2000b7f8 	.word	0x2000b7f8
 800cccc:	2000b7b8 	.word	0x2000b7b8
 800ccd0:	08015fbc 	.word	0x08015fbc
 800ccd4:	08016158 	.word	0x08016158
 800ccd8:	08016000 	.word	0x08016000
          goto aborted;
 800ccdc:	bf00      	nop
    tcp_input_pcb = NULL;
 800ccde:	4b24      	ldr	r3, [pc, #144]	; (800cd70 <tcp_input+0x76c>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cce4:	4b23      	ldr	r3, [pc, #140]	; (800cd74 <tcp_input+0x770>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ccea:	4b23      	ldr	r3, [pc, #140]	; (800cd78 <tcp_input+0x774>)
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d039      	beq.n	800cd66 <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 800ccf2:	4b21      	ldr	r3, [pc, #132]	; (800cd78 <tcp_input+0x774>)
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fd fd5e 	bl	800a7b8 <pbuf_free>
      inseg.p = NULL;
 800ccfc:	4b1e      	ldr	r3, [pc, #120]	; (800cd78 <tcp_input+0x774>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cd02:	e030      	b.n	800cd66 <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cd04:	4b1d      	ldr	r3, [pc, #116]	; (800cd7c <tcp_input+0x778>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	899b      	ldrh	r3, [r3, #12]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fc fb5b 	bl	80093c8 <lwip_htons>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d115      	bne.n	800cd48 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd1c:	4b18      	ldr	r3, [pc, #96]	; (800cd80 <tcp_input+0x77c>)
 800cd1e:	6818      	ldr	r0, [r3, #0]
 800cd20:	4b18      	ldr	r3, [pc, #96]	; (800cd84 <tcp_input+0x780>)
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	461a      	mov	r2, r3
 800cd26:	4b18      	ldr	r3, [pc, #96]	; (800cd88 <tcp_input+0x784>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd2c:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <tcp_input+0x778>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd30:	885b      	ldrh	r3, [r3, #2]
 800cd32:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd34:	4a11      	ldr	r2, [pc, #68]	; (800cd7c <tcp_input+0x778>)
 800cd36:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd38:	8812      	ldrh	r2, [r2, #0]
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	9201      	str	r2, [sp, #4]
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	4b12      	ldr	r3, [pc, #72]	; (800cd8c <tcp_input+0x788>)
 800cd42:	4a13      	ldr	r2, [pc, #76]	; (800cd90 <tcp_input+0x78c>)
 800cd44:	f002 ffc4 	bl	800fcd0 <tcp_rst>
    pbuf_free(p);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7fd fd35 	bl	800a7b8 <pbuf_free>
  return;
 800cd4e:	e00a      	b.n	800cd66 <tcp_input+0x762>
    goto dropped;
 800cd50:	bf00      	nop
 800cd52:	e004      	b.n	800cd5e <tcp_input+0x75a>
    goto dropped;
 800cd54:	bf00      	nop
 800cd56:	e002      	b.n	800cd5e <tcp_input+0x75a>
    goto dropped;
 800cd58:	bf00      	nop
 800cd5a:	e000      	b.n	800cd5e <tcp_input+0x75a>
      goto dropped;
 800cd5c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7fd fd2a 	bl	800a7b8 <pbuf_free>
 800cd64:	e000      	b.n	800cd68 <tcp_input+0x764>
  return;
 800cd66:	bf00      	nop
}
 800cd68:	3724      	adds	r7, #36	; 0x24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd90      	pop	{r4, r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	2000b7f8 	.word	0x2000b7f8
 800cd74:	2000b7f4 	.word	0x2000b7f4
 800cd78:	2000b7c4 	.word	0x2000b7c4
 800cd7c:	2000b7d4 	.word	0x2000b7d4
 800cd80:	2000b7e8 	.word	0x2000b7e8
 800cd84:	2000b7ee 	.word	0x2000b7ee
 800cd88:	2000b7e4 	.word	0x2000b7e4
 800cd8c:	2000806c 	.word	0x2000806c
 800cd90:	20008070 	.word	0x20008070

0800cd94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800cd9c:	4b14      	ldr	r3, [pc, #80]	; (800cdf0 <tcp_input_delayed_close+0x5c>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	f003 0310 	and.w	r3, r3, #16
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01d      	beq.n	800cde4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	7e9b      	ldrb	r3, [r3, #26]
 800cdac:	f003 0310 	and.w	r3, r3, #16
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10d      	bne.n	800cdd0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d008      	beq.n	800cdd0 <tcp_input_delayed_close+0x3c>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	6912      	ldr	r2, [r2, #16]
 800cdc8:	f06f 010e 	mvn.w	r1, #14
 800cdcc:	4610      	mov	r0, r2
 800cdce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	4808      	ldr	r0, [pc, #32]	; (800cdf4 <tcp_input_delayed_close+0x60>)
 800cdd4:	f7ff fafe 	bl	800c3d4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800cdd8:	6879      	ldr	r1, [r7, #4]
 800cdda:	2001      	movs	r0, #1
 800cddc:	f7fc ff32 	bl	8009c44 <memp_free>
    return 1;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	2000b7f1 	.word	0x2000b7f1
 800cdf4:	2000b7b8 	.word	0x2000b7b8

0800cdf8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ce00:	4b63      	ldr	r3, [pc, #396]	; (800cf90 <tcp_listen_input+0x198>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 80bb 	bne.w	800cf84 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ce0e:	4b60      	ldr	r3, [pc, #384]	; (800cf90 <tcp_listen_input+0x198>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	f003 0310 	and.w	r3, r3, #16
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d016      	beq.n	800ce48 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce1a:	4b5e      	ldr	r3, [pc, #376]	; (800cf94 <tcp_listen_input+0x19c>)
 800ce1c:	6818      	ldr	r0, [r3, #0]
 800ce1e:	4b5e      	ldr	r3, [pc, #376]	; (800cf98 <tcp_listen_input+0x1a0>)
 800ce20:	881b      	ldrh	r3, [r3, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	4b5d      	ldr	r3, [pc, #372]	; (800cf9c <tcp_listen_input+0x1a4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce2a:	4b5d      	ldr	r3, [pc, #372]	; (800cfa0 <tcp_listen_input+0x1a8>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce2e:	885b      	ldrh	r3, [r3, #2]
 800ce30:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce32:	4a5b      	ldr	r2, [pc, #364]	; (800cfa0 <tcp_listen_input+0x1a8>)
 800ce34:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce36:	8812      	ldrh	r2, [r2, #0]
 800ce38:	b292      	uxth	r2, r2
 800ce3a:	9201      	str	r2, [sp, #4]
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	4b59      	ldr	r3, [pc, #356]	; (800cfa4 <tcp_listen_input+0x1ac>)
 800ce40:	4a59      	ldr	r2, [pc, #356]	; (800cfa8 <tcp_listen_input+0x1b0>)
 800ce42:	f002 ff45 	bl	800fcd0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ce46:	e09f      	b.n	800cf88 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800ce48:	4b51      	ldr	r3, [pc, #324]	; (800cf90 <tcp_listen_input+0x198>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 8099 	beq.w	800cf88 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7d5b      	ldrb	r3, [r3, #21]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff f93a 	bl	800c0d4 <tcp_alloc>
 800ce60:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d111      	bne.n	800ce8c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <tcp_listen_input+0x8e>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	6910      	ldr	r0, [r2, #16]
 800ce78:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	4798      	blx	r3
 800ce80:	4603      	mov	r3, r0
 800ce82:	73bb      	strb	r3, [r7, #14]
      return;
 800ce84:	e081      	b.n	800cf8a <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ce86:	23f0      	movs	r3, #240	; 0xf0
 800ce88:	73bb      	strb	r3, [r7, #14]
      return;
 800ce8a:	e07e      	b.n	800cf8a <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ce8c:	4b47      	ldr	r3, [pc, #284]	; (800cfac <tcp_listen_input+0x1b4>)
 800ce8e:	695a      	ldr	r2, [r3, #20]
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ce94:	4b45      	ldr	r3, [pc, #276]	; (800cfac <tcp_listen_input+0x1b4>)
 800ce96:	691a      	ldr	r2, [r3, #16]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	8ada      	ldrh	r2, [r3, #22]
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cea4:	4b3e      	ldr	r3, [pc, #248]	; (800cfa0 <tcp_listen_input+0x1a8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ceb6:	4b39      	ldr	r3, [pc, #228]	; (800cf9c <tcp_listen_input+0x1a4>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cec8:	6978      	ldr	r0, [r7, #20]
 800ceca:	f7ff faff 	bl	800c4cc <tcp_next_iss>
 800cece:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cee8:	4b2c      	ldr	r3, [pc, #176]	; (800cf9c <tcp_listen_input+0x1a4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	1e5a      	subs	r2, r3, #1
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	691a      	ldr	r2, [r3, #16]
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7a1b      	ldrb	r3, [r3, #8]
 800cf04:	f003 030c 	and.w	r3, r3, #12
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cf0e:	4b28      	ldr	r3, [pc, #160]	; (800cfb0 <tcp_listen_input+0x1b8>)
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	60da      	str	r2, [r3, #12]
 800cf16:	4a26      	ldr	r2, [pc, #152]	; (800cfb0 <tcp_listen_input+0x1b8>)
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	f003 f920 	bl	8010160 <tcp_timer_needed>
 800cf20:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <tcp_listen_input+0x1bc>)
 800cf22:	2201      	movs	r2, #1
 800cf24:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cf26:	6978      	ldr	r0, [r7, #20]
 800cf28:	f001 fd0c 	bl	800e944 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cf2c:	4b1c      	ldr	r3, [pc, #112]	; (800cfa0 <tcp_listen_input+0x1a8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	89db      	ldrh	r3, [r3, #14]
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4610      	mov	r0, r2
 800cf52:	f7ff fad1 	bl	800c4f8 <tcp_eff_send_mss_impl>
 800cf56:	4603      	mov	r3, r0
 800cf58:	461a      	mov	r2, r3
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cf5e:	2112      	movs	r1, #18
 800cf60:	6978      	ldr	r0, [r7, #20]
 800cf62:	f002 fad9 	bl	800f518 <tcp_enqueue_flags>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cf6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d004      	beq.n	800cf7c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800cf72:	2100      	movs	r1, #0
 800cf74:	6978      	ldr	r0, [r7, #20]
 800cf76:	f7fe f8c7 	bl	800b108 <tcp_abandon>
      return;
 800cf7a:	e006      	b.n	800cf8a <tcp_listen_input+0x192>
    tcp_output(npcb);
 800cf7c:	6978      	ldr	r0, [r7, #20]
 800cf7e:	f002 fc23 	bl	800f7c8 <tcp_output>
  return;
 800cf82:	e001      	b.n	800cf88 <tcp_listen_input+0x190>
    return;
 800cf84:	bf00      	nop
 800cf86:	e000      	b.n	800cf8a <tcp_listen_input+0x192>
  return;
 800cf88:	bf00      	nop
}
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	2000b7f0 	.word	0x2000b7f0
 800cf94:	2000b7e8 	.word	0x2000b7e8
 800cf98:	2000b7ee 	.word	0x2000b7ee
 800cf9c:	2000b7e4 	.word	0x2000b7e4
 800cfa0:	2000b7d4 	.word	0x2000b7d4
 800cfa4:	2000806c 	.word	0x2000806c
 800cfa8:	20008070 	.word	0x20008070
 800cfac:	2000805c 	.word	0x2000805c
 800cfb0:	2000b7b8 	.word	0x2000b7b8
 800cfb4:	2000b7c0 	.word	0x2000b7c0

0800cfb8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cfc0:	4b29      	ldr	r3, [pc, #164]	; (800d068 <tcp_timewait_input+0xb0>)
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d146      	bne.n	800d05a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cfcc:	4b26      	ldr	r3, [pc, #152]	; (800d068 <tcp_timewait_input+0xb0>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 0302 	and.w	r3, r3, #2
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d027      	beq.n	800d028 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cfd8:	4b24      	ldr	r3, [pc, #144]	; (800d06c <tcp_timewait_input+0xb4>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	db2a      	blt.n	800d03c <tcp_timewait_input+0x84>
 800cfe6:	4b21      	ldr	r3, [pc, #132]	; (800d06c <tcp_timewait_input+0xb4>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cff2:	440b      	add	r3, r1
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dc20      	bgt.n	800d03c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cffa:	4b1d      	ldr	r3, [pc, #116]	; (800d070 <tcp_timewait_input+0xb8>)
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	4b1d      	ldr	r3, [pc, #116]	; (800d074 <tcp_timewait_input+0xbc>)
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	461a      	mov	r2, r3
 800d004:	4b19      	ldr	r3, [pc, #100]	; (800d06c <tcp_timewait_input+0xb4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d00a:	4b1b      	ldr	r3, [pc, #108]	; (800d078 <tcp_timewait_input+0xc0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d00e:	885b      	ldrh	r3, [r3, #2]
 800d010:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d012:	4a19      	ldr	r2, [pc, #100]	; (800d078 <tcp_timewait_input+0xc0>)
 800d014:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d016:	8812      	ldrh	r2, [r2, #0]
 800d018:	b292      	uxth	r2, r2
 800d01a:	9201      	str	r2, [sp, #4]
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	4b17      	ldr	r3, [pc, #92]	; (800d07c <tcp_timewait_input+0xc4>)
 800d020:	4a17      	ldr	r2, [pc, #92]	; (800d080 <tcp_timewait_input+0xc8>)
 800d022:	f002 fe55 	bl	800fcd0 <tcp_rst>
      return;
 800d026:	e01b      	b.n	800d060 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800d028:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <tcp_timewait_input+0xb0>)
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	f003 0301 	and.w	r3, r3, #1
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d034:	4b13      	ldr	r3, [pc, #76]	; (800d084 <tcp_timewait_input+0xcc>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d03c:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <tcp_timewait_input+0xbc>)
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00c      	beq.n	800d05e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	7e9b      	ldrb	r3, [r3, #26]
 800d048:	f043 0302 	orr.w	r3, r3, #2
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f002 fbb8 	bl	800f7c8 <tcp_output>
  }
  return;
 800d058:	e001      	b.n	800d05e <tcp_timewait_input+0xa6>
    return;
 800d05a:	bf00      	nop
 800d05c:	e000      	b.n	800d060 <tcp_timewait_input+0xa8>
  return;
 800d05e:	bf00      	nop
}
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	2000b7f0 	.word	0x2000b7f0
 800d06c:	2000b7e4 	.word	0x2000b7e4
 800d070:	2000b7e8 	.word	0x2000b7e8
 800d074:	2000b7ee 	.word	0x2000b7ee
 800d078:	2000b7d4 	.word	0x2000b7d4
 800d07c:	2000806c 	.word	0x2000806c
 800d080:	20008070 	.word	0x20008070
 800d084:	2000b7ac 	.word	0x2000b7ac

0800d088 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08a      	sub	sp, #40	; 0x28
 800d08c:	af02      	add	r7, sp, #8
 800d08e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d098:	4b93      	ldr	r3, [pc, #588]	; (800d2e8 <tcp_process+0x260>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 0304 	and.w	r3, r3, #4
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d04e      	beq.n	800d142 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7d1b      	ldrb	r3, [r3, #20]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d108      	bne.n	800d0be <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0b0:	4b8e      	ldr	r3, [pc, #568]	; (800d2ec <tcp_process+0x264>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d123      	bne.n	800d100 <tcp_process+0x78>
        acceptable = 1;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	76fb      	strb	r3, [r7, #27]
 800d0bc:	e020      	b.n	800d100 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0c2:	4b8b      	ldr	r3, [pc, #556]	; (800d2f0 <tcp_process+0x268>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d102      	bne.n	800d0d0 <tcp_process+0x48>
        acceptable = 1;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	76fb      	strb	r3, [r7, #27]
 800d0ce:	e017      	b.n	800d100 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d0d0:	4b87      	ldr	r3, [pc, #540]	; (800d2f0 <tcp_process+0x268>)
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	db10      	blt.n	800d100 <tcp_process+0x78>
 800d0de:	4b84      	ldr	r3, [pc, #528]	; (800d2f0 <tcp_process+0x268>)
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d0ea:	440b      	add	r3, r1
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dc06      	bgt.n	800d100 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7e9b      	ldrb	r3, [r3, #26]
 800d0f6:	f043 0302 	orr.w	r3, r3, #2
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d100:	7efb      	ldrb	r3, [r7, #27]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d01b      	beq.n	800d13e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	7d1b      	ldrb	r3, [r3, #20]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d106      	bne.n	800d11c <tcp_process+0x94>
 800d10e:	4b79      	ldr	r3, [pc, #484]	; (800d2f4 <tcp_process+0x26c>)
 800d110:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d114:	4978      	ldr	r1, [pc, #480]	; (800d2f8 <tcp_process+0x270>)
 800d116:	4879      	ldr	r0, [pc, #484]	; (800d2fc <tcp_process+0x274>)
 800d118:	f006 faaa 	bl	8013670 <iprintf>
      recv_flags |= TF_RESET;
 800d11c:	4b78      	ldr	r3, [pc, #480]	; (800d300 <tcp_process+0x278>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f043 0308 	orr.w	r3, r3, #8
 800d124:	b2da      	uxtb	r2, r3
 800d126:	4b76      	ldr	r3, [pc, #472]	; (800d300 <tcp_process+0x278>)
 800d128:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	7e9b      	ldrb	r3, [r3, #26]
 800d12e:	f023 0301 	bic.w	r3, r3, #1
 800d132:	b2da      	uxtb	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800d138:	f06f 030d 	mvn.w	r3, #13
 800d13c:	e348      	b.n	800d7d0 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	e346      	b.n	800d7d0 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d142:	4b69      	ldr	r3, [pc, #420]	; (800d2e8 <tcp_process+0x260>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	f003 0302 	and.w	r3, r3, #2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d010      	beq.n	800d170 <tcp_process+0xe8>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	7d1b      	ldrb	r3, [r3, #20]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d00c      	beq.n	800d170 <tcp_process+0xe8>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	7d1b      	ldrb	r3, [r3, #20]
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d008      	beq.n	800d170 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7e9b      	ldrb	r3, [r3, #26]
 800d162:	f043 0302 	orr.w	r3, r3, #2
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e32f      	b.n	800d7d0 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7e9b      	ldrb	r3, [r3, #26]
 800d174:	f003 0310 	and.w	r3, r3, #16
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d103      	bne.n	800d184 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d17c:	4b61      	ldr	r3, [pc, #388]	; (800d304 <tcp_process+0x27c>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f001 fbd9 	bl	800e944 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7d1b      	ldrb	r3, [r3, #20]
 800d196:	3b02      	subs	r3, #2
 800d198:	2b07      	cmp	r3, #7
 800d19a:	f200 8309 	bhi.w	800d7b0 <tcp_process+0x728>
 800d19e:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <tcp_process+0x11c>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1c5 	.word	0x0800d1c5
 800d1a8:	0800d3bb 	.word	0x0800d3bb
 800d1ac:	0800d513 	.word	0x0800d513
 800d1b0:	0800d53d 	.word	0x0800d53d
 800d1b4:	0800d65f 	.word	0x0800d65f
 800d1b8:	0800d513 	.word	0x0800d513
 800d1bc:	0800d6eb 	.word	0x0800d6eb
 800d1c0:	0800d77b 	.word	0x0800d77b
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d1c4:	4b48      	ldr	r3, [pc, #288]	; (800d2e8 <tcp_process+0x260>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 0310 	and.w	r3, r3, #16
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80ca 	beq.w	800d366 <tcp_process+0x2de>
 800d1d2:	4b45      	ldr	r3, [pc, #276]	; (800d2e8 <tcp_process+0x260>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f000 80c3 	beq.w	800d366 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	4b41      	ldr	r3, [pc, #260]	; (800d2ec <tcp_process+0x264>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	f040 80bb 	bne.w	800d366 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800d1f0:	4b3f      	ldr	r3, [pc, #252]	; (800d2f0 <tcp_process+0x268>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800d202:	4b3a      	ldr	r3, [pc, #232]	; (800d2ec <tcp_process+0x264>)
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800d20a:	4b3f      	ldr	r3, [pc, #252]	; (800d308 <tcp_process+0x280>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	89db      	ldrh	r3, [r3, #14]
 800d210:	b29a      	uxth	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d224:	4b32      	ldr	r3, [pc, #200]	; (800d2f0 <tcp_process+0x268>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	1e5a      	subs	r2, r3, #1
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2204      	movs	r2, #4
 800d232:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3304      	adds	r3, #4
 800d23c:	4619      	mov	r1, r3
 800d23e:	4610      	mov	r0, r2
 800d240:	f7ff f95a 	bl	800c4f8 <tcp_eff_send_mss_impl>
 800d244:	4603      	mov	r3, r0
 800d246:	461a      	mov	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	f241 121c 	movw	r2, #4380	; 0x111c
 800d256:	429a      	cmp	r2, r3
 800d258:	bf38      	it	cc
 800d25a:	461a      	movcc	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4293      	cmp	r3, r2
 800d264:	bf28      	it	cs
 800d266:	4613      	movcs	r3, r2
 800d268:	b29a      	uxth	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <tcp_process+0x200>
 800d27a:	4b1e      	ldr	r3, [pc, #120]	; (800d2f4 <tcp_process+0x26c>)
 800d27c:	f240 321a 	movw	r2, #794	; 0x31a
 800d280:	4922      	ldr	r1, [pc, #136]	; (800d30c <tcp_process+0x284>)
 800d282:	481e      	ldr	r0, [pc, #120]	; (800d2fc <tcp_process+0x274>)
 800d284:	f006 f9f4 	bl	8013670 <iprintf>
      --pcb->snd_queuelen;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d28e:	3b01      	subs	r3, #1
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d29c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d111      	bne.n	800d2c8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2a8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <tcp_process+0x236>
 800d2b0:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <tcp_process+0x26c>)
 800d2b2:	f240 3222 	movw	r2, #802	; 0x322
 800d2b6:	4916      	ldr	r1, [pc, #88]	; (800d310 <tcp_process+0x288>)
 800d2b8:	4810      	ldr	r0, [pc, #64]	; (800d2fc <tcp_process+0x274>)
 800d2ba:	f006 f9d9 	bl	8013670 <iprintf>
        pcb->unsent = rseg->next;
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	669a      	str	r2, [r3, #104]	; 0x68
 800d2c6:	e003      	b.n	800d2d0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800d2d0:	69f8      	ldr	r0, [r7, #28]
 800d2d2:	f7fe fded 	bl	800beb0 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d11a      	bne.n	800d314 <tcp_process+0x28c>
        pcb->rtime = -1;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2e4:	861a      	strh	r2, [r3, #48]	; 0x30
 800d2e6:	e01c      	b.n	800d322 <tcp_process+0x29a>
 800d2e8:	2000b7f0 	.word	0x2000b7f0
 800d2ec:	2000b7e8 	.word	0x2000b7e8
 800d2f0:	2000b7e4 	.word	0x2000b7e4
 800d2f4:	08015fbc 	.word	0x08015fbc
 800d2f8:	08016174 	.word	0x08016174
 800d2fc:	08016000 	.word	0x08016000
 800d300:	2000b7f1 	.word	0x2000b7f1
 800d304:	2000b7ac 	.word	0x2000b7ac
 800d308:	2000b7d4 	.word	0x2000b7d4
 800d30c:	08016194 	.word	0x08016194
 800d310:	080161ac 	.word	0x080161ac
      } else {
        pcb->rtime = 0;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00a      	beq.n	800d342 <tcp_process+0x2ba>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	6910      	ldr	r0, [r2, #16]
 800d336:	2200      	movs	r2, #0
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	4798      	blx	r3
 800d33c:	4603      	mov	r3, r0
 800d33e:	76bb      	strb	r3, [r7, #26]
 800d340:	e001      	b.n	800d346 <tcp_process+0x2be>
 800d342:	2300      	movs	r3, #0
 800d344:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800d346:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d34a:	f113 0f0d 	cmn.w	r3, #13
 800d34e:	d102      	bne.n	800d356 <tcp_process+0x2ce>
        return ERR_ABRT;
 800d350:	f06f 030c 	mvn.w	r3, #12
 800d354:	e23c      	b.n	800d7d0 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7e9b      	ldrb	r3, [r3, #26]
 800d35a:	f043 0302 	orr.w	r3, r3, #2
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800d364:	e226      	b.n	800d7b4 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800d366:	4b93      	ldr	r3, [pc, #588]	; (800d5b4 <tcp_process+0x52c>)
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	f003 0310 	and.w	r3, r3, #16
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 8220 	beq.w	800d7b4 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d374:	4b90      	ldr	r3, [pc, #576]	; (800d5b8 <tcp_process+0x530>)
 800d376:	6818      	ldr	r0, [r3, #0]
 800d378:	4b90      	ldr	r3, [pc, #576]	; (800d5bc <tcp_process+0x534>)
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b90      	ldr	r3, [pc, #576]	; (800d5c0 <tcp_process+0x538>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d384:	4b8f      	ldr	r3, [pc, #572]	; (800d5c4 <tcp_process+0x53c>)
 800d386:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d388:	885b      	ldrh	r3, [r3, #2]
 800d38a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d38c:	4a8d      	ldr	r2, [pc, #564]	; (800d5c4 <tcp_process+0x53c>)
 800d38e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d390:	8812      	ldrh	r2, [r2, #0]
 800d392:	b292      	uxth	r2, r2
 800d394:	9201      	str	r2, [sp, #4]
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	4b8b      	ldr	r3, [pc, #556]	; (800d5c8 <tcp_process+0x540>)
 800d39a:	4a8c      	ldr	r2, [pc, #560]	; (800d5cc <tcp_process+0x544>)
 800d39c:	f002 fc98 	bl	800fcd0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d3a6:	2b05      	cmp	r3, #5
 800d3a8:	f200 8204 	bhi.w	800d7b4 <tcp_process+0x72c>
        pcb->rtime = 0;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f002 fd02 	bl	800fdbc <tcp_rexmit_rto>
    break;
 800d3b8:	e1fc      	b.n	800d7b4 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800d3ba:	4b7e      	ldr	r3, [pc, #504]	; (800d5b4 <tcp_process+0x52c>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	f003 0310 	and.w	r3, r3, #16
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 8091 	beq.w	800d4ea <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800d3c8:	4b7b      	ldr	r3, [pc, #492]	; (800d5b8 <tcp_process+0x530>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	db71      	blt.n	800d4bc <tcp_process+0x434>
 800d3d8:	4b77      	ldr	r3, [pc, #476]	; (800d5b8 <tcp_process+0x530>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dc6a      	bgt.n	800d4bc <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2204      	movs	r2, #4
 800d3ea:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00b      	beq.n	800d40c <tcp_process+0x384>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3f8:	699b      	ldr	r3, [r3, #24]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d106      	bne.n	800d40c <tcp_process+0x384>
 800d3fe:	4b74      	ldr	r3, [pc, #464]	; (800d5d0 <tcp_process+0x548>)
 800d400:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d404:	4973      	ldr	r1, [pc, #460]	; (800d5d4 <tcp_process+0x54c>)
 800d406:	4874      	ldr	r0, [pc, #464]	; (800d5d8 <tcp_process+0x550>)
 800d408:	f006 f932 	bl	8013670 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d410:	2b00      	cmp	r3, #0
 800d412:	d102      	bne.n	800d41a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800d414:	23fa      	movs	r3, #250	; 0xfa
 800d416:	76bb      	strb	r3, [r7, #26]
 800d418:	e011      	b.n	800d43e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00a      	beq.n	800d43a <tcp_process+0x3b2>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6910      	ldr	r0, [r2, #16]
 800d42e:	2200      	movs	r2, #0
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	4798      	blx	r3
 800d434:	4603      	mov	r3, r0
 800d436:	76bb      	strb	r3, [r7, #26]
 800d438:	e001      	b.n	800d43e <tcp_process+0x3b6>
 800d43a:	23f0      	movs	r3, #240	; 0xf0
 800d43c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800d43e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800d446:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d44a:	f113 0f0d 	cmn.w	r3, #13
 800d44e:	d002      	beq.n	800d456 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7fd ff0b 	bl	800b26c <tcp_abort>
          }
          return ERR_ABRT;
 800d456:	f06f 030c 	mvn.w	r3, #12
 800d45a:	e1b9      	b.n	800d7d0 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fa3d 	bl	800d8dc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800d462:	4b5e      	ldr	r3, [pc, #376]	; (800d5dc <tcp_process+0x554>)
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d005      	beq.n	800d476 <tcp_process+0x3ee>
          recv_acked--;
 800d46a:	4b5c      	ldr	r3, [pc, #368]	; (800d5dc <tcp_process+0x554>)
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	3b01      	subs	r3, #1
 800d470:	b29a      	uxth	r2, r3
 800d472:	4b5a      	ldr	r3, [pc, #360]	; (800d5dc <tcp_process+0x554>)
 800d474:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	f241 121c 	movw	r2, #4380	; 0x111c
 800d480:	429a      	cmp	r2, r3
 800d482:	bf38      	it	cc
 800d484:	461a      	movcc	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4293      	cmp	r3, r2
 800d48e:	bf28      	it	cs
 800d490:	4613      	movcs	r3, r2
 800d492:	b29a      	uxth	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800d49a:	4b51      	ldr	r3, [pc, #324]	; (800d5e0 <tcp_process+0x558>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d034      	beq.n	800d510 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	7e9b      	ldrb	r3, [r3, #26]
 800d4aa:	f043 0302 	orr.w	r3, r3, #2
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2207      	movs	r2, #7
 800d4b8:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800d4ba:	e029      	b.n	800d510 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4bc:	4b3e      	ldr	r3, [pc, #248]	; (800d5b8 <tcp_process+0x530>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	4b3e      	ldr	r3, [pc, #248]	; (800d5bc <tcp_process+0x534>)
 800d4c2:	881b      	ldrh	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4b3e      	ldr	r3, [pc, #248]	; (800d5c0 <tcp_process+0x538>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4cc:	4b3d      	ldr	r3, [pc, #244]	; (800d5c4 <tcp_process+0x53c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4d0:	885b      	ldrh	r3, [r3, #2]
 800d4d2:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4d4:	4a3b      	ldr	r2, [pc, #236]	; (800d5c4 <tcp_process+0x53c>)
 800d4d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4d8:	8812      	ldrh	r2, [r2, #0]
 800d4da:	b292      	uxth	r2, r2
 800d4dc:	9201      	str	r2, [sp, #4]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4b39      	ldr	r3, [pc, #228]	; (800d5c8 <tcp_process+0x540>)
 800d4e2:	4a3a      	ldr	r2, [pc, #232]	; (800d5cc <tcp_process+0x544>)
 800d4e4:	f002 fbf4 	bl	800fcd0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800d4e8:	e166      	b.n	800d7b8 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d4ea:	4b32      	ldr	r3, [pc, #200]	; (800d5b4 <tcp_process+0x52c>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 8160 	beq.w	800d7b8 <tcp_process+0x730>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fc:	1e5a      	subs	r2, r3, #1
 800d4fe:	4b30      	ldr	r3, [pc, #192]	; (800d5c0 <tcp_process+0x538>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	429a      	cmp	r2, r3
 800d504:	f040 8158 	bne.w	800d7b8 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f002 fc8d 	bl	800fe28 <tcp_rexmit>
    break;
 800d50e:	e153      	b.n	800d7b8 <tcp_process+0x730>
 800d510:	e152      	b.n	800d7b8 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f9e2 	bl	800d8dc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d518:	4b31      	ldr	r3, [pc, #196]	; (800d5e0 <tcp_process+0x558>)
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	f003 0320 	and.w	r3, r3, #32
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 814b 	beq.w	800d7bc <tcp_process+0x734>
      tcp_ack_now(pcb);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7e9b      	ldrb	r3, [r3, #26]
 800d52a:	f043 0302 	orr.w	r3, r3, #2
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2207      	movs	r2, #7
 800d538:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d53a:	e13f      	b.n	800d7bc <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f9cd 	bl	800d8dc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d542:	4b27      	ldr	r3, [pc, #156]	; (800d5e0 <tcp_process+0x558>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 0320 	and.w	r3, r3, #32
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d070      	beq.n	800d630 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d54e:	4b19      	ldr	r3, [pc, #100]	; (800d5b4 <tcp_process+0x52c>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f003 0310 	and.w	r3, r3, #16
 800d556:	2b00      	cmp	r3, #0
 800d558:	d05f      	beq.n	800d61a <tcp_process+0x592>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d55e:	4b16      	ldr	r3, [pc, #88]	; (800d5b8 <tcp_process+0x530>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	429a      	cmp	r2, r3
 800d564:	d159      	bne.n	800d61a <tcp_process+0x592>
          pcb->unsent == NULL) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d155      	bne.n	800d61a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	7e9b      	ldrb	r3, [r3, #26]
 800d572:	f043 0302 	orr.w	r3, r3, #2
 800d576:	b2da      	uxtb	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7fe fee7 	bl	800c350 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d582:	4b18      	ldr	r3, [pc, #96]	; (800d5e4 <tcp_process+0x55c>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d105      	bne.n	800d598 <tcp_process+0x510>
 800d58c:	4b15      	ldr	r3, [pc, #84]	; (800d5e4 <tcp_process+0x55c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	4a14      	ldr	r2, [pc, #80]	; (800d5e4 <tcp_process+0x55c>)
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	e02d      	b.n	800d5f4 <tcp_process+0x56c>
 800d598:	4b12      	ldr	r3, [pc, #72]	; (800d5e4 <tcp_process+0x55c>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	617b      	str	r3, [r7, #20]
 800d59e:	e026      	b.n	800d5ee <tcp_process+0x566>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d11e      	bne.n	800d5e8 <tcp_process+0x560>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	60da      	str	r2, [r3, #12]
 800d5b2:	e01f      	b.n	800d5f4 <tcp_process+0x56c>
 800d5b4:	2000b7f0 	.word	0x2000b7f0
 800d5b8:	2000b7e8 	.word	0x2000b7e8
 800d5bc:	2000b7ee 	.word	0x2000b7ee
 800d5c0:	2000b7e4 	.word	0x2000b7e4
 800d5c4:	2000b7d4 	.word	0x2000b7d4
 800d5c8:	2000806c 	.word	0x2000806c
 800d5cc:	20008070 	.word	0x20008070
 800d5d0:	08015fbc 	.word	0x08015fbc
 800d5d4:	080161c0 	.word	0x080161c0
 800d5d8:	08016000 	.word	0x08016000
 800d5dc:	2000b7ec 	.word	0x2000b7ec
 800d5e0:	2000b7f1 	.word	0x2000b7f1
 800d5e4:	2000b7b8 	.word	0x2000b7b8
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1d5      	bne.n	800d5a0 <tcp_process+0x518>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	60da      	str	r2, [r3, #12]
 800d5fa:	4b77      	ldr	r3, [pc, #476]	; (800d7d8 <tcp_process+0x750>)
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	220a      	movs	r2, #10
 800d604:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d606:	4b75      	ldr	r3, [pc, #468]	; (800d7dc <tcp_process+0x754>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60da      	str	r2, [r3, #12]
 800d60e:	4a73      	ldr	r2, [pc, #460]	; (800d7dc <tcp_process+0x754>)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6013      	str	r3, [r2, #0]
 800d614:	f002 fda4 	bl	8010160 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800d618:	e0d2      	b.n	800d7c0 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	7e9b      	ldrb	r3, [r3, #26]
 800d61e:	f043 0302 	orr.w	r3, r3, #2
 800d622:	b2da      	uxtb	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2208      	movs	r2, #8
 800d62c:	751a      	strb	r2, [r3, #20]
    break;
 800d62e:	e0c7      	b.n	800d7c0 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d630:	4b6b      	ldr	r3, [pc, #428]	; (800d7e0 <tcp_process+0x758>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	f003 0310 	and.w	r3, r3, #16
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f000 80c1 	beq.w	800d7c0 <tcp_process+0x738>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d642:	4b68      	ldr	r3, [pc, #416]	; (800d7e4 <tcp_process+0x75c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	429a      	cmp	r2, r3
 800d648:	f040 80ba 	bne.w	800d7c0 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d650:	2b00      	cmp	r3, #0
 800d652:	f040 80b5 	bne.w	800d7c0 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2206      	movs	r2, #6
 800d65a:	751a      	strb	r2, [r3, #20]
    break;
 800d65c:	e0b0      	b.n	800d7c0 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f93c 	bl	800d8dc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d664:	4b60      	ldr	r3, [pc, #384]	; (800d7e8 <tcp_process+0x760>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	f003 0320 	and.w	r3, r3, #32
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 80a9 	beq.w	800d7c4 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7e9b      	ldrb	r3, [r3, #26]
 800d676:	f043 0302 	orr.w	r3, r3, #2
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7fe fe65 	bl	800c350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d686:	4b59      	ldr	r3, [pc, #356]	; (800d7ec <tcp_process+0x764>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d105      	bne.n	800d69c <tcp_process+0x614>
 800d690:	4b56      	ldr	r3, [pc, #344]	; (800d7ec <tcp_process+0x764>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	4a55      	ldr	r2, [pc, #340]	; (800d7ec <tcp_process+0x764>)
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	e013      	b.n	800d6c4 <tcp_process+0x63c>
 800d69c:	4b53      	ldr	r3, [pc, #332]	; (800d7ec <tcp_process+0x764>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	613b      	str	r3, [r7, #16]
 800d6a2:	e00c      	b.n	800d6be <tcp_process+0x636>
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d104      	bne.n	800d6b8 <tcp_process+0x630>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68da      	ldr	r2, [r3, #12]
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	60da      	str	r2, [r3, #12]
 800d6b6:	e005      	b.n	800d6c4 <tcp_process+0x63c>
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	613b      	str	r3, [r7, #16]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1ef      	bne.n	800d6a4 <tcp_process+0x61c>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	60da      	str	r2, [r3, #12]
 800d6ca:	4b43      	ldr	r3, [pc, #268]	; (800d7d8 <tcp_process+0x750>)
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	220a      	movs	r2, #10
 800d6d4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d6d6:	4b41      	ldr	r3, [pc, #260]	; (800d7dc <tcp_process+0x754>)
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60da      	str	r2, [r3, #12]
 800d6de:	4a3f      	ldr	r2, [pc, #252]	; (800d7dc <tcp_process+0x754>)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6013      	str	r3, [r2, #0]
 800d6e4:	f002 fd3c 	bl	8010160 <tcp_timer_needed>
    }
    break;
 800d6e8:	e06c      	b.n	800d7c4 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f8f6 	bl	800d8dc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d6f0:	4b3b      	ldr	r3, [pc, #236]	; (800d7e0 <tcp_process+0x758>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	f003 0310 	and.w	r3, r3, #16
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d065      	beq.n	800d7c8 <tcp_process+0x740>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d700:	4b38      	ldr	r3, [pc, #224]	; (800d7e4 <tcp_process+0x75c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	429a      	cmp	r2, r3
 800d706:	d15f      	bne.n	800d7c8 <tcp_process+0x740>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d15b      	bne.n	800d7c8 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7fe fe1d 	bl	800c350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d716:	4b35      	ldr	r3, [pc, #212]	; (800d7ec <tcp_process+0x764>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d105      	bne.n	800d72c <tcp_process+0x6a4>
 800d720:	4b32      	ldr	r3, [pc, #200]	; (800d7ec <tcp_process+0x764>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	4a31      	ldr	r2, [pc, #196]	; (800d7ec <tcp_process+0x764>)
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	e013      	b.n	800d754 <tcp_process+0x6cc>
 800d72c:	4b2f      	ldr	r3, [pc, #188]	; (800d7ec <tcp_process+0x764>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	e00c      	b.n	800d74e <tcp_process+0x6c6>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d104      	bne.n	800d748 <tcp_process+0x6c0>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68da      	ldr	r2, [r3, #12]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	60da      	str	r2, [r3, #12]
 800d746:	e005      	b.n	800d754 <tcp_process+0x6cc>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1ef      	bne.n	800d734 <tcp_process+0x6ac>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	60da      	str	r2, [r3, #12]
 800d75a:	4b1f      	ldr	r3, [pc, #124]	; (800d7d8 <tcp_process+0x750>)
 800d75c:	2201      	movs	r2, #1
 800d75e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	220a      	movs	r2, #10
 800d764:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d766:	4b1d      	ldr	r3, [pc, #116]	; (800d7dc <tcp_process+0x754>)
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	60da      	str	r2, [r3, #12]
 800d76e:	4a1b      	ldr	r2, [pc, #108]	; (800d7dc <tcp_process+0x754>)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	f002 fcf4 	bl	8010160 <tcp_timer_needed>
    }
    break;
 800d778:	e026      	b.n	800d7c8 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f8ae 	bl	800d8dc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d780:	4b17      	ldr	r3, [pc, #92]	; (800d7e0 <tcp_process+0x758>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	f003 0310 	and.w	r3, r3, #16
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01f      	beq.n	800d7cc <tcp_process+0x744>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d790:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <tcp_process+0x75c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	429a      	cmp	r2, r3
 800d796:	d119      	bne.n	800d7cc <tcp_process+0x744>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d115      	bne.n	800d7cc <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800d7a0:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <tcp_process+0x760>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	f043 0310 	orr.w	r3, r3, #16
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <tcp_process+0x760>)
 800d7ac:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d7ae:	e00d      	b.n	800d7cc <tcp_process+0x744>
  default:
    break;
 800d7b0:	bf00      	nop
 800d7b2:	e00c      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7b4:	bf00      	nop
 800d7b6:	e00a      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7b8:	bf00      	nop
 800d7ba:	e008      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7bc:	bf00      	nop
 800d7be:	e006      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7c0:	bf00      	nop
 800d7c2:	e004      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7c4:	bf00      	nop
 800d7c6:	e002      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7c8:	bf00      	nop
 800d7ca:	e000      	b.n	800d7ce <tcp_process+0x746>
    break;
 800d7cc:	bf00      	nop
  }
  return ERR_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3720      	adds	r7, #32
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	2000b7c0 	.word	0x2000b7c0
 800d7dc:	2000b7bc 	.word	0x2000b7bc
 800d7e0:	2000b7f0 	.word	0x2000b7f0
 800d7e4:	2000b7e8 	.word	0x2000b7e8
 800d7e8:	2000b7f1 	.word	0x2000b7f1
 800d7ec:	2000b7b8 	.word	0x2000b7b8

0800d7f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d7f0:	b590      	push	{r4, r7, lr}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	899b      	ldrh	r3, [r3, #12]
 800d800:	b29b      	uxth	r3, r3
 800d802:	4618      	mov	r0, r3
 800d804:	f7fb fde0 	bl	80093c8 <lwip_htons>
 800d808:	4603      	mov	r3, r0
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d027      	beq.n	800d862 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d812:	6838      	ldr	r0, [r7, #0]
 800d814:	f7fe fb37 	bl	800be86 <tcp_segs_free>
    next = NULL;
 800d818:	2300      	movs	r3, #0
 800d81a:	603b      	str	r3, [r7, #0]
 800d81c:	e055      	b.n	800d8ca <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	899b      	ldrh	r3, [r3, #12]
 800d824:	b29b      	uxth	r3, r3
 800d826:	4618      	mov	r0, r3
 800d828:	f7fb fdce 	bl	80093c8 <lwip_htons>
 800d82c:	4603      	mov	r3, r0
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00d      	beq.n	800d852 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	899b      	ldrh	r3, [r3, #12]
 800d83c:	b29c      	uxth	r4, r3
 800d83e:	2001      	movs	r0, #1
 800d840:	f7fb fdc2 	bl	80093c8 <lwip_htons>
 800d844:	4603      	mov	r3, r0
 800d846:	461a      	mov	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	4322      	orrs	r2, r4
 800d84e:	b292      	uxth	r2, r2
 800d850:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7fe fb27 	bl	800beb0 <tcp_seg_free>
    while (next &&
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00e      	beq.n	800d886 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	891b      	ldrh	r3, [r3, #8]
 800d86c:	461a      	mov	r2, r3
 800d86e:	4b1a      	ldr	r3, [pc, #104]	; (800d8d8 <tcp_oos_insert_segment+0xe8>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	441a      	add	r2, r3
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	6839      	ldr	r1, [r7, #0]
 800d87c:	8909      	ldrh	r1, [r1, #8]
 800d87e:	440b      	add	r3, r1
 800d880:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d882:	2b00      	cmp	r3, #0
 800d884:	dacb      	bge.n	800d81e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d01e      	beq.n	800d8ca <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	891b      	ldrh	r3, [r3, #8]
 800d890:	461a      	mov	r2, r3
 800d892:	4b11      	ldr	r3, [pc, #68]	; (800d8d8 <tcp_oos_insert_segment+0xe8>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	441a      	add	r2, r3
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dd12      	ble.n	800d8ca <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	4b0a      	ldr	r3, [pc, #40]	; (800d8d8 <tcp_oos_insert_segment+0xe8>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	891b      	ldrh	r3, [r3, #8]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	f7fc fe03 	bl	800a4d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	601a      	str	r2, [r3, #0]
}
 800d8d0:	bf00      	nop
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd90      	pop	{r4, r7, pc}
 800d8d8:	2000b7e4 	.word	0x2000b7e4

0800d8dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8de:	b08d      	sub	sp, #52	; 0x34
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	7d1b      	ldrb	r3, [r3, #20]
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d806      	bhi.n	800d8fe <tcp_receive+0x22>
 800d8f0:	4b98      	ldr	r3, [pc, #608]	; (800db54 <tcp_receive+0x278>)
 800d8f2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d8f6:	4998      	ldr	r1, [pc, #608]	; (800db58 <tcp_receive+0x27c>)
 800d8f8:	4898      	ldr	r0, [pc, #608]	; (800db5c <tcp_receive+0x280>)
 800d8fa:	f005 feb9 	bl	8013670 <iprintf>

  if (flags & TCP_ACK) {
 800d8fe:	4b98      	ldr	r3, [pc, #608]	; (800db60 <tcp_receive+0x284>)
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	f003 0310 	and.w	r3, r3, #16
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 82c1 	beq.w	800de8e <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d912:	461a      	mov	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d918:	4413      	add	r3, r2
 800d91a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d920:	4b90      	ldr	r3, [pc, #576]	; (800db64 <tcp_receive+0x288>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	db1b      	blt.n	800d962 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d92e:	4b8d      	ldr	r3, [pc, #564]	; (800db64 <tcp_receive+0x288>)
 800d930:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d932:	429a      	cmp	r2, r3
 800d934:	d106      	bne.n	800d944 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d93a:	4b8b      	ldr	r3, [pc, #556]	; (800db68 <tcp_receive+0x28c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	db0e      	blt.n	800d962 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d948:	4b87      	ldr	r3, [pc, #540]	; (800db68 <tcp_receive+0x28c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d141      	bne.n	800d9d4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d950:	4b86      	ldr	r3, [pc, #536]	; (800db6c <tcp_receive+0x290>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	89db      	ldrh	r3, [r3, #14]
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d95e:	429a      	cmp	r2, r3
 800d960:	d938      	bls.n	800d9d4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d962:	4b82      	ldr	r3, [pc, #520]	; (800db6c <tcp_receive+0x290>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	89db      	ldrh	r3, [r3, #14]
 800d968:	b29a      	uxth	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d205      	bcs.n	800d98c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800d98c:	4b75      	ldr	r3, [pc, #468]	; (800db64 <tcp_receive+0x288>)
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800d994:	4b74      	ldr	r3, [pc, #464]	; (800db68 <tcp_receive+0x28c>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10d      	bne.n	800d9c2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d111      	bne.n	800d9d4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d9c0:	e008      	b.n	800d9d4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d9d4:	4b64      	ldr	r3, [pc, #400]	; (800db68 <tcp_receive+0x28c>)
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	dc53      	bgt.n	800da8a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800d9e2:	4b63      	ldr	r3, [pc, #396]	; (800db70 <tcp_receive+0x294>)
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d146      	bne.n	800da78 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d9f4:	4413      	add	r3, r2
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d13d      	bne.n	800da78 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800da02:	2b00      	cmp	r3, #0
 800da04:	db38      	blt.n	800da78 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da0a:	4b57      	ldr	r3, [pc, #348]	; (800db68 <tcp_receive+0x28c>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d132      	bne.n	800da78 <tcp_receive+0x19c>
              found_dupack = 1;
 800da12:	2301      	movs	r3, #1
 800da14:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da1c:	2bff      	cmp	r3, #255	; 0xff
 800da1e:	d007      	beq.n	800da30 <tcp_receive+0x154>
                ++pcb->dupacks;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da26:	3301      	adds	r3, #1
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da36:	2b03      	cmp	r3, #3
 800da38:	d916      	bls.n	800da68 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da44:	4413      	add	r3, r2
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da4e:	429a      	cmp	r2, r3
 800da50:	d912      	bls.n	800da78 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da5c:	4413      	add	r3, r2
 800da5e:	b29a      	uxth	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800da66:	e007      	b.n	800da78 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d102      	bne.n	800da78 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f002 fa28 	bl	800fec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f040 816a 	bne.w	800dd54 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da88:	e164      	b.n	800dd54 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800da8a:	4b37      	ldr	r3, [pc, #220]	; (800db68 <tcp_receive+0x28c>)
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	3b01      	subs	r3, #1
 800da96:	2b00      	cmp	r3, #0
 800da98:	f2c0 8108 	blt.w	800dcac <tcp_receive+0x3d0>
 800da9c:	4b32      	ldr	r3, [pc, #200]	; (800db68 <tcp_receive+0x28c>)
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f300 8100 	bgt.w	800dcac <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	7e9b      	ldrb	r3, [r3, #26]
 800dab0:	f003 0304 	and.w	r3, r3, #4
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00c      	beq.n	800dad2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7e9b      	ldrb	r3, [r3, #26]
 800dabc:	f023 0304 	bic.w	r3, r3, #4
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dae0:	10db      	asrs	r3, r3, #3
 800dae2:	b21b      	sxth	r3, r3
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800daec:	b29b      	uxth	r3, r3
 800daee:	4413      	add	r3, r2
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	b21a      	sxth	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800db02:	4b19      	ldr	r3, [pc, #100]	; (800db68 <tcp_receive+0x28c>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	7d1b      	ldrb	r3, [r3, #20]
 800db0e:	2b03      	cmp	r3, #3
 800db10:	f240 8095 	bls.w	800dc3e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800db20:	429a      	cmp	r2, r3
 800db22:	d227      	bcs.n	800db74 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db2e:	4413      	add	r3, r2
 800db30:	b29a      	uxth	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db38:	429a      	cmp	r2, r3
 800db3a:	f240 8080 	bls.w	800dc3e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db48:	4413      	add	r3, r2
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800db52:	e074      	b.n	800dc3e <tcp_receive+0x362>
 800db54:	08015fbc 	.word	0x08015fbc
 800db58:	080161e0 	.word	0x080161e0
 800db5c:	08016000 	.word	0x08016000
 800db60:	2000b7f0 	.word	0x2000b7f0
 800db64:	2000b7e4 	.word	0x2000b7e4
 800db68:	2000b7e8 	.word	0x2000b7e8
 800db6c:	2000b7d4 	.word	0x2000b7d4
 800db70:	2000b7ee 	.word	0x2000b7ee
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db7e:	4619      	mov	r1, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db84:	fb01 f303 	mul.w	r3, r1, r3
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800db8e:	fb93 f3f1 	sdiv	r3, r3, r1
 800db92:	b29b      	uxth	r3, r3
 800db94:	4413      	add	r3, r2
 800db96:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db9e:	8a7a      	ldrh	r2, [r7, #18]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d94c      	bls.n	800dc3e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8a7a      	ldrh	r2, [r7, #18]
 800dba8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800dbac:	e047      	b.n	800dc3e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800dbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fc fe8f 	bl	800a8ec <pbuf_clen>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	429c      	cmp	r4, r3
 800dbd2:	d206      	bcs.n	800dbe2 <tcp_receive+0x306>
 800dbd4:	4b70      	ldr	r3, [pc, #448]	; (800dd98 <tcp_receive+0x4bc>)
 800dbd6:	f240 429e 	movw	r2, #1182	; 0x49e
 800dbda:	4970      	ldr	r1, [pc, #448]	; (800dd9c <tcp_receive+0x4c0>)
 800dbdc:	4870      	ldr	r0, [pc, #448]	; (800dda0 <tcp_receive+0x4c4>)
 800dbde:	f005 fd47 	bl	8013670 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fc fe80 	bl	800a8ec <pbuf_clen>
 800dbec:	4603      	mov	r3, r0
 800dbee:	461a      	mov	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbf6:	1a9b      	subs	r3, r3, r2
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800dc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc02:	891a      	ldrh	r2, [r3, #8]
 800dc04:	4b67      	ldr	r3, [pc, #412]	; (800dda4 <tcp_receive+0x4c8>)
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	4413      	add	r3, r2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	4b65      	ldr	r3, [pc, #404]	; (800dda4 <tcp_receive+0x4c8>)
 800dc0e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800dc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc12:	f7fe f94d 	bl	800beb0 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00e      	beq.n	800dc3e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10a      	bne.n	800dc3e <tcp_receive+0x362>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d106      	bne.n	800dc3e <tcp_receive+0x362>
 800dc30:	4b59      	ldr	r3, [pc, #356]	; (800dd98 <tcp_receive+0x4bc>)
 800dc32:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800dc36:	495c      	ldr	r1, [pc, #368]	; (800dda8 <tcp_receive+0x4cc>)
 800dc38:	4859      	ldr	r0, [pc, #356]	; (800dda0 <tcp_receive+0x4c4>)
 800dc3a:	f005 fd19 	bl	8013670 <iprintf>
      while (pcb->unacked != NULL &&
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d022      	beq.n	800dc8c <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fb fbc7 	bl	80093e2 <lwip_htonl>
 800dc54:	4604      	mov	r4, r0
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc5a:	891b      	ldrh	r3, [r3, #8]
 800dc5c:	461d      	mov	r5, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	899b      	ldrh	r3, [r3, #12]
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fb fbad 	bl	80093c8 <lwip_htons>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	f003 0303 	and.w	r3, r3, #3
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <tcp_receive+0x3a0>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e000      	b.n	800dc7e <tcp_receive+0x3a2>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	442b      	add	r3, r5
 800dc80:	18e2      	adds	r2, r4, r3
 800dc82:	4b4a      	ldr	r3, [pc, #296]	; (800ddac <tcp_receive+0x4d0>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	dd90      	ble.n	800dbae <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d104      	bne.n	800dc9e <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc9a:	861a      	strh	r2, [r3, #48]	; 0x30
 800dc9c:	e002      	b.n	800dca4 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	76da      	strb	r2, [r3, #27]
 800dcaa:	e002      	b.n	800dcb2 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f001 fd2f 	bl	800f710 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800dcb2:	e04f      	b.n	800dd54 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d103      	bne.n	800dcd4 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fc fe04 	bl	800a8ec <pbuf_clen>
 800dce4:	4603      	mov	r3, r0
 800dce6:	429c      	cmp	r4, r3
 800dce8:	d206      	bcs.n	800dcf8 <tcp_receive+0x41c>
 800dcea:	4b2b      	ldr	r3, [pc, #172]	; (800dd98 <tcp_receive+0x4bc>)
 800dcec:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dcf0:	492a      	ldr	r1, [pc, #168]	; (800dd9c <tcp_receive+0x4c0>)
 800dcf2:	482b      	ldr	r0, [pc, #172]	; (800dda0 <tcp_receive+0x4c4>)
 800dcf4:	f005 fcbc 	bl	8013670 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fc fdf5 	bl	800a8ec <pbuf_clen>
 800dd02:	4603      	mov	r3, r0
 800dd04:	461a      	mov	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd0c:	1a9b      	subs	r3, r3, r2
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	891a      	ldrh	r2, [r3, #8]
 800dd1a:	4b22      	ldr	r3, [pc, #136]	; (800dda4 <tcp_receive+0x4c8>)
 800dd1c:	881b      	ldrh	r3, [r3, #0]
 800dd1e:	4413      	add	r3, r2
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	4b20      	ldr	r3, [pc, #128]	; (800dda4 <tcp_receive+0x4c8>)
 800dd24:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800dd26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd28:	f7fe f8c2 	bl	800beb0 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00e      	beq.n	800dd54 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <tcp_receive+0x478>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d106      	bne.n	800dd54 <tcp_receive+0x478>
 800dd46:	4b14      	ldr	r3, [pc, #80]	; (800dd98 <tcp_receive+0x4bc>)
 800dd48:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800dd4c:	4916      	ldr	r1, [pc, #88]	; (800dda8 <tcp_receive+0x4cc>)
 800dd4e:	4814      	ldr	r0, [pc, #80]	; (800dda0 <tcp_receive+0x4c4>)
 800dd50:	f005 fc8e 	bl	8013670 <iprintf>
    while (pcb->unsent != NULL &&
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d037      	beq.n	800ddcc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800dd5c:	4b13      	ldr	r3, [pc, #76]	; (800ddac <tcp_receive+0x4d0>)
 800dd5e:	681c      	ldr	r4, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fb fb3a 	bl	80093e2 <lwip_htonl>
 800dd6e:	4605      	mov	r5, r0
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd74:	891b      	ldrh	r3, [r3, #8]
 800dd76:	461e      	mov	r6, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	899b      	ldrh	r3, [r3, #12]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fb fb20 	bl	80093c8 <lwip_htons>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	f003 0303 	and.w	r3, r3, #3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00e      	beq.n	800ddb0 <tcp_receive+0x4d4>
 800dd92:	2301      	movs	r3, #1
 800dd94:	e00d      	b.n	800ddb2 <tcp_receive+0x4d6>
 800dd96:	bf00      	nop
 800dd98:	08015fbc 	.word	0x08015fbc
 800dd9c:	080161fc 	.word	0x080161fc
 800dda0:	08016000 	.word	0x08016000
 800dda4:	2000b7ec 	.word	0x2000b7ec
 800dda8:	08016224 	.word	0x08016224
 800ddac:	2000b7e8 	.word	0x2000b7e8
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4433      	add	r3, r6
 800ddb4:	442b      	add	r3, r5
 800ddb6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	db07      	blt.n	800ddcc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800ddbc:	4b8d      	ldr	r3, [pc, #564]	; (800dff4 <tcp_receive+0x718>)
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f77f af74 	ble.w	800dcb4 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ddd2:	4b89      	ldr	r3, [pc, #548]	; (800dff8 <tcp_receive+0x71c>)
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d052      	beq.n	800de8e <tcp_receive+0x5b2>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddec:	4b81      	ldr	r3, [pc, #516]	; (800dff4 <tcp_receive+0x718>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	da4b      	bge.n	800de8e <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ddf6:	4b81      	ldr	r3, [pc, #516]	; (800dffc <tcp_receive+0x720>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de00:	b29b      	uxth	r3, r3
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	b29b      	uxth	r3, r3
 800de06:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800de08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de10:	10db      	asrs	r3, r3, #3
 800de12:	b21b      	sxth	r3, r3
 800de14:	b29b      	uxth	r3, r3
 800de16:	1ad3      	subs	r3, r2, r3
 800de18:	b29b      	uxth	r3, r3
 800de1a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de22:	b29a      	uxth	r2, r3
 800de24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de26:	4413      	add	r3, r2
 800de28:	b29b      	uxth	r3, r3
 800de2a:	b21a      	sxth	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800de30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800de34:	2b00      	cmp	r3, #0
 800de36:	da03      	bge.n	800de40 <tcp_receive+0x564>
        m = -m;
 800de38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de3a:	425b      	negs	r3, r3
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800de40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de48:	109b      	asrs	r3, r3, #2
 800de4a:	b21b      	sxth	r3, r3
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	b29b      	uxth	r3, r3
 800de52:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de5e:	4413      	add	r3, r2
 800de60:	b29b      	uxth	r3, r3
 800de62:	b21a      	sxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de6e:	10db      	asrs	r3, r3, #3
 800de70:	b21b      	sxth	r3, r3
 800de72:	b29a      	uxth	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	4413      	add	r3, r2
 800de7e:	b29b      	uxth	r3, r3
 800de80:	b21a      	sxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800de8e:	4b5c      	ldr	r3, [pc, #368]	; (800e000 <tcp_receive+0x724>)
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	f000 84f1 	beq.w	800e87a <tcp_receive+0xf9e>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7d1b      	ldrb	r3, [r3, #20]
 800de9c:	2b06      	cmp	r3, #6
 800de9e:	f200 84ec 	bhi.w	800e87a <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dea6:	4b57      	ldr	r3, [pc, #348]	; (800e004 <tcp_receive+0x728>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	3b01      	subs	r3, #1
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f2c0 80b8 	blt.w	800e024 <tcp_receive+0x748>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deb8:	4b51      	ldr	r3, [pc, #324]	; (800e000 <tcp_receive+0x724>)
 800deba:	881b      	ldrh	r3, [r3, #0]
 800debc:	4619      	mov	r1, r3
 800debe:	4b51      	ldr	r3, [pc, #324]	; (800e004 <tcp_receive+0x728>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	440b      	add	r3, r1
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	3301      	adds	r3, #1
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f300 80ab 	bgt.w	800e024 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dece:	4b4e      	ldr	r3, [pc, #312]	; (800e008 <tcp_receive+0x72c>)
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded8:	4b4a      	ldr	r3, [pc, #296]	; (800e004 <tcp_receive+0x728>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dee0:	4b49      	ldr	r3, [pc, #292]	; (800e008 <tcp_receive+0x72c>)
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <tcp_receive+0x61a>
 800dee8:	4b48      	ldr	r3, [pc, #288]	; (800e00c <tcp_receive+0x730>)
 800deea:	f240 523c 	movw	r2, #1340	; 0x53c
 800deee:	4948      	ldr	r1, [pc, #288]	; (800e010 <tcp_receive+0x734>)
 800def0:	4848      	ldr	r0, [pc, #288]	; (800e014 <tcp_receive+0x738>)
 800def2:	f005 fbbd 	bl	8013670 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800defc:	4293      	cmp	r3, r2
 800defe:	dd06      	ble.n	800df0e <tcp_receive+0x632>
 800df00:	4b42      	ldr	r3, [pc, #264]	; (800e00c <tcp_receive+0x730>)
 800df02:	f240 523d 	movw	r2, #1341	; 0x53d
 800df06:	4944      	ldr	r1, [pc, #272]	; (800e018 <tcp_receive+0x73c>)
 800df08:	4842      	ldr	r0, [pc, #264]	; (800e014 <tcp_receive+0x738>)
 800df0a:	f005 fbb1 	bl	8013670 <iprintf>
      if (inseg.p->len < off) {
 800df0e:	4b3e      	ldr	r3, [pc, #248]	; (800e008 <tcp_receive+0x72c>)
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	895b      	ldrh	r3, [r3, #10]
 800df14:	461a      	mov	r2, r3
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	4293      	cmp	r3, r2
 800df1a:	dd3e      	ble.n	800df9a <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df1c:	4b3a      	ldr	r3, [pc, #232]	; (800e008 <tcp_receive+0x72c>)
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	891b      	ldrh	r3, [r3, #8]
 800df22:	461a      	mov	r2, r3
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	4293      	cmp	r3, r2
 800df28:	dd06      	ble.n	800df38 <tcp_receive+0x65c>
 800df2a:	4b38      	ldr	r3, [pc, #224]	; (800e00c <tcp_receive+0x730>)
 800df2c:	f240 523f 	movw	r2, #1343	; 0x53f
 800df30:	493a      	ldr	r1, [pc, #232]	; (800e01c <tcp_receive+0x740>)
 800df32:	4838      	ldr	r0, [pc, #224]	; (800e014 <tcp_receive+0x738>)
 800df34:	f005 fb9c 	bl	8013670 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df38:	4b33      	ldr	r3, [pc, #204]	; (800e008 <tcp_receive+0x72c>)
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	891a      	ldrh	r2, [r3, #8]
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	b29b      	uxth	r3, r3
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800df46:	e00e      	b.n	800df66 <tcp_receive+0x68a>
          off -= p->len;
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	895b      	ldrh	r3, [r3, #10]
 800df4c:	461a      	mov	r2, r3
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df50:	1a9b      	subs	r3, r3, r2
 800df52:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	8a3a      	ldrh	r2, [r7, #16]
 800df58:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	2200      	movs	r2, #0
 800df5e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	895b      	ldrh	r3, [r3, #10]
 800df6a:	461a      	mov	r2, r3
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	4293      	cmp	r3, r2
 800df70:	dcea      	bgt.n	800df48 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	b29b      	uxth	r3, r3
 800df76:	425b      	negs	r3, r3
 800df78:	b29b      	uxth	r3, r3
 800df7a:	b21b      	sxth	r3, r3
 800df7c:	4619      	mov	r1, r3
 800df7e:	69b8      	ldr	r0, [r7, #24]
 800df80:	f7fc fbf6 	bl	800a770 <pbuf_header>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d01c      	beq.n	800dfc4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800df8a:	4b20      	ldr	r3, [pc, #128]	; (800e00c <tcp_receive+0x730>)
 800df8c:	f240 524c 	movw	r2, #1356	; 0x54c
 800df90:	4923      	ldr	r1, [pc, #140]	; (800e020 <tcp_receive+0x744>)
 800df92:	4820      	ldr	r0, [pc, #128]	; (800e014 <tcp_receive+0x738>)
 800df94:	f005 fb6c 	bl	8013670 <iprintf>
 800df98:	e014      	b.n	800dfc4 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800df9a:	4b1b      	ldr	r3, [pc, #108]	; (800e008 <tcp_receive+0x72c>)
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa0:	b292      	uxth	r2, r2
 800dfa2:	4252      	negs	r2, r2
 800dfa4:	b292      	uxth	r2, r2
 800dfa6:	b212      	sxth	r2, r2
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fc fbe0 	bl	800a770 <pbuf_header>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d006      	beq.n	800dfc4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800dfb6:	4b15      	ldr	r3, [pc, #84]	; (800e00c <tcp_receive+0x730>)
 800dfb8:	f240 5251 	movw	r2, #1361	; 0x551
 800dfbc:	4918      	ldr	r1, [pc, #96]	; (800e020 <tcp_receive+0x744>)
 800dfbe:	4815      	ldr	r0, [pc, #84]	; (800e014 <tcp_receive+0x738>)
 800dfc0:	f005 fb56 	bl	8013670 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800dfc4:	4b10      	ldr	r3, [pc, #64]	; (800e008 <tcp_receive+0x72c>)
 800dfc6:	891a      	ldrh	r2, [r3, #8]
 800dfc8:	4b0e      	ldr	r3, [pc, #56]	; (800e004 <tcp_receive+0x728>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	b299      	uxth	r1, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	1acb      	subs	r3, r1, r3
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	4413      	add	r3, r2
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	4b0a      	ldr	r3, [pc, #40]	; (800e008 <tcp_receive+0x72c>)
 800dfde:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	4a07      	ldr	r2, [pc, #28]	; (800e004 <tcp_receive+0x728>)
 800dfe6:	6013      	str	r3, [r2, #0]
 800dfe8:	4b07      	ldr	r3, [pc, #28]	; (800e008 <tcp_receive+0x72c>)
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	4a05      	ldr	r2, [pc, #20]	; (800e004 <tcp_receive+0x728>)
 800dfee:	6812      	ldr	r2, [r2, #0]
 800dff0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dff2:	e025      	b.n	800e040 <tcp_receive+0x764>
 800dff4:	2000b7e8 	.word	0x2000b7e8
 800dff8:	2000b7ec 	.word	0x2000b7ec
 800dffc:	2000b7ac 	.word	0x2000b7ac
 800e000:	2000b7ee 	.word	0x2000b7ee
 800e004:	2000b7e4 	.word	0x2000b7e4
 800e008:	2000b7c4 	.word	0x2000b7c4
 800e00c:	08015fbc 	.word	0x08015fbc
 800e010:	08016244 	.word	0x08016244
 800e014:	08016000 	.word	0x08016000
 800e018:	08016254 	.word	0x08016254
 800e01c:	08016264 	.word	0x08016264
 800e020:	08016274 	.word	0x08016274
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e024:	4b87      	ldr	r3, [pc, #540]	; (800e244 <tcp_receive+0x968>)
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da06      	bge.n	800e040 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7e9b      	ldrb	r3, [r3, #26]
 800e036:	f043 0302 	orr.w	r3, r3, #2
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e040:	4b80      	ldr	r3, [pc, #512]	; (800e244 <tcp_receive+0x968>)
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f2c0 8410 	blt.w	800e870 <tcp_receive+0xf94>
 800e050:	4b7c      	ldr	r3, [pc, #496]	; (800e244 <tcp_receive+0x968>)
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e05c:	440b      	add	r3, r1
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	3301      	adds	r3, #1
 800e062:	2b00      	cmp	r3, #0
 800e064:	f300 8404 	bgt.w	800e870 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e06c:	4b75      	ldr	r3, [pc, #468]	; (800e244 <tcp_receive+0x968>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	f040 8287 	bne.w	800e584 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e076:	4b74      	ldr	r3, [pc, #464]	; (800e248 <tcp_receive+0x96c>)
 800e078:	891c      	ldrh	r4, [r3, #8]
 800e07a:	4b73      	ldr	r3, [pc, #460]	; (800e248 <tcp_receive+0x96c>)
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	899b      	ldrh	r3, [r3, #12]
 800e080:	b29b      	uxth	r3, r3
 800e082:	4618      	mov	r0, r3
 800e084:	f7fb f9a0 	bl	80093c8 <lwip_htons>
 800e088:	4603      	mov	r3, r0
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <tcp_receive+0x7ba>
 800e092:	2301      	movs	r3, #1
 800e094:	e000      	b.n	800e098 <tcp_receive+0x7bc>
 800e096:	2300      	movs	r3, #0
 800e098:	4423      	add	r3, r4
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	4b6b      	ldr	r3, [pc, #428]	; (800e24c <tcp_receive+0x970>)
 800e09e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0a4:	4b69      	ldr	r3, [pc, #420]	; (800e24c <tcp_receive+0x970>)
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d26e      	bcs.n	800e18a <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e0ac:	4b66      	ldr	r3, [pc, #408]	; (800e248 <tcp_receive+0x96c>)
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	899b      	ldrh	r3, [r3, #12]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fb f987 	bl	80093c8 <lwip_htons>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d01b      	beq.n	800e0fc <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e0c4:	4b60      	ldr	r3, [pc, #384]	; (800e248 <tcp_receive+0x96c>)
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	899b      	ldrh	r3, [r3, #12]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0d0:	b29c      	uxth	r4, r3
 800e0d2:	4b5d      	ldr	r3, [pc, #372]	; (800e248 <tcp_receive+0x96c>)
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	899b      	ldrh	r3, [r3, #12]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fb f974 	bl	80093c8 <lwip_htons>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fb f96d 	bl	80093c8 <lwip_htons>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	4b55      	ldr	r3, [pc, #340]	; (800e248 <tcp_receive+0x96c>)
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	4322      	orrs	r2, r4
 800e0f8:	b292      	uxth	r2, r2
 800e0fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e100:	4b51      	ldr	r3, [pc, #324]	; (800e248 <tcp_receive+0x96c>)
 800e102:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e104:	4b50      	ldr	r3, [pc, #320]	; (800e248 <tcp_receive+0x96c>)
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	899b      	ldrh	r3, [r3, #12]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fb f95b 	bl	80093c8 <lwip_htons>
 800e112:	4603      	mov	r3, r0
 800e114:	f003 0302 	and.w	r3, r3, #2
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d005      	beq.n	800e128 <tcp_receive+0x84c>
            inseg.len -= 1;
 800e11c:	4b4a      	ldr	r3, [pc, #296]	; (800e248 <tcp_receive+0x96c>)
 800e11e:	891b      	ldrh	r3, [r3, #8]
 800e120:	3b01      	subs	r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	4b48      	ldr	r3, [pc, #288]	; (800e248 <tcp_receive+0x96c>)
 800e126:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e128:	4b47      	ldr	r3, [pc, #284]	; (800e248 <tcp_receive+0x96c>)
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	4a46      	ldr	r2, [pc, #280]	; (800e248 <tcp_receive+0x96c>)
 800e12e:	8912      	ldrh	r2, [r2, #8]
 800e130:	4611      	mov	r1, r2
 800e132:	4618      	mov	r0, r3
 800e134:	f7fc f9cc 	bl	800a4d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e138:	4b43      	ldr	r3, [pc, #268]	; (800e248 <tcp_receive+0x96c>)
 800e13a:	891c      	ldrh	r4, [r3, #8]
 800e13c:	4b42      	ldr	r3, [pc, #264]	; (800e248 <tcp_receive+0x96c>)
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	899b      	ldrh	r3, [r3, #12]
 800e142:	b29b      	uxth	r3, r3
 800e144:	4618      	mov	r0, r3
 800e146:	f7fb f93f 	bl	80093c8 <lwip_htons>
 800e14a:	4603      	mov	r3, r0
 800e14c:	f003 0303 	and.w	r3, r3, #3
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <tcp_receive+0x87c>
 800e154:	2301      	movs	r3, #1
 800e156:	e000      	b.n	800e15a <tcp_receive+0x87e>
 800e158:	2300      	movs	r3, #0
 800e15a:	4423      	add	r3, r4
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	4b3b      	ldr	r3, [pc, #236]	; (800e24c <tcp_receive+0x970>)
 800e160:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e162:	4b3a      	ldr	r3, [pc, #232]	; (800e24c <tcp_receive+0x970>)
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	4b36      	ldr	r3, [pc, #216]	; (800e244 <tcp_receive+0x968>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	441a      	add	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e176:	440b      	add	r3, r1
 800e178:	429a      	cmp	r2, r3
 800e17a:	d006      	beq.n	800e18a <tcp_receive+0x8ae>
 800e17c:	4b34      	ldr	r3, [pc, #208]	; (800e250 <tcp_receive+0x974>)
 800e17e:	f240 527e 	movw	r2, #1406	; 0x57e
 800e182:	4934      	ldr	r1, [pc, #208]	; (800e254 <tcp_receive+0x978>)
 800e184:	4834      	ldr	r0, [pc, #208]	; (800e258 <tcp_receive+0x97c>)
 800e186:	f005 fa73 	bl	8013670 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f000 80e1 	beq.w	800e356 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e194:	4b2c      	ldr	r3, [pc, #176]	; (800e248 <tcp_receive+0x96c>)
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	899b      	ldrh	r3, [r3, #12]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7fb f913 	bl	80093c8 <lwip_htons>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d010      	beq.n	800e1ce <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e1ac:	e00a      	b.n	800e1c4 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800e1be:	68b8      	ldr	r0, [r7, #8]
 800e1c0:	f7fd fe76 	bl	800beb0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1f0      	bne.n	800e1ae <tcp_receive+0x8d2>
 800e1cc:	e0c3      	b.n	800e356 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e1d4:	e04f      	b.n	800e276 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	899b      	ldrh	r3, [r3, #12]
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fb f8f2 	bl	80093c8 <lwip_htons>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d03b      	beq.n	800e266 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e1ee:	4b16      	ldr	r3, [pc, #88]	; (800e248 <tcp_receive+0x96c>)
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	899b      	ldrh	r3, [r3, #12]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fb f8e6 	bl	80093c8 <lwip_htons>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e202:	2b00      	cmp	r3, #0
 800e204:	d12f      	bne.n	800e266 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e206:	4b10      	ldr	r3, [pc, #64]	; (800e248 <tcp_receive+0x96c>)
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	899b      	ldrh	r3, [r3, #12]
 800e20c:	b29c      	uxth	r4, r3
 800e20e:	2001      	movs	r0, #1
 800e210:	f7fb f8da 	bl	80093c8 <lwip_htons>
 800e214:	4603      	mov	r3, r0
 800e216:	461a      	mov	r2, r3
 800e218:	4b0b      	ldr	r3, [pc, #44]	; (800e248 <tcp_receive+0x96c>)
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	4322      	orrs	r2, r4
 800e21e:	b292      	uxth	r2, r2
 800e220:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e222:	4b09      	ldr	r3, [pc, #36]	; (800e248 <tcp_receive+0x96c>)
 800e224:	891c      	ldrh	r4, [r3, #8]
 800e226:	4b08      	ldr	r3, [pc, #32]	; (800e248 <tcp_receive+0x96c>)
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	899b      	ldrh	r3, [r3, #12]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fb f8ca 	bl	80093c8 <lwip_htons>
 800e234:	4603      	mov	r3, r0
 800e236:	f003 0303 	and.w	r3, r3, #3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00e      	beq.n	800e25c <tcp_receive+0x980>
 800e23e:	2301      	movs	r3, #1
 800e240:	e00d      	b.n	800e25e <tcp_receive+0x982>
 800e242:	bf00      	nop
 800e244:	2000b7e4 	.word	0x2000b7e4
 800e248:	2000b7c4 	.word	0x2000b7c4
 800e24c:	2000b7ee 	.word	0x2000b7ee
 800e250:	08015fbc 	.word	0x08015fbc
 800e254:	08016288 	.word	0x08016288
 800e258:	08016000 	.word	0x08016000
 800e25c:	2300      	movs	r3, #0
 800e25e:	4423      	add	r3, r4
 800e260:	b29a      	uxth	r2, r3
 800e262:	4b95      	ldr	r3, [pc, #596]	; (800e4b8 <tcp_receive+0xbdc>)
 800e264:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800e270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e272:	f7fd fe1d 	bl	800beb0 <tcp_seg_free>
            while (next &&
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00e      	beq.n	800e29a <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e27c:	4b8e      	ldr	r3, [pc, #568]	; (800e4b8 <tcp_receive+0xbdc>)
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	461a      	mov	r2, r3
 800e282:	4b8e      	ldr	r3, [pc, #568]	; (800e4bc <tcp_receive+0xbe0>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	441a      	add	r2, r3
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e290:	8909      	ldrh	r1, [r1, #8]
 800e292:	440b      	add	r3, r1
 800e294:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e296:	2b00      	cmp	r3, #0
 800e298:	da9d      	bge.n	800e1d6 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d057      	beq.n	800e350 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800e2a0:	4b85      	ldr	r3, [pc, #532]	; (800e4b8 <tcp_receive+0xbdc>)
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	4b85      	ldr	r3, [pc, #532]	; (800e4bc <tcp_receive+0xbe0>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	441a      	add	r2, r3
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	dd4b      	ble.n	800e350 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	4b7e      	ldr	r3, [pc, #504]	; (800e4bc <tcp_receive+0xbe0>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	4b7d      	ldr	r3, [pc, #500]	; (800e4c0 <tcp_receive+0xbe4>)
 800e2cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e2ce:	4b7c      	ldr	r3, [pc, #496]	; (800e4c0 <tcp_receive+0xbe4>)
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	899b      	ldrh	r3, [r3, #12]
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fb f876 	bl	80093c8 <lwip_htons>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	f003 0302 	and.w	r3, r3, #2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d005      	beq.n	800e2f2 <tcp_receive+0xa16>
                inseg.len -= 1;
 800e2e6:	4b76      	ldr	r3, [pc, #472]	; (800e4c0 <tcp_receive+0xbe4>)
 800e2e8:	891b      	ldrh	r3, [r3, #8]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	4b74      	ldr	r3, [pc, #464]	; (800e4c0 <tcp_receive+0xbe4>)
 800e2f0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e2f2:	4b73      	ldr	r3, [pc, #460]	; (800e4c0 <tcp_receive+0xbe4>)
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	4a72      	ldr	r2, [pc, #456]	; (800e4c0 <tcp_receive+0xbe4>)
 800e2f8:	8912      	ldrh	r2, [r2, #8]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fc f8e7 	bl	800a4d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e302:	4b6f      	ldr	r3, [pc, #444]	; (800e4c0 <tcp_receive+0xbe4>)
 800e304:	891c      	ldrh	r4, [r3, #8]
 800e306:	4b6e      	ldr	r3, [pc, #440]	; (800e4c0 <tcp_receive+0xbe4>)
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	899b      	ldrh	r3, [r3, #12]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fb f85a 	bl	80093c8 <lwip_htons>
 800e314:	4603      	mov	r3, r0
 800e316:	f003 0303 	and.w	r3, r3, #3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <tcp_receive+0xa46>
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <tcp_receive+0xa48>
 800e322:	2300      	movs	r3, #0
 800e324:	4423      	add	r3, r4
 800e326:	b29a      	uxth	r2, r3
 800e328:	4b63      	ldr	r3, [pc, #396]	; (800e4b8 <tcp_receive+0xbdc>)
 800e32a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e32c:	4b62      	ldr	r3, [pc, #392]	; (800e4b8 <tcp_receive+0xbdc>)
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	461a      	mov	r2, r3
 800e332:	4b62      	ldr	r3, [pc, #392]	; (800e4bc <tcp_receive+0xbe0>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	441a      	add	r2, r3
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d006      	beq.n	800e350 <tcp_receive+0xa74>
 800e342:	4b60      	ldr	r3, [pc, #384]	; (800e4c4 <tcp_receive+0xbe8>)
 800e344:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e348:	495f      	ldr	r1, [pc, #380]	; (800e4c8 <tcp_receive+0xbec>)
 800e34a:	4860      	ldr	r0, [pc, #384]	; (800e4cc <tcp_receive+0xbf0>)
 800e34c:	f005 f990 	bl	8013670 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e354:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e356:	4b58      	ldr	r3, [pc, #352]	; (800e4b8 <tcp_receive+0xbdc>)
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	4b57      	ldr	r3, [pc, #348]	; (800e4bc <tcp_receive+0xbe0>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	441a      	add	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e36a:	4b53      	ldr	r3, [pc, #332]	; (800e4b8 <tcp_receive+0xbdc>)
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d206      	bcs.n	800e380 <tcp_receive+0xaa4>
 800e372:	4b54      	ldr	r3, [pc, #336]	; (800e4c4 <tcp_receive+0xbe8>)
 800e374:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e378:	4955      	ldr	r1, [pc, #340]	; (800e4d0 <tcp_receive+0xbf4>)
 800e37a:	4854      	ldr	r0, [pc, #336]	; (800e4cc <tcp_receive+0xbf0>)
 800e37c:	f005 f978 	bl	8013670 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e384:	4b4c      	ldr	r3, [pc, #304]	; (800e4b8 <tcp_receive+0xbdc>)
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7fd f809 	bl	800b3a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e396:	4b4a      	ldr	r3, [pc, #296]	; (800e4c0 <tcp_receive+0xbe4>)
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	891b      	ldrh	r3, [r3, #8]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d006      	beq.n	800e3ae <tcp_receive+0xad2>
          recv_data = inseg.p;
 800e3a0:	4b47      	ldr	r3, [pc, #284]	; (800e4c0 <tcp_receive+0xbe4>)
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	4a4b      	ldr	r2, [pc, #300]	; (800e4d4 <tcp_receive+0xbf8>)
 800e3a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e3a8:	4b45      	ldr	r3, [pc, #276]	; (800e4c0 <tcp_receive+0xbe4>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e3ae:	4b44      	ldr	r3, [pc, #272]	; (800e4c0 <tcp_receive+0xbe4>)
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	899b      	ldrh	r3, [r3, #12]
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fb f806 	bl	80093c8 <lwip_htons>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 80b4 	beq.w	800e530 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e3c8:	4b43      	ldr	r3, [pc, #268]	; (800e4d8 <tcp_receive+0xbfc>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f043 0320 	orr.w	r3, r3, #32
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	4b41      	ldr	r3, [pc, #260]	; (800e4d8 <tcp_receive+0xbfc>)
 800e3d4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e3d6:	e0ab      	b.n	800e530 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3dc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	4a35      	ldr	r2, [pc, #212]	; (800e4bc <tcp_receive+0xbe0>)
 800e3e8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	891b      	ldrh	r3, [r3, #8]
 800e3ee:	461c      	mov	r4, r3
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	899b      	ldrh	r3, [r3, #12]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fa ffe5 	bl	80093c8 <lwip_htons>
 800e3fe:	4603      	mov	r3, r0
 800e400:	f003 0303 	and.w	r3, r3, #3
 800e404:	2b00      	cmp	r3, #0
 800e406:	d001      	beq.n	800e40c <tcp_receive+0xb30>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <tcp_receive+0xb32>
 800e40c:	2300      	movs	r3, #0
 800e40e:	191a      	adds	r2, r3, r4
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e414:	441a      	add	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e41e:	461c      	mov	r4, r3
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	891b      	ldrh	r3, [r3, #8]
 800e424:	461d      	mov	r5, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	899b      	ldrh	r3, [r3, #12]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fa ffca 	bl	80093c8 <lwip_htons>
 800e434:	4603      	mov	r3, r0
 800e436:	f003 0303 	and.w	r3, r3, #3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <tcp_receive+0xb66>
 800e43e:	2301      	movs	r3, #1
 800e440:	e000      	b.n	800e444 <tcp_receive+0xb68>
 800e442:	2300      	movs	r3, #0
 800e444:	442b      	add	r3, r5
 800e446:	429c      	cmp	r4, r3
 800e448:	d206      	bcs.n	800e458 <tcp_receive+0xb7c>
 800e44a:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <tcp_receive+0xbe8>)
 800e44c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800e450:	4922      	ldr	r1, [pc, #136]	; (800e4dc <tcp_receive+0xc00>)
 800e452:	481e      	ldr	r0, [pc, #120]	; (800e4cc <tcp_receive+0xbf0>)
 800e454:	f005 f90c 	bl	8013670 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	891b      	ldrh	r3, [r3, #8]
 800e45c:	461c      	mov	r4, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	899b      	ldrh	r3, [r3, #12]
 800e464:	b29b      	uxth	r3, r3
 800e466:	4618      	mov	r0, r3
 800e468:	f7fa ffae 	bl	80093c8 <lwip_htons>
 800e46c:	4603      	mov	r3, r0
 800e46e:	f003 0303 	and.w	r3, r3, #3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <tcp_receive+0xb9e>
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <tcp_receive+0xba0>
 800e47a:	2300      	movs	r3, #0
 800e47c:	1919      	adds	r1, r3, r4
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e482:	b28b      	uxth	r3, r1
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	b29a      	uxth	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7fc ff8b 	bl	800b3a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	891b      	ldrh	r3, [r3, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d028      	beq.n	800e4ee <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e49c:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <tcp_receive+0xbf8>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d01d      	beq.n	800e4e0 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800e4a4:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <tcp_receive+0xbf8>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	f7fc fa5a 	bl	800a968 <pbuf_cat>
 800e4b4:	e018      	b.n	800e4e8 <tcp_receive+0xc0c>
 800e4b6:	bf00      	nop
 800e4b8:	2000b7ee 	.word	0x2000b7ee
 800e4bc:	2000b7e4 	.word	0x2000b7e4
 800e4c0:	2000b7c4 	.word	0x2000b7c4
 800e4c4:	08015fbc 	.word	0x08015fbc
 800e4c8:	080162c0 	.word	0x080162c0
 800e4cc:	08016000 	.word	0x08016000
 800e4d0:	080162fc 	.word	0x080162fc
 800e4d4:	2000b7f4 	.word	0x2000b7f4
 800e4d8:	2000b7f1 	.word	0x2000b7f1
 800e4dc:	0801631c 	.word	0x0801631c
            } else {
              recv_data = cseg->p;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	4a71      	ldr	r2, [pc, #452]	; (800e6ac <tcp_receive+0xdd0>)
 800e4e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	899b      	ldrh	r3, [r3, #12]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fa ff66 	bl	80093c8 <lwip_htons>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	f003 0301 	and.w	r3, r3, #1
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00d      	beq.n	800e522 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e506:	4b6a      	ldr	r3, [pc, #424]	; (800e6b0 <tcp_receive+0xdd4>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	f043 0320 	orr.w	r3, r3, #32
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	4b67      	ldr	r3, [pc, #412]	; (800e6b0 <tcp_receive+0xdd4>)
 800e512:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	2b04      	cmp	r3, #4
 800e51a:	d102      	bne.n	800e522 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2207      	movs	r2, #7
 800e520:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f7fd fcc0 	bl	800beb0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e534:	2b00      	cmp	r3, #0
 800e536:	d008      	beq.n	800e54a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	685a      	ldr	r2, [r3, #4]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e544:	429a      	cmp	r2, r3
 800e546:	f43f af47 	beq.w	800e3d8 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	7e9b      	ldrb	r3, [r3, #26]
 800e54e:	f003 0301 	and.w	r3, r3, #1
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00e      	beq.n	800e574 <tcp_receive+0xc98>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	7e9b      	ldrb	r3, [r3, #26]
 800e55a:	f023 0301 	bic.w	r3, r3, #1
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	769a      	strb	r2, [r3, #26]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	7e9b      	ldrb	r3, [r3, #26]
 800e568:	f043 0302 	orr.w	r3, r3, #2
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e572:	e181      	b.n	800e878 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7e9b      	ldrb	r3, [r3, #26]
 800e578:	f043 0301 	orr.w	r3, r3, #1
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e582:	e179      	b.n	800e878 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f001 f8c3 	bl	800f710 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d106      	bne.n	800e5a0 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e592:	4848      	ldr	r0, [pc, #288]	; (800e6b4 <tcp_receive+0xdd8>)
 800e594:	f7fd fca4 	bl	800bee0 <tcp_seg_copy>
 800e598:	4602      	mov	r2, r0
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800e59e:	e16b      	b.n	800e878 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5aa:	e150      	b.n	800e84e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	685a      	ldr	r2, [r3, #4]
 800e5b2:	4b41      	ldr	r3, [pc, #260]	; (800e6b8 <tcp_receive+0xddc>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d11d      	bne.n	800e5f6 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e5ba:	4b3e      	ldr	r3, [pc, #248]	; (800e6b4 <tcp_receive+0xdd8>)
 800e5bc:	891a      	ldrh	r2, [r3, #8]
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	891b      	ldrh	r3, [r3, #8]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	f240 8148 	bls.w	800e858 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800e5c8:	483a      	ldr	r0, [pc, #232]	; (800e6b4 <tcp_receive+0xdd8>)
 800e5ca:	f7fd fc89 	bl	800bee0 <tcp_seg_copy>
 800e5ce:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 8142 	beq.w	800e85c <tcp_receive+0xf80>
                  if (prev != NULL) {
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d003      	beq.n	800e5e6 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	e002      	b.n	800e5ec <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e5ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7ff f8fe 	bl	800d7f0 <tcp_oos_insert_segment>
                }
                break;
 800e5f4:	e132      	b.n	800e85c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d117      	bne.n	800e62c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e5fc:	4b2e      	ldr	r3, [pc, #184]	; (800e6b8 <tcp_receive+0xddc>)
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da57      	bge.n	800e6bc <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800e60c:	4829      	ldr	r0, [pc, #164]	; (800e6b4 <tcp_receive+0xdd8>)
 800e60e:	f7fd fc67 	bl	800bee0 <tcp_seg_copy>
 800e612:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 8122 	beq.w	800e860 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800e622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7ff f8e3 	bl	800d7f0 <tcp_oos_insert_segment>
                  }
                  break;
 800e62a:	e119      	b.n	800e860 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800e62c:	4b22      	ldr	r3, [pc, #136]	; (800e6b8 <tcp_receive+0xddc>)
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	3b01      	subs	r3, #1
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	db3e      	blt.n	800e6bc <tcp_receive+0xde0>
 800e63e:	4b1e      	ldr	r3, [pc, #120]	; (800e6b8 <tcp_receive+0xddc>)
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	3301      	adds	r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	dc35      	bgt.n	800e6bc <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800e650:	4818      	ldr	r0, [pc, #96]	; (800e6b4 <tcp_receive+0xdd8>)
 800e652:	f7fd fc45 	bl	800bee0 <tcp_seg_copy>
 800e656:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f000 8102 	beq.w	800e864 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e668:	8912      	ldrh	r2, [r2, #8]
 800e66a:	441a      	add	r2, r3
 800e66c:	4b12      	ldr	r3, [pc, #72]	; (800e6b8 <tcp_receive+0xddc>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	dd12      	ble.n	800e69c <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e676:	4b10      	ldr	r3, [pc, #64]	; (800e6b8 <tcp_receive+0xddc>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	b29b      	uxth	r3, r3
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	b29a      	uxth	r2, r3
 800e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	891b      	ldrh	r3, [r3, #8]
 800e694:	4619      	mov	r1, r3
 800e696:	4610      	mov	r0, r2
 800e698:	f7fb ff1a 	bl	800a4d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e6a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff f8a3 	bl	800d7f0 <tcp_oos_insert_segment>
                  }
                  break;
 800e6aa:	e0db      	b.n	800e864 <tcp_receive+0xf88>
 800e6ac:	2000b7f4 	.word	0x2000b7f4
 800e6b0:	2000b7f1 	.word	0x2000b7f1
 800e6b4:	2000b7c4 	.word	0x2000b7c4
 800e6b8:	2000b7e4 	.word	0x2000b7e4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f040 80bf 	bne.w	800e844 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e6c6:	4b7c      	ldr	r3, [pc, #496]	; (800e8b8 <tcp_receive+0xfdc>)
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f340 80b6 	ble.w	800e844 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	899b      	ldrh	r3, [r3, #12]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fa fe71 	bl	80093c8 <lwip_htons>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	f003 0301 	and.w	r3, r3, #1
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f040 80bb 	bne.w	800e868 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e6f2:	4872      	ldr	r0, [pc, #456]	; (800e8bc <tcp_receive+0xfe0>)
 800e6f4:	f7fd fbf4 	bl	800bee0 <tcp_seg_copy>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	f000 80b2 	beq.w	800e86c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e710:	8912      	ldrh	r2, [r2, #8]
 800e712:	441a      	add	r2, r3
 800e714:	4b68      	ldr	r3, [pc, #416]	; (800e8b8 <tcp_receive+0xfdc>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	1ad3      	subs	r3, r2, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	dd12      	ble.n	800e744 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e71e:	4b66      	ldr	r3, [pc, #408]	; (800e8b8 <tcp_receive+0xfdc>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	b29a      	uxth	r2, r3
 800e724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	b29a      	uxth	r2, r3
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	685a      	ldr	r2, [r3, #4]
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	891b      	ldrh	r3, [r3, #8]
 800e73c:	4619      	mov	r1, r3
 800e73e:	4610      	mov	r0, r2
 800e740:	f7fb fec6 	bl	800a4d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e744:	4b5e      	ldr	r3, [pc, #376]	; (800e8c0 <tcp_receive+0xfe4>)
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	461a      	mov	r2, r3
 800e74a:	4b5b      	ldr	r3, [pc, #364]	; (800e8b8 <tcp_receive+0xfdc>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	441a      	add	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e754:	6879      	ldr	r1, [r7, #4]
 800e756:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e758:	440b      	add	r3, r1
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f340 8085 	ble.w	800e86c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	899b      	ldrh	r3, [r3, #12]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fa fe2b 	bl	80093c8 <lwip_htons>
 800e772:	4603      	mov	r3, r0
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01e      	beq.n	800e7ba <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	899b      	ldrh	r3, [r3, #12]
 800e784:	b29b      	uxth	r3, r3
 800e786:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e78a:	b29c      	uxth	r4, r3
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	899b      	ldrh	r3, [r3, #12]
 800e794:	b29b      	uxth	r3, r3
 800e796:	4618      	mov	r0, r3
 800e798:	f7fa fe16 	bl	80093c8 <lwip_htons>
 800e79c:	4603      	mov	r3, r0
 800e79e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fa fe0f 	bl	80093c8 <lwip_htons>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	4322      	orrs	r2, r4
 800e7b6:	b292      	uxth	r2, r2
 800e7b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7c4:	4413      	add	r3, r2
 800e7c6:	b299      	uxth	r1, r3
 800e7c8:	4b3b      	ldr	r3, [pc, #236]	; (800e8b8 <tcp_receive+0xfdc>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	1a8a      	subs	r2, r1, r2
 800e7d4:	b292      	uxth	r2, r2
 800e7d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	891b      	ldrh	r3, [r3, #8]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	f7fb fe72 	bl	800a4d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	891c      	ldrh	r4, [r3, #8]
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	899b      	ldrh	r3, [r3, #12]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fa fde3 	bl	80093c8 <lwip_htons>
 800e802:	4603      	mov	r3, r0
 800e804:	f003 0303 	and.w	r3, r3, #3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d001      	beq.n	800e810 <tcp_receive+0xf34>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e000      	b.n	800e812 <tcp_receive+0xf36>
 800e810:	2300      	movs	r3, #0
 800e812:	4423      	add	r3, r4
 800e814:	b29a      	uxth	r2, r3
 800e816:	4b2a      	ldr	r3, [pc, #168]	; (800e8c0 <tcp_receive+0xfe4>)
 800e818:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e81a:	4b29      	ldr	r3, [pc, #164]	; (800e8c0 <tcp_receive+0xfe4>)
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	461a      	mov	r2, r3
 800e820:	4b25      	ldr	r3, [pc, #148]	; (800e8b8 <tcp_receive+0xfdc>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	441a      	add	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82a:	6879      	ldr	r1, [r7, #4]
 800e82c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e82e:	440b      	add	r3, r1
 800e830:	429a      	cmp	r2, r3
 800e832:	d01b      	beq.n	800e86c <tcp_receive+0xf90>
 800e834:	4b23      	ldr	r3, [pc, #140]	; (800e8c4 <tcp_receive+0xfe8>)
 800e836:	f240 627a 	movw	r2, #1658	; 0x67a
 800e83a:	4923      	ldr	r1, [pc, #140]	; (800e8c8 <tcp_receive+0xfec>)
 800e83c:	4823      	ldr	r0, [pc, #140]	; (800e8cc <tcp_receive+0xff0>)
 800e83e:	f004 ff17 	bl	8013670 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e842:	e013      	b.n	800e86c <tcp_receive+0xf90>
              }
            }
            prev = next;
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	2b00      	cmp	r3, #0
 800e852:	f47f aeab 	bne.w	800e5ac <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800e856:	e00f      	b.n	800e878 <tcp_receive+0xf9c>
                break;
 800e858:	bf00      	nop
 800e85a:	e00d      	b.n	800e878 <tcp_receive+0xf9c>
                break;
 800e85c:	bf00      	nop
 800e85e:	e00b      	b.n	800e878 <tcp_receive+0xf9c>
                  break;
 800e860:	bf00      	nop
 800e862:	e009      	b.n	800e878 <tcp_receive+0xf9c>
                  break;
 800e864:	bf00      	nop
 800e866:	e007      	b.n	800e878 <tcp_receive+0xf9c>
                  break;
 800e868:	bf00      	nop
 800e86a:	e005      	b.n	800e878 <tcp_receive+0xf9c>
                break;
 800e86c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800e86e:	e003      	b.n	800e878 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 ff4d 	bl	800f710 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e876:	e01a      	b.n	800e8ae <tcp_receive+0xfd2>
 800e878:	e019      	b.n	800e8ae <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e87a:	4b0f      	ldr	r3, [pc, #60]	; (800e8b8 <tcp_receive+0xfdc>)
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	db0a      	blt.n	800e89e <tcp_receive+0xfc2>
 800e888:	4b0b      	ldr	r3, [pc, #44]	; (800e8b8 <tcp_receive+0xfdc>)
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e894:	440b      	add	r3, r1
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	3301      	adds	r3, #1
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	dd07      	ble.n	800e8ae <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7e9b      	ldrb	r3, [r3, #26]
 800e8a2:	f043 0302 	orr.w	r3, r3, #2
 800e8a6:	b2da      	uxtb	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800e8ac:	e7ff      	b.n	800e8ae <tcp_receive+0xfd2>
 800e8ae:	bf00      	nop
 800e8b0:	3734      	adds	r7, #52	; 0x34
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	2000b7e4 	.word	0x2000b7e4
 800e8bc:	2000b7c4 	.word	0x2000b7c4
 800e8c0:	2000b7ee 	.word	0x2000b7ee
 800e8c4:	08015fbc 	.word	0x08015fbc
 800e8c8:	08016288 	.word	0x08016288
 800e8cc:	08016000 	.word	0x08016000

0800e8d0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800e8d6:	4b17      	ldr	r3, [pc, #92]	; (800e934 <tcp_getoptbyte+0x64>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d005      	beq.n	800e8ea <tcp_getoptbyte+0x1a>
 800e8de:	4b16      	ldr	r3, [pc, #88]	; (800e938 <tcp_getoptbyte+0x68>)
 800e8e0:	881a      	ldrh	r2, [r3, #0]
 800e8e2:	4b16      	ldr	r3, [pc, #88]	; (800e93c <tcp_getoptbyte+0x6c>)
 800e8e4:	881b      	ldrh	r3, [r3, #0]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d20e      	bcs.n	800e908 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800e8ea:	4b15      	ldr	r3, [pc, #84]	; (800e940 <tcp_getoptbyte+0x70>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3314      	adds	r3, #20
 800e8f0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800e8f2:	4b11      	ldr	r3, [pc, #68]	; (800e938 <tcp_getoptbyte+0x68>)
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	1c5a      	adds	r2, r3, #1
 800e8f8:	b291      	uxth	r1, r2
 800e8fa:	4a0f      	ldr	r2, [pc, #60]	; (800e938 <tcp_getoptbyte+0x68>)
 800e8fc:	8011      	strh	r1, [r2, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	4413      	add	r3, r2
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	e010      	b.n	800e92a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800e908:	4b0b      	ldr	r3, [pc, #44]	; (800e938 <tcp_getoptbyte+0x68>)
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	1c5a      	adds	r2, r3, #1
 800e90e:	b291      	uxth	r1, r2
 800e910:	4a09      	ldr	r2, [pc, #36]	; (800e938 <tcp_getoptbyte+0x68>)
 800e912:	8011      	strh	r1, [r2, #0]
 800e914:	b2da      	uxtb	r2, r3
 800e916:	4b09      	ldr	r3, [pc, #36]	; (800e93c <tcp_getoptbyte+0x6c>)
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800e920:	4b04      	ldr	r3, [pc, #16]	; (800e934 <tcp_getoptbyte+0x64>)
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	4413      	add	r3, r2
 800e928:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	370c      	adds	r7, #12
 800e92e:	46bd      	mov	sp, r7
 800e930:	bc80      	pop	{r7}
 800e932:	4770      	bx	lr
 800e934:	2000b7dc 	.word	0x2000b7dc
 800e938:	2000b7e0 	.word	0x2000b7e0
 800e93c:	2000b7da 	.word	0x2000b7da
 800e940:	2000b7d4 	.word	0x2000b7d4

0800e944 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e94c:	4b2e      	ldr	r3, [pc, #184]	; (800ea08 <tcp_parseopt+0xc4>)
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d055      	beq.n	800ea00 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e954:	4b2d      	ldr	r3, [pc, #180]	; (800ea0c <tcp_parseopt+0xc8>)
 800e956:	2200      	movs	r2, #0
 800e958:	801a      	strh	r2, [r3, #0]
 800e95a:	e045      	b.n	800e9e8 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800e95c:	f7ff ffb8 	bl	800e8d0 <tcp_getoptbyte>
 800e960:	4603      	mov	r3, r0
 800e962:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e964:	7bfb      	ldrb	r3, [r7, #15]
 800e966:	2b02      	cmp	r3, #2
 800e968:	d006      	beq.n	800e978 <tcp_parseopt+0x34>
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	dc2b      	bgt.n	800e9c6 <tcp_parseopt+0x82>
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d041      	beq.n	800e9f6 <tcp_parseopt+0xb2>
 800e972:	2b01      	cmp	r3, #1
 800e974:	d127      	bne.n	800e9c6 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800e976:	e037      	b.n	800e9e8 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e978:	f7ff ffaa 	bl	800e8d0 <tcp_getoptbyte>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b04      	cmp	r3, #4
 800e980:	d13b      	bne.n	800e9fa <tcp_parseopt+0xb6>
 800e982:	4b22      	ldr	r3, [pc, #136]	; (800ea0c <tcp_parseopt+0xc8>)
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	3301      	adds	r3, #1
 800e988:	4a1f      	ldr	r2, [pc, #124]	; (800ea08 <tcp_parseopt+0xc4>)
 800e98a:	8812      	ldrh	r2, [r2, #0]
 800e98c:	4293      	cmp	r3, r2
 800e98e:	da34      	bge.n	800e9fa <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800e990:	f7ff ff9e 	bl	800e8d0 <tcp_getoptbyte>
 800e994:	4603      	mov	r3, r0
 800e996:	b29b      	uxth	r3, r3
 800e998:	021b      	lsls	r3, r3, #8
 800e99a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800e99c:	f7ff ff98 	bl	800e8d0 <tcp_getoptbyte>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	89bb      	ldrh	r3, [r7, #12]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e9aa:	89bb      	ldrh	r3, [r7, #12]
 800e9ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e9b0:	d804      	bhi.n	800e9bc <tcp_parseopt+0x78>
 800e9b2:	89bb      	ldrh	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d001      	beq.n	800e9bc <tcp_parseopt+0x78>
 800e9b8:	89ba      	ldrh	r2, [r7, #12]
 800e9ba:	e001      	b.n	800e9c0 <tcp_parseopt+0x7c>
 800e9bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800e9c4:	e010      	b.n	800e9e8 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800e9c6:	f7ff ff83 	bl	800e8d0 <tcp_getoptbyte>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800e9ce:	7afb      	ldrb	r3, [r7, #11]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d914      	bls.n	800e9fe <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800e9d4:	7afb      	ldrb	r3, [r7, #11]
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ea0c <tcp_parseopt+0xc8>)
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	4413      	add	r3, r2
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	3b02      	subs	r3, #2
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <tcp_parseopt+0xc8>)
 800e9e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e9e8:	4b08      	ldr	r3, [pc, #32]	; (800ea0c <tcp_parseopt+0xc8>)
 800e9ea:	881a      	ldrh	r2, [r3, #0]
 800e9ec:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <tcp_parseopt+0xc4>)
 800e9ee:	881b      	ldrh	r3, [r3, #0]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d3b3      	bcc.n	800e95c <tcp_parseopt+0x18>
 800e9f4:	e004      	b.n	800ea00 <tcp_parseopt+0xbc>
        return;
 800e9f6:	bf00      	nop
 800e9f8:	e002      	b.n	800ea00 <tcp_parseopt+0xbc>
          return;
 800e9fa:	bf00      	nop
 800e9fc:	e000      	b.n	800ea00 <tcp_parseopt+0xbc>
          return;
 800e9fe:	bf00      	nop
      }
    }
  }
}
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	2000b7d8 	.word	0x2000b7d8
 800ea0c:	2000b7e0 	.word	0x2000b7e0

0800ea10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ea14:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <tcp_trigger_input_pcb_close+0x1c>)
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	f043 0310 	orr.w	r3, r3, #16
 800ea1c:	b2da      	uxtb	r2, r3
 800ea1e:	4b03      	ldr	r3, [pc, #12]	; (800ea2c <tcp_trigger_input_pcb_close+0x1c>)
 800ea20:	701a      	strb	r2, [r3, #0]
}
 800ea22:	bf00      	nop
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bc80      	pop	{r7}
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	2000b7f1 	.word	0x2000b7f1

0800ea30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	607b      	str	r3, [r7, #4]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	817b      	strh	r3, [r7, #10]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ea42:	897a      	ldrh	r2, [r7, #10]
 800ea44:	893b      	ldrh	r3, [r7, #8]
 800ea46:	4413      	add	r3, r2
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	3314      	adds	r3, #20
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4619      	mov	r1, r3
 800ea52:	2001      	movs	r0, #1
 800ea54:	f7fb fb38 	bl	800a0c8 <pbuf_alloc>
 800ea58:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d056      	beq.n	800eb0e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ea60:	897b      	ldrh	r3, [r7, #10]
 800ea62:	3313      	adds	r3, #19
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	8952      	ldrh	r2, [r2, #10]
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	db05      	blt.n	800ea78 <tcp_output_alloc_header+0x48>
 800ea6c:	4b2a      	ldr	r3, [pc, #168]	; (800eb18 <tcp_output_alloc_header+0xe8>)
 800ea6e:	2272      	movs	r2, #114	; 0x72
 800ea70:	492a      	ldr	r1, [pc, #168]	; (800eb1c <tcp_output_alloc_header+0xec>)
 800ea72:	482b      	ldr	r0, [pc, #172]	; (800eb20 <tcp_output_alloc_header+0xf0>)
 800ea74:	f004 fdfc 	bl	8013670 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	8adb      	ldrh	r3, [r3, #22]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fa fca0 	bl	80093c8 <lwip_htons>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	8b1b      	ldrh	r3, [r3, #24]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fa fc97 	bl	80093c8 <lwip_htons>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fa fc98 	bl	80093e2 <lwip_htonl>
 800eab2:	4602      	mov	r2, r0
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800eab8:	897b      	ldrh	r3, [r7, #10]
 800eaba:	089b      	lsrs	r3, r3, #2
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	3305      	adds	r3, #5
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	031b      	lsls	r3, r3, #12
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	f043 0310 	orr.w	r3, r3, #16
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fa fc7b 	bl	80093c8 <lwip_htons>
 800ead2:	4603      	mov	r3, r0
 800ead4:	461a      	mov	r2, r3
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fa fc72 	bl	80093c8 <lwip_htons>
 800eae4:	4603      	mov	r3, r0
 800eae6:	461a      	mov	r2, r3
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	741a      	strb	r2, [r3, #16]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	749a      	strb	r2, [r3, #18]
 800eafc:	2200      	movs	r2, #0
 800eafe:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800eb08:	441a      	add	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800eb0e:	697b      	ldr	r3, [r7, #20]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3718      	adds	r7, #24
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	08016344 	.word	0x08016344
 800eb1c:	08016378 	.word	0x08016378
 800eb20:	080163a8 	.word	0x080163a8

0800eb24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d02d      	beq.n	800eb90 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e002      	b.n	800eb42 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1f8      	bne.n	800eb3c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	899b      	ldrh	r3, [r3, #12]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fa fc38 	bl	80093c8 <lwip_htons>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d116      	bne.n	800eb90 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	899b      	ldrh	r3, [r3, #12]
 800eb68:	b29c      	uxth	r4, r3
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	f7fa fc2c 	bl	80093c8 <lwip_htons>
 800eb70:	4603      	mov	r3, r0
 800eb72:	461a      	mov	r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	4322      	orrs	r2, r4
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	7e9b      	ldrb	r3, [r3, #26]
 800eb82:	f043 0320 	orr.w	r3, r3, #32
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	e004      	b.n	800eb9a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800eb90:	2101      	movs	r1, #1
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fcc0 	bl	800f518 <tcp_enqueue_flags>
 800eb98:	4603      	mov	r3, r0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd90      	pop	{r4, r7, pc}
	...

0800eba4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800eba4:	b590      	push	{r4, r7, lr}
 800eba6:	b087      	sub	sp, #28
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ebb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	f003 0304 	and.w	r3, r3, #4
 800ebc0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ebc2:	2003      	movs	r0, #3
 800ebc4:	f7fa ffec 	bl	8009ba0 <memp_malloc>
 800ebc8:	6138      	str	r0, [r7, #16]
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ebd0:	68b8      	ldr	r0, [r7, #8]
 800ebd2:	f7fb fdf1 	bl	800a7b8 <pbuf_free>
    return NULL;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	e061      	b.n	800ec9e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ebe0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	891a      	ldrh	r2, [r3, #8]
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d205      	bcs.n	800ec06 <tcp_create_segment+0x62>
 800ebfa:	4b2b      	ldr	r3, [pc, #172]	; (800eca8 <tcp_create_segment+0x104>)
 800ebfc:	22ba      	movs	r2, #186	; 0xba
 800ebfe:	492b      	ldr	r1, [pc, #172]	; (800ecac <tcp_create_segment+0x108>)
 800ec00:	482b      	ldr	r0, [pc, #172]	; (800ecb0 <tcp_create_segment+0x10c>)
 800ec02:	f004 fd35 	bl	8013670 <iprintf>
  seg->len = p->tot_len - optlen;
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	891a      	ldrh	r2, [r3, #8]
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800ec16:	2114      	movs	r1, #20
 800ec18:	68b8      	ldr	r0, [r7, #8]
 800ec1a:	f7fb fda9 	bl	800a770 <pbuf_header>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d004      	beq.n	800ec2e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ec24:	6938      	ldr	r0, [r7, #16]
 800ec26:	f7fd f943 	bl	800beb0 <tcp_seg_free>
    return NULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e037      	b.n	800ec9e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	8ada      	ldrh	r2, [r3, #22]
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	68dc      	ldr	r4, [r3, #12]
 800ec40:	4610      	mov	r0, r2
 800ec42:	f7fa fbc1 	bl	80093c8 <lwip_htons>
 800ec46:	4603      	mov	r3, r0
 800ec48:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	8b1a      	ldrh	r2, [r3, #24]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	68dc      	ldr	r4, [r3, #12]
 800ec52:	4610      	mov	r0, r2
 800ec54:	f7fa fbb8 	bl	80093c8 <lwip_htons>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	68dc      	ldr	r4, [r3, #12]
 800ec60:	6838      	ldr	r0, [r7, #0]
 800ec62:	f7fa fbbe 	bl	80093e2 <lwip_htonl>
 800ec66:	4603      	mov	r3, r0
 800ec68:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	089b      	lsrs	r3, r3, #2
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3305      	adds	r3, #5
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	031b      	lsls	r3, r3, #12
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	68dc      	ldr	r4, [r3, #12]
 800ec86:	4610      	mov	r0, r2
 800ec88:	f7fa fb9e 	bl	80093c8 <lwip_htons>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	749a      	strb	r2, [r3, #18]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	74da      	strb	r2, [r3, #19]
  return seg;
 800ec9c:	693b      	ldr	r3, [r7, #16]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd90      	pop	{r4, r7, pc}
 800eca6:	bf00      	nop
 800eca8:	08016344 	.word	0x08016344
 800ecac:	080163d0 	.word	0x080163d0
 800ecb0:	080163a8 	.word	0x080163a8

0800ecb4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	607b      	str	r3, [r7, #4]
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	73fb      	strb	r3, [r7, #15]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	81bb      	strh	r3, [r7, #12]
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ecc8:	89bb      	ldrh	r3, [r7, #12]
 800ecca:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800eccc:	89ba      	ldrh	r2, [r7, #12]
 800ecce:	897b      	ldrh	r3, [r7, #10]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d221      	bcs.n	800ed18 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ecd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ecd8:	f003 0302 	and.w	r3, r3, #2
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d111      	bne.n	800ed04 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800ece0:	6a3b      	ldr	r3, [r7, #32]
 800ece2:	7e9b      	ldrb	r3, [r3, #26]
 800ece4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d115      	bne.n	800ed18 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800ecec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d007      	beq.n	800ed04 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d103      	bne.n	800ed04 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800ecfc:	6a3b      	ldr	r3, [r7, #32]
 800ecfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d009      	beq.n	800ed18 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ed04:	89bb      	ldrh	r3, [r7, #12]
 800ed06:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ed0a:	f023 0203 	bic.w	r2, r3, #3
 800ed0e:	897b      	ldrh	r3, [r7, #10]
 800ed10:	4293      	cmp	r3, r2
 800ed12:	bf28      	it	cs
 800ed14:	4613      	movcs	r3, r2
 800ed16:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ed18:	8af9      	ldrh	r1, [r7, #22]
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fb f9d2 	bl	800a0c8 <pbuf_alloc>
 800ed24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d101      	bne.n	800ed30 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e019      	b.n	800ed64 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d006      	beq.n	800ed46 <tcp_pbuf_prealloc+0x92>
 800ed38:	4b0c      	ldr	r3, [pc, #48]	; (800ed6c <tcp_pbuf_prealloc+0xb8>)
 800ed3a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ed3e:	490c      	ldr	r1, [pc, #48]	; (800ed70 <tcp_pbuf_prealloc+0xbc>)
 800ed40:	480c      	ldr	r0, [pc, #48]	; (800ed74 <tcp_pbuf_prealloc+0xc0>)
 800ed42:	f004 fc95 	bl	8013670 <iprintf>
  *oversize = p->len - length;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	895a      	ldrh	r2, [r3, #10]
 800ed4a:	89bb      	ldrh	r3, [r7, #12]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	89ba      	ldrh	r2, [r7, #12]
 800ed58:	811a      	strh	r2, [r3, #8]
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	891a      	ldrh	r2, [r3, #8]
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	815a      	strh	r2, [r3, #10]
  return p;
 800ed62:	693b      	ldr	r3, [r7, #16]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	08016344 	.word	0x08016344
 800ed70:	080163e8 	.word	0x080163e8
 800ed74:	080163a8 	.word	0x080163a8

0800ed78 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	460b      	mov	r3, r1
 800ed82:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	7d1b      	ldrb	r3, [r3, #20]
 800ed88:	2b04      	cmp	r3, #4
 800ed8a:	d00e      	beq.n	800edaa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ed90:	2b07      	cmp	r3, #7
 800ed92:	d00a      	beq.n	800edaa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	d006      	beq.n	800edaa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800eda0:	2b03      	cmp	r3, #3
 800eda2:	d002      	beq.n	800edaa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800eda4:	f06f 030a 	mvn.w	r3, #10
 800eda8:	e04f      	b.n	800ee4a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800edaa:	887b      	ldrh	r3, [r7, #2]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <tcp_write_checks+0x3c>
    return ERR_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	e04a      	b.n	800ee4a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edba:	887a      	ldrh	r2, [r7, #2]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d909      	bls.n	800edd4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	7e9b      	ldrb	r3, [r3, #26]
 800edc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800edce:	f04f 33ff 	mov.w	r3, #4294967295
 800edd2:	e03a      	b.n	800ee4a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edda:	2b08      	cmp	r3, #8
 800eddc:	d806      	bhi.n	800edec <tcp_write_checks+0x74>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ede4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ede8:	4293      	cmp	r3, r2
 800edea:	d909      	bls.n	800ee00 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	7e9b      	ldrb	r3, [r3, #26]
 800edf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800edfa:	f04f 33ff 	mov.w	r3, #4294967295
 800edfe:	e024      	b.n	800ee4a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00f      	beq.n	800ee2a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d11a      	bne.n	800ee48 <tcp_write_checks+0xd0>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d116      	bne.n	800ee48 <tcp_write_checks+0xd0>
 800ee1a:	4b0e      	ldr	r3, [pc, #56]	; (800ee54 <tcp_write_checks+0xdc>)
 800ee1c:	f240 1255 	movw	r2, #341	; 0x155
 800ee20:	490d      	ldr	r1, [pc, #52]	; (800ee58 <tcp_write_checks+0xe0>)
 800ee22:	480e      	ldr	r0, [pc, #56]	; (800ee5c <tcp_write_checks+0xe4>)
 800ee24:	f004 fc24 	bl	8013670 <iprintf>
 800ee28:	e00e      	b.n	800ee48 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d103      	bne.n	800ee3a <tcp_write_checks+0xc2>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d006      	beq.n	800ee48 <tcp_write_checks+0xd0>
 800ee3a:	4b06      	ldr	r3, [pc, #24]	; (800ee54 <tcp_write_checks+0xdc>)
 800ee3c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ee40:	4907      	ldr	r1, [pc, #28]	; (800ee60 <tcp_write_checks+0xe8>)
 800ee42:	4806      	ldr	r0, [pc, #24]	; (800ee5c <tcp_write_checks+0xe4>)
 800ee44:	f004 fc14 	bl	8013670 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	08016344 	.word	0x08016344
 800ee58:	080163fc 	.word	0x080163fc
 800ee5c:	080163a8 	.word	0x080163a8
 800ee60:	08016438 	.word	0x08016438

0800ee64 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b09b      	sub	sp, #108	; 0x6c
 800ee68:	af04      	add	r7, sp, #16
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	4611      	mov	r1, r2
 800ee70:	461a      	mov	r2, r3
 800ee72:	460b      	mov	r3, r1
 800ee74:	80fb      	strh	r3, [r7, #6]
 800ee76:	4613      	mov	r3, r2
 800ee78:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	653b      	str	r3, [r7, #80]	; 0x50
 800ee82:	2300      	movs	r3, #0
 800ee84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee86:	2300      	movs	r3, #0
 800ee88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800ee94:	2300      	movs	r3, #0
 800ee96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eeb2:	085b      	lsrs	r3, r3, #1
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeba:	4293      	cmp	r3, r2
 800eebc:	bf28      	it	cs
 800eebe:	4613      	movcs	r3, r2
 800eec0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800eec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d102      	bne.n	800eece <tcp_write+0x6a>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eecc:	e000      	b.n	800eed0 <tcp_write+0x6c>
 800eece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eed0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d109      	bne.n	800eeec <tcp_write+0x88>
 800eed8:	4b92      	ldr	r3, [pc, #584]	; (800f124 <tcp_write+0x2c0>)
 800eeda:	f240 1291 	movw	r2, #401	; 0x191
 800eede:	4992      	ldr	r1, [pc, #584]	; (800f128 <tcp_write+0x2c4>)
 800eee0:	4892      	ldr	r0, [pc, #584]	; (800f12c <tcp_write+0x2c8>)
 800eee2:	f004 fbc5 	bl	8013670 <iprintf>
 800eee6:	f06f 030f 	mvn.w	r3, #15
 800eeea:	e30a      	b.n	800f502 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800eeec:	88fb      	ldrh	r3, [r7, #6]
 800eeee:	4619      	mov	r1, r3
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f7ff ff41 	bl	800ed78 <tcp_write_checks>
 800eef6:	4603      	mov	r3, r0
 800eef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800eefc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <tcp_write+0xa6>
    return err;
 800ef04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ef08:	e2fb      	b.n	800f502 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 80f4 	beq.w	800f106 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef22:	653b      	str	r3, [r7, #80]	; 0x50
 800ef24:	e002      	b.n	800ef2c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800ef26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ef2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1f8      	bne.n	800ef26 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ef34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef36:	7a9b      	ldrb	r3, [r3, #10]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	f003 0304 	and.w	r3, r3, #4
 800ef40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ef42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef46:	891b      	ldrh	r3, [r3, #8]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	8c3b      	ldrh	r3, [r7, #32]
 800ef4c:	440b      	add	r3, r1
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	da06      	bge.n	800ef60 <tcp_write+0xfc>
 800ef52:	4b74      	ldr	r3, [pc, #464]	; (800f124 <tcp_write+0x2c0>)
 800ef54:	f240 12c7 	movw	r2, #455	; 0x1c7
 800ef58:	4975      	ldr	r1, [pc, #468]	; (800f130 <tcp_write+0x2cc>)
 800ef5a:	4874      	ldr	r0, [pc, #464]	; (800f12c <tcp_write+0x2c8>)
 800ef5c:	f004 fb88 	bl	8013670 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ef60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef62:	891a      	ldrh	r2, [r3, #8]
 800ef64:	8c3b      	ldrh	r3, [r7, #32]
 800ef66:	4413      	add	r3, r2
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ef76:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ef78:	8a7b      	ldrh	r3, [r7, #18]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d026      	beq.n	800efcc <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ef7e:	8a7b      	ldrh	r3, [r7, #18]
 800ef80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d206      	bcs.n	800ef94 <tcp_write+0x130>
 800ef86:	4b67      	ldr	r3, [pc, #412]	; (800f124 <tcp_write+0x2c0>)
 800ef88:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ef8c:	4969      	ldr	r1, [pc, #420]	; (800f134 <tcp_write+0x2d0>)
 800ef8e:	4867      	ldr	r0, [pc, #412]	; (800f12c <tcp_write+0x2c8>)
 800ef90:	f004 fb6e 	bl	8013670 <iprintf>
      seg = last_unsent;
 800ef94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef96:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ef98:	8a7b      	ldrh	r3, [r7, #18]
 800ef9a:	88fa      	ldrh	r2, [r7, #6]
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	bf28      	it	cs
 800efa0:	4613      	movcs	r3, r2
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800efa6:	4293      	cmp	r3, r2
 800efa8:	bf28      	it	cs
 800efaa:	4613      	movcs	r3, r2
 800efac:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800efae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efb4:	4413      	add	r3, r2
 800efb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800efba:	8a7a      	ldrh	r2, [r7, #18]
 800efbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800efc4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800efc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800efcc:	8a7b      	ldrh	r3, [r7, #18]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00b      	beq.n	800efea <tcp_write+0x186>
 800efd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d006      	beq.n	800efea <tcp_write+0x186>
 800efdc:	4b51      	ldr	r3, [pc, #324]	; (800f124 <tcp_write+0x2c0>)
 800efde:	f240 12e1 	movw	r2, #481	; 0x1e1
 800efe2:	4955      	ldr	r1, [pc, #340]	; (800f138 <tcp_write+0x2d4>)
 800efe4:	4851      	ldr	r0, [pc, #324]	; (800f12c <tcp_write+0x2c8>)
 800efe6:	f004 fb43 	bl	8013670 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800efea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efee:	88fb      	ldrh	r3, [r7, #6]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	f080 8169 	bcs.w	800f2c8 <tcp_write+0x464>
 800eff6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 8165 	beq.w	800f2c8 <tcp_write+0x464>
 800effe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f000:	891b      	ldrh	r3, [r3, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	f000 8160 	beq.w	800f2c8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f008:	88fa      	ldrh	r2, [r7, #6]
 800f00a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f00e:	1ad2      	subs	r2, r2, r3
 800f010:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f012:	4293      	cmp	r3, r2
 800f014:	bfa8      	it	ge
 800f016:	4613      	movge	r3, r2
 800f018:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f01c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f01e:	797b      	ldrb	r3, [r7, #5]
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	2b00      	cmp	r3, #0
 800f026:	d027      	beq.n	800f078 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f028:	f107 0012 	add.w	r0, r7, #18
 800f02c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f02e:	8bf9      	ldrh	r1, [r7, #30]
 800f030:	2301      	movs	r3, #1
 800f032:	9302      	str	r3, [sp, #8]
 800f034:	797b      	ldrb	r3, [r7, #5]
 800f036:	9301      	str	r3, [sp, #4]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	4603      	mov	r3, r0
 800f03e:	2004      	movs	r0, #4
 800f040:	f7ff fe38 	bl	800ecb4 <tcp_pbuf_prealloc>
 800f044:	6578      	str	r0, [r7, #84]	; 0x54
 800f046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f000 8228 	beq.w	800f49e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f050:	6858      	ldr	r0, [r3, #4]
 800f052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	4413      	add	r3, r2
 800f05a:	8bfa      	ldrh	r2, [r7, #30]
 800f05c:	4619      	mov	r1, r3
 800f05e:	f004 fa15 	bl	801348c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f062:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f064:	f7fb fc42 	bl	800a8ec <pbuf_clen>
 800f068:	4603      	mov	r3, r0
 800f06a:	461a      	mov	r2, r3
 800f06c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f070:	4413      	add	r3, r2
 800f072:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f076:	e03f      	b.n	800f0f8 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	637b      	str	r3, [r7, #52]	; 0x34
 800f07e:	e002      	b.n	800f086 <tcp_write+0x222>
 800f080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	637b      	str	r3, [r7, #52]	; 0x34
 800f086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1f8      	bne.n	800f080 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f090:	7b1b      	ldrb	r3, [r3, #12]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d115      	bne.n	800f0c2 <tcp_write+0x25e>
 800f096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f09c:	8952      	ldrh	r2, [r2, #10]
 800f09e:	4413      	add	r3, r2
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d10d      	bne.n	800f0c2 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f0a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d006      	beq.n	800f0bc <tcp_write+0x258>
 800f0ae:	4b1d      	ldr	r3, [pc, #116]	; (800f124 <tcp_write+0x2c0>)
 800f0b0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800f0b4:	4921      	ldr	r1, [pc, #132]	; (800f13c <tcp_write+0x2d8>)
 800f0b6:	481d      	ldr	r0, [pc, #116]	; (800f12c <tcp_write+0x2c8>)
 800f0b8:	f004 fada 	bl	8013670 <iprintf>
          extendlen = seglen;
 800f0bc:	8bfb      	ldrh	r3, [r7, #30]
 800f0be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f0c0:	e01a      	b.n	800f0f8 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f0c2:	8bfb      	ldrh	r3, [r7, #30]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	2004      	movs	r0, #4
 800f0ca:	f7fa fffd 	bl	800a0c8 <pbuf_alloc>
 800f0ce:	6578      	str	r0, [r7, #84]	; 0x54
 800f0d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f000 81e5 	beq.w	800f4a2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800f0d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	441a      	add	r2, r3
 800f0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0e2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f0e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f0e6:	f7fb fc01 	bl	800a8ec <pbuf_clen>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f0f2:	4413      	add	r3, r2
 800f0f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f0f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0fc:	8bfb      	ldrh	r3, [r7, #30]
 800f0fe:	4413      	add	r3, r2
 800f100:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f104:	e0e0      	b.n	800f2c8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f000 80db 	beq.w	800f2c8 <tcp_write+0x464>
 800f112:	4b04      	ldr	r3, [pc, #16]	; (800f124 <tcp_write+0x2c0>)
 800f114:	f44f 7209 	mov.w	r2, #548	; 0x224
 800f118:	4909      	ldr	r1, [pc, #36]	; (800f140 <tcp_write+0x2dc>)
 800f11a:	4804      	ldr	r0, [pc, #16]	; (800f12c <tcp_write+0x2c8>)
 800f11c:	f004 faa8 	bl	8013670 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f120:	e0d2      	b.n	800f2c8 <tcp_write+0x464>
 800f122:	bf00      	nop
 800f124:	08016344 	.word	0x08016344
 800f128:	0801646c 	.word	0x0801646c
 800f12c:	080163a8 	.word	0x080163a8
 800f130:	080164a0 	.word	0x080164a0
 800f134:	080164b8 	.word	0x080164b8
 800f138:	080164d8 	.word	0x080164d8
 800f13c:	080164f8 	.word	0x080164f8
 800f140:	08016524 	.word	0x08016524
    struct pbuf *p;
    u16_t left = len - pos;
 800f144:	88fa      	ldrh	r2, [r7, #6]
 800f146:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f14e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f152:	b29b      	uxth	r3, r3
 800f154:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f15a:	8b7a      	ldrh	r2, [r7, #26]
 800f15c:	8bbb      	ldrh	r3, [r7, #28]
 800f15e:	4293      	cmp	r3, r2
 800f160:	bf28      	it	cs
 800f162:	4613      	movcs	r3, r2
 800f164:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f166:	797b      	ldrb	r3, [r7, #5]
 800f168:	f003 0301 	and.w	r3, r3, #1
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d036      	beq.n	800f1de <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f174:	b29a      	uxth	r2, r3
 800f176:	8b3b      	ldrh	r3, [r7, #24]
 800f178:	4413      	add	r3, r2
 800f17a:	b299      	uxth	r1, r3
 800f17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bf0c      	ite	eq
 800f182:	2301      	moveq	r3, #1
 800f184:	2300      	movne	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	f107 0012 	add.w	r0, r7, #18
 800f18c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f18e:	9302      	str	r3, [sp, #8]
 800f190:	797b      	ldrb	r3, [r7, #5]
 800f192:	9301      	str	r3, [sp, #4]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	4603      	mov	r3, r0
 800f19a:	2000      	movs	r0, #0
 800f19c:	f7ff fd8a 	bl	800ecb4 <tcp_pbuf_prealloc>
 800f1a0:	6338      	str	r0, [r7, #48]	; 0x30
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f000 817e 	beq.w	800f4a6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	895b      	ldrh	r3, [r3, #10]
 800f1ae:	8b3a      	ldrh	r2, [r7, #24]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d906      	bls.n	800f1c2 <tcp_write+0x35e>
 800f1b4:	4b8f      	ldr	r3, [pc, #572]	; (800f3f4 <tcp_write+0x590>)
 800f1b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f1ba:	498f      	ldr	r1, [pc, #572]	; (800f3f8 <tcp_write+0x594>)
 800f1bc:	488f      	ldr	r0, [pc, #572]	; (800f3fc <tcp_write+0x598>)
 800f1be:	f004 fa57 	bl	8013670 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ca:	18d0      	adds	r0, r2, r3
 800f1cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	8b3a      	ldrh	r2, [r7, #24]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	f004 f958 	bl	801348c <memcpy>
 800f1dc:	e02e      	b.n	800f23c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f1de:	8a7b      	ldrh	r3, [r7, #18]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <tcp_write+0x38e>
 800f1e4:	4b83      	ldr	r3, [pc, #524]	; (800f3f4 <tcp_write+0x590>)
 800f1e6:	f240 224b 	movw	r2, #587	; 0x24b
 800f1ea:	4985      	ldr	r1, [pc, #532]	; (800f400 <tcp_write+0x59c>)
 800f1ec:	4883      	ldr	r0, [pc, #524]	; (800f3fc <tcp_write+0x598>)
 800f1ee:	f004 fa3f 	bl	8013670 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f1f2:	8b3b      	ldrh	r3, [r7, #24]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	f7fa ff65 	bl	800a0c8 <pbuf_alloc>
 800f1fe:	6178      	str	r0, [r7, #20]
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 8151 	beq.w	800f4aa <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800f208:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	441a      	add	r2, r3
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f218:	b29b      	uxth	r3, r3
 800f21a:	2200      	movs	r2, #0
 800f21c:	4619      	mov	r1, r3
 800f21e:	2000      	movs	r0, #0
 800f220:	f7fa ff52 	bl	800a0c8 <pbuf_alloc>
 800f224:	6338      	str	r0, [r7, #48]	; 0x30
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d103      	bne.n	800f234 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800f22c:	6978      	ldr	r0, [r7, #20]
 800f22e:	f7fb fac3 	bl	800a7b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800f232:	e13d      	b.n	800f4b0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800f234:	6979      	ldr	r1, [r7, #20]
 800f236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f238:	f7fb fb96 	bl	800a968 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800f23c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f23e:	f7fb fb55 	bl	800a8ec <pbuf_clen>
 800f242:	4603      	mov	r3, r0
 800f244:	461a      	mov	r2, r3
 800f246:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f24a:	4413      	add	r3, r2
 800f24c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800f250:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f254:	2b09      	cmp	r3, #9
 800f256:	d805      	bhi.n	800f264 <tcp_write+0x400>
 800f258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f25c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800f260:	4293      	cmp	r3, r2
 800f262:	d903      	bls.n	800f26c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800f264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f266:	f7fb faa7 	bl	800a7b8 <pbuf_free>
      goto memerr;
 800f26a:	e121      	b.n	800f4b0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f274:	441a      	add	r2, r3
 800f276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	4613      	mov	r3, r2
 800f27e:	2200      	movs	r2, #0
 800f280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7ff fc8e 	bl	800eba4 <tcp_create_segment>
 800f288:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f000 810e 	beq.w	800f4ae <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800f292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f294:	2b00      	cmp	r3, #0
 800f296:	d102      	bne.n	800f29e <tcp_write+0x43a>
      queue = seg;
 800f298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f29a:	647b      	str	r3, [r7, #68]	; 0x44
 800f29c:	e00c      	b.n	800f2b8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d106      	bne.n	800f2b2 <tcp_write+0x44e>
 800f2a4:	4b53      	ldr	r3, [pc, #332]	; (800f3f4 <tcp_write+0x590>)
 800f2a6:	f240 2285 	movw	r2, #645	; 0x285
 800f2aa:	4956      	ldr	r1, [pc, #344]	; (800f404 <tcp_write+0x5a0>)
 800f2ac:	4853      	ldr	r0, [pc, #332]	; (800f3fc <tcp_write+0x598>)
 800f2ae:	f004 f9df 	bl	8013670 <iprintf>
      prev_seg->next = seg;
 800f2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f2b6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800f2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ba:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800f2bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f2c0:	8b3b      	ldrh	r3, [r7, #24]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800f2c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f2cc:	88fb      	ldrh	r3, [r7, #6]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	f4ff af38 	bcc.w	800f144 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800f2d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d02c      	beq.n	800f334 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800f2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2e0:	e01e      	b.n	800f320 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	891a      	ldrh	r2, [r3, #8]
 800f2e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2e8:	4413      	add	r3, r2
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d110      	bne.n	800f31a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2fe:	8952      	ldrh	r2, [r2, #10]
 800f300:	4413      	add	r3, r2
 800f302:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f304:	68b9      	ldr	r1, [r7, #8]
 800f306:	4618      	mov	r0, r3
 800f308:	f004 f8c0 	bl	801348c <memcpy>
        p->len += oversize_used;
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	895a      	ldrh	r2, [r3, #10]
 800f310:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f312:	4413      	add	r3, r2
 800f314:	b29a      	uxth	r2, r3
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1dd      	bne.n	800f2e2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800f326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f328:	891a      	ldrh	r2, [r3, #8]
 800f32a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f32c:	4413      	add	r3, r2
 800f32e:	b29a      	uxth	r2, r3
 800f330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f332:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f334:	8a7a      	ldrh	r2, [r7, #18]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d018      	beq.n	800f374 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f344:	2b00      	cmp	r3, #0
 800f346:	d106      	bne.n	800f356 <tcp_write+0x4f2>
 800f348:	4b2a      	ldr	r3, [pc, #168]	; (800f3f4 <tcp_write+0x590>)
 800f34a:	f240 22ba 	movw	r2, #698	; 0x2ba
 800f34e:	492e      	ldr	r1, [pc, #184]	; (800f408 <tcp_write+0x5a4>)
 800f350:	482a      	ldr	r0, [pc, #168]	; (800f3fc <tcp_write+0x598>)
 800f352:	f004 f98d 	bl	8013670 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800f356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fb fb03 	bl	800a968 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f364:	891a      	ldrh	r2, [r3, #8]
 800f366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f368:	891b      	ldrh	r3, [r3, #8]
 800f36a:	4413      	add	r3, r2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f370:	811a      	strh	r2, [r3, #8]
 800f372:	e037      	b.n	800f3e4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800f374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f376:	2b00      	cmp	r3, #0
 800f378:	d034      	beq.n	800f3e4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d003      	beq.n	800f388 <tcp_write+0x524>
 800f380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d106      	bne.n	800f396 <tcp_write+0x532>
 800f388:	4b1a      	ldr	r3, [pc, #104]	; (800f3f4 <tcp_write+0x590>)
 800f38a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800f38e:	491f      	ldr	r1, [pc, #124]	; (800f40c <tcp_write+0x5a8>)
 800f390:	481a      	ldr	r0, [pc, #104]	; (800f3fc <tcp_write+0x598>)
 800f392:	f004 f96d 	bl	8013670 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f39c:	e009      	b.n	800f3b2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	891a      	ldrh	r2, [r3, #8]
 800f3a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1f1      	bne.n	800f39e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	891a      	ldrh	r2, [r3, #8]
 800f3be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3c0:	4413      	add	r3, r2
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	895a      	ldrh	r2, [r3, #10]
 800f3cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3ce:	4413      	add	r3, r2
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3d8:	891a      	ldrh	r2, [r3, #8]
 800f3da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3dc:	4413      	add	r3, r2
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3e2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d112      	bne.n	800f410 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3ee:	669a      	str	r2, [r3, #104]	; 0x68
 800f3f0:	e011      	b.n	800f416 <tcp_write+0x5b2>
 800f3f2:	bf00      	nop
 800f3f4:	08016344 	.word	0x08016344
 800f3f8:	08016554 	.word	0x08016554
 800f3fc:	080163a8 	.word	0x080163a8
 800f400:	08016594 	.word	0x08016594
 800f404:	080165a4 	.word	0x080165a4
 800f408:	080165b8 	.word	0x080165b8
 800f40c:	080165f0 	.word	0x080165f0
  } else {
    last_unsent->next = queue;
 800f410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f414:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f41a:	88fb      	ldrh	r3, [r7, #6]
 800f41c:	441a      	add	r2, r3
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f428:	88fb      	ldrh	r3, [r7, #6]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f43a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00e      	beq.n	800f466 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d10a      	bne.n	800f466 <tcp_write+0x602>
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <tcp_write+0x602>
 800f458:	4b2c      	ldr	r3, [pc, #176]	; (800f50c <tcp_write+0x6a8>)
 800f45a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800f45e:	492c      	ldr	r1, [pc, #176]	; (800f510 <tcp_write+0x6ac>)
 800f460:	482c      	ldr	r0, [pc, #176]	; (800f514 <tcp_write+0x6b0>)
 800f462:	f004 f905 	bl	8013670 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800f466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d016      	beq.n	800f49a <tcp_write+0x636>
 800f46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d012      	beq.n	800f49a <tcp_write+0x636>
 800f474:	797b      	ldrb	r3, [r7, #5]
 800f476:	f003 0302 	and.w	r3, r3, #2
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10d      	bne.n	800f49a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	899b      	ldrh	r3, [r3, #12]
 800f484:	b29c      	uxth	r4, r3
 800f486:	2008      	movs	r0, #8
 800f488:	f7f9 ff9e 	bl	80093c8 <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	461a      	mov	r2, r3
 800f490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	4322      	orrs	r2, r4
 800f496:	b292      	uxth	r2, r2
 800f498:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e031      	b.n	800f502 <tcp_write+0x69e>
          goto memerr;
 800f49e:	bf00      	nop
 800f4a0:	e006      	b.n	800f4b0 <tcp_write+0x64c>
            goto memerr;
 800f4a2:	bf00      	nop
 800f4a4:	e004      	b.n	800f4b0 <tcp_write+0x64c>
        goto memerr;
 800f4a6:	bf00      	nop
 800f4a8:	e002      	b.n	800f4b0 <tcp_write+0x64c>
        goto memerr;
 800f4aa:	bf00      	nop
 800f4ac:	e000      	b.n	800f4b0 <tcp_write+0x64c>
      goto memerr;
 800f4ae:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	7e9b      	ldrb	r3, [r3, #26]
 800f4b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f4b8:	b2da      	uxtb	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <tcp_write+0x666>
    pbuf_free(concat_p);
 800f4c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f4c6:	f7fb f977 	bl	800a7b8 <pbuf_free>
  }
  if (queue != NULL) {
 800f4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <tcp_write+0x672>
    tcp_segs_free(queue);
 800f4d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4d2:	f7fc fcd8 	bl	800be86 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00e      	beq.n	800f4fe <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10a      	bne.n	800f4fe <tcp_write+0x69a>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d106      	bne.n	800f4fe <tcp_write+0x69a>
 800f4f0:	4b06      	ldr	r3, [pc, #24]	; (800f50c <tcp_write+0x6a8>)
 800f4f2:	f240 3201 	movw	r2, #769	; 0x301
 800f4f6:	4906      	ldr	r1, [pc, #24]	; (800f510 <tcp_write+0x6ac>)
 800f4f8:	4806      	ldr	r0, [pc, #24]	; (800f514 <tcp_write+0x6b0>)
 800f4fa:	f004 f8b9 	bl	8013670 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f4fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f502:	4618      	mov	r0, r3
 800f504:	375c      	adds	r7, #92	; 0x5c
 800f506:	46bd      	mov	sp, r7
 800f508:	bd90      	pop	{r4, r7, pc}
 800f50a:	bf00      	nop
 800f50c:	08016344 	.word	0x08016344
 800f510:	08016628 	.word	0x08016628
 800f514:	080163a8 	.word	0x080163a8

0800f518 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08a      	sub	sp, #40	; 0x28
 800f51c:	af02      	add	r7, sp, #8
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	460b      	mov	r3, r1
 800f522:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f528:	2300      	movs	r3, #0
 800f52a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f52c:	78fb      	ldrb	r3, [r7, #3]
 800f52e:	f003 0303 	and.w	r3, r3, #3
 800f532:	2b00      	cmp	r3, #0
 800f534:	d106      	bne.n	800f544 <tcp_enqueue_flags+0x2c>
 800f536:	4b6f      	ldr	r3, [pc, #444]	; (800f6f4 <tcp_enqueue_flags+0x1dc>)
 800f538:	f240 321a 	movw	r2, #794	; 0x31a
 800f53c:	496e      	ldr	r1, [pc, #440]	; (800f6f8 <tcp_enqueue_flags+0x1e0>)
 800f53e:	486f      	ldr	r0, [pc, #444]	; (800f6fc <tcp_enqueue_flags+0x1e4>)
 800f540:	f004 f896 	bl	8013670 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f54a:	2b08      	cmp	r3, #8
 800f54c:	d806      	bhi.n	800f55c <tcp_enqueue_flags+0x44>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f554:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800f558:	4293      	cmp	r3, r2
 800f55a:	d90e      	bls.n	800f57a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800f55c:	78fb      	ldrb	r3, [r7, #3]
 800f55e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800f562:	2b00      	cmp	r3, #0
 800f564:	d109      	bne.n	800f57a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	7e9b      	ldrb	r3, [r3, #26]
 800f56a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f56e:	b2da      	uxtb	r2, r3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800f574:	f04f 33ff 	mov.w	r3, #4294967295
 800f578:	e0b7      	b.n	800f6ea <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800f57a:	78fb      	ldrb	r3, [r7, #3]
 800f57c:	f003 0302 	and.w	r3, r3, #2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d001      	beq.n	800f588 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800f584:	2301      	movs	r3, #1
 800f586:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f588:	7ffb      	ldrb	r3, [r7, #31]
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	f003 0304 	and.w	r3, r3, #4
 800f592:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	b29b      	uxth	r3, r3
 800f598:	2200      	movs	r2, #0
 800f59a:	4619      	mov	r1, r3
 800f59c:	2000      	movs	r0, #0
 800f59e:	f7fa fd93 	bl	800a0c8 <pbuf_alloc>
 800f5a2:	6138      	str	r0, [r7, #16]
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d109      	bne.n	800f5be <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	7e9b      	ldrb	r3, [r3, #26]
 800f5ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5b2:	b2da      	uxtb	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5bc:	e095      	b.n	800f6ea <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	895a      	ldrh	r2, [r3, #10]
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d206      	bcs.n	800f5d8 <tcp_enqueue_flags+0xc0>
 800f5ca:	4b4a      	ldr	r3, [pc, #296]	; (800f6f4 <tcp_enqueue_flags+0x1dc>)
 800f5cc:	f44f 7250 	mov.w	r2, #832	; 0x340
 800f5d0:	494b      	ldr	r1, [pc, #300]	; (800f700 <tcp_enqueue_flags+0x1e8>)
 800f5d2:	484a      	ldr	r0, [pc, #296]	; (800f6fc <tcp_enqueue_flags+0x1e4>)
 800f5d4:	f004 f84c 	bl	8013670 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f5dc:	78fa      	ldrb	r2, [r7, #3]
 800f5de:	7ffb      	ldrb	r3, [r7, #31]
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	6939      	ldr	r1, [r7, #16]
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff fadc 	bl	800eba4 <tcp_create_segment>
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d109      	bne.n	800f608 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	7e9b      	ldrb	r3, [r3, #26]
 800f5f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f602:	f04f 33ff 	mov.w	r3, #4294967295
 800f606:	e070      	b.n	800f6ea <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	f003 0303 	and.w	r3, r3, #3
 800f610:	2b00      	cmp	r3, #0
 800f612:	d006      	beq.n	800f622 <tcp_enqueue_flags+0x10a>
 800f614:	4b37      	ldr	r3, [pc, #220]	; (800f6f4 <tcp_enqueue_flags+0x1dc>)
 800f616:	f240 3249 	movw	r2, #841	; 0x349
 800f61a:	493a      	ldr	r1, [pc, #232]	; (800f704 <tcp_enqueue_flags+0x1ec>)
 800f61c:	4837      	ldr	r0, [pc, #220]	; (800f6fc <tcp_enqueue_flags+0x1e4>)
 800f61e:	f004 f827 	bl	8013670 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	891b      	ldrh	r3, [r3, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d006      	beq.n	800f638 <tcp_enqueue_flags+0x120>
 800f62a:	4b32      	ldr	r3, [pc, #200]	; (800f6f4 <tcp_enqueue_flags+0x1dc>)
 800f62c:	f240 324a 	movw	r2, #842	; 0x34a
 800f630:	4935      	ldr	r1, [pc, #212]	; (800f708 <tcp_enqueue_flags+0x1f0>)
 800f632:	4832      	ldr	r0, [pc, #200]	; (800f6fc <tcp_enqueue_flags+0x1e4>)
 800f634:	f004 f81c 	bl	8013670 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d103      	bne.n	800f648 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	669a      	str	r2, [r3, #104]	; 0x68
 800f646:	e00d      	b.n	800f664 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f64c:	61bb      	str	r3, [r7, #24]
 800f64e:	e002      	b.n	800f656 <tcp_enqueue_flags+0x13e>
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	61bb      	str	r3, [r7, #24]
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1f8      	bne.n	800f650 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	f003 0302 	and.w	r3, r3, #2
 800f672:	2b00      	cmp	r3, #0
 800f674:	d104      	bne.n	800f680 <tcp_enqueue_flags+0x168>
 800f676:	78fb      	ldrb	r3, [r7, #3]
 800f678:	f003 0301 	and.w	r3, r3, #1
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d004      	beq.n	800f68a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f684:	1c5a      	adds	r2, r3, #1
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f68a:	78fb      	ldrb	r3, [r7, #3]
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	2b00      	cmp	r3, #0
 800f692:	d006      	beq.n	800f6a2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	7e9b      	ldrb	r3, [r3, #26]
 800f698:	f043 0320 	orr.w	r3, r3, #32
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fb f920 	bl	800a8ec <pbuf_clen>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6b6:	4413      	add	r3, r2
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00e      	beq.n	800f6e8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10a      	bne.n	800f6e8 <tcp_enqueue_flags+0x1d0>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d106      	bne.n	800f6e8 <tcp_enqueue_flags+0x1d0>
 800f6da:	4b06      	ldr	r3, [pc, #24]	; (800f6f4 <tcp_enqueue_flags+0x1dc>)
 800f6dc:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f6e0:	490a      	ldr	r1, [pc, #40]	; (800f70c <tcp_enqueue_flags+0x1f4>)
 800f6e2:	4806      	ldr	r0, [pc, #24]	; (800f6fc <tcp_enqueue_flags+0x1e4>)
 800f6e4:	f003 ffc4 	bl	8013670 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3720      	adds	r7, #32
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	08016344 	.word	0x08016344
 800f6f8:	08016648 	.word	0x08016648
 800f6fc:	080163a8 	.word	0x080163a8
 800f700:	080166a0 	.word	0x080166a0
 800f704:	080166dc 	.word	0x080166dc
 800f708:	080166f4 	.word	0x080166f4
 800f70c:	08016720 	.word	0x08016720

0800f710 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f710:	b590      	push	{r4, r7, lr}
 800f712:	b08b      	sub	sp, #44	; 0x2c
 800f714:	af04      	add	r7, sp, #16
 800f716:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f71c:	7dbb      	ldrb	r3, [r7, #22]
 800f71e:	b29c      	uxth	r4, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f724:	4618      	mov	r0, r3
 800f726:	f7f9 fe5c 	bl	80093e2 <lwip_htonl>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2200      	movs	r2, #0
 800f72e:	4621      	mov	r1, r4
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff f97d 	bl	800ea30 <tcp_output_alloc_header>
 800f736:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d109      	bne.n	800f752 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	7e9b      	ldrb	r3, [r3, #26]
 800f742:	f043 0303 	orr.w	r3, r3, #3
 800f746:	b2da      	uxtb	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f74c:	f06f 0301 	mvn.w	r3, #1
 800f750:	e036      	b.n	800f7c0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	3304      	adds	r3, #4
 800f756:	4618      	mov	r0, r3
 800f758:	f002 fafe 	bl	8011d58 <ip4_route>
 800f75c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d102      	bne.n	800f76a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800f764:	23fc      	movs	r3, #252	; 0xfc
 800f766:	75fb      	strb	r3, [r7, #23]
 800f768:	e012      	b.n	800f790 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800f76a:	6879      	ldr	r1, [r7, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	1d18      	adds	r0, r3, #4
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	7a9c      	ldrb	r4, [r3, #10]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	7a5b      	ldrb	r3, [r3, #9]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	9202      	str	r2, [sp, #8]
 800f77c:	2206      	movs	r2, #6
 800f77e:	9201      	str	r2, [sp, #4]
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	4623      	mov	r3, r4
 800f784:	4602      	mov	r2, r0
 800f786:	6938      	ldr	r0, [r7, #16]
 800f788:	f002 fc90 	bl	80120ac <ip4_output_if>
 800f78c:	4603      	mov	r3, r0
 800f78e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f790:	6938      	ldr	r0, [r7, #16]
 800f792:	f7fb f811 	bl	800a7b8 <pbuf_free>

  if (err != ERR_OK) {
 800f796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d007      	beq.n	800f7ae <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	7e9b      	ldrb	r3, [r3, #26]
 800f7a2:	f043 0303 	orr.w	r3, r3, #3
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	769a      	strb	r2, [r3, #26]
 800f7ac:	e006      	b.n	800f7bc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	7e9b      	ldrb	r3, [r3, #26]
 800f7b2:	f023 0303 	bic.w	r3, r3, #3
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800f7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	371c      	adds	r7, #28
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd90      	pop	{r4, r7, pc}

0800f7c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f7c8:	b5b0      	push	{r4, r5, r7, lr}
 800f7ca:	b08a      	sub	sp, #40	; 0x28
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	7d1b      	ldrb	r3, [r3, #20]
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d106      	bne.n	800f7e6 <tcp_output+0x1e>
 800f7d8:	4b99      	ldr	r3, [pc, #612]	; (800fa40 <tcp_output+0x278>)
 800f7da:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800f7de:	4999      	ldr	r1, [pc, #612]	; (800fa44 <tcp_output+0x27c>)
 800f7e0:	4899      	ldr	r0, [pc, #612]	; (800fa48 <tcp_output+0x280>)
 800f7e2:	f003 ff45 	bl	8013670 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f7e6:	4b99      	ldr	r3, [pc, #612]	; (800fa4c <tcp_output+0x284>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d101      	bne.n	800f7f4 <tcp_output+0x2c>
    return ERR_OK;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	e1cb      	b.n	800fb8c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f800:	4293      	cmp	r3, r2
 800f802:	bf28      	it	cs
 800f804:	4613      	movcs	r3, r2
 800f806:	b29b      	uxth	r3, r3
 800f808:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7e9b      	ldrb	r3, [r3, #26]
 800f814:	f003 0302 	and.w	r3, r3, #2
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d017      	beq.n	800f84c <tcp_output+0x84>
 800f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00f      	beq.n	800f842 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800f822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	f7f9 fdda 	bl	80093e2 <lwip_htonl>
 800f82e:	4602      	mov	r2, r0
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f838:	8912      	ldrh	r2, [r2, #8]
 800f83a:	4413      	add	r3, r2
     (seg == NULL ||
 800f83c:	69ba      	ldr	r2, [r7, #24]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d204      	bcs.n	800f84c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7ff ff64 	bl	800f710 <tcp_send_empty_ack>
 800f848:	4603      	mov	r3, r0
 800f84a:	e19f      	b.n	800fb8c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f850:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d007      	beq.n	800f868 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800f858:	e002      	b.n	800f860 <tcp_output+0x98>
 800f85a:	6a3b      	ldr	r3, [r7, #32]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	623b      	str	r3, [r7, #32]
 800f860:	6a3b      	ldr	r3, [r7, #32]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1f8      	bne.n	800f85a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3304      	adds	r3, #4
 800f86c:	4618      	mov	r0, r3
 800f86e:	f002 fa73 	bl	8011d58 <ip4_route>
 800f872:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d102      	bne.n	800f880 <tcp_output+0xb8>
    return ERR_RTE;
 800f87a:	f06f 0303 	mvn.w	r3, #3
 800f87e:	e185      	b.n	800fb8c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <tcp_output+0xc6>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d111      	bne.n	800f8b2 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <tcp_output+0xd2>
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	3304      	adds	r3, #4
 800f898:	e000      	b.n	800f89c <tcp_output+0xd4>
 800f89a:	2300      	movs	r3, #0
 800f89c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d102      	bne.n	800f8aa <tcp_output+0xe2>
      return ERR_RTE;
 800f8a4:	f06f 0303 	mvn.w	r3, #3
 800f8a8:	e170      	b.n	800fb8c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f000 813f 	beq.w	800fb38 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7f9 fd8e 	bl	80093e2 <lwip_htonl>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d0:	8912      	ldrh	r2, [r2, #8]
 800f8d2:	4413      	add	r3, r2
  if (seg != NULL &&
 800f8d4:	69ba      	ldr	r2, [r7, #24]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	f080 812e 	bcs.w	800fb38 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 812a 	beq.w	800fb38 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	f040 8122 	bne.w	800fb38 <tcp_output+0x370>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f040 811d 	bne.w	800fb38 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f904:	2b00      	cmp	r3, #0
 800f906:	f040 812c 	bne.w	800fb62 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800f91a:	e122      	b.n	800fb62 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	899b      	ldrh	r3, [r3, #12]
 800f922:	b29b      	uxth	r3, r3
 800f924:	4618      	mov	r0, r3
 800f926:	f7f9 fd4f 	bl	80093c8 <lwip_htons>
 800f92a:	4603      	mov	r3, r0
 800f92c:	f003 0304 	and.w	r3, r3, #4
 800f930:	2b00      	cmp	r3, #0
 800f932:	d006      	beq.n	800f942 <tcp_output+0x17a>
 800f934:	4b42      	ldr	r3, [pc, #264]	; (800fa40 <tcp_output+0x278>)
 800f936:	f240 4245 	movw	r2, #1093	; 0x445
 800f93a:	4945      	ldr	r1, [pc, #276]	; (800fa50 <tcp_output+0x288>)
 800f93c:	4842      	ldr	r0, [pc, #264]	; (800fa48 <tcp_output+0x280>)
 800f93e:	f003 fe97 	bl	8013670 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f946:	2b00      	cmp	r3, #0
 800f948:	d01f      	beq.n	800f98a <tcp_output+0x1c2>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	7e9b      	ldrb	r3, [r3, #26]
 800f94e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f952:	2b00      	cmp	r3, #0
 800f954:	d119      	bne.n	800f98a <tcp_output+0x1c2>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00b      	beq.n	800f976 <tcp_output+0x1ae>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d110      	bne.n	800f98a <tcp_output+0x1c2>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f96c:	891a      	ldrh	r2, [r3, #8]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f972:	429a      	cmp	r2, r3
 800f974:	d209      	bcs.n	800f98a <tcp_output+0x1c2>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d004      	beq.n	800f98a <tcp_output+0x1c2>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f986:	2b08      	cmp	r3, #8
 800f988:	d901      	bls.n	800f98e <tcp_output+0x1c6>
 800f98a:	2301      	movs	r3, #1
 800f98c:	e000      	b.n	800f990 <tcp_output+0x1c8>
 800f98e:	2300      	movs	r3, #0
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	7e9b      	ldrb	r3, [r3, #26]
 800f998:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 80e2 	beq.w	800fb66 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	7d1b      	ldrb	r3, [r3, #20]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	d00d      	beq.n	800f9c6 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	899b      	ldrh	r3, [r3, #12]
 800f9b0:	b29c      	uxth	r4, r3
 800f9b2:	2010      	movs	r0, #16
 800f9b4:	f7f9 fd08 	bl	80093c8 <lwip_htons>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	4322      	orrs	r2, r4
 800f9c2:	b292      	uxth	r2, r2
 800f9c4:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800f9c6:	697a      	ldr	r2, [r7, #20]
 800f9c8:	6879      	ldr	r1, [r7, #4]
 800f9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9cc:	f000 f8e2 	bl	800fb94 <tcp_output_segment>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d009      	beq.n	800f9f0 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7e9b      	ldrb	r3, [r3, #26]
 800f9e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	769a      	strb	r2, [r3, #26]
      return err;
 800f9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9ee:	e0cd      	b.n	800fb8c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	7d1b      	ldrb	r3, [r3, #20]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d006      	beq.n	800fa0e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	7e9b      	ldrb	r3, [r3, #26]
 800fa04:	f023 0303 	bic.w	r3, r3, #3
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7f9 fce4 	bl	80093e2 <lwip_htonl>
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1e:	891b      	ldrh	r3, [r3, #8]
 800fa20:	461d      	mov	r5, r3
 800fa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	899b      	ldrh	r3, [r3, #12]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7f9 fccc 	bl	80093c8 <lwip_htons>
 800fa30:	4603      	mov	r3, r0
 800fa32:	f003 0303 	and.w	r3, r3, #3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00c      	beq.n	800fa54 <tcp_output+0x28c>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e00b      	b.n	800fa56 <tcp_output+0x28e>
 800fa3e:	bf00      	nop
 800fa40:	08016344 	.word	0x08016344
 800fa44:	08016748 	.word	0x08016748
 800fa48:	080163a8 	.word	0x080163a8
 800fa4c:	2000b7f8 	.word	0x2000b7f8
 800fa50:	08016770 	.word	0x08016770
 800fa54:	2300      	movs	r3, #0
 800fa56:	442b      	add	r3, r5
 800fa58:	4423      	add	r3, r4
 800fa5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	da02      	bge.n	800fa6e <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	461c      	mov	r4, r3
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	899b      	ldrh	r3, [r3, #12]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f9 fca3 	bl	80093c8 <lwip_htons>
 800fa82:	4603      	mov	r3, r0
 800fa84:	f003 0303 	and.w	r3, r3, #3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d001      	beq.n	800fa90 <tcp_output+0x2c8>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e000      	b.n	800fa92 <tcp_output+0x2ca>
 800fa90:	2300      	movs	r3, #0
 800fa92:	4423      	add	r3, r4
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d049      	beq.n	800fb2c <tcp_output+0x364>
      seg->next = NULL;
 800fa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d105      	bne.n	800fab2 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faaa:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800faac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faae:	623b      	str	r3, [r7, #32]
 800fab0:	e03f      	b.n	800fb32 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	f7f9 fc92 	bl	80093e2 <lwip_htonl>
 800fabe:	4604      	mov	r4, r0
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7f9 fc8b 	bl	80093e2 <lwip_htonl>
 800facc:	4603      	mov	r3, r0
 800face:	1ae3      	subs	r3, r4, r3
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	da24      	bge.n	800fb1e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	336c      	adds	r3, #108	; 0x6c
 800fad8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fada:	e002      	b.n	800fae2 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d011      	beq.n	800fb0e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7f9 fc75 	bl	80093e2 <lwip_htonl>
 800faf8:	4604      	mov	r4, r0
 800fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7f9 fc6e 	bl	80093e2 <lwip_htonl>
 800fb06:	4603      	mov	r3, r0
 800fb08:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dbe6      	blt.n	800fadc <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb14:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb1a:	601a      	str	r2, [r3, #0]
 800fb1c:	e009      	b.n	800fb32 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fb1e:	6a3b      	ldr	r3, [r7, #32]
 800fb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb22:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fb24:	6a3b      	ldr	r3, [r7, #32]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	623b      	str	r3, [r7, #32]
 800fb2a:	e002      	b.n	800fb32 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fb2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb2e:	f7fc f9bf 	bl	800beb0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb36:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d015      	beq.n	800fb6a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7f9 fc4c 	bl	80093e2 <lwip_htonl>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb54:	8912      	ldrh	r2, [r2, #8]
 800fb56:	4413      	add	r3, r2
  while (seg != NULL &&
 800fb58:	69ba      	ldr	r2, [r7, #24]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	f4bf aede 	bcs.w	800f91c <tcp_output+0x154>
  }
output_done:
 800fb60:	e003      	b.n	800fb6a <tcp_output+0x3a2>
    goto output_done;
 800fb62:	bf00      	nop
 800fb64:	e002      	b.n	800fb6c <tcp_output+0x3a4>
      break;
 800fb66:	bf00      	nop
 800fb68:	e000      	b.n	800fb6c <tcp_output+0x3a4>
output_done:
 800fb6a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d103      	bne.n	800fb7c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7e9b      	ldrb	r3, [r3, #26]
 800fb80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3728      	adds	r7, #40	; 0x28
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bdb0      	pop	{r4, r5, r7, pc}

0800fb94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fb94:	b5b0      	push	{r4, r5, r7, lr}
 800fb96:	b08c      	sub	sp, #48	; 0x30
 800fb98:	af04      	add	r7, sp, #16
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	89db      	ldrh	r3, [r3, #14]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d001      	beq.n	800fbae <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	e08a      	b.n	800fcc4 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	68dc      	ldr	r4, [r3, #12]
 800fbb6:	4610      	mov	r0, r2
 800fbb8:	f7f9 fc13 	bl	80093e2 <lwip_htonl>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	68dc      	ldr	r4, [r3, #12]
 800fbc8:	4610      	mov	r0, r2
 800fbca:	f7f9 fbfd 	bl	80093c8 <lwip_htons>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd6:	68ba      	ldr	r2, [r7, #8]
 800fbd8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fbda:	441a      	add	r2, r3
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	3314      	adds	r3, #20
 800fbe6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	7a9b      	ldrb	r3, [r3, #10]
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d014      	beq.n	800fc1e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fbfe:	f7fc fc7b 	bl	800c4f8 <tcp_eff_send_mss_impl>
 800fc02:	4603      	mov	r3, r0
 800fc04:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fc06:	8b7b      	ldrh	r3, [r7, #26]
 800fc08:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f9 fbe8 	bl	80093e2 <lwip_htonl>
 800fc12:	4602      	mov	r2, r0
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	da02      	bge.n	800fc2e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d10c      	bne.n	800fc50 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800fc36:	4b25      	ldr	r3, [pc, #148]	; (800fccc <tcp_output_segment+0x138>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f9 fbcc 	bl	80093e2 <lwip_htonl>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	68da      	ldr	r2, [r3, #12]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	8959      	ldrh	r1, [r3, #10]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	8b3a      	ldrh	r2, [r7, #24]
 800fc6a:	1a8a      	subs	r2, r1, r2
 800fc6c:	b292      	uxth	r2, r2
 800fc6e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	8919      	ldrh	r1, [r3, #8]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	8b3a      	ldrh	r2, [r7, #24]
 800fc7c:	1a8a      	subs	r2, r1, r2
 800fc7e:	b292      	uxth	r2, r2
 800fc80:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	68d2      	ldr	r2, [r2, #12]
 800fc8a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	2200      	movs	r2, #0
 800fc92:	741a      	strb	r2, [r3, #16]
 800fc94:	2200      	movs	r2, #0
 800fc96:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6858      	ldr	r0, [r3, #4]
 800fc9c:	68b9      	ldr	r1, [r7, #8]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	1d1c      	adds	r4, r3, #4
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	7a9d      	ldrb	r5, [r3, #10]
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	7a5b      	ldrb	r3, [r3, #9]
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	9202      	str	r2, [sp, #8]
 800fcae:	2206      	movs	r2, #6
 800fcb0:	9201      	str	r2, [sp, #4]
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	462b      	mov	r3, r5
 800fcb6:	4622      	mov	r2, r4
 800fcb8:	f002 f9f8 	bl	80120ac <ip4_output_if>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800fcc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3720      	adds	r7, #32
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bdb0      	pop	{r4, r5, r7, pc}
 800fccc:	2000b7ac 	.word	0x2000b7ac

0800fcd0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b08c      	sub	sp, #48	; 0x30
 800fcd4:	af04      	add	r7, sp, #16
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
 800fcdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800fcde:	2200      	movs	r2, #0
 800fce0:	2114      	movs	r1, #20
 800fce2:	2001      	movs	r0, #1
 800fce4:	f7fa f9f0 	bl	800a0c8 <pbuf_alloc>
 800fce8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d05b      	beq.n	800fda8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	895b      	ldrh	r3, [r3, #10]
 800fcf4:	2b13      	cmp	r3, #19
 800fcf6:	d806      	bhi.n	800fd06 <tcp_rst+0x36>
 800fcf8:	4b2d      	ldr	r3, [pc, #180]	; (800fdb0 <tcp_rst+0xe0>)
 800fcfa:	f240 524c 	movw	r2, #1356	; 0x54c
 800fcfe:	492d      	ldr	r1, [pc, #180]	; (800fdb4 <tcp_rst+0xe4>)
 800fd00:	482d      	ldr	r0, [pc, #180]	; (800fdb8 <tcp_rst+0xe8>)
 800fd02:	f003 fcb5 	bl	8013670 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd06:	69fb      	ldr	r3, [r7, #28]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800fd0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7f9 fb5a 	bl	80093c8 <lwip_htons>
 800fd14:	4603      	mov	r3, r0
 800fd16:	461a      	mov	r2, r3
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800fd1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f9 fb52 	bl	80093c8 <lwip_htons>
 800fd24:	4603      	mov	r3, r0
 800fd26:	461a      	mov	r2, r3
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f7f9 fb58 	bl	80093e2 <lwip_htonl>
 800fd32:	4602      	mov	r2, r0
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800fd38:	68b8      	ldr	r0, [r7, #8]
 800fd3a:	f7f9 fb52 	bl	80093e2 <lwip_htonl>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800fd44:	f245 0014 	movw	r0, #20500	; 0x5014
 800fd48:	f7f9 fb3e 	bl	80093c8 <lwip_htons>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	461a      	mov	r2, r3
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f042 0208 	orr.w	r2, r2, #8
 800fd5c:	739a      	strb	r2, [r3, #14]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800fd64:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	741a      	strb	r2, [r3, #16]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	2200      	movs	r2, #0
 800fd74:	749a      	strb	r2, [r3, #18]
 800fd76:	2200      	movs	r2, #0
 800fd78:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800fd7a:	6838      	ldr	r0, [r7, #0]
 800fd7c:	f001 ffec 	bl	8011d58 <ip4_route>
 800fd80:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d00b      	beq.n	800fda0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	9302      	str	r3, [sp, #8]
 800fd8c:	2306      	movs	r3, #6
 800fd8e:	9301      	str	r3, [sp, #4]
 800fd90:	2300      	movs	r3, #0
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	23ff      	movs	r3, #255	; 0xff
 800fd96:	683a      	ldr	r2, [r7, #0]
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	69f8      	ldr	r0, [r7, #28]
 800fd9c:	f002 f986 	bl	80120ac <ip4_output_if>
  }
  pbuf_free(p);
 800fda0:	69f8      	ldr	r0, [r7, #28]
 800fda2:	f7fa fd09 	bl	800a7b8 <pbuf_free>
 800fda6:	e000      	b.n	800fdaa <tcp_rst+0xda>
    return;
 800fda8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fdaa:	3720      	adds	r7, #32
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	08016344 	.word	0x08016344
 800fdb4:	08016378 	.word	0x08016378
 800fdb8:	080163a8 	.word	0x080163a8

0800fdbc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d029      	beq.n	800fe20 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdd0:	60fb      	str	r3, [r7, #12]
 800fdd2:	e002      	b.n	800fdda <tcp_rexmit_rto+0x1e>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1f8      	bne.n	800fdd4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fdfe:	2bff      	cmp	r3, #255	; 0xff
 800fe00:	d007      	beq.n	800fe12 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe08:	3301      	adds	r3, #1
 800fe0a:	b2da      	uxtb	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2200      	movs	r2, #0
 800fe16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fcd5 	bl	800f7c8 <tcp_output>
 800fe1e:	e000      	b.n	800fe22 <tcp_rexmit_rto+0x66>
    return;
 800fe20:	bf00      	nop
}
 800fe22:	3710      	adds	r7, #16
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fe28:	b590      	push	{r4, r7, lr}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d043      	beq.n	800fec0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe3c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	3368      	adds	r3, #104	; 0x68
 800fe4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fe4c:	e002      	b.n	800fe54 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d011      	beq.n	800fe80 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7f9 fabc 	bl	80093e2 <lwip_htonl>
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7f9 fab5 	bl	80093e2 <lwip_htonl>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	dbe6      	blt.n	800fe4e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d103      	bne.n	800fe9e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fea4:	2bff      	cmp	r3, #255	; 0xff
 800fea6:	d007      	beq.n	800feb8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800feae:	3301      	adds	r3, #1
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	635a      	str	r2, [r3, #52]	; 0x34
 800febe:	e000      	b.n	800fec2 <tcp_rexmit+0x9a>
    return;
 800fec0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd90      	pop	{r4, r7, pc}

0800fec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d041      	beq.n	800ff5c <tcp_rexmit_fast+0x94>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	7e9b      	ldrb	r3, [r3, #26]
 800fedc:	f003 0304 	and.w	r3, r3, #4
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d13b      	bne.n	800ff5c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff ff9f 	bl	800fe28 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fef6:	4293      	cmp	r3, r2
 800fef8:	bf28      	it	cs
 800fefa:	4613      	movcs	r3, r2
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	0fda      	lsrs	r2, r3, #31
 800ff00:	4413      	add	r3, r2
 800ff02:	105b      	asrs	r3, r3, #1
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ff12:	461a      	mov	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff18:	005b      	lsls	r3, r3, #1
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d206      	bcs.n	800ff2c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff22:	005b      	lsls	r3, r3, #1
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff36:	4619      	mov	r1, r3
 800ff38:	0049      	lsls	r1, r1, #1
 800ff3a:	440b      	add	r3, r1
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	4413      	add	r3, r2
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	7e9b      	ldrb	r3, [r3, #26]
 800ff4c:	f043 0304 	orr.w	r3, r3, #4
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800ff5c:	bf00      	nop
 800ff5e:	3708      	adds	r7, #8
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08a      	sub	sp, #40	; 0x28
 800ff68:	af04      	add	r7, sp, #16
 800ff6a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff70:	3b01      	subs	r3, #1
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7f9 fa35 	bl	80093e2 <lwip_htonl>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f7fe fd56 	bl	800ea30 <tcp_output_alloc_header>
 800ff84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d102      	bne.n	800ff92 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ff8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff90:	e021      	b.n	800ffd6 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	3304      	adds	r3, #4
 800ff96:	4618      	mov	r0, r3
 800ff98:	f001 fede 	bl	8011d58 <ip4_route>
 800ff9c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d102      	bne.n	800ffaa <tcp_keepalive+0x46>
    err = ERR_RTE;
 800ffa4:	23fc      	movs	r3, #252	; 0xfc
 800ffa6:	75fb      	strb	r3, [r7, #23]
 800ffa8:	e010      	b.n	800ffcc <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800ffaa:	6879      	ldr	r1, [r7, #4]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	1d1a      	adds	r2, r3, #4
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	7a98      	ldrb	r0, [r3, #10]
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	9302      	str	r3, [sp, #8]
 800ffb8:	2306      	movs	r3, #6
 800ffba:	9301      	str	r3, [sp, #4]
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	6938      	ldr	r0, [r7, #16]
 800ffc4:	f002 f872 	bl	80120ac <ip4_output_if>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ffcc:	6938      	ldr	r0, [r7, #16]
 800ffce:	f7fa fbf3 	bl	800a7b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ffd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3718      	adds	r7, #24
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}

0800ffde <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ffde:	b590      	push	{r4, r7, lr}
 800ffe0:	b08f      	sub	sp, #60	; 0x3c
 800ffe2:	af04      	add	r7, sp, #16
 800ffe4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffea:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d102      	bne.n	800fff8 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fff6:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d101      	bne.n	8010002 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	e085      	b.n	801010e <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010002:	6a3b      	ldr	r3, [r7, #32]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	899b      	ldrh	r3, [r3, #12]
 8010008:	b29b      	uxth	r3, r3
 801000a:	4618      	mov	r0, r3
 801000c:	f7f9 f9dc 	bl	80093c8 <lwip_htons>
 8010010:	4603      	mov	r3, r0
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	d005      	beq.n	8010026 <tcp_zero_window_probe+0x48>
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	891b      	ldrh	r3, [r3, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <tcp_zero_window_probe+0x48>
 8010022:	2301      	movs	r3, #1
 8010024:	e000      	b.n	8010028 <tcp_zero_window_probe+0x4a>
 8010026:	2300      	movs	r3, #0
 8010028:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801002a:	7ffb      	ldrb	r3, [r7, #31]
 801002c:	2b00      	cmp	r3, #0
 801002e:	bf0c      	ite	eq
 8010030:	2301      	moveq	r3, #1
 8010032:	2300      	movne	r3, #0
 8010034:	b2db      	uxtb	r3, r3
 8010036:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8010038:	6a3b      	ldr	r3, [r7, #32]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	8bba      	ldrh	r2, [r7, #28]
 8010040:	2100      	movs	r1, #0
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7fe fcf4 	bl	800ea30 <tcp_output_alloc_header>
 8010048:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d102      	bne.n	8010056 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010050:	f04f 33ff 	mov.w	r3, #4294967295
 8010054:	e05b      	b.n	801010e <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801005c:	7ffb      	ldrb	r3, [r7, #31]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00e      	beq.n	8010080 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	899b      	ldrh	r3, [r3, #12]
 8010066:	b29b      	uxth	r3, r3
 8010068:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801006c:	b29c      	uxth	r4, r3
 801006e:	2011      	movs	r0, #17
 8010070:	f7f9 f9aa 	bl	80093c8 <lwip_htons>
 8010074:	4603      	mov	r3, r0
 8010076:	4323      	orrs	r3, r4
 8010078:	b29a      	uxth	r2, r3
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	819a      	strh	r2, [r3, #12]
 801007e:	e010      	b.n	80100a2 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	3314      	adds	r3, #20
 8010086:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010088:	6a3b      	ldr	r3, [r7, #32]
 801008a:	6858      	ldr	r0, [r3, #4]
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	891a      	ldrh	r2, [r3, #8]
 8010092:	6a3b      	ldr	r3, [r7, #32]
 8010094:	891b      	ldrh	r3, [r3, #8]
 8010096:	1ad3      	subs	r3, r2, r3
 8010098:	b29b      	uxth	r3, r3
 801009a:	2201      	movs	r2, #1
 801009c:	6939      	ldr	r1, [r7, #16]
 801009e:	f7fa fd95 	bl	800abcc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80100a2:	6a3b      	ldr	r3, [r7, #32]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7f9 f99a 	bl	80093e2 <lwip_htonl>
 80100ae:	4603      	mov	r3, r0
 80100b0:	3301      	adds	r3, #1
 80100b2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	da02      	bge.n	80100c6 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	68fa      	ldr	r2, [r7, #12]
 80100c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	3304      	adds	r3, #4
 80100ca:	4618      	mov	r0, r3
 80100cc:	f001 fe44 	bl	8011d58 <ip4_route>
 80100d0:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d103      	bne.n	80100e0 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80100d8:	23fc      	movs	r3, #252	; 0xfc
 80100da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100de:	e011      	b.n	8010104 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80100e0:	6879      	ldr	r1, [r7, #4]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	1d1a      	adds	r2, r3, #4
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7a98      	ldrb	r0, [r3, #10]
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	9302      	str	r3, [sp, #8]
 80100ee:	2306      	movs	r3, #6
 80100f0:	9301      	str	r3, [sp, #4]
 80100f2:	2300      	movs	r3, #0
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	4603      	mov	r3, r0
 80100f8:	69b8      	ldr	r0, [r7, #24]
 80100fa:	f001 ffd7 	bl	80120ac <ip4_output_if>
 80100fe:	4603      	mov	r3, r0
 8010100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8010104:	69b8      	ldr	r0, [r7, #24]
 8010106:	f7fa fb57 	bl	800a7b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801010a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801010e:	4618      	mov	r0, r3
 8010110:	372c      	adds	r7, #44	; 0x2c
 8010112:	46bd      	mov	sp, r7
 8010114:	bd90      	pop	{r4, r7, pc}
	...

08010118 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010120:	f7fa fdd4 	bl	800accc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010124:	4b0a      	ldr	r3, [pc, #40]	; (8010150 <tcpip_tcp_timer+0x38>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d103      	bne.n	8010134 <tcpip_tcp_timer+0x1c>
 801012c:	4b09      	ldr	r3, [pc, #36]	; (8010154 <tcpip_tcp_timer+0x3c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d005      	beq.n	8010140 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010134:	2200      	movs	r2, #0
 8010136:	4908      	ldr	r1, [pc, #32]	; (8010158 <tcpip_tcp_timer+0x40>)
 8010138:	20fa      	movs	r0, #250	; 0xfa
 801013a:	f000 f86f 	bl	801021c <sys_timeout>
 801013e:	e003      	b.n	8010148 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010140:	4b06      	ldr	r3, [pc, #24]	; (801015c <tcpip_tcp_timer+0x44>)
 8010142:	2200      	movs	r2, #0
 8010144:	601a      	str	r2, [r3, #0]
  }
}
 8010146:	bf00      	nop
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	2000b7b8 	.word	0x2000b7b8
 8010154:	2000b7bc 	.word	0x2000b7bc
 8010158:	08010119 	.word	0x08010119
 801015c:	2000b804 	.word	0x2000b804

08010160 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010164:	4b0a      	ldr	r3, [pc, #40]	; (8010190 <tcp_timer_needed+0x30>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10f      	bne.n	801018c <tcp_timer_needed+0x2c>
 801016c:	4b09      	ldr	r3, [pc, #36]	; (8010194 <tcp_timer_needed+0x34>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d103      	bne.n	801017c <tcp_timer_needed+0x1c>
 8010174:	4b08      	ldr	r3, [pc, #32]	; (8010198 <tcp_timer_needed+0x38>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d007      	beq.n	801018c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801017c:	4b04      	ldr	r3, [pc, #16]	; (8010190 <tcp_timer_needed+0x30>)
 801017e:	2201      	movs	r2, #1
 8010180:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010182:	2200      	movs	r2, #0
 8010184:	4905      	ldr	r1, [pc, #20]	; (801019c <tcp_timer_needed+0x3c>)
 8010186:	20fa      	movs	r0, #250	; 0xfa
 8010188:	f000 f848 	bl	801021c <sys_timeout>
  }
}
 801018c:	bf00      	nop
 801018e:	bd80      	pop	{r7, pc}
 8010190:	2000b804 	.word	0x2000b804
 8010194:	2000b7b8 	.word	0x2000b7b8
 8010198:	2000b7bc 	.word	0x2000b7bc
 801019c:	08010119 	.word	0x08010119

080101a0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	4903      	ldr	r1, [pc, #12]	; (80101c8 <cyclic_timer+0x28>)
 80101ba:	4618      	mov	r0, r3
 80101bc:	f000 f82e 	bl	801021c <sys_timeout>
}
 80101c0:	bf00      	nop
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	080101a1 	.word	0x080101a1

080101cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80101d2:	2301      	movs	r3, #1
 80101d4:	607b      	str	r3, [r7, #4]
 80101d6:	e00e      	b.n	80101f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80101d8:	4a0d      	ldr	r2, [pc, #52]	; (8010210 <sys_timeouts_init+0x44>)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	4a0a      	ldr	r2, [pc, #40]	; (8010210 <sys_timeouts_init+0x44>)
 80101e6:	4413      	add	r3, r2
 80101e8:	461a      	mov	r2, r3
 80101ea:	490a      	ldr	r1, [pc, #40]	; (8010214 <sys_timeouts_init+0x48>)
 80101ec:	f000 f816 	bl	801021c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3301      	adds	r3, #1
 80101f4:	607b      	str	r3, [r7, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	d9ed      	bls.n	80101d8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80101fc:	f7f4 f86a 	bl	80042d4 <sys_now>
 8010200:	4603      	mov	r3, r0
 8010202:	4a05      	ldr	r2, [pc, #20]	; (8010218 <sys_timeouts_init+0x4c>)
 8010204:	6013      	str	r3, [r2, #0]
}
 8010206:	bf00      	nop
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	0801704c 	.word	0x0801704c
 8010214:	080101a1 	.word	0x080101a1
 8010218:	2000b800 	.word	0x2000b800

0801021c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b088      	sub	sp, #32
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010228:	200a      	movs	r0, #10
 801022a:	f7f9 fcb9 	bl	8009ba0 <memp_malloc>
 801022e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10a      	bne.n	801024c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	2b00      	cmp	r3, #0
 801023a:	f040 8084 	bne.w	8010346 <sys_timeout+0x12a>
 801023e:	4b44      	ldr	r3, [pc, #272]	; (8010350 <sys_timeout+0x134>)
 8010240:	22d4      	movs	r2, #212	; 0xd4
 8010242:	4944      	ldr	r1, [pc, #272]	; (8010354 <sys_timeout+0x138>)
 8010244:	4844      	ldr	r0, [pc, #272]	; (8010358 <sys_timeout+0x13c>)
 8010246:	f003 fa13 	bl	8013670 <iprintf>
    return;
 801024a:	e07c      	b.n	8010346 <sys_timeout+0x12a>
  }

  now = sys_now();
 801024c:	f7f4 f842 	bl	80042d4 <sys_now>
 8010250:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8010252:	4b42      	ldr	r3, [pc, #264]	; (801035c <sys_timeout+0x140>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d105      	bne.n	8010266 <sys_timeout+0x4a>
    diff = 0;
 801025a:	2300      	movs	r3, #0
 801025c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801025e:	4a40      	ldr	r2, [pc, #256]	; (8010360 <sys_timeout+0x144>)
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	6013      	str	r3, [r2, #0]
 8010264:	e004      	b.n	8010270 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8010266:	4b3e      	ldr	r3, [pc, #248]	; (8010360 <sys_timeout+0x144>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	693a      	ldr	r2, [r7, #16]
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	2200      	movs	r2, #0
 8010274:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	441a      	add	r2, r3
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801028c:	4b33      	ldr	r3, [pc, #204]	; (801035c <sys_timeout+0x140>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d103      	bne.n	801029c <sys_timeout+0x80>
    next_timeout = timeout;
 8010294:	4a31      	ldr	r2, [pc, #196]	; (801035c <sys_timeout+0x140>)
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	6013      	str	r3, [r2, #0]
    return;
 801029a:	e055      	b.n	8010348 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801029c:	4b2f      	ldr	r3, [pc, #188]	; (801035c <sys_timeout+0x140>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d20f      	bcs.n	80102c8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80102a8:	4b2c      	ldr	r3, [pc, #176]	; (801035c <sys_timeout+0x140>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	6859      	ldr	r1, [r3, #4]
 80102ae:	4b2b      	ldr	r3, [pc, #172]	; (801035c <sys_timeout+0x140>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	1a8a      	subs	r2, r1, r2
 80102b6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80102b8:	4b28      	ldr	r3, [pc, #160]	; (801035c <sys_timeout+0x140>)
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80102c0:	4a26      	ldr	r2, [pc, #152]	; (801035c <sys_timeout+0x140>)
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	6013      	str	r3, [r2, #0]
 80102c6:	e03f      	b.n	8010348 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80102c8:	4b24      	ldr	r3, [pc, #144]	; (801035c <sys_timeout+0x140>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	61fb      	str	r3, [r7, #28]
 80102ce:	e036      	b.n	801033e <sys_timeout+0x122>
      timeout->time -= t->time;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	1ad2      	subs	r2, r2, r3
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d006      	beq.n	80102f4 <sys_timeout+0xd8>
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d921      	bls.n	8010338 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d009      	beq.n	8010310 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	6859      	ldr	r1, [r3, #4]
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	1a8a      	subs	r2, r1, r2
 801030c:	605a      	str	r2, [r3, #4]
 801030e:	e00b      	b.n	8010328 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	429a      	cmp	r2, r3
 8010318:	d206      	bcs.n	8010328 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801031a:	4b10      	ldr	r3, [pc, #64]	; (801035c <sys_timeout+0x140>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	685a      	ldr	r2, [r3, #4]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	441a      	add	r2, r3
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	601a      	str	r2, [r3, #0]
        break;
 8010336:	e007      	b.n	8010348 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	61fb      	str	r3, [r7, #28]
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1c5      	bne.n	80102d0 <sys_timeout+0xb4>
 8010344:	e000      	b.n	8010348 <sys_timeout+0x12c>
    return;
 8010346:	bf00      	nop
      }
    }
  }
}
 8010348:	3720      	adds	r7, #32
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	08016788 	.word	0x08016788
 8010354:	080167bc 	.word	0x080167bc
 8010358:	080167fc 	.word	0x080167fc
 801035c:	2000b7fc 	.word	0x2000b7fc
 8010360:	2000b800 	.word	0x2000b800

08010364 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b086      	sub	sp, #24
 8010368:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801036a:	4b24      	ldr	r3, [pc, #144]	; (80103fc <sys_check_timeouts+0x98>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d03f      	beq.n	80103f2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8010372:	f7f3 ffaf 	bl	80042d4 <sys_now>
 8010376:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8010378:	4b21      	ldr	r3, [pc, #132]	; (8010400 <sys_check_timeouts+0x9c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8010386:	4b1d      	ldr	r3, [pc, #116]	; (80103fc <sys_check_timeouts+0x98>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d02c      	beq.n	80103ec <sys_check_timeouts+0x88>
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	697a      	ldr	r2, [r7, #20]
 8010398:	429a      	cmp	r2, r3
 801039a:	d327      	bcc.n	80103ec <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 801039c:	2301      	movs	r3, #1
 801039e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	685a      	ldr	r2, [r3, #4]
 80103a4:	4b16      	ldr	r3, [pc, #88]	; (8010400 <sys_check_timeouts+0x9c>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4413      	add	r3, r2
 80103aa:	4a15      	ldr	r2, [pc, #84]	; (8010400 <sys_check_timeouts+0x9c>)
 80103ac:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4a0f      	ldr	r2, [pc, #60]	; (80103fc <sys_check_timeouts+0x98>)
 80103be:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80103cc:	68b9      	ldr	r1, [r7, #8]
 80103ce:	200a      	movs	r0, #10
 80103d0:	f7f9 fc38 	bl	8009c44 <memp_free>
        if (handler != NULL) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d008      	beq.n	80103ec <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80103da:	480a      	ldr	r0, [pc, #40]	; (8010404 <sys_check_timeouts+0xa0>)
 80103dc:	f002 ffba 	bl	8013354 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6838      	ldr	r0, [r7, #0]
 80103e4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80103e6:	4807      	ldr	r0, [pc, #28]	; (8010404 <sys_check_timeouts+0xa0>)
 80103e8:	f002 ffc3 	bl	8013372 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80103ec:	7cfb      	ldrb	r3, [r7, #19]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1c7      	bne.n	8010382 <sys_check_timeouts+0x1e>
  }
}
 80103f2:	bf00      	nop
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	2000b7fc 	.word	0x2000b7fc
 8010400:	2000b800 	.word	0x2000b800
 8010404:	20008058 	.word	0x20008058

08010408 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 801040e:	4b0f      	ldr	r3, [pc, #60]	; (801044c <sys_timeouts_sleeptime+0x44>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d102      	bne.n	801041c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8010416:	f04f 33ff 	mov.w	r3, #4294967295
 801041a:	e013      	b.n	8010444 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 801041c:	f7f3 ff5a 	bl	80042d4 <sys_now>
 8010420:	4602      	mov	r2, r0
 8010422:	4b0b      	ldr	r3, [pc, #44]	; (8010450 <sys_timeouts_sleeptime+0x48>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	1ad3      	subs	r3, r2, r3
 8010428:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801042a:	4b08      	ldr	r3, [pc, #32]	; (801044c <sys_timeouts_sleeptime+0x44>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	429a      	cmp	r2, r3
 8010434:	d901      	bls.n	801043a <sys_timeouts_sleeptime+0x32>
    return 0;
 8010436:	2300      	movs	r3, #0
 8010438:	e004      	b.n	8010444 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801043a:	4b04      	ldr	r3, [pc, #16]	; (801044c <sys_timeouts_sleeptime+0x44>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	1ad3      	subs	r3, r2, r3
  }
}
 8010444:	4618      	mov	r0, r3
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	2000b7fc 	.word	0x2000b7fc
 8010450:	2000b800 	.word	0x2000b800

08010454 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801045e:	4b0f      	ldr	r3, [pc, #60]	; (801049c <sys_timeouts_mbox_fetch+0x48>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d105      	bne.n	8010472 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010466:	2200      	movs	r2, #0
 8010468:	6839      	ldr	r1, [r7, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f002 fe42 	bl	80130f4 <sys_arch_mbox_fetch>
    return;
 8010470:	e011      	b.n	8010496 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8010472:	f7ff ffc9 	bl	8010408 <sys_timeouts_sleeptime>
 8010476:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d008      	beq.n	8010490 <sys_timeouts_mbox_fetch+0x3c>
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f002 fe36 	bl	80130f4 <sys_arch_mbox_fetch>
 8010488:	4603      	mov	r3, r0
 801048a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048e:	d102      	bne.n	8010496 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010490:	f7ff ff68 	bl	8010364 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010494:	e7e3      	b.n	801045e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	2000b7fc 	.word	0x2000b7fc

080104a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80104a0:	b480      	push	{r7}
 80104a2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80104a4:	bf00      	nop
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bc80      	pop	{r7}
 80104aa:	4770      	bx	lr

080104ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80104b6:	4b17      	ldr	r3, [pc, #92]	; (8010514 <udp_new_port+0x68>)
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	1c5a      	adds	r2, r3, #1
 80104bc:	b291      	uxth	r1, r2
 80104be:	4a15      	ldr	r2, [pc, #84]	; (8010514 <udp_new_port+0x68>)
 80104c0:	8011      	strh	r1, [r2, #0]
 80104c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d103      	bne.n	80104d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80104ca:	4b12      	ldr	r3, [pc, #72]	; (8010514 <udp_new_port+0x68>)
 80104cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80104d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80104d2:	4b11      	ldr	r3, [pc, #68]	; (8010518 <udp_new_port+0x6c>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	603b      	str	r3, [r7, #0]
 80104d8:	e011      	b.n	80104fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	8a5a      	ldrh	r2, [r3, #18]
 80104de:	4b0d      	ldr	r3, [pc, #52]	; (8010514 <udp_new_port+0x68>)
 80104e0:	881b      	ldrh	r3, [r3, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d108      	bne.n	80104f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80104e6:	88fb      	ldrh	r3, [r7, #6]
 80104e8:	3301      	adds	r3, #1
 80104ea:	80fb      	strh	r3, [r7, #6]
 80104ec:	88fb      	ldrh	r3, [r7, #6]
 80104ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80104f2:	d3e0      	bcc.n	80104b6 <udp_new_port+0xa>
        return 0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	e007      	b.n	8010508 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	603b      	str	r3, [r7, #0]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d1ea      	bne.n	80104da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010504:	4b03      	ldr	r3, [pc, #12]	; (8010514 <udp_new_port+0x68>)
 8010506:	881b      	ldrh	r3, [r3, #0]
}
 8010508:	4618      	mov	r0, r3
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	bc80      	pop	{r7}
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	2000001c 	.word	0x2000001c
 8010518:	2000b808 	.word	0x2000b808

0801051c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	4613      	mov	r3, r2
 8010528:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d018      	beq.n	8010562 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d013      	beq.n	801055e <udp_input_local_match+0x42>
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00f      	beq.n	801055e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801053e:	4b13      	ldr	r3, [pc, #76]	; (801058c <udp_input_local_match+0x70>)
 8010540:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010546:	d00a      	beq.n	801055e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	4b0f      	ldr	r3, [pc, #60]	; (801058c <udp_input_local_match+0x70>)
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	405a      	eors	r2, r3
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	3308      	adds	r3, #8
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801055a:	2b00      	cmp	r3, #0
 801055c:	d110      	bne.n	8010580 <udp_input_local_match+0x64>
          return 1;
 801055e:	2301      	movs	r3, #1
 8010560:	e00f      	b.n	8010582 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d009      	beq.n	801057c <udp_input_local_match+0x60>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <udp_input_local_match+0x60>
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	4b05      	ldr	r3, [pc, #20]	; (801058c <udp_input_local_match+0x70>)
 8010576:	695b      	ldr	r3, [r3, #20]
 8010578:	429a      	cmp	r2, r3
 801057a:	d101      	bne.n	8010580 <udp_input_local_match+0x64>
      return 1;
 801057c:	2301      	movs	r3, #1
 801057e:	e000      	b.n	8010582 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3714      	adds	r7, #20
 8010586:	46bd      	mov	sp, r7
 8010588:	bc80      	pop	{r7}
 801058a:	4770      	bx	lr
 801058c:	2000805c 	.word	0x2000805c

08010590 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010590:	b590      	push	{r4, r7, lr}
 8010592:	b08d      	sub	sp, #52	; 0x34
 8010594:	af02      	add	r7, sp, #8
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	895b      	ldrh	r3, [r3, #10]
 80105a2:	2b07      	cmp	r3, #7
 80105a4:	d803      	bhi.n	80105ae <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7fa f906 	bl	800a7b8 <pbuf_free>
    goto end;
 80105ac:	e0c6      	b.n	801073c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80105b4:	4b63      	ldr	r3, [pc, #396]	; (8010744 <udp_input+0x1b4>)
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	4a62      	ldr	r2, [pc, #392]	; (8010744 <udp_input+0x1b4>)
 80105ba:	6812      	ldr	r2, [r2, #0]
 80105bc:	4611      	mov	r1, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f001 fe46 	bl	8012250 <ip4_addr_isbroadcast_u32>
 80105c4:	4603      	mov	r3, r0
 80105c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	881b      	ldrh	r3, [r3, #0]
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7f8 fefa 	bl	80093c8 <lwip_htons>
 80105d4:	4603      	mov	r3, r0
 80105d6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	885b      	ldrh	r3, [r3, #2]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	4618      	mov	r0, r3
 80105e0:	f7f8 fef2 	bl	80093c8 <lwip_htons>
 80105e4:	4603      	mov	r3, r0
 80105e6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80105e8:	2300      	movs	r3, #0
 80105ea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80105ec:	2300      	movs	r3, #0
 80105ee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80105f0:	2300      	movs	r3, #0
 80105f2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80105f4:	4b54      	ldr	r3, [pc, #336]	; (8010748 <udp_input+0x1b8>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
 80105fa:	e03b      	b.n	8010674 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80105fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fe:	8a5b      	ldrh	r3, [r3, #18]
 8010600:	89fa      	ldrh	r2, [r7, #14]
 8010602:	429a      	cmp	r2, r3
 8010604:	d131      	bne.n	801066a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010606:	7cfb      	ldrb	r3, [r7, #19]
 8010608:	461a      	mov	r2, r3
 801060a:	6839      	ldr	r1, [r7, #0]
 801060c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801060e:	f7ff ff85 	bl	801051c <udp_input_local_match>
 8010612:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010614:	2b00      	cmp	r3, #0
 8010616:	d028      	beq.n	801066a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8010618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061a:	7c1b      	ldrb	r3, [r3, #16]
 801061c:	f003 0304 	and.w	r3, r3, #4
 8010620:	2b00      	cmp	r3, #0
 8010622:	d104      	bne.n	801062e <udp_input+0x9e>
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d101      	bne.n	801062e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	8a9b      	ldrh	r3, [r3, #20]
 8010632:	8a3a      	ldrh	r2, [r7, #16]
 8010634:	429a      	cmp	r2, r3
 8010636:	d118      	bne.n	801066a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801063c:	2b00      	cmp	r3, #0
 801063e:	d005      	beq.n	801064c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	4b3f      	ldr	r3, [pc, #252]	; (8010744 <udp_input+0x1b4>)
 8010646:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010648:	429a      	cmp	r2, r3
 801064a:	d10e      	bne.n	801066a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801064c:	6a3b      	ldr	r3, [r7, #32]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d014      	beq.n	801067c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	68da      	ldr	r2, [r3, #12]
 8010656:	6a3b      	ldr	r3, [r7, #32]
 8010658:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801065a:	4b3b      	ldr	r3, [pc, #236]	; (8010748 <udp_input+0x1b8>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010662:	4a39      	ldr	r2, [pc, #228]	; (8010748 <udp_input+0x1b8>)
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010668:	e008      	b.n	801067c <udp_input+0xec>
      }
    }

    prev = pcb;
 801066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	627b      	str	r3, [r7, #36]	; 0x24
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1c0      	bne.n	80105fc <udp_input+0x6c>
 801067a:	e000      	b.n	801067e <udp_input+0xee>
        break;
 801067c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010680:	2b00      	cmp	r3, #0
 8010682:	d101      	bne.n	8010688 <udp_input+0xf8>
    pcb = uncon_pcb;
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	2b00      	cmp	r3, #0
 801068c:	d002      	beq.n	8010694 <udp_input+0x104>
    for_us = 1;
 801068e:	2301      	movs	r3, #1
 8010690:	76fb      	strb	r3, [r7, #27]
 8010692:	e00a      	b.n	80106aa <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	3304      	adds	r3, #4
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	4b2a      	ldr	r3, [pc, #168]	; (8010744 <udp_input+0x1b4>)
 801069c:	695b      	ldr	r3, [r3, #20]
 801069e:	429a      	cmp	r2, r3
 80106a0:	bf0c      	ite	eq
 80106a2:	2301      	moveq	r3, #1
 80106a4:	2300      	movne	r3, #0
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80106aa:	7efb      	ldrb	r3, [r7, #27]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d042      	beq.n	8010736 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80106b0:	f06f 0107 	mvn.w	r1, #7
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f7fa f85b 	bl	800a770 <pbuf_header>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00a      	beq.n	80106d6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80106c0:	4b22      	ldr	r3, [pc, #136]	; (801074c <udp_input+0x1bc>)
 80106c2:	f240 1255 	movw	r2, #341	; 0x155
 80106c6:	4922      	ldr	r1, [pc, #136]	; (8010750 <udp_input+0x1c0>)
 80106c8:	4822      	ldr	r0, [pc, #136]	; (8010754 <udp_input+0x1c4>)
 80106ca:	f002 ffd1 	bl	8013670 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fa f872 	bl	800a7b8 <pbuf_free>
      goto end;
 80106d4:	e032      	b.n	801073c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d012      	beq.n	8010702 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00a      	beq.n	80106fa <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	699c      	ldr	r4, [r3, #24]
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	69d8      	ldr	r0, [r3, #28]
 80106ec:	8a3b      	ldrh	r3, [r7, #16]
 80106ee:	9300      	str	r3, [sp, #0]
 80106f0:	4b19      	ldr	r3, [pc, #100]	; (8010758 <udp_input+0x1c8>)
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80106f8:	e021      	b.n	801073e <udp_input+0x1ae>
        pbuf_free(p);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f7fa f85c 	bl	800a7b8 <pbuf_free>
        goto end;
 8010700:	e01c      	b.n	801073c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010702:	7cfb      	ldrb	r3, [r7, #19]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d112      	bne.n	801072e <udp_input+0x19e>
 8010708:	4b0e      	ldr	r3, [pc, #56]	; (8010744 <udp_input+0x1b4>)
 801070a:	695b      	ldr	r3, [r3, #20]
 801070c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010710:	2be0      	cmp	r3, #224	; 0xe0
 8010712:	d00c      	beq.n	801072e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010714:	4b0b      	ldr	r3, [pc, #44]	; (8010744 <udp_input+0x1b4>)
 8010716:	899b      	ldrh	r3, [r3, #12]
 8010718:	3308      	adds	r3, #8
 801071a:	b29b      	uxth	r3, r3
 801071c:	b21b      	sxth	r3, r3
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7fa f837 	bl	800a794 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010726:	2103      	movs	r1, #3
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f001 fa8d 	bl	8011c48 <icmp_dest_unreach>
      pbuf_free(p);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f7fa f842 	bl	800a7b8 <pbuf_free>
  return;
 8010734:	e003      	b.n	801073e <udp_input+0x1ae>
    pbuf_free(p);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7fa f83e 	bl	800a7b8 <pbuf_free>
  return;
 801073c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801073e:	372c      	adds	r7, #44	; 0x2c
 8010740:	46bd      	mov	sp, r7
 8010742:	bd90      	pop	{r4, r7, pc}
 8010744:	2000805c 	.word	0x2000805c
 8010748:	2000b808 	.word	0x2000b808
 801074c:	08016824 	.word	0x08016824
 8010750:	08016854 	.word	0x08016854
 8010754:	08016868 	.word	0x08016868
 8010758:	2000806c 	.word	0x2000806c

0801075c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <udp_send+0x16>
    return ERR_VAL;
 801076c:	f06f 0305 	mvn.w	r3, #5
 8010770:	e008      	b.n	8010784 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	1d1a      	adds	r2, r3, #4
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	8a9b      	ldrh	r3, [r3, #20]
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 f805 	bl	801078c <udp_sendto>
 8010782:	4603      	mov	r3, r0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b088      	sub	sp, #32
 8010790:	af02      	add	r7, sp, #8
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <udp_sendto+0x1e>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d102      	bne.n	80107b0 <udp_sendto+0x24>
    return ERR_VAL;
 80107aa:	f06f 0305 	mvn.w	r3, #5
 80107ae:	e013      	b.n	80107d8 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 80107b0:	6978      	ldr	r0, [r7, #20]
 80107b2:	f001 fad1 	bl	8011d58 <ip4_route>
 80107b6:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d102      	bne.n	80107c4 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80107be:	f06f 0303 	mvn.w	r3, #3
 80107c2:	e009      	b.n	80107d8 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80107c4:	887a      	ldrh	r2, [r7, #2]
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	9300      	str	r3, [sp, #0]
 80107ca:	4613      	mov	r3, r2
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	68b9      	ldr	r1, [r7, #8]
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f000 f805 	bl	80107e0 <udp_sendto_if>
 80107d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3718      	adds	r7, #24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af02      	add	r7, sp, #8
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	607a      	str	r2, [r7, #4]
 80107ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <udp_sendto_if+0x1a>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d102      	bne.n	8010800 <udp_sendto_if+0x20>
    return ERR_VAL;
 80107fa:	f06f 0305 	mvn.w	r3, #5
 80107fe:	e028      	b.n	8010852 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d009      	beq.n	801081a <udp_sendto_if+0x3a>
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d005      	beq.n	801081a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010816:	2be0      	cmp	r3, #224	; 0xe0
 8010818:	d103      	bne.n	8010822 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	3304      	adds	r3, #4
 801081e:	617b      	str	r3, [r7, #20]
 8010820:	e00b      	b.n	801083a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	3304      	adds	r3, #4
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	429a      	cmp	r2, r3
 801082e:	d002      	beq.n	8010836 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8010830:	f06f 0303 	mvn.w	r3, #3
 8010834:	e00d      	b.n	8010852 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801083a:	887a      	ldrh	r2, [r7, #2]
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	9301      	str	r3, [sp, #4]
 8010840:	6a3b      	ldr	r3, [r7, #32]
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	68b9      	ldr	r1, [r7, #8]
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f000 f806 	bl	801085c <udp_sendto_if_src>
 8010850:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010852:	4618      	mov	r0, r3
 8010854:	3718      	adds	r7, #24
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
	...

0801085c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b08c      	sub	sp, #48	; 0x30
 8010860:	af04      	add	r7, sp, #16
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
 8010868:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <udp_sendto_if_src+0x1a>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d102      	bne.n	801087c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8010876:	f06f 0305 	mvn.w	r3, #5
 801087a:	e07e      	b.n	801097a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	8a5b      	ldrh	r3, [r3, #18]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d10f      	bne.n	80108a4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010884:	68f9      	ldr	r1, [r7, #12]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	8a5b      	ldrh	r3, [r3, #18]
 801088a:	461a      	mov	r2, r3
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f000 f87f 	bl	8010990 <udp_bind>
 8010892:	4603      	mov	r3, r0
 8010894:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010896:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801089e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80108a2:	e06a      	b.n	801097a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80108a4:	2108      	movs	r1, #8
 80108a6:	68b8      	ldr	r0, [r7, #8]
 80108a8:	f7f9 ff62 	bl	800a770 <pbuf_header>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d014      	beq.n	80108dc <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80108b2:	2200      	movs	r2, #0
 80108b4:	2108      	movs	r1, #8
 80108b6:	2001      	movs	r0, #1
 80108b8:	f7f9 fc06 	bl	800a0c8 <pbuf_alloc>
 80108bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d102      	bne.n	80108ca <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80108c4:	f04f 33ff 	mov.w	r3, #4294967295
 80108c8:	e057      	b.n	801097a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	891b      	ldrh	r3, [r3, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d006      	beq.n	80108e0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	69f8      	ldr	r0, [r7, #28]
 80108d6:	f7fa f89d 	bl	800aa14 <pbuf_chain>
 80108da:	e001      	b.n	80108e0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	895b      	ldrh	r3, [r3, #10]
 80108e4:	2b07      	cmp	r3, #7
 80108e6:	d806      	bhi.n	80108f6 <udp_sendto_if_src+0x9a>
 80108e8:	4b26      	ldr	r3, [pc, #152]	; (8010984 <udp_sendto_if_src+0x128>)
 80108ea:	f240 22db 	movw	r2, #731	; 0x2db
 80108ee:	4926      	ldr	r1, [pc, #152]	; (8010988 <udp_sendto_if_src+0x12c>)
 80108f0:	4826      	ldr	r0, [pc, #152]	; (801098c <udp_sendto_if_src+0x130>)
 80108f2:	f002 febd 	bl	8013670 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8a5b      	ldrh	r3, [r3, #18]
 8010900:	4618      	mov	r0, r3
 8010902:	f7f8 fd61 	bl	80093c8 <lwip_htons>
 8010906:	4603      	mov	r3, r0
 8010908:	461a      	mov	r2, r3
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801090e:	887b      	ldrh	r3, [r7, #2]
 8010910:	4618      	mov	r0, r3
 8010912:	f7f8 fd59 	bl	80093c8 <lwip_htons>
 8010916:	4603      	mov	r3, r0
 8010918:	461a      	mov	r2, r3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2200      	movs	r2, #0
 8010922:	719a      	strb	r2, [r3, #6]
 8010924:	2200      	movs	r2, #0
 8010926:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	891b      	ldrh	r3, [r3, #8]
 801092c:	4618      	mov	r0, r3
 801092e:	f7f8 fd4b 	bl	80093c8 <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	461a      	mov	r2, r3
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801093a:	2311      	movs	r3, #17
 801093c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	7a9b      	ldrb	r3, [r3, #10]
 8010942:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	7a5b      	ldrb	r3, [r3, #9]
 8010948:	7cb9      	ldrb	r1, [r7, #18]
 801094a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094c:	9202      	str	r2, [sp, #8]
 801094e:	7cfa      	ldrb	r2, [r7, #19]
 8010950:	9201      	str	r2, [sp, #4]
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	460b      	mov	r3, r1
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801095a:	69f8      	ldr	r0, [r7, #28]
 801095c:	f001 fbd0 	bl	8012100 <ip4_output_if_src>
 8010960:	4603      	mov	r3, r0
 8010962:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010964:	69fa      	ldr	r2, [r7, #28]
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	429a      	cmp	r2, r3
 801096a:	d004      	beq.n	8010976 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 801096c:	69f8      	ldr	r0, [r7, #28]
 801096e:	f7f9 ff23 	bl	800a7b8 <pbuf_free>
    q = NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010976:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3720      	adds	r7, #32
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	08016824 	.word	0x08016824
 8010988:	08016890 	.word	0x08016890
 801098c:	08016868 	.word	0x08016868

08010990 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	4613      	mov	r3, r2
 801099c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d101      	bne.n	80109a8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80109a4:	4b30      	ldr	r3, [pc, #192]	; (8010a68 <udp_bind+0xd8>)
 80109a6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d002      	beq.n	80109b4 <udp_bind+0x24>
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d102      	bne.n	80109ba <udp_bind+0x2a>
    return ERR_VAL;
 80109b4:	f06f 0305 	mvn.w	r3, #5
 80109b8:	e052      	b.n	8010a60 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80109be:	4b2b      	ldr	r3, [pc, #172]	; (8010a6c <udp_bind+0xdc>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	e009      	b.n	80109da <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d102      	bne.n	80109d4 <udp_bind+0x44>
      rebind = 1;
 80109ce:	2301      	movs	r3, #1
 80109d0:	74fb      	strb	r3, [r7, #19]
      break;
 80109d2:	e005      	b.n	80109e0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	617b      	str	r3, [r7, #20]
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1f2      	bne.n	80109c6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80109e0:	88fb      	ldrh	r3, [r7, #6]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d109      	bne.n	80109fa <udp_bind+0x6a>
    port = udp_new_port();
 80109e6:	f7ff fd61 	bl	80104ac <udp_new_port>
 80109ea:	4603      	mov	r3, r0
 80109ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80109ee:	88fb      	ldrh	r3, [r7, #6]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d11e      	bne.n	8010a32 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80109f4:	f06f 0307 	mvn.w	r3, #7
 80109f8:	e032      	b.n	8010a60 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80109fa:	4b1c      	ldr	r3, [pc, #112]	; (8010a6c <udp_bind+0xdc>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	617b      	str	r3, [r7, #20]
 8010a00:	e014      	b.n	8010a2c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d00d      	beq.n	8010a26 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	8a5b      	ldrh	r3, [r3, #18]
 8010a0e:	88fa      	ldrh	r2, [r7, #6]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d108      	bne.n	8010a26 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	681a      	ldr	r2, [r3, #0]
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d102      	bne.n	8010a26 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010a20:	f06f 0307 	mvn.w	r3, #7
 8010a24:	e01c      	b.n	8010a60 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	617b      	str	r3, [r7, #20]
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d1e7      	bne.n	8010a02 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <udp_bind+0xae>
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	e000      	b.n	8010a40 <udp_bind+0xb0>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	88fa      	ldrh	r2, [r7, #6]
 8010a48:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010a4a:	7cfb      	ldrb	r3, [r7, #19]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d106      	bne.n	8010a5e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010a50:	4b06      	ldr	r3, [pc, #24]	; (8010a6c <udp_bind+0xdc>)
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010a58:	4a04      	ldr	r2, [pc, #16]	; (8010a6c <udp_bind+0xdc>)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	08017064 	.word	0x08017064
 8010a6c:	2000b808 	.word	0x2000b808

08010a70 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <udp_connect+0x1a>
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d102      	bne.n	8010a90 <udp_connect+0x20>
    return ERR_VAL;
 8010a8a:	f06f 0305 	mvn.w	r3, #5
 8010a8e:	e03e      	b.n	8010b0e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	8a5b      	ldrh	r3, [r3, #18]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d10f      	bne.n	8010ab8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010a98:	68f9      	ldr	r1, [r7, #12]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	8a5b      	ldrh	r3, [r3, #18]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f7ff ff75 	bl	8010990 <udp_bind>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010aaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d002      	beq.n	8010ab8 <udp_connect+0x48>
      return err;
 8010ab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ab6:	e02a      	b.n	8010b0e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <udp_connect+0x54>
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	e000      	b.n	8010ac6 <udp_connect+0x56>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	68fa      	ldr	r2, [r7, #12]
 8010ac8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	88fa      	ldrh	r2, [r7, #6]
 8010ace:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	7c1b      	ldrb	r3, [r3, #16]
 8010ad4:	f043 0304 	orr.w	r3, r3, #4
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <udp_connect+0xa8>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	617b      	str	r3, [r7, #20]
 8010ae4:	e008      	b.n	8010af8 <udp_connect+0x88>
    if (pcb == ipcb) {
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d101      	bne.n	8010af2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8010aee:	2300      	movs	r3, #0
 8010af0:	e00d      	b.n	8010b0e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	617b      	str	r3, [r7, #20]
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d1f3      	bne.n	8010ae6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <udp_connect+0xa8>)
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010b06:	4a04      	ldr	r2, [pc, #16]	; (8010b18 <udp_connect+0xa8>)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3718      	adds	r7, #24
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	2000b808 	.word	0x2000b808

08010b1c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2200      	movs	r2, #0
 8010b28:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	7c1b      	ldrb	r3, [r3, #16]
 8010b34:	f023 0304 	bic.w	r3, r3, #4
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	741a      	strb	r2, [r3, #16]
}
 8010b3e:	bf00      	nop
 8010b40:	370c      	adds	r7, #12
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bc80      	pop	{r7}
 8010b46:	4770      	bx	lr

08010b48 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	61da      	str	r2, [r3, #28]
}
 8010b60:	bf00      	nop
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bc80      	pop	{r7}
 8010b68:	4770      	bx	lr

08010b6a <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b082      	sub	sp, #8
 8010b6e:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010b70:	2000      	movs	r0, #0
 8010b72:	f7f9 f815 	bl	8009ba0 <memp_malloc>
 8010b76:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d007      	beq.n	8010b8e <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010b7e:	2220      	movs	r2, #32
 8010b80:	2100      	movs	r1, #0
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f002 fc90 	bl	80134a8 <memset>
    pcb->ttl = UDP_TTL;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	22ff      	movs	r2, #255	; 0xff
 8010b8c:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010b8e:	687b      	ldr	r3, [r7, #4]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8010ba2:	f7ff ffe2 	bl	8010b6a <udp_new>
 8010ba6:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01e      	beq.n	8010c02 <udp_netif_ip_addr_changed+0x4e>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d01a      	beq.n	8010c02 <udp_netif_ip_addr_changed+0x4e>
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d017      	beq.n	8010c02 <udp_netif_ip_addr_changed+0x4e>
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d013      	beq.n	8010c02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010bda:	4b0c      	ldr	r3, [pc, #48]	; (8010c0c <udp_netif_ip_addr_changed+0x58>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60fb      	str	r3, [r7, #12]
 8010be0:	e00c      	b.n	8010bfc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d103      	bne.n	8010bf6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d1ef      	bne.n	8010be2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010c02:	bf00      	nop
 8010c04:	3714      	adds	r7, #20
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bc80      	pop	{r7}
 8010c0a:	4770      	bx	lr
 8010c0c:	2000b808 	.word	0x2000b808

08010c10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010c18:	4915      	ldr	r1, [pc, #84]	; (8010c70 <etharp_free_entry+0x60>)
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	440b      	add	r3, r1
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d013      	beq.n	8010c54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010c2c:	4910      	ldr	r1, [pc, #64]	; (8010c70 <etharp_free_entry+0x60>)
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	4613      	mov	r3, r2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4413      	add	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	440b      	add	r3, r1
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f9 fdbb 	bl	800a7b8 <pbuf_free>
    arp_table[i].q = NULL;
 8010c42:	490b      	ldr	r1, [pc, #44]	; (8010c70 <etharp_free_entry+0x60>)
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	4613      	mov	r3, r2
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	4413      	add	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	440b      	add	r3, r1
 8010c50:	2200      	movs	r2, #0
 8010c52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010c54:	4906      	ldr	r1, [pc, #24]	; (8010c70 <etharp_free_entry+0x60>)
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	005b      	lsls	r3, r3, #1
 8010c5c:	4413      	add	r3, r2
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	440b      	add	r3, r1
 8010c62:	3314      	adds	r3, #20
 8010c64:	2200      	movs	r2, #0
 8010c66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010c68:	bf00      	nop
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	2000b80c 	.word	0x2000b80c

08010c74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	71fb      	strb	r3, [r7, #7]
 8010c7e:	e096      	b.n	8010dae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010c80:	79fa      	ldrb	r2, [r7, #7]
 8010c82:	494f      	ldr	r1, [pc, #316]	; (8010dc0 <etharp_tmr+0x14c>)
 8010c84:	4613      	mov	r3, r2
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	4413      	add	r3, r2
 8010c8a:	00db      	lsls	r3, r3, #3
 8010c8c:	440b      	add	r3, r1
 8010c8e:	3314      	adds	r3, #20
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8010c94:	79bb      	ldrb	r3, [r7, #6]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f000 8086 	beq.w	8010da8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8010c9c:	79fa      	ldrb	r2, [r7, #7]
 8010c9e:	4948      	ldr	r1, [pc, #288]	; (8010dc0 <etharp_tmr+0x14c>)
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	005b      	lsls	r3, r3, #1
 8010ca4:	4413      	add	r3, r2
 8010ca6:	00db      	lsls	r3, r3, #3
 8010ca8:	440b      	add	r3, r1
 8010caa:	3312      	adds	r3, #18
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	b298      	uxth	r0, r3
 8010cb2:	4943      	ldr	r1, [pc, #268]	; (8010dc0 <etharp_tmr+0x14c>)
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	005b      	lsls	r3, r3, #1
 8010cb8:	4413      	add	r3, r2
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	440b      	add	r3, r1
 8010cbe:	3312      	adds	r3, #18
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010cc4:	79fa      	ldrb	r2, [r7, #7]
 8010cc6:	493e      	ldr	r1, [pc, #248]	; (8010dc0 <etharp_tmr+0x14c>)
 8010cc8:	4613      	mov	r3, r2
 8010cca:	005b      	lsls	r3, r3, #1
 8010ccc:	4413      	add	r3, r2
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	440b      	add	r3, r1
 8010cd2:	3312      	adds	r3, #18
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010cda:	d215      	bcs.n	8010d08 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010cdc:	79fa      	ldrb	r2, [r7, #7]
 8010cde:	4938      	ldr	r1, [pc, #224]	; (8010dc0 <etharp_tmr+0x14c>)
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	4413      	add	r3, r2
 8010ce6:	00db      	lsls	r3, r3, #3
 8010ce8:	440b      	add	r3, r1
 8010cea:	3314      	adds	r3, #20
 8010cec:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d10f      	bne.n	8010d12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010cf2:	79fa      	ldrb	r2, [r7, #7]
 8010cf4:	4932      	ldr	r1, [pc, #200]	; (8010dc0 <etharp_tmr+0x14c>)
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	4413      	add	r3, r2
 8010cfc:	00db      	lsls	r3, r3, #3
 8010cfe:	440b      	add	r3, r1
 8010d00:	3312      	adds	r3, #18
 8010d02:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010d04:	2b04      	cmp	r3, #4
 8010d06:	d904      	bls.n	8010d12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010d08:	79fb      	ldrb	r3, [r7, #7]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7ff ff80 	bl	8010c10 <etharp_free_entry>
 8010d10:	e04a      	b.n	8010da8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010d12:	79fa      	ldrb	r2, [r7, #7]
 8010d14:	492a      	ldr	r1, [pc, #168]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d16:	4613      	mov	r3, r2
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	4413      	add	r3, r2
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	440b      	add	r3, r1
 8010d20:	3314      	adds	r3, #20
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2b03      	cmp	r3, #3
 8010d26:	d10a      	bne.n	8010d3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010d28:	79fa      	ldrb	r2, [r7, #7]
 8010d2a:	4925      	ldr	r1, [pc, #148]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	4413      	add	r3, r2
 8010d32:	00db      	lsls	r3, r3, #3
 8010d34:	440b      	add	r3, r1
 8010d36:	3314      	adds	r3, #20
 8010d38:	2204      	movs	r2, #4
 8010d3a:	701a      	strb	r2, [r3, #0]
 8010d3c:	e034      	b.n	8010da8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010d3e:	79fa      	ldrb	r2, [r7, #7]
 8010d40:	491f      	ldr	r1, [pc, #124]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d42:	4613      	mov	r3, r2
 8010d44:	005b      	lsls	r3, r3, #1
 8010d46:	4413      	add	r3, r2
 8010d48:	00db      	lsls	r3, r3, #3
 8010d4a:	440b      	add	r3, r1
 8010d4c:	3314      	adds	r3, #20
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	2b04      	cmp	r3, #4
 8010d52:	d10a      	bne.n	8010d6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010d54:	79fa      	ldrb	r2, [r7, #7]
 8010d56:	491a      	ldr	r1, [pc, #104]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d58:	4613      	mov	r3, r2
 8010d5a:	005b      	lsls	r3, r3, #1
 8010d5c:	4413      	add	r3, r2
 8010d5e:	00db      	lsls	r3, r3, #3
 8010d60:	440b      	add	r3, r1
 8010d62:	3314      	adds	r3, #20
 8010d64:	2202      	movs	r2, #2
 8010d66:	701a      	strb	r2, [r3, #0]
 8010d68:	e01e      	b.n	8010da8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010d6a:	79fa      	ldrb	r2, [r7, #7]
 8010d6c:	4914      	ldr	r1, [pc, #80]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	440b      	add	r3, r1
 8010d78:	3314      	adds	r3, #20
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d113      	bne.n	8010da8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010d80:	79fa      	ldrb	r2, [r7, #7]
 8010d82:	490f      	ldr	r1, [pc, #60]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d84:	4613      	mov	r3, r2
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	4413      	add	r3, r2
 8010d8a:	00db      	lsls	r3, r3, #3
 8010d8c:	440b      	add	r3, r1
 8010d8e:	3308      	adds	r3, #8
 8010d90:	6818      	ldr	r0, [r3, #0]
 8010d92:	79fa      	ldrb	r2, [r7, #7]
 8010d94:	4613      	mov	r3, r2
 8010d96:	005b      	lsls	r3, r3, #1
 8010d98:	4413      	add	r3, r2
 8010d9a:	00db      	lsls	r3, r3, #3
 8010d9c:	4a08      	ldr	r2, [pc, #32]	; (8010dc0 <etharp_tmr+0x14c>)
 8010d9e:	4413      	add	r3, r2
 8010da0:	3304      	adds	r3, #4
 8010da2:	4619      	mov	r1, r3
 8010da4:	f000 fe38 	bl	8011a18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010da8:	79fb      	ldrb	r3, [r7, #7]
 8010daa:	3301      	adds	r3, #1
 8010dac:	71fb      	strb	r3, [r7, #7]
 8010dae:	79fb      	ldrb	r3, [r7, #7]
 8010db0:	2b09      	cmp	r3, #9
 8010db2:	f67f af65 	bls.w	8010c80 <etharp_tmr+0xc>
      }
    }
  }
}
 8010db6:	bf00      	nop
 8010db8:	bf00      	nop
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	2000b80c 	.word	0x2000b80c

08010dc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b088      	sub	sp, #32
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	460b      	mov	r3, r1
 8010dce:	607a      	str	r2, [r7, #4]
 8010dd0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010dd2:	230a      	movs	r3, #10
 8010dd4:	77fb      	strb	r3, [r7, #31]
 8010dd6:	230a      	movs	r3, #10
 8010dd8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8010dda:	230a      	movs	r3, #10
 8010ddc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8010de2:	230a      	movs	r3, #10
 8010de4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	833b      	strh	r3, [r7, #24]
 8010dea:	2300      	movs	r3, #0
 8010dec:	82fb      	strh	r3, [r7, #22]
 8010dee:	2300      	movs	r3, #0
 8010df0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010df2:	2300      	movs	r3, #0
 8010df4:	773b      	strb	r3, [r7, #28]
 8010df6:	e093      	b.n	8010f20 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010df8:	7f3a      	ldrb	r2, [r7, #28]
 8010dfa:	4990      	ldr	r1, [pc, #576]	; (801103c <etharp_find_entry+0x278>)
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	005b      	lsls	r3, r3, #1
 8010e00:	4413      	add	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	440b      	add	r3, r1
 8010e06:	3314      	adds	r3, #20
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010e0c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010e10:	2b0a      	cmp	r3, #10
 8010e12:	d105      	bne.n	8010e20 <etharp_find_entry+0x5c>
 8010e14:	7cfb      	ldrb	r3, [r7, #19]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d102      	bne.n	8010e20 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8010e1a:	7f3b      	ldrb	r3, [r7, #28]
 8010e1c:	777b      	strb	r3, [r7, #29]
 8010e1e:	e07c      	b.n	8010f1a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010e20:	7cfb      	ldrb	r3, [r7, #19]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d079      	beq.n	8010f1a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010e26:	7cfb      	ldrb	r3, [r7, #19]
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d009      	beq.n	8010e40 <etharp_find_entry+0x7c>
 8010e2c:	7cfb      	ldrb	r3, [r7, #19]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d806      	bhi.n	8010e40 <etharp_find_entry+0x7c>
 8010e32:	4b83      	ldr	r3, [pc, #524]	; (8011040 <etharp_find_entry+0x27c>)
 8010e34:	f240 1225 	movw	r2, #293	; 0x125
 8010e38:	4982      	ldr	r1, [pc, #520]	; (8011044 <etharp_find_entry+0x280>)
 8010e3a:	4883      	ldr	r0, [pc, #524]	; (8011048 <etharp_find_entry+0x284>)
 8010e3c:	f002 fc18 	bl	8013670 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d00f      	beq.n	8010e66 <etharp_find_entry+0xa2>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6819      	ldr	r1, [r3, #0]
 8010e4a:	7f3a      	ldrb	r2, [r7, #28]
 8010e4c:	487b      	ldr	r0, [pc, #492]	; (801103c <etharp_find_entry+0x278>)
 8010e4e:	4613      	mov	r3, r2
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	4413      	add	r3, r2
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	4403      	add	r3, r0
 8010e58:	3304      	adds	r3, #4
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4299      	cmp	r1, r3
 8010e5e:	d102      	bne.n	8010e66 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010e60:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010e64:	e0e5      	b.n	8011032 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010e66:	7cfb      	ldrb	r3, [r7, #19]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d13b      	bne.n	8010ee4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010e6c:	7f3a      	ldrb	r2, [r7, #28]
 8010e6e:	4973      	ldr	r1, [pc, #460]	; (801103c <etharp_find_entry+0x278>)
 8010e70:	4613      	mov	r3, r2
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	4413      	add	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	440b      	add	r3, r1
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d018      	beq.n	8010eb2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8010e80:	7f3a      	ldrb	r2, [r7, #28]
 8010e82:	496e      	ldr	r1, [pc, #440]	; (801103c <etharp_find_entry+0x278>)
 8010e84:	4613      	mov	r3, r2
 8010e86:	005b      	lsls	r3, r3, #1
 8010e88:	4413      	add	r3, r2
 8010e8a:	00db      	lsls	r3, r3, #3
 8010e8c:	440b      	add	r3, r1
 8010e8e:	3312      	adds	r3, #18
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	8b3a      	ldrh	r2, [r7, #24]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d840      	bhi.n	8010f1a <etharp_find_entry+0x156>
            old_queue = i;
 8010e98:	7f3b      	ldrb	r3, [r7, #28]
 8010e9a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8010e9c:	7f3a      	ldrb	r2, [r7, #28]
 8010e9e:	4967      	ldr	r1, [pc, #412]	; (801103c <etharp_find_entry+0x278>)
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	4413      	add	r3, r2
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	440b      	add	r3, r1
 8010eaa:	3312      	adds	r3, #18
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	833b      	strh	r3, [r7, #24]
 8010eb0:	e033      	b.n	8010f1a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010eb2:	7f3a      	ldrb	r2, [r7, #28]
 8010eb4:	4961      	ldr	r1, [pc, #388]	; (801103c <etharp_find_entry+0x278>)
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	005b      	lsls	r3, r3, #1
 8010eba:	4413      	add	r3, r2
 8010ebc:	00db      	lsls	r3, r3, #3
 8010ebe:	440b      	add	r3, r1
 8010ec0:	3312      	adds	r3, #18
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	8afa      	ldrh	r2, [r7, #22]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d827      	bhi.n	8010f1a <etharp_find_entry+0x156>
            old_pending = i;
 8010eca:	7f3b      	ldrb	r3, [r7, #28]
 8010ecc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8010ece:	7f3a      	ldrb	r2, [r7, #28]
 8010ed0:	495a      	ldr	r1, [pc, #360]	; (801103c <etharp_find_entry+0x278>)
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	440b      	add	r3, r1
 8010edc:	3312      	adds	r3, #18
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	82fb      	strh	r3, [r7, #22]
 8010ee2:	e01a      	b.n	8010f1a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010ee4:	7cfb      	ldrb	r3, [r7, #19]
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d917      	bls.n	8010f1a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010eea:	7f3a      	ldrb	r2, [r7, #28]
 8010eec:	4953      	ldr	r1, [pc, #332]	; (801103c <etharp_find_entry+0x278>)
 8010eee:	4613      	mov	r3, r2
 8010ef0:	005b      	lsls	r3, r3, #1
 8010ef2:	4413      	add	r3, r2
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	440b      	add	r3, r1
 8010ef8:	3312      	adds	r3, #18
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	8aba      	ldrh	r2, [r7, #20]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d80b      	bhi.n	8010f1a <etharp_find_entry+0x156>
            old_stable = i;
 8010f02:	7f3b      	ldrb	r3, [r7, #28]
 8010f04:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010f06:	7f3a      	ldrb	r2, [r7, #28]
 8010f08:	494c      	ldr	r1, [pc, #304]	; (801103c <etharp_find_entry+0x278>)
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	005b      	lsls	r3, r3, #1
 8010f0e:	4413      	add	r3, r2
 8010f10:	00db      	lsls	r3, r3, #3
 8010f12:	440b      	add	r3, r1
 8010f14:	3312      	adds	r3, #18
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f1a:	7f3b      	ldrb	r3, [r7, #28]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	773b      	strb	r3, [r7, #28]
 8010f20:	7f3b      	ldrb	r3, [r7, #28]
 8010f22:	2b09      	cmp	r3, #9
 8010f24:	f67f af68 	bls.w	8010df8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010f28:	7afb      	ldrb	r3, [r7, #11]
 8010f2a:	f003 0302 	and.w	r3, r3, #2
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d108      	bne.n	8010f44 <etharp_find_entry+0x180>
 8010f32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010f36:	2b0a      	cmp	r3, #10
 8010f38:	d107      	bne.n	8010f4a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010f3a:	7afb      	ldrb	r3, [r7, #11]
 8010f3c:	f003 0301 	and.w	r3, r3, #1
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d102      	bne.n	8010f4a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010f44:	f04f 33ff 	mov.w	r3, #4294967295
 8010f48:	e073      	b.n	8011032 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010f4a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010f4e:	2b09      	cmp	r3, #9
 8010f50:	dc02      	bgt.n	8010f58 <etharp_find_entry+0x194>
    i = empty;
 8010f52:	7f7b      	ldrb	r3, [r7, #29]
 8010f54:	773b      	strb	r3, [r7, #28]
 8010f56:	e036      	b.n	8010fc6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010f58:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010f5c:	2b09      	cmp	r3, #9
 8010f5e:	dc13      	bgt.n	8010f88 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8010f60:	7fbb      	ldrb	r3, [r7, #30]
 8010f62:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010f64:	7f3a      	ldrb	r2, [r7, #28]
 8010f66:	4935      	ldr	r1, [pc, #212]	; (801103c <etharp_find_entry+0x278>)
 8010f68:	4613      	mov	r3, r2
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	4413      	add	r3, r2
 8010f6e:	00db      	lsls	r3, r3, #3
 8010f70:	440b      	add	r3, r1
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d018      	beq.n	8010faa <etharp_find_entry+0x1e6>
 8010f78:	4b31      	ldr	r3, [pc, #196]	; (8011040 <etharp_find_entry+0x27c>)
 8010f7a:	f240 126f 	movw	r2, #367	; 0x16f
 8010f7e:	4933      	ldr	r1, [pc, #204]	; (801104c <etharp_find_entry+0x288>)
 8010f80:	4831      	ldr	r0, [pc, #196]	; (8011048 <etharp_find_entry+0x284>)
 8010f82:	f002 fb75 	bl	8013670 <iprintf>
 8010f86:	e010      	b.n	8010faa <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010f88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010f8c:	2b09      	cmp	r3, #9
 8010f8e:	dc02      	bgt.n	8010f96 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8010f90:	7ffb      	ldrb	r3, [r7, #31]
 8010f92:	773b      	strb	r3, [r7, #28]
 8010f94:	e009      	b.n	8010faa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010f96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010f9a:	2b09      	cmp	r3, #9
 8010f9c:	dc02      	bgt.n	8010fa4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010f9e:	7efb      	ldrb	r3, [r7, #27]
 8010fa0:	773b      	strb	r3, [r7, #28]
 8010fa2:	e002      	b.n	8010faa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8010fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa8:	e043      	b.n	8011032 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010faa:	7f3b      	ldrb	r3, [r7, #28]
 8010fac:	2b09      	cmp	r3, #9
 8010fae:	d906      	bls.n	8010fbe <etharp_find_entry+0x1fa>
 8010fb0:	4b23      	ldr	r3, [pc, #140]	; (8011040 <etharp_find_entry+0x27c>)
 8010fb2:	f240 1281 	movw	r2, #385	; 0x181
 8010fb6:	4926      	ldr	r1, [pc, #152]	; (8011050 <etharp_find_entry+0x28c>)
 8010fb8:	4823      	ldr	r0, [pc, #140]	; (8011048 <etharp_find_entry+0x284>)
 8010fba:	f002 fb59 	bl	8013670 <iprintf>
    etharp_free_entry(i);
 8010fbe:	7f3b      	ldrb	r3, [r7, #28]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7ff fe25 	bl	8010c10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010fc6:	7f3b      	ldrb	r3, [r7, #28]
 8010fc8:	2b09      	cmp	r3, #9
 8010fca:	d906      	bls.n	8010fda <etharp_find_entry+0x216>
 8010fcc:	4b1c      	ldr	r3, [pc, #112]	; (8011040 <etharp_find_entry+0x27c>)
 8010fce:	f240 1285 	movw	r2, #389	; 0x185
 8010fd2:	491f      	ldr	r1, [pc, #124]	; (8011050 <etharp_find_entry+0x28c>)
 8010fd4:	481c      	ldr	r0, [pc, #112]	; (8011048 <etharp_find_entry+0x284>)
 8010fd6:	f002 fb4b 	bl	8013670 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010fda:	7f3a      	ldrb	r2, [r7, #28]
 8010fdc:	4917      	ldr	r1, [pc, #92]	; (801103c <etharp_find_entry+0x278>)
 8010fde:	4613      	mov	r3, r2
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	4413      	add	r3, r2
 8010fe4:	00db      	lsls	r3, r3, #3
 8010fe6:	440b      	add	r3, r1
 8010fe8:	3314      	adds	r3, #20
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d006      	beq.n	8010ffe <etharp_find_entry+0x23a>
 8010ff0:	4b13      	ldr	r3, [pc, #76]	; (8011040 <etharp_find_entry+0x27c>)
 8010ff2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8010ff6:	4917      	ldr	r1, [pc, #92]	; (8011054 <etharp_find_entry+0x290>)
 8010ff8:	4813      	ldr	r0, [pc, #76]	; (8011048 <etharp_find_entry+0x284>)
 8010ffa:	f002 fb39 	bl	8013670 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00a      	beq.n	801101a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011004:	7f3a      	ldrb	r2, [r7, #28]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	6819      	ldr	r1, [r3, #0]
 801100a:	480c      	ldr	r0, [pc, #48]	; (801103c <etharp_find_entry+0x278>)
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	4403      	add	r3, r0
 8011016:	3304      	adds	r3, #4
 8011018:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801101a:	7f3a      	ldrb	r2, [r7, #28]
 801101c:	4907      	ldr	r1, [pc, #28]	; (801103c <etharp_find_entry+0x278>)
 801101e:	4613      	mov	r3, r2
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	4413      	add	r3, r2
 8011024:	00db      	lsls	r3, r3, #3
 8011026:	440b      	add	r3, r1
 8011028:	3312      	adds	r3, #18
 801102a:	2200      	movs	r2, #0
 801102c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801102e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8011032:	4618      	mov	r0, r3
 8011034:	3720      	adds	r7, #32
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	2000b80c 	.word	0x2000b80c
 8011040:	080168c0 	.word	0x080168c0
 8011044:	080168f8 	.word	0x080168f8
 8011048:	08016938 	.word	0x08016938
 801104c:	08016960 	.word	0x08016960
 8011050:	08016978 	.word	0x08016978
 8011054:	0801698c 	.word	0x0801698c

08011058 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b088      	sub	sp, #32
 801105c:	af02      	add	r7, sp, #8
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	607a      	str	r2, [r7, #4]
 8011064:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801106c:	2b06      	cmp	r3, #6
 801106e:	d006      	beq.n	801107e <etharp_update_arp_entry+0x26>
 8011070:	4b48      	ldr	r3, [pc, #288]	; (8011194 <etharp_update_arp_entry+0x13c>)
 8011072:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011076:	4948      	ldr	r1, [pc, #288]	; (8011198 <etharp_update_arp_entry+0x140>)
 8011078:	4848      	ldr	r0, [pc, #288]	; (801119c <etharp_update_arp_entry+0x144>)
 801107a:	f002 faf9 	bl	8013670 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d012      	beq.n	80110aa <etharp_update_arp_entry+0x52>
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d00e      	beq.n	80110aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68f9      	ldr	r1, [r7, #12]
 8011092:	4618      	mov	r0, r3
 8011094:	f001 f8dc 	bl	8012250 <ip4_addr_isbroadcast_u32>
 8011098:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801109a:	2b00      	cmp	r3, #0
 801109c:	d105      	bne.n	80110aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80110a6:	2be0      	cmp	r3, #224	; 0xe0
 80110a8:	d102      	bne.n	80110b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80110aa:	f06f 030f 	mvn.w	r3, #15
 80110ae:	e06c      	b.n	801118a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80110b0:	78fb      	ldrb	r3, [r7, #3]
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	4619      	mov	r1, r3
 80110b6:	68b8      	ldr	r0, [r7, #8]
 80110b8:	f7ff fe84 	bl	8010dc4 <etharp_find_entry>
 80110bc:	4603      	mov	r3, r0
 80110be:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80110c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	da02      	bge.n	80110ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80110c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110cc:	e05d      	b.n	801118a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80110ce:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80110d2:	4933      	ldr	r1, [pc, #204]	; (80111a0 <etharp_update_arp_entry+0x148>)
 80110d4:	4613      	mov	r3, r2
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	4413      	add	r3, r2
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	440b      	add	r3, r1
 80110de:	3314      	adds	r3, #20
 80110e0:	2202      	movs	r2, #2
 80110e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80110e4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80110e8:	492d      	ldr	r1, [pc, #180]	; (80111a0 <etharp_update_arp_entry+0x148>)
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	440b      	add	r3, r1
 80110f4:	3308      	adds	r3, #8
 80110f6:	68fa      	ldr	r2, [r7, #12]
 80110f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80110fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80110fe:	4613      	mov	r3, r2
 8011100:	005b      	lsls	r3, r3, #1
 8011102:	4413      	add	r3, r2
 8011104:	00db      	lsls	r3, r3, #3
 8011106:	3308      	adds	r3, #8
 8011108:	4a25      	ldr	r2, [pc, #148]	; (80111a0 <etharp_update_arp_entry+0x148>)
 801110a:	4413      	add	r3, r2
 801110c:	3304      	adds	r3, #4
 801110e:	2206      	movs	r2, #6
 8011110:	6879      	ldr	r1, [r7, #4]
 8011112:	4618      	mov	r0, r3
 8011114:	f002 f9ba 	bl	801348c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011118:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801111c:	4920      	ldr	r1, [pc, #128]	; (80111a0 <etharp_update_arp_entry+0x148>)
 801111e:	4613      	mov	r3, r2
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	4413      	add	r3, r2
 8011124:	00db      	lsls	r3, r3, #3
 8011126:	440b      	add	r3, r1
 8011128:	3312      	adds	r3, #18
 801112a:	2200      	movs	r2, #0
 801112c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801112e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011132:	491b      	ldr	r1, [pc, #108]	; (80111a0 <etharp_update_arp_entry+0x148>)
 8011134:	4613      	mov	r3, r2
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	00db      	lsls	r3, r3, #3
 801113c:	440b      	add	r3, r1
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d021      	beq.n	8011188 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011144:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011148:	4915      	ldr	r1, [pc, #84]	; (80111a0 <etharp_update_arp_entry+0x148>)
 801114a:	4613      	mov	r3, r2
 801114c:	005b      	lsls	r3, r3, #1
 801114e:	4413      	add	r3, r2
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	440b      	add	r3, r1
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011158:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801115c:	4910      	ldr	r1, [pc, #64]	; (80111a0 <etharp_update_arp_entry+0x148>)
 801115e:	4613      	mov	r3, r2
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	4413      	add	r3, r2
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	440b      	add	r3, r1
 8011168:	2200      	movs	r2, #0
 801116a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8011172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011176:	9300      	str	r3, [sp, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6939      	ldr	r1, [r7, #16]
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f001 ff0d 	bl	8012f9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011182:	6938      	ldr	r0, [r7, #16]
 8011184:	f7f9 fb18 	bl	800a7b8 <pbuf_free>
  }
  return ERR_OK;
 8011188:	2300      	movs	r3, #0
}
 801118a:	4618      	mov	r0, r3
 801118c:	3718      	adds	r7, #24
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	080168c0 	.word	0x080168c0
 8011198:	080169b8 	.word	0x080169b8
 801119c:	08016938 	.word	0x08016938
 80111a0:	2000b80c 	.word	0x2000b80c

080111a4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111ac:	2300      	movs	r3, #0
 80111ae:	73fb      	strb	r3, [r7, #15]
 80111b0:	e01f      	b.n	80111f2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80111b2:	7bfa      	ldrb	r2, [r7, #15]
 80111b4:	4913      	ldr	r1, [pc, #76]	; (8011204 <etharp_cleanup_netif+0x60>)
 80111b6:	4613      	mov	r3, r2
 80111b8:	005b      	lsls	r3, r3, #1
 80111ba:	4413      	add	r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	440b      	add	r3, r1
 80111c0:	3314      	adds	r3, #20
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00f      	beq.n	80111ec <etharp_cleanup_netif+0x48>
 80111cc:	7bfa      	ldrb	r2, [r7, #15]
 80111ce:	490d      	ldr	r1, [pc, #52]	; (8011204 <etharp_cleanup_netif+0x60>)
 80111d0:	4613      	mov	r3, r2
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	4413      	add	r3, r2
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	440b      	add	r3, r1
 80111da:	3308      	adds	r3, #8
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d103      	bne.n	80111ec <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff fd12 	bl	8010c10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111ec:	7bfb      	ldrb	r3, [r7, #15]
 80111ee:	3301      	adds	r3, #1
 80111f0:	73fb      	strb	r3, [r7, #15]
 80111f2:	7bfb      	ldrb	r3, [r7, #15]
 80111f4:	2b09      	cmp	r3, #9
 80111f6:	d9dc      	bls.n	80111b2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80111f8:	bf00      	nop
 80111fa:	bf00      	nop
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	2000b80c 	.word	0x2000b80c

08011208 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011208:	b5b0      	push	{r4, r5, r7, lr}
 801120a:	b08a      	sub	sp, #40	; 0x28
 801120c:	af04      	add	r7, sp, #16
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d107      	bne.n	8011228 <etharp_input+0x20>
 8011218:	4b3d      	ldr	r3, [pc, #244]	; (8011310 <etharp_input+0x108>)
 801121a:	f44f 7222 	mov.w	r2, #648	; 0x288
 801121e:	493d      	ldr	r1, [pc, #244]	; (8011314 <etharp_input+0x10c>)
 8011220:	483d      	ldr	r0, [pc, #244]	; (8011318 <etharp_input+0x110>)
 8011222:	f002 fa25 	bl	8013670 <iprintf>
 8011226:	e06f      	b.n	8011308 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	881b      	ldrh	r3, [r3, #0]
 8011232:	b29b      	uxth	r3, r3
 8011234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011238:	d10c      	bne.n	8011254 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801123e:	2b06      	cmp	r3, #6
 8011240:	d108      	bne.n	8011254 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011246:	2b04      	cmp	r3, #4
 8011248:	d104      	bne.n	8011254 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	885b      	ldrh	r3, [r3, #2]
 801124e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011250:	2b08      	cmp	r3, #8
 8011252:	d003      	beq.n	801125c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7f9 faaf 	bl	800a7b8 <pbuf_free>
    return;
 801125a:	e055      	b.n	8011308 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	330e      	adds	r3, #14
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	3318      	adds	r3, #24
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	3304      	adds	r3, #4
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d102      	bne.n	801127c <etharp_input+0x74>
    for_us = 0;
 8011276:	2300      	movs	r3, #0
 8011278:	75fb      	strb	r3, [r7, #23]
 801127a:	e009      	b.n	8011290 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	3304      	adds	r3, #4
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	429a      	cmp	r2, r3
 8011286:	bf0c      	ite	eq
 8011288:	2301      	moveq	r3, #1
 801128a:	2300      	movne	r3, #0
 801128c:	b2db      	uxtb	r3, r3
 801128e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	f103 0208 	add.w	r2, r3, #8
 8011296:	7dfb      	ldrb	r3, [r7, #23]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d001      	beq.n	80112a0 <etharp_input+0x98>
 801129c:	2301      	movs	r3, #1
 801129e:	e000      	b.n	80112a2 <etharp_input+0x9a>
 80112a0:	2302      	movs	r3, #2
 80112a2:	f107 010c 	add.w	r1, r7, #12
 80112a6:	6838      	ldr	r0, [r7, #0]
 80112a8:	f7ff fed6 	bl	8011058 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	88db      	ldrh	r3, [r3, #6]
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112b6:	d003      	beq.n	80112c0 <etharp_input+0xb8>
 80112b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112bc:	d01e      	beq.n	80112fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80112be:	e020      	b.n	8011302 <etharp_input+0xfa>
    if (for_us) {
 80112c0:	7dfb      	ldrb	r3, [r7, #23]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d01c      	beq.n	8011300 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80112dc:	693a      	ldr	r2, [r7, #16]
 80112de:	3208      	adds	r2, #8
      etharp_raw(netif,
 80112e0:	2102      	movs	r1, #2
 80112e2:	9103      	str	r1, [sp, #12]
 80112e4:	f107 010c 	add.w	r1, r7, #12
 80112e8:	9102      	str	r1, [sp, #8]
 80112ea:	9201      	str	r2, [sp, #4]
 80112ec:	9300      	str	r3, [sp, #0]
 80112ee:	462b      	mov	r3, r5
 80112f0:	4622      	mov	r2, r4
 80112f2:	4601      	mov	r1, r0
 80112f4:	6838      	ldr	r0, [r7, #0]
 80112f6:	f000 fae1 	bl	80118bc <etharp_raw>
    break;
 80112fa:	e001      	b.n	8011300 <etharp_input+0xf8>
    break;
 80112fc:	bf00      	nop
 80112fe:	e000      	b.n	8011302 <etharp_input+0xfa>
    break;
 8011300:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7f9 fa58 	bl	800a7b8 <pbuf_free>
}
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bdb0      	pop	{r4, r5, r7, pc}
 801130e:	bf00      	nop
 8011310:	080168c0 	.word	0x080168c0
 8011314:	08016a10 	.word	0x08016a10
 8011318:	08016938 	.word	0x08016938

0801131c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af02      	add	r7, sp, #8
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	4613      	mov	r3, r2
 8011328:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801132a:	79fa      	ldrb	r2, [r7, #7]
 801132c:	4944      	ldr	r1, [pc, #272]	; (8011440 <etharp_output_to_arp_index+0x124>)
 801132e:	4613      	mov	r3, r2
 8011330:	005b      	lsls	r3, r3, #1
 8011332:	4413      	add	r3, r2
 8011334:	00db      	lsls	r3, r3, #3
 8011336:	440b      	add	r3, r1
 8011338:	3314      	adds	r3, #20
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	2b01      	cmp	r3, #1
 801133e:	d806      	bhi.n	801134e <etharp_output_to_arp_index+0x32>
 8011340:	4b40      	ldr	r3, [pc, #256]	; (8011444 <etharp_output_to_arp_index+0x128>)
 8011342:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8011346:	4940      	ldr	r1, [pc, #256]	; (8011448 <etharp_output_to_arp_index+0x12c>)
 8011348:	4840      	ldr	r0, [pc, #256]	; (801144c <etharp_output_to_arp_index+0x130>)
 801134a:	f002 f991 	bl	8013670 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801134e:	79fa      	ldrb	r2, [r7, #7]
 8011350:	493b      	ldr	r1, [pc, #236]	; (8011440 <etharp_output_to_arp_index+0x124>)
 8011352:	4613      	mov	r3, r2
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	4413      	add	r3, r2
 8011358:	00db      	lsls	r3, r3, #3
 801135a:	440b      	add	r3, r1
 801135c:	3314      	adds	r3, #20
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	2b02      	cmp	r3, #2
 8011362:	d153      	bne.n	801140c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011364:	79fa      	ldrb	r2, [r7, #7]
 8011366:	4936      	ldr	r1, [pc, #216]	; (8011440 <etharp_output_to_arp_index+0x124>)
 8011368:	4613      	mov	r3, r2
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	4413      	add	r3, r2
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	440b      	add	r3, r1
 8011372:	3312      	adds	r3, #18
 8011374:	881b      	ldrh	r3, [r3, #0]
 8011376:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801137a:	d919      	bls.n	80113b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801137c:	79fa      	ldrb	r2, [r7, #7]
 801137e:	4613      	mov	r3, r2
 8011380:	005b      	lsls	r3, r3, #1
 8011382:	4413      	add	r3, r2
 8011384:	00db      	lsls	r3, r3, #3
 8011386:	4a2e      	ldr	r2, [pc, #184]	; (8011440 <etharp_output_to_arp_index+0x124>)
 8011388:	4413      	add	r3, r2
 801138a:	3304      	adds	r3, #4
 801138c:	4619      	mov	r1, r3
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f000 fb42 	bl	8011a18 <etharp_request>
 8011394:	4603      	mov	r3, r0
 8011396:	2b00      	cmp	r3, #0
 8011398:	d138      	bne.n	801140c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801139a:	79fa      	ldrb	r2, [r7, #7]
 801139c:	4928      	ldr	r1, [pc, #160]	; (8011440 <etharp_output_to_arp_index+0x124>)
 801139e:	4613      	mov	r3, r2
 80113a0:	005b      	lsls	r3, r3, #1
 80113a2:	4413      	add	r3, r2
 80113a4:	00db      	lsls	r3, r3, #3
 80113a6:	440b      	add	r3, r1
 80113a8:	3314      	adds	r3, #20
 80113aa:	2203      	movs	r2, #3
 80113ac:	701a      	strb	r2, [r3, #0]
 80113ae:	e02d      	b.n	801140c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80113b0:	79fa      	ldrb	r2, [r7, #7]
 80113b2:	4923      	ldr	r1, [pc, #140]	; (8011440 <etharp_output_to_arp_index+0x124>)
 80113b4:	4613      	mov	r3, r2
 80113b6:	005b      	lsls	r3, r3, #1
 80113b8:	4413      	add	r3, r2
 80113ba:	00db      	lsls	r3, r3, #3
 80113bc:	440b      	add	r3, r1
 80113be:	3312      	adds	r3, #18
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80113c6:	d321      	bcc.n	801140c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80113c8:	79fa      	ldrb	r2, [r7, #7]
 80113ca:	4613      	mov	r3, r2
 80113cc:	005b      	lsls	r3, r3, #1
 80113ce:	4413      	add	r3, r2
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	4a1b      	ldr	r2, [pc, #108]	; (8011440 <etharp_output_to_arp_index+0x124>)
 80113d4:	4413      	add	r3, r2
 80113d6:	1d19      	adds	r1, r3, #4
 80113d8:	79fa      	ldrb	r2, [r7, #7]
 80113da:	4613      	mov	r3, r2
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	4413      	add	r3, r2
 80113e0:	00db      	lsls	r3, r3, #3
 80113e2:	3308      	adds	r3, #8
 80113e4:	4a16      	ldr	r2, [pc, #88]	; (8011440 <etharp_output_to_arp_index+0x124>)
 80113e6:	4413      	add	r3, r2
 80113e8:	3304      	adds	r3, #4
 80113ea:	461a      	mov	r2, r3
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f000 faf1 	bl	80119d4 <etharp_request_dst>
 80113f2:	4603      	mov	r3, r0
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d109      	bne.n	801140c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80113f8:	79fa      	ldrb	r2, [r7, #7]
 80113fa:	4911      	ldr	r1, [pc, #68]	; (8011440 <etharp_output_to_arp_index+0x124>)
 80113fc:	4613      	mov	r3, r2
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	4413      	add	r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	440b      	add	r3, r1
 8011406:	3314      	adds	r3, #20
 8011408:	2203      	movs	r2, #3
 801140a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8011412:	79fa      	ldrb	r2, [r7, #7]
 8011414:	4613      	mov	r3, r2
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	4413      	add	r3, r2
 801141a:	00db      	lsls	r3, r3, #3
 801141c:	3308      	adds	r3, #8
 801141e:	4a08      	ldr	r2, [pc, #32]	; (8011440 <etharp_output_to_arp_index+0x124>)
 8011420:	4413      	add	r3, r2
 8011422:	3304      	adds	r3, #4
 8011424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011428:	9200      	str	r2, [sp, #0]
 801142a:	460a      	mov	r2, r1
 801142c:	68b9      	ldr	r1, [r7, #8]
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f001 fdb4 	bl	8012f9c <ethernet_output>
 8011434:	4603      	mov	r3, r0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3710      	adds	r7, #16
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	2000b80c 	.word	0x2000b80c
 8011444:	080168c0 	.word	0x080168c0
 8011448:	08016a30 	.word	0x08016a30
 801144c:	08016938 	.word	0x08016938

08011450 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b08a      	sub	sp, #40	; 0x28
 8011454:	af02      	add	r7, sp, #8
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d106      	bne.n	8011474 <etharp_output+0x24>
 8011466:	4b69      	ldr	r3, [pc, #420]	; (801160c <etharp_output+0x1bc>)
 8011468:	f240 321b 	movw	r2, #795	; 0x31b
 801146c:	4968      	ldr	r1, [pc, #416]	; (8011610 <etharp_output+0x1c0>)
 801146e:	4869      	ldr	r0, [pc, #420]	; (8011614 <etharp_output+0x1c4>)
 8011470:	f002 f8fe 	bl	8013670 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d106      	bne.n	8011488 <etharp_output+0x38>
 801147a:	4b64      	ldr	r3, [pc, #400]	; (801160c <etharp_output+0x1bc>)
 801147c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011480:	4965      	ldr	r1, [pc, #404]	; (8011618 <etharp_output+0x1c8>)
 8011482:	4864      	ldr	r0, [pc, #400]	; (8011614 <etharp_output+0x1c4>)
 8011484:	f002 f8f4 	bl	8013670 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d106      	bne.n	801149c <etharp_output+0x4c>
 801148e:	4b5f      	ldr	r3, [pc, #380]	; (801160c <etharp_output+0x1bc>)
 8011490:	f240 321d 	movw	r2, #797	; 0x31d
 8011494:	4961      	ldr	r1, [pc, #388]	; (801161c <etharp_output+0x1cc>)
 8011496:	485f      	ldr	r0, [pc, #380]	; (8011614 <etharp_output+0x1c4>)
 8011498:	f002 f8ea 	bl	8013670 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68f9      	ldr	r1, [r7, #12]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f000 fed4 	bl	8012250 <ip4_addr_isbroadcast_u32>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d002      	beq.n	80114b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80114ae:	4b5c      	ldr	r3, [pc, #368]	; (8011620 <etharp_output+0x1d0>)
 80114b0:	61fb      	str	r3, [r7, #28]
 80114b2:	e09b      	b.n	80115ec <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114bc:	2be0      	cmp	r3, #224	; 0xe0
 80114be:	d118      	bne.n	80114f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80114c0:	2301      	movs	r3, #1
 80114c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80114c4:	2300      	movs	r3, #0
 80114c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80114c8:	235e      	movs	r3, #94	; 0x5e
 80114ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	3301      	adds	r3, #1
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	3302      	adds	r3, #2
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3303      	adds	r3, #3
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80114ea:	f107 0310 	add.w	r3, r7, #16
 80114ee:	61fb      	str	r3, [r7, #28]
 80114f0:	e07c      	b.n	80115ec <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	3304      	adds	r3, #4
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	405a      	eors	r2, r3
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	3308      	adds	r3, #8
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4013      	ands	r3, r2
 8011506:	2b00      	cmp	r3, #0
 8011508:	d012      	beq.n	8011530 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011510:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011514:	4293      	cmp	r3, r2
 8011516:	d00b      	beq.n	8011530 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	330c      	adds	r3, #12
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d003      	beq.n	801152a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	330c      	adds	r3, #12
 8011526:	61bb      	str	r3, [r7, #24]
 8011528:	e002      	b.n	8011530 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801152a:	f06f 0303 	mvn.w	r3, #3
 801152e:	e069      	b.n	8011604 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011530:	4b3c      	ldr	r3, [pc, #240]	; (8011624 <etharp_output+0x1d4>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	4619      	mov	r1, r3
 8011536:	4a3c      	ldr	r2, [pc, #240]	; (8011628 <etharp_output+0x1d8>)
 8011538:	460b      	mov	r3, r1
 801153a:	005b      	lsls	r3, r3, #1
 801153c:	440b      	add	r3, r1
 801153e:	00db      	lsls	r3, r3, #3
 8011540:	4413      	add	r3, r2
 8011542:	3314      	adds	r3, #20
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	2b01      	cmp	r3, #1
 8011548:	d917      	bls.n	801157a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	4b35      	ldr	r3, [pc, #212]	; (8011624 <etharp_output+0x1d4>)
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	4618      	mov	r0, r3
 8011554:	4934      	ldr	r1, [pc, #208]	; (8011628 <etharp_output+0x1d8>)
 8011556:	4603      	mov	r3, r0
 8011558:	005b      	lsls	r3, r3, #1
 801155a:	4403      	add	r3, r0
 801155c:	00db      	lsls	r3, r3, #3
 801155e:	440b      	add	r3, r1
 8011560:	3304      	adds	r3, #4
 8011562:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011564:	429a      	cmp	r2, r3
 8011566:	d108      	bne.n	801157a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011568:	4b2e      	ldr	r3, [pc, #184]	; (8011624 <etharp_output+0x1d4>)
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	461a      	mov	r2, r3
 801156e:	68b9      	ldr	r1, [r7, #8]
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f7ff fed3 	bl	801131c <etharp_output_to_arp_index>
 8011576:	4603      	mov	r3, r0
 8011578:	e044      	b.n	8011604 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801157a:	2300      	movs	r3, #0
 801157c:	75fb      	strb	r3, [r7, #23]
 801157e:	e02a      	b.n	80115d6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011580:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011584:	4928      	ldr	r1, [pc, #160]	; (8011628 <etharp_output+0x1d8>)
 8011586:	4613      	mov	r3, r2
 8011588:	005b      	lsls	r3, r3, #1
 801158a:	4413      	add	r3, r2
 801158c:	00db      	lsls	r3, r3, #3
 801158e:	440b      	add	r3, r1
 8011590:	3314      	adds	r3, #20
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	2b01      	cmp	r3, #1
 8011596:	d918      	bls.n	80115ca <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	6819      	ldr	r1, [r3, #0]
 801159c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80115a0:	4821      	ldr	r0, [pc, #132]	; (8011628 <etharp_output+0x1d8>)
 80115a2:	4613      	mov	r3, r2
 80115a4:	005b      	lsls	r3, r3, #1
 80115a6:	4413      	add	r3, r2
 80115a8:	00db      	lsls	r3, r3, #3
 80115aa:	4403      	add	r3, r0
 80115ac:	3304      	adds	r3, #4
 80115ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80115b0:	4299      	cmp	r1, r3
 80115b2:	d10a      	bne.n	80115ca <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80115b4:	7dfa      	ldrb	r2, [r7, #23]
 80115b6:	4b1b      	ldr	r3, [pc, #108]	; (8011624 <etharp_output+0x1d4>)
 80115b8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80115ba:	7dfb      	ldrb	r3, [r7, #23]
 80115bc:	461a      	mov	r2, r3
 80115be:	68b9      	ldr	r1, [r7, #8]
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f7ff feab 	bl	801131c <etharp_output_to_arp_index>
 80115c6:	4603      	mov	r3, r0
 80115c8:	e01c      	b.n	8011604 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80115ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	3301      	adds	r3, #1
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	75fb      	strb	r3, [r7, #23]
 80115d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80115da:	2b09      	cmp	r3, #9
 80115dc:	ddd0      	ble.n	8011580 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	69b9      	ldr	r1, [r7, #24]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f000 f822 	bl	801162c <etharp_query>
 80115e8:	4603      	mov	r3, r0
 80115ea:	e00b      	b.n	8011604 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80115f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	68b9      	ldr	r1, [r7, #8]
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f001 fccd 	bl	8012f9c <ethernet_output>
 8011602:	4603      	mov	r3, r0
}
 8011604:	4618      	mov	r0, r3
 8011606:	3720      	adds	r7, #32
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	080168c0 	.word	0x080168c0
 8011610:	08016a10 	.word	0x08016a10
 8011614:	08016938 	.word	0x08016938
 8011618:	08016a60 	.word	0x08016a60
 801161c:	08016a00 	.word	0x08016a00
 8011620:	08017068 	.word	0x08017068
 8011624:	2000b8fc 	.word	0x2000b8fc
 8011628:	2000b80c 	.word	0x2000b80c

0801162c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08c      	sub	sp, #48	; 0x30
 8011630:	af02      	add	r7, sp, #8
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	3329      	adds	r3, #41	; 0x29
 801163c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801163e:	23ff      	movs	r3, #255	; 0xff
 8011640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011644:	2300      	movs	r3, #0
 8011646:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	68f9      	ldr	r1, [r7, #12]
 801164e:	4618      	mov	r0, r3
 8011650:	f000 fdfe 	bl	8012250 <ip4_addr_isbroadcast_u32>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d10c      	bne.n	8011674 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011662:	2be0      	cmp	r3, #224	; 0xe0
 8011664:	d006      	beq.n	8011674 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d003      	beq.n	8011674 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011674:	f06f 030f 	mvn.w	r3, #15
 8011678:	e10e      	b.n	8011898 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	2101      	movs	r1, #1
 801167e:	68b8      	ldr	r0, [r7, #8]
 8011680:	f7ff fba0 	bl	8010dc4 <etharp_find_entry>
 8011684:	4603      	mov	r3, r0
 8011686:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8011688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801168c:	2b00      	cmp	r3, #0
 801168e:	da02      	bge.n	8011696 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8011690:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011694:	e100      	b.n	8011898 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011696:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801169a:	4981      	ldr	r1, [pc, #516]	; (80118a0 <etharp_query+0x274>)
 801169c:	4613      	mov	r3, r2
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	4413      	add	r3, r2
 80116a2:	00db      	lsls	r3, r3, #3
 80116a4:	440b      	add	r3, r1
 80116a6:	3314      	adds	r3, #20
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d117      	bne.n	80116de <etharp_query+0xb2>
    is_new_entry = 1;
 80116ae:	2301      	movs	r3, #1
 80116b0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80116b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80116b6:	497a      	ldr	r1, [pc, #488]	; (80118a0 <etharp_query+0x274>)
 80116b8:	4613      	mov	r3, r2
 80116ba:	005b      	lsls	r3, r3, #1
 80116bc:	4413      	add	r3, r2
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	440b      	add	r3, r1
 80116c2:	3314      	adds	r3, #20
 80116c4:	2201      	movs	r2, #1
 80116c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80116c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80116cc:	4974      	ldr	r1, [pc, #464]	; (80118a0 <etharp_query+0x274>)
 80116ce:	4613      	mov	r3, r2
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	4413      	add	r3, r2
 80116d4:	00db      	lsls	r3, r3, #3
 80116d6:	440b      	add	r3, r1
 80116d8:	3308      	adds	r3, #8
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80116de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80116e2:	496f      	ldr	r1, [pc, #444]	; (80118a0 <etharp_query+0x274>)
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	440b      	add	r3, r1
 80116ee:	3314      	adds	r3, #20
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d012      	beq.n	801171c <etharp_query+0xf0>
 80116f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80116fa:	4969      	ldr	r1, [pc, #420]	; (80118a0 <etharp_query+0x274>)
 80116fc:	4613      	mov	r3, r2
 80116fe:	005b      	lsls	r3, r3, #1
 8011700:	4413      	add	r3, r2
 8011702:	00db      	lsls	r3, r3, #3
 8011704:	440b      	add	r3, r1
 8011706:	3314      	adds	r3, #20
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	2b01      	cmp	r3, #1
 801170c:	d806      	bhi.n	801171c <etharp_query+0xf0>
 801170e:	4b65      	ldr	r3, [pc, #404]	; (80118a4 <etharp_query+0x278>)
 8011710:	f240 32c7 	movw	r2, #967	; 0x3c7
 8011714:	4964      	ldr	r1, [pc, #400]	; (80118a8 <etharp_query+0x27c>)
 8011716:	4865      	ldr	r0, [pc, #404]	; (80118ac <etharp_query+0x280>)
 8011718:	f001 ffaa 	bl	8013670 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801171c:	6a3b      	ldr	r3, [r7, #32]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d102      	bne.n	8011728 <etharp_query+0xfc>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d10c      	bne.n	8011742 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011728:	68b9      	ldr	r1, [r7, #8]
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f000 f974 	bl	8011a18 <etharp_request>
 8011730:	4603      	mov	r3, r0
 8011732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d102      	bne.n	8011742 <etharp_query+0x116>
      return result;
 801173c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011740:	e0aa      	b.n	8011898 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d106      	bne.n	8011756 <etharp_query+0x12a>
 8011748:	4b56      	ldr	r3, [pc, #344]	; (80118a4 <etharp_query+0x278>)
 801174a:	f240 32db 	movw	r2, #987	; 0x3db
 801174e:	4958      	ldr	r1, [pc, #352]	; (80118b0 <etharp_query+0x284>)
 8011750:	4856      	ldr	r0, [pc, #344]	; (80118ac <etharp_query+0x280>)
 8011752:	f001 ff8d 	bl	8013670 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011756:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801175a:	4951      	ldr	r1, [pc, #324]	; (80118a0 <etharp_query+0x274>)
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	00db      	lsls	r3, r3, #3
 8011764:	440b      	add	r3, r1
 8011766:	3314      	adds	r3, #20
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d918      	bls.n	80117a0 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801176e:	7cfa      	ldrb	r2, [r7, #19]
 8011770:	4b50      	ldr	r3, [pc, #320]	; (80118b4 <etharp_query+0x288>)
 8011772:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011774:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011778:	4613      	mov	r3, r2
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	4413      	add	r3, r2
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	3308      	adds	r3, #8
 8011782:	4a47      	ldr	r2, [pc, #284]	; (80118a0 <etharp_query+0x274>)
 8011784:	4413      	add	r3, r2
 8011786:	3304      	adds	r3, #4
 8011788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801178c:	9200      	str	r2, [sp, #0]
 801178e:	697a      	ldr	r2, [r7, #20]
 8011790:	6879      	ldr	r1, [r7, #4]
 8011792:	68f8      	ldr	r0, [r7, #12]
 8011794:	f001 fc02 	bl	8012f9c <ethernet_output>
 8011798:	4603      	mov	r3, r0
 801179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801179e:	e079      	b.n	8011894 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80117a0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80117a4:	493e      	ldr	r1, [pc, #248]	; (80118a0 <etharp_query+0x274>)
 80117a6:	4613      	mov	r3, r2
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	4413      	add	r3, r2
 80117ac:	00db      	lsls	r3, r3, #3
 80117ae:	440b      	add	r3, r1
 80117b0:	3314      	adds	r3, #20
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d16d      	bne.n	8011894 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80117b8:	2300      	movs	r3, #0
 80117ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80117c0:	e01a      	b.n	80117f8 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	895a      	ldrh	r2, [r3, #10]
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	891b      	ldrh	r3, [r3, #8]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d10a      	bne.n	80117e4 <etharp_query+0x1b8>
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d006      	beq.n	80117e4 <etharp_query+0x1b8>
 80117d6:	4b33      	ldr	r3, [pc, #204]	; (80118a4 <etharp_query+0x278>)
 80117d8:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80117dc:	4936      	ldr	r1, [pc, #216]	; (80118b8 <etharp_query+0x28c>)
 80117de:	4833      	ldr	r0, [pc, #204]	; (80118ac <etharp_query+0x280>)
 80117e0:	f001 ff46 	bl	8013670 <iprintf>
      if (p->type != PBUF_ROM) {
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	7b1b      	ldrb	r3, [r3, #12]
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d002      	beq.n	80117f2 <etharp_query+0x1c6>
        copy_needed = 1;
 80117ec:	2301      	movs	r3, #1
 80117ee:	61bb      	str	r3, [r7, #24]
        break;
 80117f0:	e005      	b.n	80117fe <etharp_query+0x1d2>
      }
      p = p->next;
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1e1      	bne.n	80117c2 <etharp_query+0x196>
    }
    if (copy_needed) {
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d017      	beq.n	8011834 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	891b      	ldrh	r3, [r3, #8]
 8011808:	2200      	movs	r2, #0
 801180a:	4619      	mov	r1, r3
 801180c:	2002      	movs	r0, #2
 801180e:	f7f8 fc5b 	bl	800a0c8 <pbuf_alloc>
 8011812:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d011      	beq.n	801183e <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 801181a:	6879      	ldr	r1, [r7, #4]
 801181c:	69f8      	ldr	r0, [r7, #28]
 801181e:	f7f9 f909 	bl	800aa34 <pbuf_copy>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00a      	beq.n	801183e <etharp_query+0x212>
          pbuf_free(p);
 8011828:	69f8      	ldr	r0, [r7, #28]
 801182a:	f7f8 ffc5 	bl	800a7b8 <pbuf_free>
          p = NULL;
 801182e:	2300      	movs	r3, #0
 8011830:	61fb      	str	r3, [r7, #28]
 8011832:	e004      	b.n	801183e <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011838:	69f8      	ldr	r0, [r7, #28]
 801183a:	f7f9 f86d 	bl	800a918 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d024      	beq.n	801188e <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011844:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011848:	4915      	ldr	r1, [pc, #84]	; (80118a0 <etharp_query+0x274>)
 801184a:	4613      	mov	r3, r2
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	4413      	add	r3, r2
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	440b      	add	r3, r1
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00b      	beq.n	8011872 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801185a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801185e:	4910      	ldr	r1, [pc, #64]	; (80118a0 <etharp_query+0x274>)
 8011860:	4613      	mov	r3, r2
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	4413      	add	r3, r2
 8011866:	00db      	lsls	r3, r3, #3
 8011868:	440b      	add	r3, r1
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4618      	mov	r0, r3
 801186e:	f7f8 ffa3 	bl	800a7b8 <pbuf_free>
      }
      arp_table[i].q = p;
 8011872:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011876:	490a      	ldr	r1, [pc, #40]	; (80118a0 <etharp_query+0x274>)
 8011878:	4613      	mov	r3, r2
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	4413      	add	r3, r2
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	440b      	add	r3, r1
 8011882:	69fa      	ldr	r2, [r7, #28]
 8011884:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801188c:	e002      	b.n	8011894 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801188e:	23ff      	movs	r3, #255	; 0xff
 8011890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011898:	4618      	mov	r0, r3
 801189a:	3728      	adds	r7, #40	; 0x28
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	2000b80c 	.word	0x2000b80c
 80118a4:	080168c0 	.word	0x080168c0
 80118a8:	08016a6c 	.word	0x08016a6c
 80118ac:	08016938 	.word	0x08016938
 80118b0:	08016a60 	.word	0x08016a60
 80118b4:	2000b8fc 	.word	0x2000b8fc
 80118b8:	08016a94 	.word	0x08016a94

080118bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b08a      	sub	sp, #40	; 0x28
 80118c0:	af02      	add	r7, sp, #8
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
 80118c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80118ca:	2300      	movs	r3, #0
 80118cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d106      	bne.n	80118e2 <etharp_raw+0x26>
 80118d4:	4b3a      	ldr	r3, [pc, #232]	; (80119c0 <etharp_raw+0x104>)
 80118d6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80118da:	493a      	ldr	r1, [pc, #232]	; (80119c4 <etharp_raw+0x108>)
 80118dc:	483a      	ldr	r0, [pc, #232]	; (80119c8 <etharp_raw+0x10c>)
 80118de:	f001 fec7 	bl	8013670 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80118e2:	2200      	movs	r2, #0
 80118e4:	211c      	movs	r1, #28
 80118e6:	2002      	movs	r0, #2
 80118e8:	f7f8 fbee 	bl	800a0c8 <pbuf_alloc>
 80118ec:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d102      	bne.n	80118fa <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80118f4:	f04f 33ff 	mov.w	r3, #4294967295
 80118f8:	e05d      	b.n	80119b6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	895b      	ldrh	r3, [r3, #10]
 80118fe:	2b1b      	cmp	r3, #27
 8011900:	d806      	bhi.n	8011910 <etharp_raw+0x54>
 8011902:	4b2f      	ldr	r3, [pc, #188]	; (80119c0 <etharp_raw+0x104>)
 8011904:	f240 4263 	movw	r2, #1123	; 0x463
 8011908:	4930      	ldr	r1, [pc, #192]	; (80119cc <etharp_raw+0x110>)
 801190a:	482f      	ldr	r0, [pc, #188]	; (80119c8 <etharp_raw+0x10c>)
 801190c:	f001 feb0 	bl	8013670 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011916:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011918:	4618      	mov	r0, r3
 801191a:	f7f7 fd55 	bl	80093c8 <lwip_htons>
 801191e:	4603      	mov	r3, r0
 8011920:	461a      	mov	r2, r3
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801192c:	2b06      	cmp	r3, #6
 801192e:	d006      	beq.n	801193e <etharp_raw+0x82>
 8011930:	4b23      	ldr	r3, [pc, #140]	; (80119c0 <etharp_raw+0x104>)
 8011932:	f240 426a 	movw	r2, #1130	; 0x46a
 8011936:	4926      	ldr	r1, [pc, #152]	; (80119d0 <etharp_raw+0x114>)
 8011938:	4823      	ldr	r0, [pc, #140]	; (80119c8 <etharp_raw+0x10c>)
 801193a:	f001 fe99 	bl	8013670 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	3308      	adds	r3, #8
 8011942:	2206      	movs	r2, #6
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	4618      	mov	r0, r3
 8011948:	f001 fda0 	bl	801348c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	3312      	adds	r3, #18
 8011950:	2206      	movs	r2, #6
 8011952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011954:	4618      	mov	r0, r3
 8011956:	f001 fd99 	bl	801348c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	330e      	adds	r3, #14
 801195e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011960:	6812      	ldr	r2, [r2, #0]
 8011962:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	3318      	adds	r3, #24
 8011968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801196a:	6812      	ldr	r2, [r2, #0]
 801196c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	2200      	movs	r2, #0
 8011972:	701a      	strb	r2, [r3, #0]
 8011974:	2200      	movs	r2, #0
 8011976:	f042 0201 	orr.w	r2, r2, #1
 801197a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	2200      	movs	r2, #0
 8011980:	f042 0208 	orr.w	r2, r2, #8
 8011984:	709a      	strb	r2, [r3, #2]
 8011986:	2200      	movs	r2, #0
 8011988:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2206      	movs	r2, #6
 801198e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	2204      	movs	r2, #4
 8011994:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011996:	f640 0306 	movw	r3, #2054	; 0x806
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	68ba      	ldr	r2, [r7, #8]
 80119a0:	69b9      	ldr	r1, [r7, #24]
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f001 fafa 	bl	8012f9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80119a8:	69b8      	ldr	r0, [r7, #24]
 80119aa:	f7f8 ff05 	bl	800a7b8 <pbuf_free>
  p = NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80119b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3720      	adds	r7, #32
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	080168c0 	.word	0x080168c0
 80119c4:	08016a10 	.word	0x08016a10
 80119c8:	08016938 	.word	0x08016938
 80119cc:	08016ab0 	.word	0x08016ab0
 80119d0:	08016ae4 	.word	0x08016ae4

080119d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b088      	sub	sp, #32
 80119d8:	af04      	add	r7, sp, #16
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80119f0:	2201      	movs	r2, #1
 80119f2:	9203      	str	r2, [sp, #12]
 80119f4:	68ba      	ldr	r2, [r7, #8]
 80119f6:	9202      	str	r2, [sp, #8]
 80119f8:	4a06      	ldr	r2, [pc, #24]	; (8011a14 <etharp_request_dst+0x40>)
 80119fa:	9201      	str	r2, [sp, #4]
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	4603      	mov	r3, r0
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	68f8      	ldr	r0, [r7, #12]
 8011a04:	f7ff ff5a 	bl	80118bc <etharp_raw>
 8011a08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3710      	adds	r7, #16
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	08017070 	.word	0x08017070

08011a18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011a22:	4a05      	ldr	r2, [pc, #20]	; (8011a38 <etharp_request+0x20>)
 8011a24:	6839      	ldr	r1, [r7, #0]
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff ffd4 	bl	80119d4 <etharp_request_dst>
 8011a2c:	4603      	mov	r3, r0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	08017068 	.word	0x08017068

08011a3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b08e      	sub	sp, #56	; 0x38
 8011a40:	af04      	add	r7, sp, #16
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011a46:	4b7a      	ldr	r3, [pc, #488]	; (8011c30 <icmp_input+0x1f4>)
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	f003 030f 	and.w	r3, r3, #15
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a5e:	2b13      	cmp	r3, #19
 8011a60:	f240 80d1 	bls.w	8011c06 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	895b      	ldrh	r3, [r3, #10]
 8011a68:	2b03      	cmp	r3, #3
 8011a6a:	f240 80ce 	bls.w	8011c0a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011a78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f000 80bb 	beq.w	8011bf8 <icmp_input+0x1bc>
 8011a82:	2b08      	cmp	r3, #8
 8011a84:	f040 80bb 	bne.w	8011bfe <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8011a88:	4b6a      	ldr	r3, [pc, #424]	; (8011c34 <icmp_input+0x1f8>)
 8011a8a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a8c:	4b68      	ldr	r3, [pc, #416]	; (8011c30 <icmp_input+0x1f4>)
 8011a8e:	695b      	ldr	r3, [r3, #20]
 8011a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a94:	2be0      	cmp	r3, #224	; 0xe0
 8011a96:	f000 80bf 	beq.w	8011c18 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011a9a:	4b65      	ldr	r3, [pc, #404]	; (8011c30 <icmp_input+0x1f4>)
 8011a9c:	695b      	ldr	r3, [r3, #20]
 8011a9e:	4a64      	ldr	r2, [pc, #400]	; (8011c30 <icmp_input+0x1f4>)
 8011aa0:	6812      	ldr	r2, [r2, #0]
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f000 fbd3 	bl	8012250 <ip4_addr_isbroadcast_u32>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f040 80b5 	bne.w	8011c1c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	891b      	ldrh	r3, [r3, #8]
 8011ab6:	2b07      	cmp	r3, #7
 8011ab8:	f240 80a9 	bls.w	8011c0e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011abe:	330e      	adds	r3, #14
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	b21b      	sxth	r3, r3
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f7f8 fe52 	bl	800a770 <pbuf_header>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d046      	beq.n	8011b60 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	891a      	ldrh	r2, [r3, #8]
 8011ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ad8:	4413      	add	r3, r2
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	2200      	movs	r2, #0
 8011ade:	4619      	mov	r1, r3
 8011ae0:	2002      	movs	r0, #2
 8011ae2:	f7f8 faf1 	bl	800a0c8 <pbuf_alloc>
 8011ae6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f000 8098 	beq.w	8011c20 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	895b      	ldrh	r3, [r3, #10]
 8011af4:	461a      	mov	r2, r3
 8011af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011af8:	3308      	adds	r3, #8
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d203      	bcs.n	8011b06 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011afe:	69b8      	ldr	r0, [r7, #24]
 8011b00:	f7f8 fe5a 	bl	800a7b8 <pbuf_free>
        goto icmperr;
 8011b04:	e08d      	b.n	8011c22 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f001 fcbc 	bl	801348c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8011b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b16:	425b      	negs	r3, r3
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	b21b      	sxth	r3, r3
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	69b8      	ldr	r0, [r7, #24]
 8011b20:	f7f8 fe26 	bl	800a770 <pbuf_header>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d009      	beq.n	8011b3e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011b2a:	4b43      	ldr	r3, [pc, #268]	; (8011c38 <icmp_input+0x1fc>)
 8011b2c:	22af      	movs	r2, #175	; 0xaf
 8011b2e:	4943      	ldr	r1, [pc, #268]	; (8011c3c <icmp_input+0x200>)
 8011b30:	4843      	ldr	r0, [pc, #268]	; (8011c40 <icmp_input+0x204>)
 8011b32:	f001 fd9d 	bl	8013670 <iprintf>
        pbuf_free(r);
 8011b36:	69b8      	ldr	r0, [r7, #24]
 8011b38:	f7f8 fe3e 	bl	800a7b8 <pbuf_free>
        goto icmperr;
 8011b3c:	e071      	b.n	8011c22 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011b3e:	6879      	ldr	r1, [r7, #4]
 8011b40:	69b8      	ldr	r0, [r7, #24]
 8011b42:	f7f8 ff77 	bl	800aa34 <pbuf_copy>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011b4c:	69b8      	ldr	r0, [r7, #24]
 8011b4e:	f7f8 fe33 	bl	800a7b8 <pbuf_free>
        goto icmperr;
 8011b52:	e066      	b.n	8011c22 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7f8 fe2f 	bl	800a7b8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	607b      	str	r3, [r7, #4]
 8011b5e:	e015      	b.n	8011b8c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b62:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8011b66:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011b6a:	33f2      	adds	r3, #242	; 0xf2
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	b21b      	sxth	r3, r3
 8011b70:	4619      	mov	r1, r3
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7f8 fdfc 	bl	800a770 <pbuf_header>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d006      	beq.n	8011b8c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011b7e:	4b2e      	ldr	r3, [pc, #184]	; (8011c38 <icmp_input+0x1fc>)
 8011b80:	22c0      	movs	r2, #192	; 0xc0
 8011b82:	4930      	ldr	r1, [pc, #192]	; (8011c44 <icmp_input+0x208>)
 8011b84:	482e      	ldr	r0, [pc, #184]	; (8011c40 <icmp_input+0x204>)
 8011b86:	f001 fd73 	bl	8013670 <iprintf>
        goto icmperr;
 8011b8a:	e04a      	b.n	8011c22 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8011b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b96:	4619      	mov	r1, r3
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7f8 fde9 	bl	800a770 <pbuf_header>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d12b      	bne.n	8011bfc <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011bb2:	4b1f      	ldr	r3, [pc, #124]	; (8011c30 <icmp_input+0x1f4>)
 8011bb4:	691a      	ldr	r2, [r3, #16]
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	709a      	strb	r2, [r3, #2]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	22ff      	movs	r2, #255	; 0xff
 8011bce:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	729a      	strb	r2, [r3, #10]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	9302      	str	r3, [sp, #8]
 8011bde:	2301      	movs	r3, #1
 8011be0:	9301      	str	r3, [sp, #4]
 8011be2:	2300      	movs	r3, #0
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	23ff      	movs	r3, #255	; 0xff
 8011be8:	2200      	movs	r2, #0
 8011bea:	69f9      	ldr	r1, [r7, #28]
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 fa5d 	bl	80120ac <ip4_output_if>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8011bf6:	e001      	b.n	8011bfc <icmp_input+0x1c0>
    break;
 8011bf8:	bf00      	nop
 8011bfa:	e000      	b.n	8011bfe <icmp_input+0x1c2>
    break;
 8011bfc:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7f8 fdda 	bl	800a7b8 <pbuf_free>
  return;
 8011c04:	e011      	b.n	8011c2a <icmp_input+0x1ee>
    goto lenerr;
 8011c06:	bf00      	nop
 8011c08:	e002      	b.n	8011c10 <icmp_input+0x1d4>
    goto lenerr;
 8011c0a:	bf00      	nop
 8011c0c:	e000      	b.n	8011c10 <icmp_input+0x1d4>
      goto lenerr;
 8011c0e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7f8 fdd1 	bl	800a7b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011c16:	e008      	b.n	8011c2a <icmp_input+0x1ee>
      goto icmperr;
 8011c18:	bf00      	nop
 8011c1a:	e002      	b.n	8011c22 <icmp_input+0x1e6>
      goto icmperr;
 8011c1c:	bf00      	nop
 8011c1e:	e000      	b.n	8011c22 <icmp_input+0x1e6>
        goto icmperr;
 8011c20:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f7f8 fdc8 	bl	800a7b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011c28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011c2a:	3728      	adds	r7, #40	; 0x28
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	2000805c 	.word	0x2000805c
 8011c34:	20008070 	.word	0x20008070
 8011c38:	08016b28 	.word	0x08016b28
 8011c3c:	08016b60 	.word	0x08016b60
 8011c40:	08016b98 	.word	0x08016b98
 8011c44:	08016bc0 	.word	0x08016bc0

08011c48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b082      	sub	sp, #8
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	460b      	mov	r3, r1
 8011c52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011c54:	78fb      	ldrb	r3, [r7, #3]
 8011c56:	461a      	mov	r2, r3
 8011c58:	2103      	movs	r1, #3
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f000 f814 	bl	8011c88 <icmp_send_response>
}
 8011c60:	bf00      	nop
 8011c62:	3708      	adds	r7, #8
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}

08011c68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	460b      	mov	r3, r1
 8011c72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011c74:	78fb      	ldrb	r3, [r7, #3]
 8011c76:	461a      	mov	r2, r3
 8011c78:	210b      	movs	r1, #11
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 f804 	bl	8011c88 <icmp_send_response>
}
 8011c80:	bf00      	nop
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b08c      	sub	sp, #48	; 0x30
 8011c8c:	af04      	add	r7, sp, #16
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	460b      	mov	r3, r1
 8011c92:	70fb      	strb	r3, [r7, #3]
 8011c94:	4613      	mov	r3, r2
 8011c96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011c98:	2200      	movs	r2, #0
 8011c9a:	2124      	movs	r1, #36	; 0x24
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	f7f8 fa13 	bl	800a0c8 <pbuf_alloc>
 8011ca2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d04c      	beq.n	8011d44 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	895b      	ldrh	r3, [r3, #10]
 8011cae:	2b23      	cmp	r3, #35	; 0x23
 8011cb0:	d806      	bhi.n	8011cc0 <icmp_send_response+0x38>
 8011cb2:	4b26      	ldr	r3, [pc, #152]	; (8011d4c <icmp_send_response+0xc4>)
 8011cb4:	f240 1261 	movw	r2, #353	; 0x161
 8011cb8:	4925      	ldr	r1, [pc, #148]	; (8011d50 <icmp_send_response+0xc8>)
 8011cba:	4826      	ldr	r0, [pc, #152]	; (8011d54 <icmp_send_response+0xcc>)
 8011cbc:	f001 fcd8 	bl	8013670 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	78fa      	ldrb	r2, [r7, #3]
 8011cd0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	78ba      	ldrb	r2, [r7, #2]
 8011cd6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	711a      	strb	r2, [r3, #4]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	719a      	strb	r2, [r3, #6]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	f103 0008 	add.w	r0, r3, #8
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	221c      	movs	r2, #28
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f001 fbc6 	bl	801348c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011d06:	f107 030c 	add.w	r3, r7, #12
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f000 f824 	bl	8011d58 <ip4_route>
 8011d10:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d011      	beq.n	8011d3c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	709a      	strb	r2, [r3, #2]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011d22:	f107 020c 	add.w	r2, r7, #12
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	9302      	str	r3, [sp, #8]
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	9301      	str	r3, [sp, #4]
 8011d2e:	2300      	movs	r3, #0
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	23ff      	movs	r3, #255	; 0xff
 8011d34:	2100      	movs	r1, #0
 8011d36:	69f8      	ldr	r0, [r7, #28]
 8011d38:	f000 f9b8 	bl	80120ac <ip4_output_if>
  }
  pbuf_free(q);
 8011d3c:	69f8      	ldr	r0, [r7, #28]
 8011d3e:	f7f8 fd3b 	bl	800a7b8 <pbuf_free>
 8011d42:	e000      	b.n	8011d46 <icmp_send_response+0xbe>
    return;
 8011d44:	bf00      	nop
}
 8011d46:	3720      	adds	r7, #32
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	08016b28 	.word	0x08016b28
 8011d50:	08016bf4 	.word	0x08016bf4
 8011d54:	08016b98 	.word	0x08016b98

08011d58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011d60:	4b30      	ldr	r3, [pc, #192]	; (8011e24 <ip4_route+0xcc>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	60fb      	str	r3, [r7, #12]
 8011d66:	e036      	b.n	8011dd6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011d6e:	f003 0301 	and.w	r3, r3, #1
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d02b      	beq.n	8011dd0 <ip4_route+0x78>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011d7e:	089b      	lsrs	r3, r3, #2
 8011d80:	f003 0301 	and.w	r3, r3, #1
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d022      	beq.n	8011dd0 <ip4_route+0x78>
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	3304      	adds	r3, #4
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d01d      	beq.n	8011dd0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	405a      	eors	r2, r3
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	3308      	adds	r3, #8
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4013      	ands	r3, r2
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d101      	bne.n	8011db0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	e033      	b.n	8011e18 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011db6:	f003 0302 	and.w	r3, r3, #2
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d108      	bne.n	8011dd0 <ip4_route+0x78>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	330c      	adds	r3, #12
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d101      	bne.n	8011dd0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	e023      	b.n	8011e18 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	60fb      	str	r3, [r7, #12]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1c5      	bne.n	8011d68 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ddc:	4b12      	ldr	r3, [pc, #72]	; (8011e28 <ip4_route+0xd0>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d015      	beq.n	8011e10 <ip4_route+0xb8>
 8011de4:	4b10      	ldr	r3, [pc, #64]	; (8011e28 <ip4_route+0xd0>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011dec:	f003 0301 	and.w	r3, r3, #1
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00d      	beq.n	8011e10 <ip4_route+0xb8>
 8011df4:	4b0c      	ldr	r3, [pc, #48]	; (8011e28 <ip4_route+0xd0>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011dfc:	f003 0304 	and.w	r3, r3, #4
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d005      	beq.n	8011e10 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8011e04:	4b08      	ldr	r3, [pc, #32]	; (8011e28 <ip4_route+0xd0>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d101      	bne.n	8011e14 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011e10:	2300      	movs	r3, #0
 8011e12:	e001      	b.n	8011e18 <ip4_route+0xc0>
  }

  return netif_default;
 8011e14:	4b04      	ldr	r3, [pc, #16]	; (8011e28 <ip4_route+0xd0>)
 8011e16:	681b      	ldr	r3, [r3, #0]
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bc80      	pop	{r7}
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop
 8011e24:	2000b7a0 	.word	0x2000b7a0
 8011e28:	2000b7a4 	.word	0x2000b7a4

08011e2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	091b      	lsrs	r3, r3, #4
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	d004      	beq.n	8011e52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7f8 fcb5 	bl	800a7b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	e124      	b.n	801209c <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	f003 030f 	and.w	r3, r3, #15
 8011e5c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8011e5e:	897b      	ldrh	r3, [r7, #10]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	885b      	ldrh	r3, [r3, #2]
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7f7 faac 	bl	80093c8 <lwip_htons>
 8011e70:	4603      	mov	r3, r0
 8011e72:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	891b      	ldrh	r3, [r3, #8]
 8011e78:	893a      	ldrh	r2, [r7, #8]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d204      	bcs.n	8011e88 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8011e7e:	893b      	ldrh	r3, [r7, #8]
 8011e80:	4619      	mov	r1, r3
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7f8 fb24 	bl	800a4d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	895b      	ldrh	r3, [r3, #10]
 8011e8c:	897a      	ldrh	r2, [r7, #10]
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d807      	bhi.n	8011ea2 <ip4_input+0x76>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	891b      	ldrh	r3, [r3, #8]
 8011e96:	893a      	ldrh	r2, [r7, #8]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d802      	bhi.n	8011ea2 <ip4_input+0x76>
 8011e9c:	897b      	ldrh	r3, [r7, #10]
 8011e9e:	2b13      	cmp	r3, #19
 8011ea0:	d804      	bhi.n	8011eac <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7f8 fc88 	bl	800a7b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	e0f7      	b.n	801209c <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	691b      	ldr	r3, [r3, #16]
 8011eb0:	4a7c      	ldr	r2, [pc, #496]	; (80120a4 <ip4_input+0x278>)
 8011eb2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	4a7a      	ldr	r2, [pc, #488]	; (80120a4 <ip4_input+0x278>)
 8011eba:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ebc:	4b79      	ldr	r3, [pc, #484]	; (80120a4 <ip4_input+0x278>)
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ec4:	2be0      	cmp	r3, #224	; 0xe0
 8011ec6:	d112      	bne.n	8011eee <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ece:	f003 0301 	and.w	r3, r3, #1
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d007      	beq.n	8011ee8 <ip4_input+0xbc>
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	3304      	adds	r3, #4
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d002      	beq.n	8011ee8 <ip4_input+0xbc>
      netif = inp;
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	613b      	str	r3, [r7, #16]
 8011ee6:	e041      	b.n	8011f6c <ip4_input+0x140>
    } else {
      netif = NULL;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	613b      	str	r3, [r7, #16]
 8011eec:	e03e      	b.n	8011f6c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d014      	beq.n	8011f30 <ip4_input+0x104>
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	3304      	adds	r3, #4
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00f      	beq.n	8011f30 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f10:	4b64      	ldr	r3, [pc, #400]	; (80120a4 <ip4_input+0x278>)
 8011f12:	695a      	ldr	r2, [r3, #20]
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	3304      	adds	r3, #4
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d026      	beq.n	8011f6c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011f1e:	4b61      	ldr	r3, [pc, #388]	; (80120a4 <ip4_input+0x278>)
 8011f20:	695b      	ldr	r3, [r3, #20]
 8011f22:	6939      	ldr	r1, [r7, #16]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f000 f993 	bl	8012250 <ip4_addr_isbroadcast_u32>
 8011f2a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d11d      	bne.n	8011f6c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00d      	beq.n	8011f52 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011f36:	4b5b      	ldr	r3, [pc, #364]	; (80120a4 <ip4_input+0x278>)
 8011f38:	695b      	ldr	r3, [r3, #20]
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8011f3e:	d102      	bne.n	8011f46 <ip4_input+0x11a>
          netif = NULL;
 8011f40:	2300      	movs	r3, #0
 8011f42:	613b      	str	r3, [r7, #16]
          break;
 8011f44:	e012      	b.n	8011f6c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8011f4a:	4b57      	ldr	r3, [pc, #348]	; (80120a8 <ip4_input+0x27c>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	613b      	str	r3, [r7, #16]
 8011f50:	e002      	b.n	8011f58 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8011f58:	693a      	ldr	r2, [r7, #16]
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d102      	bne.n	8011f66 <ip4_input+0x13a>
        netif = netif->next;
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d1c4      	bne.n	8011ef6 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f6c:	4b4d      	ldr	r3, [pc, #308]	; (80120a4 <ip4_input+0x278>)
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	6839      	ldr	r1, [r7, #0]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f000 f96c 	bl	8012250 <ip4_addr_isbroadcast_u32>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d105      	bne.n	8011f8a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011f7e:	4b49      	ldr	r3, [pc, #292]	; (80120a4 <ip4_input+0x278>)
 8011f80:	691b      	ldr	r3, [r3, #16]
 8011f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f86:	2be0      	cmp	r3, #224	; 0xe0
 8011f88:	d104      	bne.n	8011f94 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f7f8 fc14 	bl	800a7b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011f90:	2300      	movs	r3, #0
 8011f92:	e083      	b.n	801209c <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d104      	bne.n	8011fa4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f7f8 fc0c 	bl	800a7b8 <pbuf_free>
    return ERR_OK;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	e07b      	b.n	801209c <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	88db      	ldrh	r3, [r3, #6]
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	461a      	mov	r2, r3
 8011fac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011fb0:	4013      	ands	r3, r2
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00b      	beq.n	8011fce <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fc8e 	bl	80128d8 <ip4_reass>
 8011fbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d101      	bne.n	8011fc8 <ip4_input+0x19c>
      return ERR_OK;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	e069      	b.n	801209c <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011fce:	4a35      	ldr	r2, [pc, #212]	; (80120a4 <ip4_input+0x278>)
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011fd4:	4a33      	ldr	r2, [pc, #204]	; (80120a4 <ip4_input+0x278>)
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011fda:	4a32      	ldr	r2, [pc, #200]	; (80120a4 <ip4_input+0x278>)
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	f003 030f 	and.w	r3, r3, #15
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	b29a      	uxth	r2, r3
 8011ff0:	4b2c      	ldr	r3, [pc, #176]	; (80120a4 <ip4_input+0x278>)
 8011ff2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011ff4:	897b      	ldrh	r3, [r7, #10]
 8011ff6:	425b      	negs	r3, r3
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	b21b      	sxth	r3, r3
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7f8 fbb6 	bl	800a770 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	7a5b      	ldrb	r3, [r3, #9]
 8012008:	2b11      	cmp	r3, #17
 801200a:	d006      	beq.n	801201a <ip4_input+0x1ee>
 801200c:	2b11      	cmp	r3, #17
 801200e:	dc13      	bgt.n	8012038 <ip4_input+0x20c>
 8012010:	2b01      	cmp	r3, #1
 8012012:	d00c      	beq.n	801202e <ip4_input+0x202>
 8012014:	2b06      	cmp	r3, #6
 8012016:	d005      	beq.n	8012024 <ip4_input+0x1f8>
 8012018:	e00e      	b.n	8012038 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7fe fab7 	bl	8010590 <udp_input>
      break;
 8012022:	e028      	b.n	8012076 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7fa faec 	bl	800c604 <tcp_input>
      break;
 801202c:	e023      	b.n	8012076 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff fd03 	bl	8011a3c <icmp_input>
      break;
 8012036:	e01e      	b.n	8012076 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012038:	4b1a      	ldr	r3, [pc, #104]	; (80120a4 <ip4_input+0x278>)
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	6939      	ldr	r1, [r7, #16]
 801203e:	4618      	mov	r0, r3
 8012040:	f000 f906 	bl	8012250 <ip4_addr_isbroadcast_u32>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d112      	bne.n	8012070 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801204a:	4b16      	ldr	r3, [pc, #88]	; (80120a4 <ip4_input+0x278>)
 801204c:	695b      	ldr	r3, [r3, #20]
 801204e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012052:	2be0      	cmp	r3, #224	; 0xe0
 8012054:	d00c      	beq.n	8012070 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8012056:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801205a:	4619      	mov	r1, r3
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7f8 fb99 	bl	800a794 <pbuf_header_force>
        p->payload = iphdr;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	697a      	ldr	r2, [r7, #20]
 8012066:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012068:	2102      	movs	r1, #2
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7ff fdec 	bl	8011c48 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7f8 fba1 	bl	800a7b8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012076:	4b0b      	ldr	r3, [pc, #44]	; (80120a4 <ip4_input+0x278>)
 8012078:	2200      	movs	r2, #0
 801207a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801207c:	4b09      	ldr	r3, [pc, #36]	; (80120a4 <ip4_input+0x278>)
 801207e:	2200      	movs	r2, #0
 8012080:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012082:	4b08      	ldr	r3, [pc, #32]	; (80120a4 <ip4_input+0x278>)
 8012084:	2200      	movs	r2, #0
 8012086:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012088:	4b06      	ldr	r3, [pc, #24]	; (80120a4 <ip4_input+0x278>)
 801208a:	2200      	movs	r2, #0
 801208c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801208e:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <ip4_input+0x278>)
 8012090:	2200      	movs	r2, #0
 8012092:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012094:	4b03      	ldr	r3, [pc, #12]	; (80120a4 <ip4_input+0x278>)
 8012096:	2200      	movs	r2, #0
 8012098:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	2000805c 	.word	0x2000805c
 80120a8:	2000b7a0 	.word	0x2000b7a0

080120ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08a      	sub	sp, #40	; 0x28
 80120b0:	af04      	add	r7, sp, #16
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d009      	beq.n	80120d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d003      	beq.n	80120d2 <ip4_output_if+0x26>
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d102      	bne.n	80120d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	3304      	adds	r3, #4
 80120d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80120d8:	78fa      	ldrb	r2, [r7, #3]
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	9302      	str	r3, [sp, #8]
 80120de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120e2:	9301      	str	r3, [sp, #4]
 80120e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	4613      	mov	r3, r2
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	6979      	ldr	r1, [r7, #20]
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f000 f805 	bl	8012100 <ip4_output_if_src>
 80120f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3718      	adds	r7, #24
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}

08012100 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b088      	sub	sp, #32
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	607a      	str	r2, [r7, #4]
 801210c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	89db      	ldrh	r3, [r3, #14]
 8012112:	2b01      	cmp	r3, #1
 8012114:	d006      	beq.n	8012124 <ip4_output_if_src+0x24>
 8012116:	4b48      	ldr	r3, [pc, #288]	; (8012238 <ip4_output_if_src+0x138>)
 8012118:	f240 3233 	movw	r2, #819	; 0x333
 801211c:	4947      	ldr	r1, [pc, #284]	; (801223c <ip4_output_if_src+0x13c>)
 801211e:	4848      	ldr	r0, [pc, #288]	; (8012240 <ip4_output_if_src+0x140>)
 8012120:	f001 faa6 	bl	8013670 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d060      	beq.n	80121ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801212a:	2314      	movs	r3, #20
 801212c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801212e:	2114      	movs	r1, #20
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7f8 fb1d 	bl	800a770 <pbuf_header>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d002      	beq.n	8012142 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801213c:	f06f 0301 	mvn.w	r3, #1
 8012140:	e075      	b.n	801222e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	895b      	ldrh	r3, [r3, #10]
 801214c:	2b13      	cmp	r3, #19
 801214e:	d806      	bhi.n	801215e <ip4_output_if_src+0x5e>
 8012150:	4b39      	ldr	r3, [pc, #228]	; (8012238 <ip4_output_if_src+0x138>)
 8012152:	f44f 7258 	mov.w	r2, #864	; 0x360
 8012156:	493b      	ldr	r1, [pc, #236]	; (8012244 <ip4_output_if_src+0x144>)
 8012158:	4839      	ldr	r0, [pc, #228]	; (8012240 <ip4_output_if_src+0x140>)
 801215a:	f001 fa89 	bl	8013670 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	78fa      	ldrb	r2, [r7, #3]
 8012162:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801216a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681a      	ldr	r2, [r3, #0]
 8012170:	69fb      	ldr	r3, [r7, #28]
 8012172:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012174:	8b7b      	ldrh	r3, [r7, #26]
 8012176:	089b      	lsrs	r3, r3, #2
 8012178:	b29b      	uxth	r3, r3
 801217a:	b2db      	uxtb	r3, r3
 801217c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012180:	b2da      	uxtb	r2, r3
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801218c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	891b      	ldrh	r3, [r3, #8]
 8012192:	4618      	mov	r0, r3
 8012194:	f7f7 f918 	bl	80093c8 <lwip_htons>
 8012198:	4603      	mov	r3, r0
 801219a:	461a      	mov	r2, r3
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	2200      	movs	r2, #0
 80121a4:	719a      	strb	r2, [r3, #6]
 80121a6:	2200      	movs	r2, #0
 80121a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80121aa:	4b27      	ldr	r3, [pc, #156]	; (8012248 <ip4_output_if_src+0x148>)
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7f7 f90a 	bl	80093c8 <lwip_htons>
 80121b4:	4603      	mov	r3, r0
 80121b6:	461a      	mov	r2, r3
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80121bc:	4b22      	ldr	r3, [pc, #136]	; (8012248 <ip4_output_if_src+0x148>)
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	3301      	adds	r3, #1
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	4b20      	ldr	r3, [pc, #128]	; (8012248 <ip4_output_if_src+0x148>)
 80121c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d104      	bne.n	80121d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80121ce:	4b1f      	ldr	r3, [pc, #124]	; (801224c <ip4_output_if_src+0x14c>)
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	60da      	str	r2, [r3, #12]
 80121d6:	e003      	b.n	80121e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	2200      	movs	r2, #0
 80121e4:	729a      	strb	r2, [r3, #10]
 80121e6:	2200      	movs	r2, #0
 80121e8:	72da      	strb	r2, [r3, #11]
 80121ea:	e008      	b.n	80121fe <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	691b      	ldr	r3, [r3, #16]
 80121f6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80121f8:	f107 0314 	add.w	r3, r7, #20
 80121fc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80121fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00c      	beq.n	8012220 <ip4_output_if_src+0x120>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	891a      	ldrh	r2, [r3, #8]
 801220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801220e:	429a      	cmp	r2, r3
 8012210:	d906      	bls.n	8012220 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f000 fd0a 	bl	8012c30 <ip4_frag>
 801221c:	4603      	mov	r3, r0
 801221e:	e006      	b.n	801222e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012222:	695b      	ldr	r3, [r3, #20]
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	68f9      	ldr	r1, [r7, #12]
 8012228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801222a:	4798      	blx	r3
 801222c:	4603      	mov	r3, r0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3720      	adds	r7, #32
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	08016c20 	.word	0x08016c20
 801223c:	08016c54 	.word	0x08016c54
 8012240:	08016c60 	.word	0x08016c60
 8012244:	08016c88 	.word	0x08016c88
 8012248:	2000b8fe 	.word	0x2000b8fe
 801224c:	08017064 	.word	0x08017064

08012250 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012264:	d002      	beq.n	801226c <ip4_addr_isbroadcast_u32+0x1c>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d101      	bne.n	8012270 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801226c:	2301      	movs	r3, #1
 801226e:	e02a      	b.n	80122c6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012276:	f003 0302 	and.w	r3, r3, #2
 801227a:	2b00      	cmp	r3, #0
 801227c:	d101      	bne.n	8012282 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801227e:	2300      	movs	r3, #0
 8012280:	e021      	b.n	80122c6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	3304      	adds	r3, #4
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	429a      	cmp	r2, r3
 801228c:	d101      	bne.n	8012292 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801228e:	2300      	movs	r3, #0
 8012290:	e019      	b.n	80122c6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	3304      	adds	r3, #4
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	405a      	eors	r2, r3
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	3308      	adds	r3, #8
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	4013      	ands	r3, r2
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10d      	bne.n	80122c4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	3308      	adds	r3, #8
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	43da      	mvns	r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	3308      	adds	r3, #8
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80122bc:	429a      	cmp	r2, r3
 80122be:	d101      	bne.n	80122c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80122c0:	2301      	movs	r3, #1
 80122c2:	e000      	b.n	80122c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80122c4:	2300      	movs	r3, #0
  }
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bc80      	pop	{r7}
 80122ce:	4770      	bx	lr

080122d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80122d6:	2300      	movs	r3, #0
 80122d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80122da:	4b12      	ldr	r3, [pc, #72]	; (8012324 <ip_reass_tmr+0x54>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80122e0:	e018      	b.n	8012314 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	7fdb      	ldrb	r3, [r3, #31]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d00b      	beq.n	8012302 <ip_reass_tmr+0x32>
      r->timer--;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	7fdb      	ldrb	r3, [r3, #31]
 80122ee:	3b01      	subs	r3, #1
 80122f0:	b2da      	uxtb	r2, r3
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	60fb      	str	r3, [r7, #12]
 8012300:	e008      	b.n	8012314 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801230c:	68b9      	ldr	r1, [r7, #8]
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f000 f80a 	bl	8012328 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1e3      	bne.n	80122e2 <ip_reass_tmr+0x12>
     }
   }
}
 801231a:	bf00      	nop
 801231c:	bf00      	nop
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	2000b900 	.word	0x2000b900

08012328 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b088      	sub	sp, #32
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012336:	683a      	ldr	r2, [r7, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	429a      	cmp	r2, r3
 801233c:	d105      	bne.n	801234a <ip_reass_free_complete_datagram+0x22>
 801233e:	4b45      	ldr	r3, [pc, #276]	; (8012454 <ip_reass_free_complete_datagram+0x12c>)
 8012340:	22ab      	movs	r2, #171	; 0xab
 8012342:	4945      	ldr	r1, [pc, #276]	; (8012458 <ip_reass_free_complete_datagram+0x130>)
 8012344:	4845      	ldr	r0, [pc, #276]	; (801245c <ip_reass_free_complete_datagram+0x134>)
 8012346:	f001 f993 	bl	8013670 <iprintf>
  if (prev != NULL) {
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00a      	beq.n	8012366 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	429a      	cmp	r2, r3
 8012358:	d005      	beq.n	8012366 <ip_reass_free_complete_datagram+0x3e>
 801235a:	4b3e      	ldr	r3, [pc, #248]	; (8012454 <ip_reass_free_complete_datagram+0x12c>)
 801235c:	22ad      	movs	r2, #173	; 0xad
 801235e:	4940      	ldr	r1, [pc, #256]	; (8012460 <ip_reass_free_complete_datagram+0x138>)
 8012360:	483e      	ldr	r0, [pc, #248]	; (801245c <ip_reass_free_complete_datagram+0x134>)
 8012362:	f001 f985 	bl	8013670 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	889b      	ldrh	r3, [r3, #4]
 8012372:	b29b      	uxth	r3, r3
 8012374:	2b00      	cmp	r3, #0
 8012376:	d12a      	bne.n	80123ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012386:	69bb      	ldr	r3, [r7, #24]
 8012388:	6858      	ldr	r0, [r3, #4]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	3308      	adds	r3, #8
 801238e:	2214      	movs	r2, #20
 8012390:	4619      	mov	r1, r3
 8012392:	f001 f87b 	bl	801348c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012396:	2101      	movs	r1, #1
 8012398:	69b8      	ldr	r0, [r7, #24]
 801239a:	f7ff fc65 	bl	8011c68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801239e:	69b8      	ldr	r0, [r7, #24]
 80123a0:	f7f8 faa4 	bl	800a8ec <pbuf_clen>
 80123a4:	4603      	mov	r3, r0
 80123a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80123a8:	8bfa      	ldrh	r2, [r7, #30]
 80123aa:	8a7b      	ldrh	r3, [r7, #18]
 80123ac:	4413      	add	r3, r2
 80123ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123b2:	db05      	blt.n	80123c0 <ip_reass_free_complete_datagram+0x98>
 80123b4:	4b27      	ldr	r3, [pc, #156]	; (8012454 <ip_reass_free_complete_datagram+0x12c>)
 80123b6:	22bc      	movs	r2, #188	; 0xbc
 80123b8:	492a      	ldr	r1, [pc, #168]	; (8012464 <ip_reass_free_complete_datagram+0x13c>)
 80123ba:	4828      	ldr	r0, [pc, #160]	; (801245c <ip_reass_free_complete_datagram+0x134>)
 80123bc:	f001 f958 	bl	8013670 <iprintf>
    pbufs_freed += clen;
 80123c0:	8bfa      	ldrh	r2, [r7, #30]
 80123c2:	8a7b      	ldrh	r3, [r7, #18]
 80123c4:	4413      	add	r3, r2
 80123c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80123c8:	69b8      	ldr	r0, [r7, #24]
 80123ca:	f7f8 f9f5 	bl	800a7b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80123d4:	e01f      	b.n	8012416 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	617b      	str	r3, [r7, #20]
    pcur = p;
 80123dc:	69bb      	ldr	r3, [r7, #24]
 80123de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	f7f8 fa80 	bl	800a8ec <pbuf_clen>
 80123ec:	4603      	mov	r3, r0
 80123ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80123f0:	8bfa      	ldrh	r2, [r7, #30]
 80123f2:	8a7b      	ldrh	r3, [r7, #18]
 80123f4:	4413      	add	r3, r2
 80123f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123fa:	db05      	blt.n	8012408 <ip_reass_free_complete_datagram+0xe0>
 80123fc:	4b15      	ldr	r3, [pc, #84]	; (8012454 <ip_reass_free_complete_datagram+0x12c>)
 80123fe:	22cc      	movs	r2, #204	; 0xcc
 8012400:	4918      	ldr	r1, [pc, #96]	; (8012464 <ip_reass_free_complete_datagram+0x13c>)
 8012402:	4816      	ldr	r0, [pc, #88]	; (801245c <ip_reass_free_complete_datagram+0x134>)
 8012404:	f001 f934 	bl	8013670 <iprintf>
    pbufs_freed += clen;
 8012408:	8bfa      	ldrh	r2, [r7, #30]
 801240a:	8a7b      	ldrh	r3, [r7, #18]
 801240c:	4413      	add	r3, r2
 801240e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012410:	68f8      	ldr	r0, [r7, #12]
 8012412:	f7f8 f9d1 	bl	800a7b8 <pbuf_free>
  while (p != NULL) {
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1dc      	bne.n	80123d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801241c:	6839      	ldr	r1, [r7, #0]
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f8c2 	bl	80125a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8012424:	4b10      	ldr	r3, [pc, #64]	; (8012468 <ip_reass_free_complete_datagram+0x140>)
 8012426:	881b      	ldrh	r3, [r3, #0]
 8012428:	8bfa      	ldrh	r2, [r7, #30]
 801242a:	429a      	cmp	r2, r3
 801242c:	d905      	bls.n	801243a <ip_reass_free_complete_datagram+0x112>
 801242e:	4b09      	ldr	r3, [pc, #36]	; (8012454 <ip_reass_free_complete_datagram+0x12c>)
 8012430:	22d2      	movs	r2, #210	; 0xd2
 8012432:	490e      	ldr	r1, [pc, #56]	; (801246c <ip_reass_free_complete_datagram+0x144>)
 8012434:	4809      	ldr	r0, [pc, #36]	; (801245c <ip_reass_free_complete_datagram+0x134>)
 8012436:	f001 f91b 	bl	8013670 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801243a:	4b0b      	ldr	r3, [pc, #44]	; (8012468 <ip_reass_free_complete_datagram+0x140>)
 801243c:	881a      	ldrh	r2, [r3, #0]
 801243e:	8bfb      	ldrh	r3, [r7, #30]
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	b29a      	uxth	r2, r3
 8012444:	4b08      	ldr	r3, [pc, #32]	; (8012468 <ip_reass_free_complete_datagram+0x140>)
 8012446:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012448:	8bfb      	ldrh	r3, [r7, #30]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3720      	adds	r7, #32
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	08016cb8 	.word	0x08016cb8
 8012458:	08016cf4 	.word	0x08016cf4
 801245c:	08016d00 	.word	0x08016d00
 8012460:	08016d28 	.word	0x08016d28
 8012464:	08016d3c 	.word	0x08016d3c
 8012468:	2000b904 	.word	0x2000b904
 801246c:	08016d5c 	.word	0x08016d5c

08012470 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b08a      	sub	sp, #40	; 0x28
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801247a:	2300      	movs	r3, #0
 801247c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801247e:	2300      	movs	r3, #0
 8012480:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012482:	2300      	movs	r3, #0
 8012484:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012486:	2300      	movs	r3, #0
 8012488:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801248e:	4b28      	ldr	r3, [pc, #160]	; (8012530 <ip_reass_remove_oldest_datagram+0xc0>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012494:	e030      	b.n	80124f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	695a      	ldr	r2, [r3, #20]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d10c      	bne.n	80124bc <ip_reass_remove_oldest_datagram+0x4c>
 80124a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a4:	699a      	ldr	r2, [r3, #24]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	691b      	ldr	r3, [r3, #16]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d106      	bne.n	80124bc <ip_reass_remove_oldest_datagram+0x4c>
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	899a      	ldrh	r2, [r3, #12]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	889b      	ldrh	r3, [r3, #4]
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d014      	beq.n	80124e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	3301      	adds	r3, #1
 80124c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d104      	bne.n	80124d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80124c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	61bb      	str	r3, [r7, #24]
 80124d0:	e009      	b.n	80124e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80124d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d4:	7fda      	ldrb	r2, [r3, #31]
 80124d6:	6a3b      	ldr	r3, [r7, #32]
 80124d8:	7fdb      	ldrb	r3, [r3, #31]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d803      	bhi.n	80124e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80124e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80124f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80124f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1cb      	bne.n	8012496 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80124fe:	6a3b      	ldr	r3, [r7, #32]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d008      	beq.n	8012516 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012504:	69b9      	ldr	r1, [r7, #24]
 8012506:	6a38      	ldr	r0, [r7, #32]
 8012508:	f7ff ff0e 	bl	8012328 <ip_reass_free_complete_datagram>
 801250c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801250e:	697a      	ldr	r2, [r7, #20]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	4413      	add	r3, r2
 8012514:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012516:	697a      	ldr	r2, [r7, #20]
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	429a      	cmp	r2, r3
 801251c:	da02      	bge.n	8012524 <ip_reass_remove_oldest_datagram+0xb4>
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	2b01      	cmp	r3, #1
 8012522:	dcac      	bgt.n	801247e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012524:	697b      	ldr	r3, [r7, #20]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3728      	adds	r7, #40	; 0x28
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	2000b900 	.word	0x2000b900

08012534 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801253e:	2004      	movs	r0, #4
 8012540:	f7f7 fb2e 	bl	8009ba0 <memp_malloc>
 8012544:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d110      	bne.n	801256e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801254c:	6839      	ldr	r1, [r7, #0]
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff ff8e 	bl	8012470 <ip_reass_remove_oldest_datagram>
 8012554:	4602      	mov	r2, r0
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	4293      	cmp	r3, r2
 801255a:	dc03      	bgt.n	8012564 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801255c:	2004      	movs	r0, #4
 801255e:	f7f7 fb1f 	bl	8009ba0 <memp_malloc>
 8012562:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d101      	bne.n	801256e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801256a:	2300      	movs	r3, #0
 801256c:	e016      	b.n	801259c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801256e:	2220      	movs	r2, #32
 8012570:	2100      	movs	r1, #0
 8012572:	68f8      	ldr	r0, [r7, #12]
 8012574:	f000 ff98 	bl	80134a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2203      	movs	r2, #3
 801257c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801257e:	4b09      	ldr	r3, [pc, #36]	; (80125a4 <ip_reass_enqueue_new_datagram+0x70>)
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012586:	4a07      	ldr	r2, [pc, #28]	; (80125a4 <ip_reass_enqueue_new_datagram+0x70>)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	3308      	adds	r3, #8
 8012590:	2214      	movs	r2, #20
 8012592:	6879      	ldr	r1, [r7, #4]
 8012594:	4618      	mov	r0, r3
 8012596:	f000 ff79 	bl	801348c <memcpy>
  return ipr;
 801259a:	68fb      	ldr	r3, [r7, #12]
}
 801259c:	4618      	mov	r0, r3
 801259e:	3710      	adds	r7, #16
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	2000b900 	.word	0x2000b900

080125a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80125b2:	4b10      	ldr	r3, [pc, #64]	; (80125f4 <ip_reass_dequeue_datagram+0x4c>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d104      	bne.n	80125c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4a0c      	ldr	r2, [pc, #48]	; (80125f4 <ip_reass_dequeue_datagram+0x4c>)
 80125c2:	6013      	str	r3, [r2, #0]
 80125c4:	e00d      	b.n	80125e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d106      	bne.n	80125da <ip_reass_dequeue_datagram+0x32>
 80125cc:	4b0a      	ldr	r3, [pc, #40]	; (80125f8 <ip_reass_dequeue_datagram+0x50>)
 80125ce:	f240 1245 	movw	r2, #325	; 0x145
 80125d2:	490a      	ldr	r1, [pc, #40]	; (80125fc <ip_reass_dequeue_datagram+0x54>)
 80125d4:	480a      	ldr	r0, [pc, #40]	; (8012600 <ip_reass_dequeue_datagram+0x58>)
 80125d6:	f001 f84b 	bl	8013670 <iprintf>
    prev->next = ipr->next;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80125e2:	6879      	ldr	r1, [r7, #4]
 80125e4:	2004      	movs	r0, #4
 80125e6:	f7f7 fb2d 	bl	8009c44 <memp_free>
}
 80125ea:	bf00      	nop
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	2000b900 	.word	0x2000b900
 80125f8:	08016cb8 	.word	0x08016cb8
 80125fc:	08016d78 	.word	0x08016d78
 8012600:	08016d00 	.word	0x08016d00

08012604 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08c      	sub	sp, #48	; 0x30
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8012610:	2300      	movs	r3, #0
 8012612:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012614:	2301      	movs	r3, #1
 8012616:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	885b      	ldrh	r3, [r3, #2]
 8012622:	b29b      	uxth	r3, r3
 8012624:	4618      	mov	r0, r3
 8012626:	f7f6 fecf 	bl	80093c8 <lwip_htons>
 801262a:	4603      	mov	r3, r0
 801262c:	461a      	mov	r2, r3
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	b29b      	uxth	r3, r3
 8012634:	f003 030f 	and.w	r3, r3, #15
 8012638:	b29b      	uxth	r3, r3
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	b29b      	uxth	r3, r3
 801263e:	1ad3      	subs	r3, r2, r3
 8012640:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	88db      	ldrh	r3, [r3, #6]
 8012646:	b29b      	uxth	r3, r3
 8012648:	4618      	mov	r0, r3
 801264a:	f7f6 febd 	bl	80093c8 <lwip_htons>
 801264e:	4603      	mov	r3, r0
 8012650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012654:	b29b      	uxth	r3, r3
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012662:	2200      	movs	r2, #0
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	2200      	movs	r2, #0
 8012668:	705a      	strb	r2, [r3, #1]
 801266a:	2200      	movs	r2, #0
 801266c:	709a      	strb	r2, [r3, #2]
 801266e:	2200      	movs	r2, #0
 8012670:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012674:	8b3a      	ldrh	r2, [r7, #24]
 8012676:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8012678:	8b3a      	ldrh	r2, [r7, #24]
 801267a:	8b7b      	ldrh	r3, [r7, #26]
 801267c:	4413      	add	r3, r2
 801267e:	b29a      	uxth	r2, r3
 8012680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012682:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	627b      	str	r3, [r7, #36]	; 0x24
 801268a:	e061      	b.n	8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8012692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012694:	889b      	ldrh	r3, [r3, #4]
 8012696:	b29a      	uxth	r2, r3
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	889b      	ldrh	r3, [r3, #4]
 801269c:	b29b      	uxth	r3, r3
 801269e:	429a      	cmp	r2, r3
 80126a0:	d232      	bcs.n	8012708 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80126a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126a6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80126a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d01f      	beq.n	80126ee <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	889b      	ldrh	r3, [r3, #4]
 80126b2:	b29a      	uxth	r2, r3
 80126b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b6:	88db      	ldrh	r3, [r3, #6]
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	429a      	cmp	r2, r3
 80126bc:	f0c0 80e3 	bcc.w	8012886 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80126c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c2:	88db      	ldrh	r3, [r3, #6]
 80126c4:	b29a      	uxth	r2, r3
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	889b      	ldrh	r3, [r3, #4]
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	429a      	cmp	r2, r3
 80126ce:	f200 80da 	bhi.w	8012886 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	68ba      	ldr	r2, [r7, #8]
 80126d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80126d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126da:	88db      	ldrh	r3, [r3, #6]
 80126dc:	b29a      	uxth	r2, r3
 80126de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e0:	889b      	ldrh	r3, [r3, #4]
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d037      	beq.n	8012758 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80126ec:	e034      	b.n	8012758 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80126ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f0:	88db      	ldrh	r3, [r3, #6]
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	889b      	ldrh	r3, [r3, #4]
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	429a      	cmp	r2, r3
 80126fc:	f200 80c5 	bhi.w	801288a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	605a      	str	r2, [r3, #4]
      break;
 8012706:	e027      	b.n	8012758 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8012708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270a:	889b      	ldrh	r3, [r3, #4]
 801270c:	b29a      	uxth	r2, r3
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	889b      	ldrh	r3, [r3, #4]
 8012712:	b29b      	uxth	r3, r3
 8012714:	429a      	cmp	r2, r3
 8012716:	f000 80ba 	beq.w	801288e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	889b      	ldrh	r3, [r3, #4]
 801271e:	b29a      	uxth	r2, r3
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	88db      	ldrh	r3, [r3, #6]
 8012724:	b29b      	uxth	r3, r3
 8012726:	429a      	cmp	r2, r3
 8012728:	f0c0 80b3 	bcc.w	8012892 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272e:	2b00      	cmp	r3, #0
 8012730:	d009      	beq.n	8012746 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8012732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012734:	88db      	ldrh	r3, [r3, #6]
 8012736:	b29a      	uxth	r2, r3
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	889b      	ldrh	r3, [r3, #4]
 801273c:	b29b      	uxth	r3, r3
 801273e:	429a      	cmp	r2, r3
 8012740:	d001      	beq.n	8012746 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012742:	2300      	movs	r3, #0
 8012744:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012752:	2b00      	cmp	r3, #0
 8012754:	d19a      	bne.n	801268c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8012756:	e000      	b.n	801275a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8012758:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275c:	2b00      	cmp	r3, #0
 801275e:	d12d      	bne.n	80127bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	2b00      	cmp	r3, #0
 8012764:	d01c      	beq.n	80127a0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012768:	88db      	ldrh	r3, [r3, #6]
 801276a:	b29a      	uxth	r2, r3
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	889b      	ldrh	r3, [r3, #4]
 8012770:	b29b      	uxth	r3, r3
 8012772:	429a      	cmp	r2, r3
 8012774:	d906      	bls.n	8012784 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8012776:	4b51      	ldr	r3, [pc, #324]	; (80128bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012778:	f240 12ab 	movw	r2, #427	; 0x1ab
 801277c:	4950      	ldr	r1, [pc, #320]	; (80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801277e:	4851      	ldr	r0, [pc, #324]	; (80128c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012780:	f000 ff76 	bl	8013670 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012786:	68ba      	ldr	r2, [r7, #8]
 8012788:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278c:	88db      	ldrh	r3, [r3, #6]
 801278e:	b29a      	uxth	r2, r3
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	889b      	ldrh	r3, [r3, #4]
 8012794:	b29b      	uxth	r3, r3
 8012796:	429a      	cmp	r2, r3
 8012798:	d010      	beq.n	80127bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801279a:	2300      	movs	r3, #0
 801279c:	623b      	str	r3, [r7, #32]
 801279e:	e00d      	b.n	80127bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d006      	beq.n	80127b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80127a8:	4b44      	ldr	r3, [pc, #272]	; (80128bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80127aa:	f240 12b3 	movw	r2, #435	; 0x1b3
 80127ae:	4946      	ldr	r1, [pc, #280]	; (80128c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80127b0:	4844      	ldr	r0, [pc, #272]	; (80128c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80127b2:	f000 ff5d 	bl	8013670 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d105      	bne.n	80127ce <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	7f9b      	ldrb	r3, [r3, #30]
 80127c6:	f003 0301 	and.w	r3, r3, #1
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d059      	beq.n	8012882 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80127ce:	6a3b      	ldr	r3, [r7, #32]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d04f      	beq.n	8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d006      	beq.n	80127ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	889b      	ldrh	r3, [r3, #4]
 80127e4:	b29b      	uxth	r3, r3
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d002      	beq.n	80127f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	623b      	str	r3, [r7, #32]
 80127ee:	e041      	b.n	8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80127fa:	e012      	b.n	8012822 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012804:	88db      	ldrh	r3, [r3, #6]
 8012806:	b29a      	uxth	r2, r3
 8012808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280a:	889b      	ldrh	r3, [r3, #4]
 801280c:	b29b      	uxth	r3, r3
 801280e:	429a      	cmp	r2, r3
 8012810:	d002      	beq.n	8012818 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8012812:	2300      	movs	r3, #0
 8012814:	623b      	str	r3, [r7, #32]
            break;
 8012816:	e007      	b.n	8012828 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8012818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012824:	2b00      	cmp	r3, #0
 8012826:	d1e9      	bne.n	80127fc <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012828:	6a3b      	ldr	r3, [r7, #32]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d022      	beq.n	8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d106      	bne.n	8012844 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8012836:	4b21      	ldr	r3, [pc, #132]	; (80128bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012838:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801283c:	4923      	ldr	r1, [pc, #140]	; (80128cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801283e:	4821      	ldr	r0, [pc, #132]	; (80128c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012840:	f000 ff16 	bl	8013670 <iprintf>
          LWIP_ASSERT("sanity check",
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801284c:	429a      	cmp	r2, r3
 801284e:	d106      	bne.n	801285e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8012850:	4b1a      	ldr	r3, [pc, #104]	; (80128bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012852:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012856:	491d      	ldr	r1, [pc, #116]	; (80128cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012858:	481a      	ldr	r0, [pc, #104]	; (80128c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801285a:	f000 ff09 	bl	8013670 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d006      	beq.n	8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8012866:	4b15      	ldr	r3, [pc, #84]	; (80128bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012868:	f240 12d7 	movw	r2, #471	; 0x1d7
 801286c:	4918      	ldr	r1, [pc, #96]	; (80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801286e:	4815      	ldr	r0, [pc, #84]	; (80128c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012870:	f000 fefe 	bl	8013670 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012874:	6a3b      	ldr	r3, [r7, #32]
 8012876:	2b00      	cmp	r3, #0
 8012878:	bf14      	ite	ne
 801287a:	2301      	movne	r3, #1
 801287c:	2300      	moveq	r3, #0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	e018      	b.n	80128b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012882:	2300      	movs	r3, #0
 8012884:	e016      	b.n	80128b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8012886:	bf00      	nop
 8012888:	e004      	b.n	8012894 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801288a:	bf00      	nop
 801288c:	e002      	b.n	8012894 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801288e:	bf00      	nop
 8012890:	e000      	b.n	8012894 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012892:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8012894:	68b8      	ldr	r0, [r7, #8]
 8012896:	f7f8 f829 	bl	800a8ec <pbuf_clen>
 801289a:	4603      	mov	r3, r0
 801289c:	461a      	mov	r2, r3
 801289e:	4b0d      	ldr	r3, [pc, #52]	; (80128d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80128a0:	881b      	ldrh	r3, [r3, #0]
 80128a2:	1a9b      	subs	r3, r3, r2
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	4b0b      	ldr	r3, [pc, #44]	; (80128d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80128a8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80128aa:	68b8      	ldr	r0, [r7, #8]
 80128ac:	f7f7 ff84 	bl	800a7b8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128b0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3730      	adds	r7, #48	; 0x30
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	08016cb8 	.word	0x08016cb8
 80128c0:	08016d94 	.word	0x08016d94
 80128c4:	08016d00 	.word	0x08016d00
 80128c8:	08016db4 	.word	0x08016db4
 80128cc:	08016dec 	.word	0x08016dec
 80128d0:	08016dfc 	.word	0x08016dfc
 80128d4:	2000b904 	.word	0x2000b904

080128d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b08e      	sub	sp, #56	; 0x38
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80128e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	f003 030f 	and.w	r3, r3, #15
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	2b14      	cmp	r3, #20
 80128f2:	f040 8131 	bne.w	8012b58 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80128f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f8:	88db      	ldrh	r3, [r3, #6]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f6 fd63 	bl	80093c8 <lwip_htons>
 8012902:	4603      	mov	r3, r0
 8012904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012908:	b29b      	uxth	r3, r3
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012910:	885b      	ldrh	r3, [r3, #2]
 8012912:	b29b      	uxth	r3, r3
 8012914:	4618      	mov	r0, r3
 8012916:	f7f6 fd57 	bl	80093c8 <lwip_htons>
 801291a:	4603      	mov	r3, r0
 801291c:	461a      	mov	r2, r3
 801291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	b29b      	uxth	r3, r3
 8012924:	f003 030f 	and.w	r3, r3, #15
 8012928:	b29b      	uxth	r3, r3
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	b29b      	uxth	r3, r3
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7f7 ffda 	bl	800a8ec <pbuf_clen>
 8012938:	4603      	mov	r3, r0
 801293a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801293c:	4b8e      	ldr	r3, [pc, #568]	; (8012b78 <ip4_reass+0x2a0>)
 801293e:	881b      	ldrh	r3, [r3, #0]
 8012940:	461a      	mov	r2, r3
 8012942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012944:	4413      	add	r3, r2
 8012946:	2b0a      	cmp	r3, #10
 8012948:	dd10      	ble.n	801296c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801294a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801294c:	4619      	mov	r1, r3
 801294e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012950:	f7ff fd8e 	bl	8012470 <ip_reass_remove_oldest_datagram>
 8012954:	4603      	mov	r3, r0
 8012956:	2b00      	cmp	r3, #0
 8012958:	f000 8100 	beq.w	8012b5c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801295c:	4b86      	ldr	r3, [pc, #536]	; (8012b78 <ip4_reass+0x2a0>)
 801295e:	881b      	ldrh	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
 8012962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012964:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012966:	2b0a      	cmp	r3, #10
 8012968:	f300 80f8 	bgt.w	8012b5c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801296c:	4b83      	ldr	r3, [pc, #524]	; (8012b7c <ip4_reass+0x2a4>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	633b      	str	r3, [r7, #48]	; 0x30
 8012972:	e015      	b.n	80129a0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012976:	695a      	ldr	r2, [r3, #20]
 8012978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	429a      	cmp	r2, r3
 801297e:	d10c      	bne.n	801299a <ip4_reass+0xc2>
 8012980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012982:	699a      	ldr	r2, [r3, #24]
 8012984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012986:	691b      	ldr	r3, [r3, #16]
 8012988:	429a      	cmp	r2, r3
 801298a:	d106      	bne.n	801299a <ip4_reass+0xc2>
 801298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298e:	899a      	ldrh	r2, [r3, #12]
 8012990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012992:	889b      	ldrh	r3, [r3, #4]
 8012994:	b29b      	uxth	r3, r3
 8012996:	429a      	cmp	r2, r3
 8012998:	d006      	beq.n	80129a8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	633b      	str	r3, [r7, #48]	; 0x30
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d1e6      	bne.n	8012974 <ip4_reass+0x9c>
 80129a6:	e000      	b.n	80129aa <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80129a8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80129aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d109      	bne.n	80129c4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80129b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129b2:	4619      	mov	r1, r3
 80129b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129b6:	f7ff fdbd 	bl	8012534 <ip_reass_enqueue_new_datagram>
 80129ba:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80129bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d11c      	bne.n	80129fc <ip4_reass+0x124>
      goto nullreturn;
 80129c2:	e0d0      	b.n	8012b66 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80129c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c6:	88db      	ldrh	r3, [r3, #6]
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7f6 fcfc 	bl	80093c8 <lwip_htons>
 80129d0:	4603      	mov	r3, r0
 80129d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d110      	bne.n	80129fc <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80129da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129dc:	89db      	ldrh	r3, [r3, #14]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f6 fcf2 	bl	80093c8 <lwip_htons>
 80129e4:	4603      	mov	r3, r0
 80129e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d006      	beq.n	80129fc <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80129ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f0:	3308      	adds	r3, #8
 80129f2:	2214      	movs	r2, #20
 80129f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129f6:	4618      	mov	r0, r3
 80129f8:	f000 fd48 	bl	801348c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80129fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fe:	88db      	ldrh	r3, [r3, #6]
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	f003 0320 	and.w	r3, r3, #32
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	bf0c      	ite	eq
 8012a0a:	2301      	moveq	r3, #1
 8012a0c:	2300      	movne	r3, #0
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d00e      	beq.n	8012a36 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8012a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a1c:	4413      	add	r3, r2
 8012a1e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012a20:	8b7a      	ldrh	r2, [r7, #26]
 8012a22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a24:	429a      	cmp	r2, r3
 8012a26:	f0c0 809b 	bcc.w	8012b60 <ip4_reass+0x288>
 8012a2a:	8b7b      	ldrh	r3, [r7, #26]
 8012a2c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012a30:	4293      	cmp	r3, r2
 8012a32:	f200 8095 	bhi.w	8012b60 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012a36:	69fa      	ldr	r2, [r7, #28]
 8012a38:	6879      	ldr	r1, [r7, #4]
 8012a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a3c:	f7ff fde2 	bl	8012604 <ip_reass_chain_frag_into_datagram_and_validate>
 8012a40:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a48:	f000 808c 	beq.w	8012b64 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012a4c:	4b4a      	ldr	r3, [pc, #296]	; (8012b78 <ip4_reass+0x2a0>)
 8012a4e:	881a      	ldrh	r2, [r3, #0]
 8012a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a52:	4413      	add	r3, r2
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	4b48      	ldr	r3, [pc, #288]	; (8012b78 <ip4_reass+0x2a0>)
 8012a58:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d00d      	beq.n	8012a7c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8012a60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a64:	4413      	add	r3, r2
 8012a66:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6a:	8a7a      	ldrh	r2, [r7, #18]
 8012a6c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a70:	7f9b      	ldrb	r3, [r3, #30]
 8012a72:	f043 0301 	orr.w	r3, r3, #1
 8012a76:	b2da      	uxtb	r2, r3
 8012a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d168      	bne.n	8012b54 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8012a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a84:	8b9b      	ldrh	r3, [r3, #28]
 8012a86:	3314      	adds	r3, #20
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8012a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa2:	3308      	adds	r3, #8
 8012aa4:	2214      	movs	r2, #20
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aaa:	f000 fcef 	bl	801348c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8012aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab0:	8b9b      	ldrh	r3, [r3, #28]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7f6 fc88 	bl	80093c8 <lwip_htons>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	461a      	mov	r2, r3
 8012abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	719a      	strb	r2, [r3, #6]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012acc:	2200      	movs	r2, #0
 8012ace:	729a      	strb	r2, [r3, #10]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012ada:	e00e      	b.n	8012afa <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8012adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012ae2:	f06f 0113 	mvn.w	r1, #19
 8012ae6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012ae8:	f7f7 fe42 	bl	800a770 <pbuf_header>
      pbuf_cat(p, r);
 8012aec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7f7 ff3a 	bl	800a968 <pbuf_cat>
      r = iprh->next_pbuf;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1ed      	bne.n	8012adc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012b00:	4b1e      	ldr	r3, [pc, #120]	; (8012b7c <ip4_reass+0x2a4>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d102      	bne.n	8012b10 <ip4_reass+0x238>
      ipr_prev = NULL;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b0e:	e010      	b.n	8012b32 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b10:	4b1a      	ldr	r3, [pc, #104]	; (8012b7c <ip4_reass+0x2a4>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b16:	e007      	b.n	8012b28 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8012b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d006      	beq.n	8012b30 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d1f4      	bne.n	8012b18 <ip4_reass+0x240>
 8012b2e:	e000      	b.n	8012b32 <ip4_reass+0x25a>
          break;
 8012b30:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b36:	f7ff fd37 	bl	80125a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7f7 fed6 	bl	800a8ec <pbuf_clen>
 8012b40:	4603      	mov	r3, r0
 8012b42:	461a      	mov	r2, r3
 8012b44:	4b0c      	ldr	r3, [pc, #48]	; (8012b78 <ip4_reass+0x2a0>)
 8012b46:	881b      	ldrh	r3, [r3, #0]
 8012b48:	1a9b      	subs	r3, r3, r2
 8012b4a:	b29a      	uxth	r2, r3
 8012b4c:	4b0a      	ldr	r3, [pc, #40]	; (8012b78 <ip4_reass+0x2a0>)
 8012b4e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	e00c      	b.n	8012b6e <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012b54:	2300      	movs	r3, #0
 8012b56:	e00a      	b.n	8012b6e <ip4_reass+0x296>
    goto nullreturn;
 8012b58:	bf00      	nop
 8012b5a:	e004      	b.n	8012b66 <ip4_reass+0x28e>
      goto nullreturn;
 8012b5c:	bf00      	nop
 8012b5e:	e002      	b.n	8012b66 <ip4_reass+0x28e>
      goto nullreturn;
 8012b60:	bf00      	nop
 8012b62:	e000      	b.n	8012b66 <ip4_reass+0x28e>
    goto nullreturn;
 8012b64:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7f7 fe26 	bl	800a7b8 <pbuf_free>
  return NULL;
 8012b6c:	2300      	movs	r3, #0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3738      	adds	r7, #56	; 0x38
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	2000b904 	.word	0x2000b904
 8012b7c:	2000b900 	.word	0x2000b900

08012b80 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8012b84:	2005      	movs	r0, #5
 8012b86:	f7f7 f80b 	bl	8009ba0 <memp_malloc>
 8012b8a:	4603      	mov	r3, r0
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d106      	bne.n	8012bac <ip_frag_free_pbuf_custom_ref+0x1c>
 8012b9e:	4b07      	ldr	r3, [pc, #28]	; (8012bbc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012ba0:	f240 22ae 	movw	r2, #686	; 0x2ae
 8012ba4:	4906      	ldr	r1, [pc, #24]	; (8012bc0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012ba6:	4807      	ldr	r0, [pc, #28]	; (8012bc4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012ba8:	f000 fd62 	bl	8013670 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012bac:	6879      	ldr	r1, [r7, #4]
 8012bae:	2005      	movs	r0, #5
 8012bb0:	f7f7 f848 	bl	8009c44 <memp_free>
}
 8012bb4:	bf00      	nop
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	08016cb8 	.word	0x08016cb8
 8012bc0:	08016e20 	.word	0x08016e20
 8012bc4:	08016d00 	.word	0x08016d00

08012bc8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d106      	bne.n	8012be8 <ipfrag_free_pbuf_custom+0x20>
 8012bda:	4b11      	ldr	r3, [pc, #68]	; (8012c20 <ipfrag_free_pbuf_custom+0x58>)
 8012bdc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8012be0:	4910      	ldr	r1, [pc, #64]	; (8012c24 <ipfrag_free_pbuf_custom+0x5c>)
 8012be2:	4811      	ldr	r0, [pc, #68]	; (8012c28 <ipfrag_free_pbuf_custom+0x60>)
 8012be4:	f000 fd44 	bl	8013670 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d006      	beq.n	8012bfe <ipfrag_free_pbuf_custom+0x36>
 8012bf0:	4b0b      	ldr	r3, [pc, #44]	; (8012c20 <ipfrag_free_pbuf_custom+0x58>)
 8012bf2:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012bf6:	490d      	ldr	r1, [pc, #52]	; (8012c2c <ipfrag_free_pbuf_custom+0x64>)
 8012bf8:	480b      	ldr	r0, [pc, #44]	; (8012c28 <ipfrag_free_pbuf_custom+0x60>)
 8012bfa:	f000 fd39 	bl	8013670 <iprintf>
  if (pcr->original != NULL) {
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	695b      	ldr	r3, [r3, #20]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d004      	beq.n	8012c10 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	695b      	ldr	r3, [r3, #20]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7f7 fdd4 	bl	800a7b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012c10:	68f8      	ldr	r0, [r7, #12]
 8012c12:	f7ff ffbd 	bl	8012b90 <ip_frag_free_pbuf_custom_ref>
}
 8012c16:	bf00      	nop
 8012c18:	3710      	adds	r7, #16
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	08016cb8 	.word	0x08016cb8
 8012c24:	08016e2c 	.word	0x08016e2c
 8012c28:	08016d00 	.word	0x08016d00
 8012c2c:	08016e38 	.word	0x08016e38

08012c30 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b092      	sub	sp, #72	; 0x48
 8012c34:	af02      	add	r7, sp, #8
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012c44:	3b14      	subs	r3, #20
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	da00      	bge.n	8012c4c <ip4_frag+0x1c>
 8012c4a:	3307      	adds	r3, #7
 8012c4c:	10db      	asrs	r3, r3, #3
 8012c4e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012c50:	2314      	movs	r3, #20
 8012c52:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8012c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8012c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	f003 030f 	and.w	r3, r3, #15
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	2b14      	cmp	r3, #20
 8012c6a:	d009      	beq.n	8012c80 <ip4_frag+0x50>
 8012c6c:	4b7a      	ldr	r3, [pc, #488]	; (8012e58 <ip4_frag+0x228>)
 8012c6e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012c72:	497a      	ldr	r1, [pc, #488]	; (8012e5c <ip4_frag+0x22c>)
 8012c74:	487a      	ldr	r0, [pc, #488]	; (8012e60 <ip4_frag+0x230>)
 8012c76:	f000 fcfb 	bl	8013670 <iprintf>
 8012c7a:	f06f 0305 	mvn.w	r3, #5
 8012c7e:	e0e6      	b.n	8012e4e <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c82:	88db      	ldrh	r3, [r3, #6]
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7f6 fb9e 	bl	80093c8 <lwip_htons>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8012c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c96:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8012c98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d009      	beq.n	8012cb6 <ip4_frag+0x86>
 8012ca2:	4b6d      	ldr	r3, [pc, #436]	; (8012e58 <ip4_frag+0x228>)
 8012ca4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012ca8:	496e      	ldr	r1, [pc, #440]	; (8012e64 <ip4_frag+0x234>)
 8012caa:	486d      	ldr	r0, [pc, #436]	; (8012e60 <ip4_frag+0x230>)
 8012cac:	f000 fce0 	bl	8013670 <iprintf>
 8012cb0:	f06f 0305 	mvn.w	r3, #5
 8012cb4:	e0cb      	b.n	8012e4e <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	891b      	ldrh	r3, [r3, #8]
 8012cba:	3b14      	subs	r3, #20
 8012cbc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8012cbe:	e0bd      	b.n	8012e3c <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8012cc0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012cc2:	00da      	lsls	r2, r3, #3
 8012cc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	bfa8      	it	ge
 8012cca:	4613      	movge	r3, r2
 8012ccc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012cce:	2200      	movs	r2, #0
 8012cd0:	2114      	movs	r1, #20
 8012cd2:	2002      	movs	r0, #2
 8012cd4:	f7f7 f9f8 	bl	800a0c8 <pbuf_alloc>
 8012cd8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8012cda:	6a3b      	ldr	r3, [r7, #32]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f000 80b3 	beq.w	8012e48 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	895b      	ldrh	r3, [r3, #10]
 8012ce6:	2b13      	cmp	r3, #19
 8012ce8:	d806      	bhi.n	8012cf8 <ip4_frag+0xc8>
 8012cea:	4b5b      	ldr	r3, [pc, #364]	; (8012e58 <ip4_frag+0x228>)
 8012cec:	f44f 7242 	mov.w	r2, #776	; 0x308
 8012cf0:	495d      	ldr	r1, [pc, #372]	; (8012e68 <ip4_frag+0x238>)
 8012cf2:	485b      	ldr	r0, [pc, #364]	; (8012e60 <ip4_frag+0x230>)
 8012cf4:	f000 fcbc 	bl	8013670 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012cf8:	6a3b      	ldr	r3, [r7, #32]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	2214      	movs	r2, #20
 8012cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d00:	4618      	mov	r0, r3
 8012d02:	f000 fbc3 	bl	801348c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012d06:	6a3b      	ldr	r3, [r7, #32]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8012d0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8012d10:	e04f      	b.n	8012db2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	895a      	ldrh	r2, [r3, #10]
 8012d16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d18:	1ad3      	subs	r3, r2, r3
 8012d1a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012d1c:	8b7a      	ldrh	r2, [r7, #26]
 8012d1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d20:	4293      	cmp	r3, r2
 8012d22:	bf28      	it	cs
 8012d24:	4613      	movcs	r3, r2
 8012d26:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012d28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d105      	bne.n	8012d3a <ip4_frag+0x10a>
        poff = 0;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	60fb      	str	r3, [r7, #12]
        continue;
 8012d38:	e03b      	b.n	8012db2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012d3a:	f7ff ff21 	bl	8012b80 <ip_frag_alloc_pbuf_custom_ref>
 8012d3e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d103      	bne.n	8012d4e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8012d46:	6a38      	ldr	r0, [r7, #32]
 8012d48:	f7f7 fd36 	bl	800a7b8 <pbuf_free>
        goto memerr;
 8012d4c:	e07d      	b.n	8012e4a <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012d4e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012d54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d56:	4413      	add	r3, r2
 8012d58:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8012d5a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d5c:	9201      	str	r2, [sp, #4]
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	4603      	mov	r3, r0
 8012d62:	2202      	movs	r2, #2
 8012d64:	2004      	movs	r0, #4
 8012d66:	f7f7 fb49 	bl	800a3fc <pbuf_alloced_custom>
 8012d6a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012d72:	6978      	ldr	r0, [r7, #20]
 8012d74:	f7ff ff0c 	bl	8012b90 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012d78:	6a38      	ldr	r0, [r7, #32]
 8012d7a:	f7f7 fd1d 	bl	800a7b8 <pbuf_free>
        goto memerr;
 8012d7e:	e064      	b.n	8012e4a <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 8012d80:	68f8      	ldr	r0, [r7, #12]
 8012d82:	f7f7 fdc9 	bl	800a918 <pbuf_ref>
      pcr->original = p;
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	4a37      	ldr	r2, [pc, #220]	; (8012e6c <ip4_frag+0x23c>)
 8012d90:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012d92:	6939      	ldr	r1, [r7, #16]
 8012d94:	6a38      	ldr	r0, [r7, #32]
 8012d96:	f7f7 fde7 	bl	800a968 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8012d9a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012d9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8012da2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d004      	beq.n	8012db2 <ip4_frag+0x182>
        poff = 0;
 8012da8:	2300      	movs	r3, #0
 8012daa:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012db2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1ac      	bne.n	8012d12 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8012db8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012dba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dbc:	4413      	add	r3, r2
 8012dbe:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012dc4:	f1a3 0213 	sub.w	r2, r3, #19
 8012dc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	bfcc      	ite	gt
 8012dce:	2301      	movgt	r3, #1
 8012dd0:	2300      	movle	r3, #0
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012dd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ddc:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d103      	bne.n	8012dec <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 8012de4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012de6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012dea:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012dec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f6 faea 	bl	80093c8 <lwip_htons>
 8012df4:	4603      	mov	r3, r0
 8012df6:	461a      	mov	r2, r3
 8012df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfa:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8012dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012dfe:	3314      	adds	r3, #20
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7f6 fae0 	bl	80093c8 <lwip_htons>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e12:	2200      	movs	r2, #0
 8012e14:	729a      	strb	r2, [r3, #10]
 8012e16:	2200      	movs	r2, #0
 8012e18:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	695b      	ldr	r3, [r3, #20]
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	6a39      	ldr	r1, [r7, #32]
 8012e22:	68b8      	ldr	r0, [r7, #8]
 8012e24:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012e26:	6a38      	ldr	r0, [r7, #32]
 8012e28:	f7f7 fcc6 	bl	800a7b8 <pbuf_free>
    left -= fragsize;
 8012e2c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e30:	1ad3      	subs	r3, r2, r3
 8012e32:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8012e34:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012e36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012e38:	4413      	add	r3, r2
 8012e3a:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8012e3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	f47f af3e 	bne.w	8012cc0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012e44:	2300      	movs	r3, #0
 8012e46:	e002      	b.n	8012e4e <ip4_frag+0x21e>
      goto memerr;
 8012e48:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3740      	adds	r7, #64	; 0x40
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	08016cb8 	.word	0x08016cb8
 8012e5c:	08016e44 	.word	0x08016e44
 8012e60:	08016d00 	.word	0x08016d00
 8012e64:	08016e6c 	.word	0x08016e6c
 8012e68:	08016e88 	.word	0x08016e88
 8012e6c:	08012bc9 	.word	0x08012bc9

08012e70 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b086      	sub	sp, #24
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8012e7a:	230e      	movs	r3, #14
 8012e7c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	895b      	ldrh	r3, [r3, #10]
 8012e82:	2b0e      	cmp	r3, #14
 8012e84:	d977      	bls.n	8012f76 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	7b1a      	ldrb	r2, [r3, #12]
 8012e90:	7b5b      	ldrb	r3, [r3, #13]
 8012e92:	021b      	lsls	r3, r3, #8
 8012e94:	4313      	orrs	r3, r2
 8012e96:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 0301 	and.w	r3, r3, #1
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d023      	beq.n	8012eec <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d10f      	bne.n	8012ecc <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	785b      	ldrb	r3, [r3, #1]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d11b      	bne.n	8012eec <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012eb8:	2b5e      	cmp	r3, #94	; 0x5e
 8012eba:	d117      	bne.n	8012eec <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	7b5b      	ldrb	r3, [r3, #13]
 8012ec0:	f043 0310 	orr.w	r3, r3, #16
 8012ec4:	b2da      	uxtb	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	735a      	strb	r2, [r3, #13]
 8012eca:	e00f      	b.n	8012eec <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	2206      	movs	r2, #6
 8012ed0:	4931      	ldr	r1, [pc, #196]	; (8012f98 <ethernet_input+0x128>)
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 faca 	bl	801346c <memcmp>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d106      	bne.n	8012eec <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	7b5b      	ldrb	r3, [r3, #13]
 8012ee2:	f043 0308 	orr.w	r3, r3, #8
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012eec:	89fb      	ldrh	r3, [r7, #14]
 8012eee:	2b08      	cmp	r3, #8
 8012ef0:	d003      	beq.n	8012efa <ethernet_input+0x8a>
 8012ef2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012ef6:	d01e      	beq.n	8012f36 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012ef8:	e046      	b.n	8012f88 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f00:	f003 0308 	and.w	r3, r3, #8
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d038      	beq.n	8012f7a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	895b      	ldrh	r3, [r3, #10]
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	db33      	blt.n	8012f7e <ethernet_input+0x10e>
 8012f16:	8afb      	ldrh	r3, [r7, #22]
 8012f18:	425b      	negs	r3, r3
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	b21b      	sxth	r3, r3
 8012f1e:	4619      	mov	r1, r3
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f7f7 fc25 	bl	800a770 <pbuf_header>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d128      	bne.n	8012f7e <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7fe ff7c 	bl	8011e2c <ip4_input>
      break;
 8012f34:	e01d      	b.n	8012f72 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f3c:	f003 0308 	and.w	r3, r3, #8
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d01e      	beq.n	8012f82 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	895b      	ldrh	r3, [r3, #10]
 8012f48:	461a      	mov	r2, r3
 8012f4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	db19      	blt.n	8012f86 <ethernet_input+0x116>
 8012f52:	8afb      	ldrh	r3, [r7, #22]
 8012f54:	425b      	negs	r3, r3
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	b21b      	sxth	r3, r3
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7f7 fc07 	bl	800a770 <pbuf_header>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d10e      	bne.n	8012f86 <ethernet_input+0x116>
        etharp_input(p, netif);
 8012f68:	6839      	ldr	r1, [r7, #0]
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f7fe f94c 	bl	8011208 <etharp_input>
      break;
 8012f70:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012f72:	2300      	movs	r3, #0
 8012f74:	e00c      	b.n	8012f90 <ethernet_input+0x120>
    goto free_and_return;
 8012f76:	bf00      	nop
 8012f78:	e006      	b.n	8012f88 <ethernet_input+0x118>
        goto free_and_return;
 8012f7a:	bf00      	nop
 8012f7c:	e004      	b.n	8012f88 <ethernet_input+0x118>
        goto free_and_return;
 8012f7e:	bf00      	nop
 8012f80:	e002      	b.n	8012f88 <ethernet_input+0x118>
        goto free_and_return;
 8012f82:	bf00      	nop
 8012f84:	e000      	b.n	8012f88 <ethernet_input+0x118>
        goto free_and_return;
 8012f86:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f7f7 fc15 	bl	800a7b8 <pbuf_free>
  return ERR_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3718      	adds	r7, #24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	08017068 	.word	0x08017068

08012f9c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b086      	sub	sp, #24
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
 8012fa8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012faa:	8c3b      	ldrh	r3, [r7, #32]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f6 fa0b 	bl	80093c8 <lwip_htons>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012fb6:	210e      	movs	r1, #14
 8012fb8:	68b8      	ldr	r0, [r7, #8]
 8012fba:	f7f7 fbd9 	bl	800a770 <pbuf_header>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d125      	bne.n	8013010 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	8afa      	ldrh	r2, [r7, #22]
 8012fce:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2206      	movs	r2, #6
 8012fd4:	6839      	ldr	r1, [r7, #0]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f000 fa58 	bl	801348c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	3306      	adds	r3, #6
 8012fe0:	2206      	movs	r2, #6
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f000 fa51 	bl	801348c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ff0:	2b06      	cmp	r3, #6
 8012ff2:	d006      	beq.n	8013002 <ethernet_output+0x66>
 8012ff4:	4b0a      	ldr	r3, [pc, #40]	; (8013020 <ethernet_output+0x84>)
 8012ff6:	f240 122b 	movw	r2, #299	; 0x12b
 8012ffa:	490a      	ldr	r1, [pc, #40]	; (8013024 <ethernet_output+0x88>)
 8012ffc:	480a      	ldr	r0, [pc, #40]	; (8013028 <ethernet_output+0x8c>)
 8012ffe:	f000 fb37 	bl	8013670 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	699b      	ldr	r3, [r3, #24]
 8013006:	68b9      	ldr	r1, [r7, #8]
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	4798      	blx	r3
 801300c:	4603      	mov	r3, r0
 801300e:	e002      	b.n	8013016 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013010:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013012:	f06f 0301 	mvn.w	r3, #1
}
 8013016:	4618      	mov	r0, r3
 8013018:	3718      	adds	r7, #24
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	08016ea8 	.word	0x08016ea8
 8013024:	08016ee0 	.word	0x08016ee0
 8013028:	08016f14 	.word	0x08016f14

0801302c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	60bb      	str	r3, [r7, #8]
 801303a:	2304      	movs	r3, #4
 801303c:	60fb      	str	r3, [r7, #12]
 801303e:	2300      	movs	r3, #0
 8013040:	613b      	str	r3, [r7, #16]
 8013042:	2300      	movs	r3, #0
 8013044:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013046:	f107 0308 	add.w	r3, r7, #8
 801304a:	2100      	movs	r1, #0
 801304c:	4618      	mov	r0, r3
 801304e:	f7f1 fc0e 	bl	800486e <osMessageCreate>
 8013052:	4602      	mov	r2, r0
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d102      	bne.n	8013066 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013060:	f04f 33ff 	mov.w	r3, #4294967295
 8013064:	e000      	b.n	8013068 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3718      	adds	r7, #24
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4618      	mov	r0, r3
 801307e:	f7f1 fcd3 	bl	8004a28 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4618      	mov	r0, r3
 8013088:	f7f1 fce4 	bl	8004a54 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801308c:	bf00      	nop
 801308e:	3708      	adds	r7, #8
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801309e:	bf00      	nop
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	6839      	ldr	r1, [r7, #0]
 80130a6:	f04f 32ff 	mov.w	r2, #4294967295
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7f1 fc08 	bl	80048c0 <osMessagePut>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d1f4      	bne.n	80130a0 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80130b6:	bf00      	nop
 80130b8:	bf00      	nop
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	6839      	ldr	r1, [r7, #0]
 80130d0:	2200      	movs	r2, #0
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7f1 fbf4 	bl	80048c0 <osMessagePut>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d102      	bne.n	80130e4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80130de:	2300      	movs	r3, #0
 80130e0:	73fb      	strb	r3, [r7, #15]
 80130e2:	e001      	b.n	80130e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80130e4:	23ff      	movs	r3, #255	; 0xff
 80130e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80130e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b08c      	sub	sp, #48	; 0x30
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	61f8      	str	r0, [r7, #28]
 80130fc:	61b9      	str	r1, [r7, #24]
 80130fe:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013100:	f7f1 f9e0 	bl	80044c4 <osKernelSysTick>
 8013104:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d017      	beq.n	801313c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	6819      	ldr	r1, [r3, #0]
 8013110:	f107 0320 	add.w	r3, r7, #32
 8013114:	697a      	ldr	r2, [r7, #20]
 8013116:	4618      	mov	r0, r3
 8013118:	f7f1 fc12 	bl	8004940 <osMessageGet>

    if(event.status == osEventMessage)
 801311c:	6a3b      	ldr	r3, [r7, #32]
 801311e:	2b10      	cmp	r3, #16
 8013120:	d109      	bne.n	8013136 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013124:	461a      	mov	r2, r3
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801312a:	f7f1 f9cb 	bl	80044c4 <osKernelSysTick>
 801312e:	4602      	mov	r2, r0
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	e019      	b.n	801316a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013136:	f04f 33ff 	mov.w	r3, #4294967295
 801313a:	e016      	b.n	801316a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	6819      	ldr	r1, [r3, #0]
 8013140:	463b      	mov	r3, r7
 8013142:	f04f 32ff 	mov.w	r2, #4294967295
 8013146:	4618      	mov	r0, r3
 8013148:	f7f1 fbfa 	bl	8004940 <osMessageGet>
 801314c:	f107 0320 	add.w	r3, r7, #32
 8013150:	463a      	mov	r2, r7
 8013152:	ca07      	ldmia	r2, {r0, r1, r2}
 8013154:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	461a      	mov	r2, r3
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013160:	f7f1 f9b0 	bl	80044c4 <osKernelSysTick>
 8013164:	4602      	mov	r2, r0
 8013166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013168:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801316a:	4618      	mov	r0, r3
 801316c:	3730      	adds	r7, #48	; 0x30
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b086      	sub	sp, #24
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6819      	ldr	r1, [r3, #0]
 8013180:	f107 030c 	add.w	r3, r7, #12
 8013184:	2200      	movs	r2, #0
 8013186:	4618      	mov	r0, r3
 8013188:	f7f1 fbda 	bl	8004940 <osMessageGet>

  if(event.status == osEventMessage)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2b10      	cmp	r3, #16
 8013190:	d105      	bne.n	801319e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	461a      	mov	r2, r3
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801319a:	2300      	movs	r3, #0
 801319c:	e001      	b.n	80131a2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801319e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3718      	adds	r7, #24
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}

080131aa <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80131aa:	b480      	push	{r7}
 80131ac:	b083      	sub	sp, #12
 80131ae:	af00      	add	r7, sp, #0
 80131b0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <sys_mbox_valid+0x14>
    return 0;
 80131ba:	2300      	movs	r3, #0
 80131bc:	e000      	b.n	80131c0 <sys_mbox_valid+0x16>
  else
    return 1;
 80131be:	2301      	movs	r3, #1
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	370c      	adds	r7, #12
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bc80      	pop	{r7}
 80131c8:	4770      	bx	lr

080131ca <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80131ca:	b480      	push	{r7}
 80131cc:	b083      	sub	sp, #12
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
}
 80131d8:	bf00      	nop
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	bc80      	pop	{r7}
 80131e0:	4770      	bx	lr

080131e2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80131e2:	b580      	push	{r7, lr}
 80131e4:	b084      	sub	sp, #16
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
 80131ea:	460b      	mov	r3, r1
 80131ec:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80131ee:	2300      	movs	r3, #0
 80131f0:	60bb      	str	r3, [r7, #8]
 80131f2:	2300      	movs	r3, #0
 80131f4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80131f6:	f107 0308 	add.w	r3, r7, #8
 80131fa:	2101      	movs	r1, #1
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f1 fa6d 	bl	80046dc <osSemaphoreCreate>
 8013202:	4602      	mov	r2, r0
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	e009      	b.n	801322a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8013216:	78fb      	ldrb	r3, [r7, #3]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d105      	bne.n	8013228 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	2100      	movs	r1, #0
 8013222:	4618      	mov	r0, r3
 8013224:	f7f1 fa8c 	bl	8004740 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8013228:	2300      	movs	r3, #0
}
 801322a:	4618      	mov	r0, r3
 801322c:	3710      	adds	r7, #16
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}

08013232 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8013232:	b580      	push	{r7, lr}
 8013234:	b084      	sub	sp, #16
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
 801323a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801323c:	f7f1 f942 	bl	80044c4 <osKernelSysTick>
 8013240:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d011      	beq.n	801326c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	6839      	ldr	r1, [r7, #0]
 801324e:	4618      	mov	r0, r3
 8013250:	f7f1 fa76 	bl	8004740 <osSemaphoreWait>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801325a:	f7f1 f933 	bl	80044c4 <osKernelSysTick>
 801325e:	4602      	mov	r2, r0
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	e012      	b.n	801328c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013266:	f04f 33ff 	mov.w	r3, #4294967295
 801326a:	e00f      	b.n	801328c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801326c:	bf00      	nop
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f04f 31ff 	mov.w	r1, #4294967295
 8013276:	4618      	mov	r0, r3
 8013278:	f7f1 fa62 	bl	8004740 <osSemaphoreWait>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d1f5      	bne.n	801326e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8013282:	f7f1 f91f 	bl	80044c4 <osKernelSysTick>
 8013286:	4602      	mov	r2, r0
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f1 fa9b 	bl	80047dc <osSemaphoreRelease>
}
 80132a6:	bf00      	nop
 80132a8:	3708      	adds	r7, #8
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b082      	sub	sp, #8
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7f1 fac4 	bl	8004848 <osSemaphoreDelete>
}
 80132c0:	bf00      	nop
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d101      	bne.n	80132dc <sys_sem_valid+0x14>
    return 0;
 80132d8:	2300      	movs	r3, #0
 80132da:	e000      	b.n	80132de <sys_sem_valid+0x16>
  else
    return 1;
 80132dc:	2301      	movs	r3, #1
}
 80132de:	4618      	mov	r0, r3
 80132e0:	370c      	adds	r7, #12
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bc80      	pop	{r7}
 80132e6:	4770      	bx	lr

080132e8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80132e8:	b480      	push	{r7}
 80132ea:	b083      	sub	sp, #12
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2200      	movs	r2, #0
 80132f4:	601a      	str	r2, [r3, #0]
}
 80132f6:	bf00      	nop
 80132f8:	370c      	adds	r7, #12
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bc80      	pop	{r7}
 80132fe:	4770      	bx	lr

08013300 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013304:	4803      	ldr	r0, [pc, #12]	; (8013314 <sys_init+0x14>)
 8013306:	f7f1 f94d 	bl	80045a4 <osMutexCreate>
 801330a:	4603      	mov	r3, r0
 801330c:	4a02      	ldr	r2, [pc, #8]	; (8013318 <sys_init+0x18>)
 801330e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013310:	bf00      	nop
 8013312:	bd80      	pop	{r7, pc}
 8013314:	08017078 	.word	0x08017078
 8013318:	2000b90c 	.word	0x2000b90c

0801331c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013324:	2300      	movs	r3, #0
 8013326:	60bb      	str	r3, [r7, #8]
 8013328:	2300      	movs	r3, #0
 801332a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801332c:	f107 0308 	add.w	r3, r7, #8
 8013330:	4618      	mov	r0, r3
 8013332:	f7f1 f937 	bl	80045a4 <osMutexCreate>
 8013336:	4602      	mov	r2, r0
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d102      	bne.n	801334a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013344:	f04f 33ff 	mov.w	r3, #4294967295
 8013348:	e000      	b.n	801334c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f04f 31ff 	mov.w	r1, #4294967295
 8013364:	4618      	mov	r0, r3
 8013366:	f7f1 f935 	bl	80045d4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801336a:	bf00      	nop
 801336c:	3708      	adds	r7, #8
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}

08013372 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013372:	b580      	push	{r7, lr}
 8013374:	b082      	sub	sp, #8
 8013376:	af00      	add	r7, sp, #0
 8013378:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	4618      	mov	r0, r3
 8013380:	f7f1 f976 	bl	8004670 <osMutexRelease>
}
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08c      	sub	sp, #48	; 0x30
 8013390:	af00      	add	r7, sp, #0
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801339a:	f107 0314 	add.w	r3, r7, #20
 801339e:	2200      	movs	r2, #0
 80133a0:	601a      	str	r2, [r3, #0]
 80133a2:	605a      	str	r2, [r3, #4]
 80133a4:	609a      	str	r2, [r3, #8]
 80133a6:	60da      	str	r2, [r3, #12]
 80133a8:	611a      	str	r2, [r3, #16]
 80133aa:	615a      	str	r2, [r3, #20]
 80133ac:	619a      	str	r2, [r3, #24]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	617b      	str	r3, [r7, #20]
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	61bb      	str	r3, [r7, #24]
 80133b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b8:	b21b      	sxth	r3, r3
 80133ba:	83bb      	strh	r3, [r7, #28]
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80133c0:	f107 0314 	add.w	r3, r7, #20
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7f1 f88c 	bl	80044e4 <osThreadCreate>
 80133cc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3730      	adds	r7, #48	; 0x30
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
	...

080133d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80133dc:	4b04      	ldr	r3, [pc, #16]	; (80133f0 <sys_arch_protect+0x18>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f04f 31ff 	mov.w	r1, #4294967295
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f1 f8f5 	bl	80045d4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80133ea:	2301      	movs	r3, #1
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	2000b90c 	.word	0x2000b90c

080133f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80133fc:	4b04      	ldr	r3, [pc, #16]	; (8013410 <sys_arch_unprotect+0x1c>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4618      	mov	r0, r3
 8013402:	f7f1 f935 	bl	8004670 <osMutexRelease>
}
 8013406:	bf00      	nop
 8013408:	3708      	adds	r7, #8
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	2000b90c 	.word	0x2000b90c

08013414 <__libc_init_array>:
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	2600      	movs	r6, #0
 8013418:	4d0c      	ldr	r5, [pc, #48]	; (801344c <__libc_init_array+0x38>)
 801341a:	4c0d      	ldr	r4, [pc, #52]	; (8013450 <__libc_init_array+0x3c>)
 801341c:	1b64      	subs	r4, r4, r5
 801341e:	10a4      	asrs	r4, r4, #2
 8013420:	42a6      	cmp	r6, r4
 8013422:	d109      	bne.n	8013438 <__libc_init_array+0x24>
 8013424:	f001 f9b2 	bl	801478c <_init>
 8013428:	2600      	movs	r6, #0
 801342a:	4d0a      	ldr	r5, [pc, #40]	; (8013454 <__libc_init_array+0x40>)
 801342c:	4c0a      	ldr	r4, [pc, #40]	; (8013458 <__libc_init_array+0x44>)
 801342e:	1b64      	subs	r4, r4, r5
 8013430:	10a4      	asrs	r4, r4, #2
 8013432:	42a6      	cmp	r6, r4
 8013434:	d105      	bne.n	8013442 <__libc_init_array+0x2e>
 8013436:	bd70      	pop	{r4, r5, r6, pc}
 8013438:	f855 3b04 	ldr.w	r3, [r5], #4
 801343c:	4798      	blx	r3
 801343e:	3601      	adds	r6, #1
 8013440:	e7ee      	b.n	8013420 <__libc_init_array+0xc>
 8013442:	f855 3b04 	ldr.w	r3, [r5], #4
 8013446:	4798      	blx	r3
 8013448:	3601      	adds	r6, #1
 801344a:	e7f2      	b.n	8013432 <__libc_init_array+0x1e>
 801344c:	08017120 	.word	0x08017120
 8013450:	08017120 	.word	0x08017120
 8013454:	08017120 	.word	0x08017120
 8013458:	08017124 	.word	0x08017124

0801345c <malloc>:
 801345c:	4b02      	ldr	r3, [pc, #8]	; (8013468 <malloc+0xc>)
 801345e:	4601      	mov	r1, r0
 8013460:	6818      	ldr	r0, [r3, #0]
 8013462:	f000 b891 	b.w	8013588 <_malloc_r>
 8013466:	bf00      	nop
 8013468:	20000020 	.word	0x20000020

0801346c <memcmp>:
 801346c:	b510      	push	{r4, lr}
 801346e:	3901      	subs	r1, #1
 8013470:	4402      	add	r2, r0
 8013472:	4290      	cmp	r0, r2
 8013474:	d101      	bne.n	801347a <memcmp+0xe>
 8013476:	2000      	movs	r0, #0
 8013478:	e005      	b.n	8013486 <memcmp+0x1a>
 801347a:	7803      	ldrb	r3, [r0, #0]
 801347c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013480:	42a3      	cmp	r3, r4
 8013482:	d001      	beq.n	8013488 <memcmp+0x1c>
 8013484:	1b18      	subs	r0, r3, r4
 8013486:	bd10      	pop	{r4, pc}
 8013488:	3001      	adds	r0, #1
 801348a:	e7f2      	b.n	8013472 <memcmp+0x6>

0801348c <memcpy>:
 801348c:	440a      	add	r2, r1
 801348e:	4291      	cmp	r1, r2
 8013490:	f100 33ff 	add.w	r3, r0, #4294967295
 8013494:	d100      	bne.n	8013498 <memcpy+0xc>
 8013496:	4770      	bx	lr
 8013498:	b510      	push	{r4, lr}
 801349a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801349e:	4291      	cmp	r1, r2
 80134a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134a4:	d1f9      	bne.n	801349a <memcpy+0xe>
 80134a6:	bd10      	pop	{r4, pc}

080134a8 <memset>:
 80134a8:	4603      	mov	r3, r0
 80134aa:	4402      	add	r2, r0
 80134ac:	4293      	cmp	r3, r2
 80134ae:	d100      	bne.n	80134b2 <memset+0xa>
 80134b0:	4770      	bx	lr
 80134b2:	f803 1b01 	strb.w	r1, [r3], #1
 80134b6:	e7f9      	b.n	80134ac <memset+0x4>

080134b8 <_free_r>:
 80134b8:	b538      	push	{r3, r4, r5, lr}
 80134ba:	4605      	mov	r5, r0
 80134bc:	2900      	cmp	r1, #0
 80134be:	d040      	beq.n	8013542 <_free_r+0x8a>
 80134c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134c4:	1f0c      	subs	r4, r1, #4
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	bfb8      	it	lt
 80134ca:	18e4      	addlt	r4, r4, r3
 80134cc:	f000 fa18 	bl	8013900 <__malloc_lock>
 80134d0:	4a1c      	ldr	r2, [pc, #112]	; (8013544 <_free_r+0x8c>)
 80134d2:	6813      	ldr	r3, [r2, #0]
 80134d4:	b933      	cbnz	r3, 80134e4 <_free_r+0x2c>
 80134d6:	6063      	str	r3, [r4, #4]
 80134d8:	6014      	str	r4, [r2, #0]
 80134da:	4628      	mov	r0, r5
 80134dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134e0:	f000 ba14 	b.w	801390c <__malloc_unlock>
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	d908      	bls.n	80134fa <_free_r+0x42>
 80134e8:	6820      	ldr	r0, [r4, #0]
 80134ea:	1821      	adds	r1, r4, r0
 80134ec:	428b      	cmp	r3, r1
 80134ee:	bf01      	itttt	eq
 80134f0:	6819      	ldreq	r1, [r3, #0]
 80134f2:	685b      	ldreq	r3, [r3, #4]
 80134f4:	1809      	addeq	r1, r1, r0
 80134f6:	6021      	streq	r1, [r4, #0]
 80134f8:	e7ed      	b.n	80134d6 <_free_r+0x1e>
 80134fa:	461a      	mov	r2, r3
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	b10b      	cbz	r3, 8013504 <_free_r+0x4c>
 8013500:	42a3      	cmp	r3, r4
 8013502:	d9fa      	bls.n	80134fa <_free_r+0x42>
 8013504:	6811      	ldr	r1, [r2, #0]
 8013506:	1850      	adds	r0, r2, r1
 8013508:	42a0      	cmp	r0, r4
 801350a:	d10b      	bne.n	8013524 <_free_r+0x6c>
 801350c:	6820      	ldr	r0, [r4, #0]
 801350e:	4401      	add	r1, r0
 8013510:	1850      	adds	r0, r2, r1
 8013512:	4283      	cmp	r3, r0
 8013514:	6011      	str	r1, [r2, #0]
 8013516:	d1e0      	bne.n	80134da <_free_r+0x22>
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	4401      	add	r1, r0
 801351e:	6011      	str	r1, [r2, #0]
 8013520:	6053      	str	r3, [r2, #4]
 8013522:	e7da      	b.n	80134da <_free_r+0x22>
 8013524:	d902      	bls.n	801352c <_free_r+0x74>
 8013526:	230c      	movs	r3, #12
 8013528:	602b      	str	r3, [r5, #0]
 801352a:	e7d6      	b.n	80134da <_free_r+0x22>
 801352c:	6820      	ldr	r0, [r4, #0]
 801352e:	1821      	adds	r1, r4, r0
 8013530:	428b      	cmp	r3, r1
 8013532:	bf01      	itttt	eq
 8013534:	6819      	ldreq	r1, [r3, #0]
 8013536:	685b      	ldreq	r3, [r3, #4]
 8013538:	1809      	addeq	r1, r1, r0
 801353a:	6021      	streq	r1, [r4, #0]
 801353c:	6063      	str	r3, [r4, #4]
 801353e:	6054      	str	r4, [r2, #4]
 8013540:	e7cb      	b.n	80134da <_free_r+0x22>
 8013542:	bd38      	pop	{r3, r4, r5, pc}
 8013544:	2000b910 	.word	0x2000b910

08013548 <sbrk_aligned>:
 8013548:	b570      	push	{r4, r5, r6, lr}
 801354a:	4e0e      	ldr	r6, [pc, #56]	; (8013584 <sbrk_aligned+0x3c>)
 801354c:	460c      	mov	r4, r1
 801354e:	6831      	ldr	r1, [r6, #0]
 8013550:	4605      	mov	r5, r0
 8013552:	b911      	cbnz	r1, 801355a <sbrk_aligned+0x12>
 8013554:	f000 f8a4 	bl	80136a0 <_sbrk_r>
 8013558:	6030      	str	r0, [r6, #0]
 801355a:	4621      	mov	r1, r4
 801355c:	4628      	mov	r0, r5
 801355e:	f000 f89f 	bl	80136a0 <_sbrk_r>
 8013562:	1c43      	adds	r3, r0, #1
 8013564:	d00a      	beq.n	801357c <sbrk_aligned+0x34>
 8013566:	1cc4      	adds	r4, r0, #3
 8013568:	f024 0403 	bic.w	r4, r4, #3
 801356c:	42a0      	cmp	r0, r4
 801356e:	d007      	beq.n	8013580 <sbrk_aligned+0x38>
 8013570:	1a21      	subs	r1, r4, r0
 8013572:	4628      	mov	r0, r5
 8013574:	f000 f894 	bl	80136a0 <_sbrk_r>
 8013578:	3001      	adds	r0, #1
 801357a:	d101      	bne.n	8013580 <sbrk_aligned+0x38>
 801357c:	f04f 34ff 	mov.w	r4, #4294967295
 8013580:	4620      	mov	r0, r4
 8013582:	bd70      	pop	{r4, r5, r6, pc}
 8013584:	2000b914 	.word	0x2000b914

08013588 <_malloc_r>:
 8013588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801358c:	1ccd      	adds	r5, r1, #3
 801358e:	f025 0503 	bic.w	r5, r5, #3
 8013592:	3508      	adds	r5, #8
 8013594:	2d0c      	cmp	r5, #12
 8013596:	bf38      	it	cc
 8013598:	250c      	movcc	r5, #12
 801359a:	2d00      	cmp	r5, #0
 801359c:	4607      	mov	r7, r0
 801359e:	db01      	blt.n	80135a4 <_malloc_r+0x1c>
 80135a0:	42a9      	cmp	r1, r5
 80135a2:	d905      	bls.n	80135b0 <_malloc_r+0x28>
 80135a4:	230c      	movs	r3, #12
 80135a6:	2600      	movs	r6, #0
 80135a8:	603b      	str	r3, [r7, #0]
 80135aa:	4630      	mov	r0, r6
 80135ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b0:	4e2e      	ldr	r6, [pc, #184]	; (801366c <_malloc_r+0xe4>)
 80135b2:	f000 f9a5 	bl	8013900 <__malloc_lock>
 80135b6:	6833      	ldr	r3, [r6, #0]
 80135b8:	461c      	mov	r4, r3
 80135ba:	bb34      	cbnz	r4, 801360a <_malloc_r+0x82>
 80135bc:	4629      	mov	r1, r5
 80135be:	4638      	mov	r0, r7
 80135c0:	f7ff ffc2 	bl	8013548 <sbrk_aligned>
 80135c4:	1c43      	adds	r3, r0, #1
 80135c6:	4604      	mov	r4, r0
 80135c8:	d14d      	bne.n	8013666 <_malloc_r+0xde>
 80135ca:	6834      	ldr	r4, [r6, #0]
 80135cc:	4626      	mov	r6, r4
 80135ce:	2e00      	cmp	r6, #0
 80135d0:	d140      	bne.n	8013654 <_malloc_r+0xcc>
 80135d2:	6823      	ldr	r3, [r4, #0]
 80135d4:	4631      	mov	r1, r6
 80135d6:	4638      	mov	r0, r7
 80135d8:	eb04 0803 	add.w	r8, r4, r3
 80135dc:	f000 f860 	bl	80136a0 <_sbrk_r>
 80135e0:	4580      	cmp	r8, r0
 80135e2:	d13a      	bne.n	801365a <_malloc_r+0xd2>
 80135e4:	6821      	ldr	r1, [r4, #0]
 80135e6:	3503      	adds	r5, #3
 80135e8:	1a6d      	subs	r5, r5, r1
 80135ea:	f025 0503 	bic.w	r5, r5, #3
 80135ee:	3508      	adds	r5, #8
 80135f0:	2d0c      	cmp	r5, #12
 80135f2:	bf38      	it	cc
 80135f4:	250c      	movcc	r5, #12
 80135f6:	4638      	mov	r0, r7
 80135f8:	4629      	mov	r1, r5
 80135fa:	f7ff ffa5 	bl	8013548 <sbrk_aligned>
 80135fe:	3001      	adds	r0, #1
 8013600:	d02b      	beq.n	801365a <_malloc_r+0xd2>
 8013602:	6823      	ldr	r3, [r4, #0]
 8013604:	442b      	add	r3, r5
 8013606:	6023      	str	r3, [r4, #0]
 8013608:	e00e      	b.n	8013628 <_malloc_r+0xa0>
 801360a:	6822      	ldr	r2, [r4, #0]
 801360c:	1b52      	subs	r2, r2, r5
 801360e:	d41e      	bmi.n	801364e <_malloc_r+0xc6>
 8013610:	2a0b      	cmp	r2, #11
 8013612:	d916      	bls.n	8013642 <_malloc_r+0xba>
 8013614:	1961      	adds	r1, r4, r5
 8013616:	42a3      	cmp	r3, r4
 8013618:	6025      	str	r5, [r4, #0]
 801361a:	bf18      	it	ne
 801361c:	6059      	strne	r1, [r3, #4]
 801361e:	6863      	ldr	r3, [r4, #4]
 8013620:	bf08      	it	eq
 8013622:	6031      	streq	r1, [r6, #0]
 8013624:	5162      	str	r2, [r4, r5]
 8013626:	604b      	str	r3, [r1, #4]
 8013628:	4638      	mov	r0, r7
 801362a:	f104 060b 	add.w	r6, r4, #11
 801362e:	f000 f96d 	bl	801390c <__malloc_unlock>
 8013632:	f026 0607 	bic.w	r6, r6, #7
 8013636:	1d23      	adds	r3, r4, #4
 8013638:	1af2      	subs	r2, r6, r3
 801363a:	d0b6      	beq.n	80135aa <_malloc_r+0x22>
 801363c:	1b9b      	subs	r3, r3, r6
 801363e:	50a3      	str	r3, [r4, r2]
 8013640:	e7b3      	b.n	80135aa <_malloc_r+0x22>
 8013642:	6862      	ldr	r2, [r4, #4]
 8013644:	42a3      	cmp	r3, r4
 8013646:	bf0c      	ite	eq
 8013648:	6032      	streq	r2, [r6, #0]
 801364a:	605a      	strne	r2, [r3, #4]
 801364c:	e7ec      	b.n	8013628 <_malloc_r+0xa0>
 801364e:	4623      	mov	r3, r4
 8013650:	6864      	ldr	r4, [r4, #4]
 8013652:	e7b2      	b.n	80135ba <_malloc_r+0x32>
 8013654:	4634      	mov	r4, r6
 8013656:	6876      	ldr	r6, [r6, #4]
 8013658:	e7b9      	b.n	80135ce <_malloc_r+0x46>
 801365a:	230c      	movs	r3, #12
 801365c:	4638      	mov	r0, r7
 801365e:	603b      	str	r3, [r7, #0]
 8013660:	f000 f954 	bl	801390c <__malloc_unlock>
 8013664:	e7a1      	b.n	80135aa <_malloc_r+0x22>
 8013666:	6025      	str	r5, [r4, #0]
 8013668:	e7de      	b.n	8013628 <_malloc_r+0xa0>
 801366a:	bf00      	nop
 801366c:	2000b910 	.word	0x2000b910

08013670 <iprintf>:
 8013670:	b40f      	push	{r0, r1, r2, r3}
 8013672:	4b0a      	ldr	r3, [pc, #40]	; (801369c <iprintf+0x2c>)
 8013674:	b513      	push	{r0, r1, r4, lr}
 8013676:	681c      	ldr	r4, [r3, #0]
 8013678:	b124      	cbz	r4, 8013684 <iprintf+0x14>
 801367a:	69a3      	ldr	r3, [r4, #24]
 801367c:	b913      	cbnz	r3, 8013684 <iprintf+0x14>
 801367e:	4620      	mov	r0, r4
 8013680:	f000 f89e 	bl	80137c0 <__sinit>
 8013684:	ab05      	add	r3, sp, #20
 8013686:	4620      	mov	r0, r4
 8013688:	9a04      	ldr	r2, [sp, #16]
 801368a:	68a1      	ldr	r1, [r4, #8]
 801368c:	9301      	str	r3, [sp, #4]
 801368e:	f000 fac7 	bl	8013c20 <_vfiprintf_r>
 8013692:	b002      	add	sp, #8
 8013694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013698:	b004      	add	sp, #16
 801369a:	4770      	bx	lr
 801369c:	20000020 	.word	0x20000020

080136a0 <_sbrk_r>:
 80136a0:	b538      	push	{r3, r4, r5, lr}
 80136a2:	2300      	movs	r3, #0
 80136a4:	4d05      	ldr	r5, [pc, #20]	; (80136bc <_sbrk_r+0x1c>)
 80136a6:	4604      	mov	r4, r0
 80136a8:	4608      	mov	r0, r1
 80136aa:	602b      	str	r3, [r5, #0]
 80136ac:	f7ed f99c 	bl	80009e8 <_sbrk>
 80136b0:	1c43      	adds	r3, r0, #1
 80136b2:	d102      	bne.n	80136ba <_sbrk_r+0x1a>
 80136b4:	682b      	ldr	r3, [r5, #0]
 80136b6:	b103      	cbz	r3, 80136ba <_sbrk_r+0x1a>
 80136b8:	6023      	str	r3, [r4, #0]
 80136ba:	bd38      	pop	{r3, r4, r5, pc}
 80136bc:	2000b908 	.word	0x2000b908

080136c0 <siprintf>:
 80136c0:	b40e      	push	{r1, r2, r3}
 80136c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80136c6:	b500      	push	{lr}
 80136c8:	b09c      	sub	sp, #112	; 0x70
 80136ca:	ab1d      	add	r3, sp, #116	; 0x74
 80136cc:	9002      	str	r0, [sp, #8]
 80136ce:	9006      	str	r0, [sp, #24]
 80136d0:	9107      	str	r1, [sp, #28]
 80136d2:	9104      	str	r1, [sp, #16]
 80136d4:	4808      	ldr	r0, [pc, #32]	; (80136f8 <siprintf+0x38>)
 80136d6:	4909      	ldr	r1, [pc, #36]	; (80136fc <siprintf+0x3c>)
 80136d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80136dc:	9105      	str	r1, [sp, #20]
 80136de:	6800      	ldr	r0, [r0, #0]
 80136e0:	a902      	add	r1, sp, #8
 80136e2:	9301      	str	r3, [sp, #4]
 80136e4:	f000 f974 	bl	80139d0 <_svfiprintf_r>
 80136e8:	2200      	movs	r2, #0
 80136ea:	9b02      	ldr	r3, [sp, #8]
 80136ec:	701a      	strb	r2, [r3, #0]
 80136ee:	b01c      	add	sp, #112	; 0x70
 80136f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80136f4:	b003      	add	sp, #12
 80136f6:	4770      	bx	lr
 80136f8:	20000020 	.word	0x20000020
 80136fc:	ffff0208 	.word	0xffff0208

08013700 <strcpy>:
 8013700:	4603      	mov	r3, r0
 8013702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013706:	f803 2b01 	strb.w	r2, [r3], #1
 801370a:	2a00      	cmp	r2, #0
 801370c:	d1f9      	bne.n	8013702 <strcpy+0x2>
 801370e:	4770      	bx	lr

08013710 <std>:
 8013710:	2300      	movs	r3, #0
 8013712:	b510      	push	{r4, lr}
 8013714:	4604      	mov	r4, r0
 8013716:	e9c0 3300 	strd	r3, r3, [r0]
 801371a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801371e:	6083      	str	r3, [r0, #8]
 8013720:	8181      	strh	r1, [r0, #12]
 8013722:	6643      	str	r3, [r0, #100]	; 0x64
 8013724:	81c2      	strh	r2, [r0, #14]
 8013726:	6183      	str	r3, [r0, #24]
 8013728:	4619      	mov	r1, r3
 801372a:	2208      	movs	r2, #8
 801372c:	305c      	adds	r0, #92	; 0x5c
 801372e:	f7ff febb 	bl	80134a8 <memset>
 8013732:	4b05      	ldr	r3, [pc, #20]	; (8013748 <std+0x38>)
 8013734:	6224      	str	r4, [r4, #32]
 8013736:	6263      	str	r3, [r4, #36]	; 0x24
 8013738:	4b04      	ldr	r3, [pc, #16]	; (801374c <std+0x3c>)
 801373a:	62a3      	str	r3, [r4, #40]	; 0x28
 801373c:	4b04      	ldr	r3, [pc, #16]	; (8013750 <std+0x40>)
 801373e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013740:	4b04      	ldr	r3, [pc, #16]	; (8013754 <std+0x44>)
 8013742:	6323      	str	r3, [r4, #48]	; 0x30
 8013744:	bd10      	pop	{r4, pc}
 8013746:	bf00      	nop
 8013748:	080141ad 	.word	0x080141ad
 801374c:	080141cf 	.word	0x080141cf
 8013750:	08014207 	.word	0x08014207
 8013754:	0801422b 	.word	0x0801422b

08013758 <_cleanup_r>:
 8013758:	4901      	ldr	r1, [pc, #4]	; (8013760 <_cleanup_r+0x8>)
 801375a:	f000 b8af 	b.w	80138bc <_fwalk_reent>
 801375e:	bf00      	nop
 8013760:	080144fd 	.word	0x080144fd

08013764 <__sfmoreglue>:
 8013764:	2268      	movs	r2, #104	; 0x68
 8013766:	b570      	push	{r4, r5, r6, lr}
 8013768:	1e4d      	subs	r5, r1, #1
 801376a:	4355      	muls	r5, r2
 801376c:	460e      	mov	r6, r1
 801376e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013772:	f7ff ff09 	bl	8013588 <_malloc_r>
 8013776:	4604      	mov	r4, r0
 8013778:	b140      	cbz	r0, 801378c <__sfmoreglue+0x28>
 801377a:	2100      	movs	r1, #0
 801377c:	e9c0 1600 	strd	r1, r6, [r0]
 8013780:	300c      	adds	r0, #12
 8013782:	60a0      	str	r0, [r4, #8]
 8013784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013788:	f7ff fe8e 	bl	80134a8 <memset>
 801378c:	4620      	mov	r0, r4
 801378e:	bd70      	pop	{r4, r5, r6, pc}

08013790 <__sfp_lock_acquire>:
 8013790:	4801      	ldr	r0, [pc, #4]	; (8013798 <__sfp_lock_acquire+0x8>)
 8013792:	f000 b8b3 	b.w	80138fc <__retarget_lock_acquire_recursive>
 8013796:	bf00      	nop
 8013798:	2000b919 	.word	0x2000b919

0801379c <__sfp_lock_release>:
 801379c:	4801      	ldr	r0, [pc, #4]	; (80137a4 <__sfp_lock_release+0x8>)
 801379e:	f000 b8ae 	b.w	80138fe <__retarget_lock_release_recursive>
 80137a2:	bf00      	nop
 80137a4:	2000b919 	.word	0x2000b919

080137a8 <__sinit_lock_acquire>:
 80137a8:	4801      	ldr	r0, [pc, #4]	; (80137b0 <__sinit_lock_acquire+0x8>)
 80137aa:	f000 b8a7 	b.w	80138fc <__retarget_lock_acquire_recursive>
 80137ae:	bf00      	nop
 80137b0:	2000b91a 	.word	0x2000b91a

080137b4 <__sinit_lock_release>:
 80137b4:	4801      	ldr	r0, [pc, #4]	; (80137bc <__sinit_lock_release+0x8>)
 80137b6:	f000 b8a2 	b.w	80138fe <__retarget_lock_release_recursive>
 80137ba:	bf00      	nop
 80137bc:	2000b91a 	.word	0x2000b91a

080137c0 <__sinit>:
 80137c0:	b510      	push	{r4, lr}
 80137c2:	4604      	mov	r4, r0
 80137c4:	f7ff fff0 	bl	80137a8 <__sinit_lock_acquire>
 80137c8:	69a3      	ldr	r3, [r4, #24]
 80137ca:	b11b      	cbz	r3, 80137d4 <__sinit+0x14>
 80137cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137d0:	f7ff bff0 	b.w	80137b4 <__sinit_lock_release>
 80137d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80137d8:	6523      	str	r3, [r4, #80]	; 0x50
 80137da:	4b13      	ldr	r3, [pc, #76]	; (8013828 <__sinit+0x68>)
 80137dc:	4a13      	ldr	r2, [pc, #76]	; (801382c <__sinit+0x6c>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80137e2:	42a3      	cmp	r3, r4
 80137e4:	bf08      	it	eq
 80137e6:	2301      	moveq	r3, #1
 80137e8:	4620      	mov	r0, r4
 80137ea:	bf08      	it	eq
 80137ec:	61a3      	streq	r3, [r4, #24]
 80137ee:	f000 f81f 	bl	8013830 <__sfp>
 80137f2:	6060      	str	r0, [r4, #4]
 80137f4:	4620      	mov	r0, r4
 80137f6:	f000 f81b 	bl	8013830 <__sfp>
 80137fa:	60a0      	str	r0, [r4, #8]
 80137fc:	4620      	mov	r0, r4
 80137fe:	f000 f817 	bl	8013830 <__sfp>
 8013802:	2200      	movs	r2, #0
 8013804:	2104      	movs	r1, #4
 8013806:	60e0      	str	r0, [r4, #12]
 8013808:	6860      	ldr	r0, [r4, #4]
 801380a:	f7ff ff81 	bl	8013710 <std>
 801380e:	2201      	movs	r2, #1
 8013810:	2109      	movs	r1, #9
 8013812:	68a0      	ldr	r0, [r4, #8]
 8013814:	f7ff ff7c 	bl	8013710 <std>
 8013818:	2202      	movs	r2, #2
 801381a:	2112      	movs	r1, #18
 801381c:	68e0      	ldr	r0, [r4, #12]
 801381e:	f7ff ff77 	bl	8013710 <std>
 8013822:	2301      	movs	r3, #1
 8013824:	61a3      	str	r3, [r4, #24]
 8013826:	e7d1      	b.n	80137cc <__sinit+0xc>
 8013828:	08017080 	.word	0x08017080
 801382c:	08013759 	.word	0x08013759

08013830 <__sfp>:
 8013830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013832:	4607      	mov	r7, r0
 8013834:	f7ff ffac 	bl	8013790 <__sfp_lock_acquire>
 8013838:	4b1e      	ldr	r3, [pc, #120]	; (80138b4 <__sfp+0x84>)
 801383a:	681e      	ldr	r6, [r3, #0]
 801383c:	69b3      	ldr	r3, [r6, #24]
 801383e:	b913      	cbnz	r3, 8013846 <__sfp+0x16>
 8013840:	4630      	mov	r0, r6
 8013842:	f7ff ffbd 	bl	80137c0 <__sinit>
 8013846:	3648      	adds	r6, #72	; 0x48
 8013848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801384c:	3b01      	subs	r3, #1
 801384e:	d503      	bpl.n	8013858 <__sfp+0x28>
 8013850:	6833      	ldr	r3, [r6, #0]
 8013852:	b30b      	cbz	r3, 8013898 <__sfp+0x68>
 8013854:	6836      	ldr	r6, [r6, #0]
 8013856:	e7f7      	b.n	8013848 <__sfp+0x18>
 8013858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801385c:	b9d5      	cbnz	r5, 8013894 <__sfp+0x64>
 801385e:	4b16      	ldr	r3, [pc, #88]	; (80138b8 <__sfp+0x88>)
 8013860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013864:	60e3      	str	r3, [r4, #12]
 8013866:	6665      	str	r5, [r4, #100]	; 0x64
 8013868:	f000 f847 	bl	80138fa <__retarget_lock_init_recursive>
 801386c:	f7ff ff96 	bl	801379c <__sfp_lock_release>
 8013870:	2208      	movs	r2, #8
 8013872:	4629      	mov	r1, r5
 8013874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801387c:	6025      	str	r5, [r4, #0]
 801387e:	61a5      	str	r5, [r4, #24]
 8013880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013884:	f7ff fe10 	bl	80134a8 <memset>
 8013888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801388c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013890:	4620      	mov	r0, r4
 8013892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013894:	3468      	adds	r4, #104	; 0x68
 8013896:	e7d9      	b.n	801384c <__sfp+0x1c>
 8013898:	2104      	movs	r1, #4
 801389a:	4638      	mov	r0, r7
 801389c:	f7ff ff62 	bl	8013764 <__sfmoreglue>
 80138a0:	4604      	mov	r4, r0
 80138a2:	6030      	str	r0, [r6, #0]
 80138a4:	2800      	cmp	r0, #0
 80138a6:	d1d5      	bne.n	8013854 <__sfp+0x24>
 80138a8:	f7ff ff78 	bl	801379c <__sfp_lock_release>
 80138ac:	230c      	movs	r3, #12
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	e7ee      	b.n	8013890 <__sfp+0x60>
 80138b2:	bf00      	nop
 80138b4:	08017080 	.word	0x08017080
 80138b8:	ffff0001 	.word	0xffff0001

080138bc <_fwalk_reent>:
 80138bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138c0:	4606      	mov	r6, r0
 80138c2:	4688      	mov	r8, r1
 80138c4:	2700      	movs	r7, #0
 80138c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80138ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138ce:	f1b9 0901 	subs.w	r9, r9, #1
 80138d2:	d505      	bpl.n	80138e0 <_fwalk_reent+0x24>
 80138d4:	6824      	ldr	r4, [r4, #0]
 80138d6:	2c00      	cmp	r4, #0
 80138d8:	d1f7      	bne.n	80138ca <_fwalk_reent+0xe>
 80138da:	4638      	mov	r0, r7
 80138dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138e0:	89ab      	ldrh	r3, [r5, #12]
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d907      	bls.n	80138f6 <_fwalk_reent+0x3a>
 80138e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138ea:	3301      	adds	r3, #1
 80138ec:	d003      	beq.n	80138f6 <_fwalk_reent+0x3a>
 80138ee:	4629      	mov	r1, r5
 80138f0:	4630      	mov	r0, r6
 80138f2:	47c0      	blx	r8
 80138f4:	4307      	orrs	r7, r0
 80138f6:	3568      	adds	r5, #104	; 0x68
 80138f8:	e7e9      	b.n	80138ce <_fwalk_reent+0x12>

080138fa <__retarget_lock_init_recursive>:
 80138fa:	4770      	bx	lr

080138fc <__retarget_lock_acquire_recursive>:
 80138fc:	4770      	bx	lr

080138fe <__retarget_lock_release_recursive>:
 80138fe:	4770      	bx	lr

08013900 <__malloc_lock>:
 8013900:	4801      	ldr	r0, [pc, #4]	; (8013908 <__malloc_lock+0x8>)
 8013902:	f7ff bffb 	b.w	80138fc <__retarget_lock_acquire_recursive>
 8013906:	bf00      	nop
 8013908:	2000b918 	.word	0x2000b918

0801390c <__malloc_unlock>:
 801390c:	4801      	ldr	r0, [pc, #4]	; (8013914 <__malloc_unlock+0x8>)
 801390e:	f7ff bff6 	b.w	80138fe <__retarget_lock_release_recursive>
 8013912:	bf00      	nop
 8013914:	2000b918 	.word	0x2000b918

08013918 <__ssputs_r>:
 8013918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801391c:	688e      	ldr	r6, [r1, #8]
 801391e:	4682      	mov	sl, r0
 8013920:	429e      	cmp	r6, r3
 8013922:	460c      	mov	r4, r1
 8013924:	4690      	mov	r8, r2
 8013926:	461f      	mov	r7, r3
 8013928:	d838      	bhi.n	801399c <__ssputs_r+0x84>
 801392a:	898a      	ldrh	r2, [r1, #12]
 801392c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013930:	d032      	beq.n	8013998 <__ssputs_r+0x80>
 8013932:	6825      	ldr	r5, [r4, #0]
 8013934:	6909      	ldr	r1, [r1, #16]
 8013936:	3301      	adds	r3, #1
 8013938:	eba5 0901 	sub.w	r9, r5, r1
 801393c:	6965      	ldr	r5, [r4, #20]
 801393e:	444b      	add	r3, r9
 8013940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013948:	106d      	asrs	r5, r5, #1
 801394a:	429d      	cmp	r5, r3
 801394c:	bf38      	it	cc
 801394e:	461d      	movcc	r5, r3
 8013950:	0553      	lsls	r3, r2, #21
 8013952:	d531      	bpl.n	80139b8 <__ssputs_r+0xa0>
 8013954:	4629      	mov	r1, r5
 8013956:	f7ff fe17 	bl	8013588 <_malloc_r>
 801395a:	4606      	mov	r6, r0
 801395c:	b950      	cbnz	r0, 8013974 <__ssputs_r+0x5c>
 801395e:	230c      	movs	r3, #12
 8013960:	f04f 30ff 	mov.w	r0, #4294967295
 8013964:	f8ca 3000 	str.w	r3, [sl]
 8013968:	89a3      	ldrh	r3, [r4, #12]
 801396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801396e:	81a3      	strh	r3, [r4, #12]
 8013970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013974:	464a      	mov	r2, r9
 8013976:	6921      	ldr	r1, [r4, #16]
 8013978:	f7ff fd88 	bl	801348c <memcpy>
 801397c:	89a3      	ldrh	r3, [r4, #12]
 801397e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013986:	81a3      	strh	r3, [r4, #12]
 8013988:	6126      	str	r6, [r4, #16]
 801398a:	444e      	add	r6, r9
 801398c:	6026      	str	r6, [r4, #0]
 801398e:	463e      	mov	r6, r7
 8013990:	6165      	str	r5, [r4, #20]
 8013992:	eba5 0509 	sub.w	r5, r5, r9
 8013996:	60a5      	str	r5, [r4, #8]
 8013998:	42be      	cmp	r6, r7
 801399a:	d900      	bls.n	801399e <__ssputs_r+0x86>
 801399c:	463e      	mov	r6, r7
 801399e:	4632      	mov	r2, r6
 80139a0:	4641      	mov	r1, r8
 80139a2:	6820      	ldr	r0, [r4, #0]
 80139a4:	f000 fe6c 	bl	8014680 <memmove>
 80139a8:	68a3      	ldr	r3, [r4, #8]
 80139aa:	2000      	movs	r0, #0
 80139ac:	1b9b      	subs	r3, r3, r6
 80139ae:	60a3      	str	r3, [r4, #8]
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	4433      	add	r3, r6
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	e7db      	b.n	8013970 <__ssputs_r+0x58>
 80139b8:	462a      	mov	r2, r5
 80139ba:	f000 fe7b 	bl	80146b4 <_realloc_r>
 80139be:	4606      	mov	r6, r0
 80139c0:	2800      	cmp	r0, #0
 80139c2:	d1e1      	bne.n	8013988 <__ssputs_r+0x70>
 80139c4:	4650      	mov	r0, sl
 80139c6:	6921      	ldr	r1, [r4, #16]
 80139c8:	f7ff fd76 	bl	80134b8 <_free_r>
 80139cc:	e7c7      	b.n	801395e <__ssputs_r+0x46>
	...

080139d0 <_svfiprintf_r>:
 80139d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d4:	4698      	mov	r8, r3
 80139d6:	898b      	ldrh	r3, [r1, #12]
 80139d8:	4607      	mov	r7, r0
 80139da:	061b      	lsls	r3, r3, #24
 80139dc:	460d      	mov	r5, r1
 80139de:	4614      	mov	r4, r2
 80139e0:	b09d      	sub	sp, #116	; 0x74
 80139e2:	d50e      	bpl.n	8013a02 <_svfiprintf_r+0x32>
 80139e4:	690b      	ldr	r3, [r1, #16]
 80139e6:	b963      	cbnz	r3, 8013a02 <_svfiprintf_r+0x32>
 80139e8:	2140      	movs	r1, #64	; 0x40
 80139ea:	f7ff fdcd 	bl	8013588 <_malloc_r>
 80139ee:	6028      	str	r0, [r5, #0]
 80139f0:	6128      	str	r0, [r5, #16]
 80139f2:	b920      	cbnz	r0, 80139fe <_svfiprintf_r+0x2e>
 80139f4:	230c      	movs	r3, #12
 80139f6:	603b      	str	r3, [r7, #0]
 80139f8:	f04f 30ff 	mov.w	r0, #4294967295
 80139fc:	e0d1      	b.n	8013ba2 <_svfiprintf_r+0x1d2>
 80139fe:	2340      	movs	r3, #64	; 0x40
 8013a00:	616b      	str	r3, [r5, #20]
 8013a02:	2300      	movs	r3, #0
 8013a04:	9309      	str	r3, [sp, #36]	; 0x24
 8013a06:	2320      	movs	r3, #32
 8013a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a0c:	2330      	movs	r3, #48	; 0x30
 8013a0e:	f04f 0901 	mov.w	r9, #1
 8013a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013bbc <_svfiprintf_r+0x1ec>
 8013a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a1e:	4623      	mov	r3, r4
 8013a20:	469a      	mov	sl, r3
 8013a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a26:	b10a      	cbz	r2, 8013a2c <_svfiprintf_r+0x5c>
 8013a28:	2a25      	cmp	r2, #37	; 0x25
 8013a2a:	d1f9      	bne.n	8013a20 <_svfiprintf_r+0x50>
 8013a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8013a30:	d00b      	beq.n	8013a4a <_svfiprintf_r+0x7a>
 8013a32:	465b      	mov	r3, fp
 8013a34:	4622      	mov	r2, r4
 8013a36:	4629      	mov	r1, r5
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f7ff ff6d 	bl	8013918 <__ssputs_r>
 8013a3e:	3001      	adds	r0, #1
 8013a40:	f000 80aa 	beq.w	8013b98 <_svfiprintf_r+0x1c8>
 8013a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a46:	445a      	add	r2, fp
 8013a48:	9209      	str	r2, [sp, #36]	; 0x24
 8013a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	f000 80a2 	beq.w	8013b98 <_svfiprintf_r+0x1c8>
 8013a54:	2300      	movs	r3, #0
 8013a56:	f04f 32ff 	mov.w	r2, #4294967295
 8013a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a5e:	f10a 0a01 	add.w	sl, sl, #1
 8013a62:	9304      	str	r3, [sp, #16]
 8013a64:	9307      	str	r3, [sp, #28]
 8013a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8013a6c:	4654      	mov	r4, sl
 8013a6e:	2205      	movs	r2, #5
 8013a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a74:	4851      	ldr	r0, [pc, #324]	; (8013bbc <_svfiprintf_r+0x1ec>)
 8013a76:	f000 fdf5 	bl	8014664 <memchr>
 8013a7a:	9a04      	ldr	r2, [sp, #16]
 8013a7c:	b9d8      	cbnz	r0, 8013ab6 <_svfiprintf_r+0xe6>
 8013a7e:	06d0      	lsls	r0, r2, #27
 8013a80:	bf44      	itt	mi
 8013a82:	2320      	movmi	r3, #32
 8013a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a88:	0711      	lsls	r1, r2, #28
 8013a8a:	bf44      	itt	mi
 8013a8c:	232b      	movmi	r3, #43	; 0x2b
 8013a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a92:	f89a 3000 	ldrb.w	r3, [sl]
 8013a96:	2b2a      	cmp	r3, #42	; 0x2a
 8013a98:	d015      	beq.n	8013ac6 <_svfiprintf_r+0xf6>
 8013a9a:	4654      	mov	r4, sl
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	f04f 0c0a 	mov.w	ip, #10
 8013aa2:	9a07      	ldr	r2, [sp, #28]
 8013aa4:	4621      	mov	r1, r4
 8013aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aaa:	3b30      	subs	r3, #48	; 0x30
 8013aac:	2b09      	cmp	r3, #9
 8013aae:	d94e      	bls.n	8013b4e <_svfiprintf_r+0x17e>
 8013ab0:	b1b0      	cbz	r0, 8013ae0 <_svfiprintf_r+0x110>
 8013ab2:	9207      	str	r2, [sp, #28]
 8013ab4:	e014      	b.n	8013ae0 <_svfiprintf_r+0x110>
 8013ab6:	eba0 0308 	sub.w	r3, r0, r8
 8013aba:	fa09 f303 	lsl.w	r3, r9, r3
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	46a2      	mov	sl, r4
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	e7d2      	b.n	8013a6c <_svfiprintf_r+0x9c>
 8013ac6:	9b03      	ldr	r3, [sp, #12]
 8013ac8:	1d19      	adds	r1, r3, #4
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	9103      	str	r1, [sp, #12]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	bfbb      	ittet	lt
 8013ad2:	425b      	neglt	r3, r3
 8013ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8013ad8:	9307      	strge	r3, [sp, #28]
 8013ada:	9307      	strlt	r3, [sp, #28]
 8013adc:	bfb8      	it	lt
 8013ade:	9204      	strlt	r2, [sp, #16]
 8013ae0:	7823      	ldrb	r3, [r4, #0]
 8013ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8013ae4:	d10c      	bne.n	8013b00 <_svfiprintf_r+0x130>
 8013ae6:	7863      	ldrb	r3, [r4, #1]
 8013ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8013aea:	d135      	bne.n	8013b58 <_svfiprintf_r+0x188>
 8013aec:	9b03      	ldr	r3, [sp, #12]
 8013aee:	3402      	adds	r4, #2
 8013af0:	1d1a      	adds	r2, r3, #4
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	9203      	str	r2, [sp, #12]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	bfb8      	it	lt
 8013afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8013afe:	9305      	str	r3, [sp, #20]
 8013b00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013bc0 <_svfiprintf_r+0x1f0>
 8013b04:	2203      	movs	r2, #3
 8013b06:	4650      	mov	r0, sl
 8013b08:	7821      	ldrb	r1, [r4, #0]
 8013b0a:	f000 fdab 	bl	8014664 <memchr>
 8013b0e:	b140      	cbz	r0, 8013b22 <_svfiprintf_r+0x152>
 8013b10:	2340      	movs	r3, #64	; 0x40
 8013b12:	eba0 000a 	sub.w	r0, r0, sl
 8013b16:	fa03 f000 	lsl.w	r0, r3, r0
 8013b1a:	9b04      	ldr	r3, [sp, #16]
 8013b1c:	3401      	adds	r4, #1
 8013b1e:	4303      	orrs	r3, r0
 8013b20:	9304      	str	r3, [sp, #16]
 8013b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b26:	2206      	movs	r2, #6
 8013b28:	4826      	ldr	r0, [pc, #152]	; (8013bc4 <_svfiprintf_r+0x1f4>)
 8013b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b2e:	f000 fd99 	bl	8014664 <memchr>
 8013b32:	2800      	cmp	r0, #0
 8013b34:	d038      	beq.n	8013ba8 <_svfiprintf_r+0x1d8>
 8013b36:	4b24      	ldr	r3, [pc, #144]	; (8013bc8 <_svfiprintf_r+0x1f8>)
 8013b38:	bb1b      	cbnz	r3, 8013b82 <_svfiprintf_r+0x1b2>
 8013b3a:	9b03      	ldr	r3, [sp, #12]
 8013b3c:	3307      	adds	r3, #7
 8013b3e:	f023 0307 	bic.w	r3, r3, #7
 8013b42:	3308      	adds	r3, #8
 8013b44:	9303      	str	r3, [sp, #12]
 8013b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b48:	4433      	add	r3, r6
 8013b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8013b4c:	e767      	b.n	8013a1e <_svfiprintf_r+0x4e>
 8013b4e:	460c      	mov	r4, r1
 8013b50:	2001      	movs	r0, #1
 8013b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b56:	e7a5      	b.n	8013aa4 <_svfiprintf_r+0xd4>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	f04f 0c0a 	mov.w	ip, #10
 8013b5e:	4619      	mov	r1, r3
 8013b60:	3401      	adds	r4, #1
 8013b62:	9305      	str	r3, [sp, #20]
 8013b64:	4620      	mov	r0, r4
 8013b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b6a:	3a30      	subs	r2, #48	; 0x30
 8013b6c:	2a09      	cmp	r2, #9
 8013b6e:	d903      	bls.n	8013b78 <_svfiprintf_r+0x1a8>
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d0c5      	beq.n	8013b00 <_svfiprintf_r+0x130>
 8013b74:	9105      	str	r1, [sp, #20]
 8013b76:	e7c3      	b.n	8013b00 <_svfiprintf_r+0x130>
 8013b78:	4604      	mov	r4, r0
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b80:	e7f0      	b.n	8013b64 <_svfiprintf_r+0x194>
 8013b82:	ab03      	add	r3, sp, #12
 8013b84:	9300      	str	r3, [sp, #0]
 8013b86:	462a      	mov	r2, r5
 8013b88:	4638      	mov	r0, r7
 8013b8a:	4b10      	ldr	r3, [pc, #64]	; (8013bcc <_svfiprintf_r+0x1fc>)
 8013b8c:	a904      	add	r1, sp, #16
 8013b8e:	f3af 8000 	nop.w
 8013b92:	1c42      	adds	r2, r0, #1
 8013b94:	4606      	mov	r6, r0
 8013b96:	d1d6      	bne.n	8013b46 <_svfiprintf_r+0x176>
 8013b98:	89ab      	ldrh	r3, [r5, #12]
 8013b9a:	065b      	lsls	r3, r3, #25
 8013b9c:	f53f af2c 	bmi.w	80139f8 <_svfiprintf_r+0x28>
 8013ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ba2:	b01d      	add	sp, #116	; 0x74
 8013ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba8:	ab03      	add	r3, sp, #12
 8013baa:	9300      	str	r3, [sp, #0]
 8013bac:	462a      	mov	r2, r5
 8013bae:	4638      	mov	r0, r7
 8013bb0:	4b06      	ldr	r3, [pc, #24]	; (8013bcc <_svfiprintf_r+0x1fc>)
 8013bb2:	a904      	add	r1, sp, #16
 8013bb4:	f000 f9d4 	bl	8013f60 <_printf_i>
 8013bb8:	e7eb      	b.n	8013b92 <_svfiprintf_r+0x1c2>
 8013bba:	bf00      	nop
 8013bbc:	080170e4 	.word	0x080170e4
 8013bc0:	080170ea 	.word	0x080170ea
 8013bc4:	080170ee 	.word	0x080170ee
 8013bc8:	00000000 	.word	0x00000000
 8013bcc:	08013919 	.word	0x08013919

08013bd0 <__sfputc_r>:
 8013bd0:	6893      	ldr	r3, [r2, #8]
 8013bd2:	b410      	push	{r4}
 8013bd4:	3b01      	subs	r3, #1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	6093      	str	r3, [r2, #8]
 8013bda:	da07      	bge.n	8013bec <__sfputc_r+0x1c>
 8013bdc:	6994      	ldr	r4, [r2, #24]
 8013bde:	42a3      	cmp	r3, r4
 8013be0:	db01      	blt.n	8013be6 <__sfputc_r+0x16>
 8013be2:	290a      	cmp	r1, #10
 8013be4:	d102      	bne.n	8013bec <__sfputc_r+0x1c>
 8013be6:	bc10      	pop	{r4}
 8013be8:	f000 bb24 	b.w	8014234 <__swbuf_r>
 8013bec:	6813      	ldr	r3, [r2, #0]
 8013bee:	1c58      	adds	r0, r3, #1
 8013bf0:	6010      	str	r0, [r2, #0]
 8013bf2:	7019      	strb	r1, [r3, #0]
 8013bf4:	4608      	mov	r0, r1
 8013bf6:	bc10      	pop	{r4}
 8013bf8:	4770      	bx	lr

08013bfa <__sfputs_r>:
 8013bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bfc:	4606      	mov	r6, r0
 8013bfe:	460f      	mov	r7, r1
 8013c00:	4614      	mov	r4, r2
 8013c02:	18d5      	adds	r5, r2, r3
 8013c04:	42ac      	cmp	r4, r5
 8013c06:	d101      	bne.n	8013c0c <__sfputs_r+0x12>
 8013c08:	2000      	movs	r0, #0
 8013c0a:	e007      	b.n	8013c1c <__sfputs_r+0x22>
 8013c0c:	463a      	mov	r2, r7
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c14:	f7ff ffdc 	bl	8013bd0 <__sfputc_r>
 8013c18:	1c43      	adds	r3, r0, #1
 8013c1a:	d1f3      	bne.n	8013c04 <__sfputs_r+0xa>
 8013c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c20 <_vfiprintf_r>:
 8013c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c24:	460d      	mov	r5, r1
 8013c26:	4614      	mov	r4, r2
 8013c28:	4698      	mov	r8, r3
 8013c2a:	4606      	mov	r6, r0
 8013c2c:	b09d      	sub	sp, #116	; 0x74
 8013c2e:	b118      	cbz	r0, 8013c38 <_vfiprintf_r+0x18>
 8013c30:	6983      	ldr	r3, [r0, #24]
 8013c32:	b90b      	cbnz	r3, 8013c38 <_vfiprintf_r+0x18>
 8013c34:	f7ff fdc4 	bl	80137c0 <__sinit>
 8013c38:	4b89      	ldr	r3, [pc, #548]	; (8013e60 <_vfiprintf_r+0x240>)
 8013c3a:	429d      	cmp	r5, r3
 8013c3c:	d11b      	bne.n	8013c76 <_vfiprintf_r+0x56>
 8013c3e:	6875      	ldr	r5, [r6, #4]
 8013c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c42:	07d9      	lsls	r1, r3, #31
 8013c44:	d405      	bmi.n	8013c52 <_vfiprintf_r+0x32>
 8013c46:	89ab      	ldrh	r3, [r5, #12]
 8013c48:	059a      	lsls	r2, r3, #22
 8013c4a:	d402      	bmi.n	8013c52 <_vfiprintf_r+0x32>
 8013c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c4e:	f7ff fe55 	bl	80138fc <__retarget_lock_acquire_recursive>
 8013c52:	89ab      	ldrh	r3, [r5, #12]
 8013c54:	071b      	lsls	r3, r3, #28
 8013c56:	d501      	bpl.n	8013c5c <_vfiprintf_r+0x3c>
 8013c58:	692b      	ldr	r3, [r5, #16]
 8013c5a:	b9eb      	cbnz	r3, 8013c98 <_vfiprintf_r+0x78>
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f000 fb4c 	bl	80142fc <__swsetup_r>
 8013c64:	b1c0      	cbz	r0, 8013c98 <_vfiprintf_r+0x78>
 8013c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c68:	07dc      	lsls	r4, r3, #31
 8013c6a:	d50e      	bpl.n	8013c8a <_vfiprintf_r+0x6a>
 8013c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c70:	b01d      	add	sp, #116	; 0x74
 8013c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c76:	4b7b      	ldr	r3, [pc, #492]	; (8013e64 <_vfiprintf_r+0x244>)
 8013c78:	429d      	cmp	r5, r3
 8013c7a:	d101      	bne.n	8013c80 <_vfiprintf_r+0x60>
 8013c7c:	68b5      	ldr	r5, [r6, #8]
 8013c7e:	e7df      	b.n	8013c40 <_vfiprintf_r+0x20>
 8013c80:	4b79      	ldr	r3, [pc, #484]	; (8013e68 <_vfiprintf_r+0x248>)
 8013c82:	429d      	cmp	r5, r3
 8013c84:	bf08      	it	eq
 8013c86:	68f5      	ldreq	r5, [r6, #12]
 8013c88:	e7da      	b.n	8013c40 <_vfiprintf_r+0x20>
 8013c8a:	89ab      	ldrh	r3, [r5, #12]
 8013c8c:	0598      	lsls	r0, r3, #22
 8013c8e:	d4ed      	bmi.n	8013c6c <_vfiprintf_r+0x4c>
 8013c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c92:	f7ff fe34 	bl	80138fe <__retarget_lock_release_recursive>
 8013c96:	e7e9      	b.n	8013c6c <_vfiprintf_r+0x4c>
 8013c98:	2300      	movs	r3, #0
 8013c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c9c:	2320      	movs	r3, #32
 8013c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ca2:	2330      	movs	r3, #48	; 0x30
 8013ca4:	f04f 0901 	mov.w	r9, #1
 8013ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013cac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013e6c <_vfiprintf_r+0x24c>
 8013cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013cb4:	4623      	mov	r3, r4
 8013cb6:	469a      	mov	sl, r3
 8013cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013cbc:	b10a      	cbz	r2, 8013cc2 <_vfiprintf_r+0xa2>
 8013cbe:	2a25      	cmp	r2, #37	; 0x25
 8013cc0:	d1f9      	bne.n	8013cb6 <_vfiprintf_r+0x96>
 8013cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8013cc6:	d00b      	beq.n	8013ce0 <_vfiprintf_r+0xc0>
 8013cc8:	465b      	mov	r3, fp
 8013cca:	4622      	mov	r2, r4
 8013ccc:	4629      	mov	r1, r5
 8013cce:	4630      	mov	r0, r6
 8013cd0:	f7ff ff93 	bl	8013bfa <__sfputs_r>
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	f000 80aa 	beq.w	8013e2e <_vfiprintf_r+0x20e>
 8013cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cdc:	445a      	add	r2, fp
 8013cde:	9209      	str	r2, [sp, #36]	; 0x24
 8013ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	f000 80a2 	beq.w	8013e2e <_vfiprintf_r+0x20e>
 8013cea:	2300      	movs	r3, #0
 8013cec:	f04f 32ff 	mov.w	r2, #4294967295
 8013cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cf4:	f10a 0a01 	add.w	sl, sl, #1
 8013cf8:	9304      	str	r3, [sp, #16]
 8013cfa:	9307      	str	r3, [sp, #28]
 8013cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d00:	931a      	str	r3, [sp, #104]	; 0x68
 8013d02:	4654      	mov	r4, sl
 8013d04:	2205      	movs	r2, #5
 8013d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d0a:	4858      	ldr	r0, [pc, #352]	; (8013e6c <_vfiprintf_r+0x24c>)
 8013d0c:	f000 fcaa 	bl	8014664 <memchr>
 8013d10:	9a04      	ldr	r2, [sp, #16]
 8013d12:	b9d8      	cbnz	r0, 8013d4c <_vfiprintf_r+0x12c>
 8013d14:	06d1      	lsls	r1, r2, #27
 8013d16:	bf44      	itt	mi
 8013d18:	2320      	movmi	r3, #32
 8013d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d1e:	0713      	lsls	r3, r2, #28
 8013d20:	bf44      	itt	mi
 8013d22:	232b      	movmi	r3, #43	; 0x2b
 8013d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d28:	f89a 3000 	ldrb.w	r3, [sl]
 8013d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8013d2e:	d015      	beq.n	8013d5c <_vfiprintf_r+0x13c>
 8013d30:	4654      	mov	r4, sl
 8013d32:	2000      	movs	r0, #0
 8013d34:	f04f 0c0a 	mov.w	ip, #10
 8013d38:	9a07      	ldr	r2, [sp, #28]
 8013d3a:	4621      	mov	r1, r4
 8013d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d40:	3b30      	subs	r3, #48	; 0x30
 8013d42:	2b09      	cmp	r3, #9
 8013d44:	d94e      	bls.n	8013de4 <_vfiprintf_r+0x1c4>
 8013d46:	b1b0      	cbz	r0, 8013d76 <_vfiprintf_r+0x156>
 8013d48:	9207      	str	r2, [sp, #28]
 8013d4a:	e014      	b.n	8013d76 <_vfiprintf_r+0x156>
 8013d4c:	eba0 0308 	sub.w	r3, r0, r8
 8013d50:	fa09 f303 	lsl.w	r3, r9, r3
 8013d54:	4313      	orrs	r3, r2
 8013d56:	46a2      	mov	sl, r4
 8013d58:	9304      	str	r3, [sp, #16]
 8013d5a:	e7d2      	b.n	8013d02 <_vfiprintf_r+0xe2>
 8013d5c:	9b03      	ldr	r3, [sp, #12]
 8013d5e:	1d19      	adds	r1, r3, #4
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	9103      	str	r1, [sp, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bfbb      	ittet	lt
 8013d68:	425b      	neglt	r3, r3
 8013d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8013d6e:	9307      	strge	r3, [sp, #28]
 8013d70:	9307      	strlt	r3, [sp, #28]
 8013d72:	bfb8      	it	lt
 8013d74:	9204      	strlt	r2, [sp, #16]
 8013d76:	7823      	ldrb	r3, [r4, #0]
 8013d78:	2b2e      	cmp	r3, #46	; 0x2e
 8013d7a:	d10c      	bne.n	8013d96 <_vfiprintf_r+0x176>
 8013d7c:	7863      	ldrb	r3, [r4, #1]
 8013d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8013d80:	d135      	bne.n	8013dee <_vfiprintf_r+0x1ce>
 8013d82:	9b03      	ldr	r3, [sp, #12]
 8013d84:	3402      	adds	r4, #2
 8013d86:	1d1a      	adds	r2, r3, #4
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	9203      	str	r2, [sp, #12]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	bfb8      	it	lt
 8013d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d94:	9305      	str	r3, [sp, #20]
 8013d96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013e70 <_vfiprintf_r+0x250>
 8013d9a:	2203      	movs	r2, #3
 8013d9c:	4650      	mov	r0, sl
 8013d9e:	7821      	ldrb	r1, [r4, #0]
 8013da0:	f000 fc60 	bl	8014664 <memchr>
 8013da4:	b140      	cbz	r0, 8013db8 <_vfiprintf_r+0x198>
 8013da6:	2340      	movs	r3, #64	; 0x40
 8013da8:	eba0 000a 	sub.w	r0, r0, sl
 8013dac:	fa03 f000 	lsl.w	r0, r3, r0
 8013db0:	9b04      	ldr	r3, [sp, #16]
 8013db2:	3401      	adds	r4, #1
 8013db4:	4303      	orrs	r3, r0
 8013db6:	9304      	str	r3, [sp, #16]
 8013db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dbc:	2206      	movs	r2, #6
 8013dbe:	482d      	ldr	r0, [pc, #180]	; (8013e74 <_vfiprintf_r+0x254>)
 8013dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013dc4:	f000 fc4e 	bl	8014664 <memchr>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d03f      	beq.n	8013e4c <_vfiprintf_r+0x22c>
 8013dcc:	4b2a      	ldr	r3, [pc, #168]	; (8013e78 <_vfiprintf_r+0x258>)
 8013dce:	bb1b      	cbnz	r3, 8013e18 <_vfiprintf_r+0x1f8>
 8013dd0:	9b03      	ldr	r3, [sp, #12]
 8013dd2:	3307      	adds	r3, #7
 8013dd4:	f023 0307 	bic.w	r3, r3, #7
 8013dd8:	3308      	adds	r3, #8
 8013dda:	9303      	str	r3, [sp, #12]
 8013ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dde:	443b      	add	r3, r7
 8013de0:	9309      	str	r3, [sp, #36]	; 0x24
 8013de2:	e767      	b.n	8013cb4 <_vfiprintf_r+0x94>
 8013de4:	460c      	mov	r4, r1
 8013de6:	2001      	movs	r0, #1
 8013de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013dec:	e7a5      	b.n	8013d3a <_vfiprintf_r+0x11a>
 8013dee:	2300      	movs	r3, #0
 8013df0:	f04f 0c0a 	mov.w	ip, #10
 8013df4:	4619      	mov	r1, r3
 8013df6:	3401      	adds	r4, #1
 8013df8:	9305      	str	r3, [sp, #20]
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e00:	3a30      	subs	r2, #48	; 0x30
 8013e02:	2a09      	cmp	r2, #9
 8013e04:	d903      	bls.n	8013e0e <_vfiprintf_r+0x1ee>
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d0c5      	beq.n	8013d96 <_vfiprintf_r+0x176>
 8013e0a:	9105      	str	r1, [sp, #20]
 8013e0c:	e7c3      	b.n	8013d96 <_vfiprintf_r+0x176>
 8013e0e:	4604      	mov	r4, r0
 8013e10:	2301      	movs	r3, #1
 8013e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e16:	e7f0      	b.n	8013dfa <_vfiprintf_r+0x1da>
 8013e18:	ab03      	add	r3, sp, #12
 8013e1a:	9300      	str	r3, [sp, #0]
 8013e1c:	462a      	mov	r2, r5
 8013e1e:	4630      	mov	r0, r6
 8013e20:	4b16      	ldr	r3, [pc, #88]	; (8013e7c <_vfiprintf_r+0x25c>)
 8013e22:	a904      	add	r1, sp, #16
 8013e24:	f3af 8000 	nop.w
 8013e28:	4607      	mov	r7, r0
 8013e2a:	1c78      	adds	r0, r7, #1
 8013e2c:	d1d6      	bne.n	8013ddc <_vfiprintf_r+0x1bc>
 8013e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e30:	07d9      	lsls	r1, r3, #31
 8013e32:	d405      	bmi.n	8013e40 <_vfiprintf_r+0x220>
 8013e34:	89ab      	ldrh	r3, [r5, #12]
 8013e36:	059a      	lsls	r2, r3, #22
 8013e38:	d402      	bmi.n	8013e40 <_vfiprintf_r+0x220>
 8013e3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e3c:	f7ff fd5f 	bl	80138fe <__retarget_lock_release_recursive>
 8013e40:	89ab      	ldrh	r3, [r5, #12]
 8013e42:	065b      	lsls	r3, r3, #25
 8013e44:	f53f af12 	bmi.w	8013c6c <_vfiprintf_r+0x4c>
 8013e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e4a:	e711      	b.n	8013c70 <_vfiprintf_r+0x50>
 8013e4c:	ab03      	add	r3, sp, #12
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	462a      	mov	r2, r5
 8013e52:	4630      	mov	r0, r6
 8013e54:	4b09      	ldr	r3, [pc, #36]	; (8013e7c <_vfiprintf_r+0x25c>)
 8013e56:	a904      	add	r1, sp, #16
 8013e58:	f000 f882 	bl	8013f60 <_printf_i>
 8013e5c:	e7e4      	b.n	8013e28 <_vfiprintf_r+0x208>
 8013e5e:	bf00      	nop
 8013e60:	080170a4 	.word	0x080170a4
 8013e64:	080170c4 	.word	0x080170c4
 8013e68:	08017084 	.word	0x08017084
 8013e6c:	080170e4 	.word	0x080170e4
 8013e70:	080170ea 	.word	0x080170ea
 8013e74:	080170ee 	.word	0x080170ee
 8013e78:	00000000 	.word	0x00000000
 8013e7c:	08013bfb 	.word	0x08013bfb

08013e80 <_printf_common>:
 8013e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e84:	4616      	mov	r6, r2
 8013e86:	4699      	mov	r9, r3
 8013e88:	688a      	ldr	r2, [r1, #8]
 8013e8a:	690b      	ldr	r3, [r1, #16]
 8013e8c:	4607      	mov	r7, r0
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	bfb8      	it	lt
 8013e92:	4613      	movlt	r3, r2
 8013e94:	6033      	str	r3, [r6, #0]
 8013e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e9a:	460c      	mov	r4, r1
 8013e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ea0:	b10a      	cbz	r2, 8013ea6 <_printf_common+0x26>
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	6033      	str	r3, [r6, #0]
 8013ea6:	6823      	ldr	r3, [r4, #0]
 8013ea8:	0699      	lsls	r1, r3, #26
 8013eaa:	bf42      	ittt	mi
 8013eac:	6833      	ldrmi	r3, [r6, #0]
 8013eae:	3302      	addmi	r3, #2
 8013eb0:	6033      	strmi	r3, [r6, #0]
 8013eb2:	6825      	ldr	r5, [r4, #0]
 8013eb4:	f015 0506 	ands.w	r5, r5, #6
 8013eb8:	d106      	bne.n	8013ec8 <_printf_common+0x48>
 8013eba:	f104 0a19 	add.w	sl, r4, #25
 8013ebe:	68e3      	ldr	r3, [r4, #12]
 8013ec0:	6832      	ldr	r2, [r6, #0]
 8013ec2:	1a9b      	subs	r3, r3, r2
 8013ec4:	42ab      	cmp	r3, r5
 8013ec6:	dc28      	bgt.n	8013f1a <_printf_common+0x9a>
 8013ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ecc:	1e13      	subs	r3, r2, #0
 8013ece:	6822      	ldr	r2, [r4, #0]
 8013ed0:	bf18      	it	ne
 8013ed2:	2301      	movne	r3, #1
 8013ed4:	0692      	lsls	r2, r2, #26
 8013ed6:	d42d      	bmi.n	8013f34 <_printf_common+0xb4>
 8013ed8:	4649      	mov	r1, r9
 8013eda:	4638      	mov	r0, r7
 8013edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ee0:	47c0      	blx	r8
 8013ee2:	3001      	adds	r0, #1
 8013ee4:	d020      	beq.n	8013f28 <_printf_common+0xa8>
 8013ee6:	6823      	ldr	r3, [r4, #0]
 8013ee8:	68e5      	ldr	r5, [r4, #12]
 8013eea:	f003 0306 	and.w	r3, r3, #6
 8013eee:	2b04      	cmp	r3, #4
 8013ef0:	bf18      	it	ne
 8013ef2:	2500      	movne	r5, #0
 8013ef4:	6832      	ldr	r2, [r6, #0]
 8013ef6:	f04f 0600 	mov.w	r6, #0
 8013efa:	68a3      	ldr	r3, [r4, #8]
 8013efc:	bf08      	it	eq
 8013efe:	1aad      	subeq	r5, r5, r2
 8013f00:	6922      	ldr	r2, [r4, #16]
 8013f02:	bf08      	it	eq
 8013f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	bfc4      	itt	gt
 8013f0c:	1a9b      	subgt	r3, r3, r2
 8013f0e:	18ed      	addgt	r5, r5, r3
 8013f10:	341a      	adds	r4, #26
 8013f12:	42b5      	cmp	r5, r6
 8013f14:	d11a      	bne.n	8013f4c <_printf_common+0xcc>
 8013f16:	2000      	movs	r0, #0
 8013f18:	e008      	b.n	8013f2c <_printf_common+0xac>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	4652      	mov	r2, sl
 8013f1e:	4649      	mov	r1, r9
 8013f20:	4638      	mov	r0, r7
 8013f22:	47c0      	blx	r8
 8013f24:	3001      	adds	r0, #1
 8013f26:	d103      	bne.n	8013f30 <_printf_common+0xb0>
 8013f28:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f30:	3501      	adds	r5, #1
 8013f32:	e7c4      	b.n	8013ebe <_printf_common+0x3e>
 8013f34:	2030      	movs	r0, #48	; 0x30
 8013f36:	18e1      	adds	r1, r4, r3
 8013f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f3c:	1c5a      	adds	r2, r3, #1
 8013f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f42:	4422      	add	r2, r4
 8013f44:	3302      	adds	r3, #2
 8013f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f4a:	e7c5      	b.n	8013ed8 <_printf_common+0x58>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	4622      	mov	r2, r4
 8013f50:	4649      	mov	r1, r9
 8013f52:	4638      	mov	r0, r7
 8013f54:	47c0      	blx	r8
 8013f56:	3001      	adds	r0, #1
 8013f58:	d0e6      	beq.n	8013f28 <_printf_common+0xa8>
 8013f5a:	3601      	adds	r6, #1
 8013f5c:	e7d9      	b.n	8013f12 <_printf_common+0x92>
	...

08013f60 <_printf_i>:
 8013f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f64:	7e0f      	ldrb	r7, [r1, #24]
 8013f66:	4691      	mov	r9, r2
 8013f68:	2f78      	cmp	r7, #120	; 0x78
 8013f6a:	4680      	mov	r8, r0
 8013f6c:	460c      	mov	r4, r1
 8013f6e:	469a      	mov	sl, r3
 8013f70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f76:	d807      	bhi.n	8013f88 <_printf_i+0x28>
 8013f78:	2f62      	cmp	r7, #98	; 0x62
 8013f7a:	d80a      	bhi.n	8013f92 <_printf_i+0x32>
 8013f7c:	2f00      	cmp	r7, #0
 8013f7e:	f000 80d9 	beq.w	8014134 <_printf_i+0x1d4>
 8013f82:	2f58      	cmp	r7, #88	; 0x58
 8013f84:	f000 80a4 	beq.w	80140d0 <_printf_i+0x170>
 8013f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f90:	e03a      	b.n	8014008 <_printf_i+0xa8>
 8013f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f96:	2b15      	cmp	r3, #21
 8013f98:	d8f6      	bhi.n	8013f88 <_printf_i+0x28>
 8013f9a:	a101      	add	r1, pc, #4	; (adr r1, 8013fa0 <_printf_i+0x40>)
 8013f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fa0:	08013ff9 	.word	0x08013ff9
 8013fa4:	0801400d 	.word	0x0801400d
 8013fa8:	08013f89 	.word	0x08013f89
 8013fac:	08013f89 	.word	0x08013f89
 8013fb0:	08013f89 	.word	0x08013f89
 8013fb4:	08013f89 	.word	0x08013f89
 8013fb8:	0801400d 	.word	0x0801400d
 8013fbc:	08013f89 	.word	0x08013f89
 8013fc0:	08013f89 	.word	0x08013f89
 8013fc4:	08013f89 	.word	0x08013f89
 8013fc8:	08013f89 	.word	0x08013f89
 8013fcc:	0801411b 	.word	0x0801411b
 8013fd0:	0801403d 	.word	0x0801403d
 8013fd4:	080140fd 	.word	0x080140fd
 8013fd8:	08013f89 	.word	0x08013f89
 8013fdc:	08013f89 	.word	0x08013f89
 8013fe0:	0801413d 	.word	0x0801413d
 8013fe4:	08013f89 	.word	0x08013f89
 8013fe8:	0801403d 	.word	0x0801403d
 8013fec:	08013f89 	.word	0x08013f89
 8013ff0:	08013f89 	.word	0x08013f89
 8013ff4:	08014105 	.word	0x08014105
 8013ff8:	682b      	ldr	r3, [r5, #0]
 8013ffa:	1d1a      	adds	r2, r3, #4
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	602a      	str	r2, [r5, #0]
 8014000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014008:	2301      	movs	r3, #1
 801400a:	e0a4      	b.n	8014156 <_printf_i+0x1f6>
 801400c:	6820      	ldr	r0, [r4, #0]
 801400e:	6829      	ldr	r1, [r5, #0]
 8014010:	0606      	lsls	r6, r0, #24
 8014012:	f101 0304 	add.w	r3, r1, #4
 8014016:	d50a      	bpl.n	801402e <_printf_i+0xce>
 8014018:	680e      	ldr	r6, [r1, #0]
 801401a:	602b      	str	r3, [r5, #0]
 801401c:	2e00      	cmp	r6, #0
 801401e:	da03      	bge.n	8014028 <_printf_i+0xc8>
 8014020:	232d      	movs	r3, #45	; 0x2d
 8014022:	4276      	negs	r6, r6
 8014024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014028:	230a      	movs	r3, #10
 801402a:	485e      	ldr	r0, [pc, #376]	; (80141a4 <_printf_i+0x244>)
 801402c:	e019      	b.n	8014062 <_printf_i+0x102>
 801402e:	680e      	ldr	r6, [r1, #0]
 8014030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014034:	602b      	str	r3, [r5, #0]
 8014036:	bf18      	it	ne
 8014038:	b236      	sxthne	r6, r6
 801403a:	e7ef      	b.n	801401c <_printf_i+0xbc>
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	6820      	ldr	r0, [r4, #0]
 8014040:	1d19      	adds	r1, r3, #4
 8014042:	6029      	str	r1, [r5, #0]
 8014044:	0601      	lsls	r1, r0, #24
 8014046:	d501      	bpl.n	801404c <_printf_i+0xec>
 8014048:	681e      	ldr	r6, [r3, #0]
 801404a:	e002      	b.n	8014052 <_printf_i+0xf2>
 801404c:	0646      	lsls	r6, r0, #25
 801404e:	d5fb      	bpl.n	8014048 <_printf_i+0xe8>
 8014050:	881e      	ldrh	r6, [r3, #0]
 8014052:	2f6f      	cmp	r7, #111	; 0x6f
 8014054:	bf0c      	ite	eq
 8014056:	2308      	moveq	r3, #8
 8014058:	230a      	movne	r3, #10
 801405a:	4852      	ldr	r0, [pc, #328]	; (80141a4 <_printf_i+0x244>)
 801405c:	2100      	movs	r1, #0
 801405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014062:	6865      	ldr	r5, [r4, #4]
 8014064:	2d00      	cmp	r5, #0
 8014066:	bfa8      	it	ge
 8014068:	6821      	ldrge	r1, [r4, #0]
 801406a:	60a5      	str	r5, [r4, #8]
 801406c:	bfa4      	itt	ge
 801406e:	f021 0104 	bicge.w	r1, r1, #4
 8014072:	6021      	strge	r1, [r4, #0]
 8014074:	b90e      	cbnz	r6, 801407a <_printf_i+0x11a>
 8014076:	2d00      	cmp	r5, #0
 8014078:	d04d      	beq.n	8014116 <_printf_i+0x1b6>
 801407a:	4615      	mov	r5, r2
 801407c:	fbb6 f1f3 	udiv	r1, r6, r3
 8014080:	fb03 6711 	mls	r7, r3, r1, r6
 8014084:	5dc7      	ldrb	r7, [r0, r7]
 8014086:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801408a:	4637      	mov	r7, r6
 801408c:	42bb      	cmp	r3, r7
 801408e:	460e      	mov	r6, r1
 8014090:	d9f4      	bls.n	801407c <_printf_i+0x11c>
 8014092:	2b08      	cmp	r3, #8
 8014094:	d10b      	bne.n	80140ae <_printf_i+0x14e>
 8014096:	6823      	ldr	r3, [r4, #0]
 8014098:	07de      	lsls	r6, r3, #31
 801409a:	d508      	bpl.n	80140ae <_printf_i+0x14e>
 801409c:	6923      	ldr	r3, [r4, #16]
 801409e:	6861      	ldr	r1, [r4, #4]
 80140a0:	4299      	cmp	r1, r3
 80140a2:	bfde      	ittt	le
 80140a4:	2330      	movle	r3, #48	; 0x30
 80140a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80140ae:	1b52      	subs	r2, r2, r5
 80140b0:	6122      	str	r2, [r4, #16]
 80140b2:	464b      	mov	r3, r9
 80140b4:	4621      	mov	r1, r4
 80140b6:	4640      	mov	r0, r8
 80140b8:	f8cd a000 	str.w	sl, [sp]
 80140bc:	aa03      	add	r2, sp, #12
 80140be:	f7ff fedf 	bl	8013e80 <_printf_common>
 80140c2:	3001      	adds	r0, #1
 80140c4:	d14c      	bne.n	8014160 <_printf_i+0x200>
 80140c6:	f04f 30ff 	mov.w	r0, #4294967295
 80140ca:	b004      	add	sp, #16
 80140cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140d0:	4834      	ldr	r0, [pc, #208]	; (80141a4 <_printf_i+0x244>)
 80140d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140d6:	6829      	ldr	r1, [r5, #0]
 80140d8:	6823      	ldr	r3, [r4, #0]
 80140da:	f851 6b04 	ldr.w	r6, [r1], #4
 80140de:	6029      	str	r1, [r5, #0]
 80140e0:	061d      	lsls	r5, r3, #24
 80140e2:	d514      	bpl.n	801410e <_printf_i+0x1ae>
 80140e4:	07df      	lsls	r7, r3, #31
 80140e6:	bf44      	itt	mi
 80140e8:	f043 0320 	orrmi.w	r3, r3, #32
 80140ec:	6023      	strmi	r3, [r4, #0]
 80140ee:	b91e      	cbnz	r6, 80140f8 <_printf_i+0x198>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	f023 0320 	bic.w	r3, r3, #32
 80140f6:	6023      	str	r3, [r4, #0]
 80140f8:	2310      	movs	r3, #16
 80140fa:	e7af      	b.n	801405c <_printf_i+0xfc>
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	f043 0320 	orr.w	r3, r3, #32
 8014102:	6023      	str	r3, [r4, #0]
 8014104:	2378      	movs	r3, #120	; 0x78
 8014106:	4828      	ldr	r0, [pc, #160]	; (80141a8 <_printf_i+0x248>)
 8014108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801410c:	e7e3      	b.n	80140d6 <_printf_i+0x176>
 801410e:	0659      	lsls	r1, r3, #25
 8014110:	bf48      	it	mi
 8014112:	b2b6      	uxthmi	r6, r6
 8014114:	e7e6      	b.n	80140e4 <_printf_i+0x184>
 8014116:	4615      	mov	r5, r2
 8014118:	e7bb      	b.n	8014092 <_printf_i+0x132>
 801411a:	682b      	ldr	r3, [r5, #0]
 801411c:	6826      	ldr	r6, [r4, #0]
 801411e:	1d18      	adds	r0, r3, #4
 8014120:	6961      	ldr	r1, [r4, #20]
 8014122:	6028      	str	r0, [r5, #0]
 8014124:	0635      	lsls	r5, r6, #24
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	d501      	bpl.n	801412e <_printf_i+0x1ce>
 801412a:	6019      	str	r1, [r3, #0]
 801412c:	e002      	b.n	8014134 <_printf_i+0x1d4>
 801412e:	0670      	lsls	r0, r6, #25
 8014130:	d5fb      	bpl.n	801412a <_printf_i+0x1ca>
 8014132:	8019      	strh	r1, [r3, #0]
 8014134:	2300      	movs	r3, #0
 8014136:	4615      	mov	r5, r2
 8014138:	6123      	str	r3, [r4, #16]
 801413a:	e7ba      	b.n	80140b2 <_printf_i+0x152>
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	2100      	movs	r1, #0
 8014140:	1d1a      	adds	r2, r3, #4
 8014142:	602a      	str	r2, [r5, #0]
 8014144:	681d      	ldr	r5, [r3, #0]
 8014146:	6862      	ldr	r2, [r4, #4]
 8014148:	4628      	mov	r0, r5
 801414a:	f000 fa8b 	bl	8014664 <memchr>
 801414e:	b108      	cbz	r0, 8014154 <_printf_i+0x1f4>
 8014150:	1b40      	subs	r0, r0, r5
 8014152:	6060      	str	r0, [r4, #4]
 8014154:	6863      	ldr	r3, [r4, #4]
 8014156:	6123      	str	r3, [r4, #16]
 8014158:	2300      	movs	r3, #0
 801415a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801415e:	e7a8      	b.n	80140b2 <_printf_i+0x152>
 8014160:	462a      	mov	r2, r5
 8014162:	4649      	mov	r1, r9
 8014164:	4640      	mov	r0, r8
 8014166:	6923      	ldr	r3, [r4, #16]
 8014168:	47d0      	blx	sl
 801416a:	3001      	adds	r0, #1
 801416c:	d0ab      	beq.n	80140c6 <_printf_i+0x166>
 801416e:	6823      	ldr	r3, [r4, #0]
 8014170:	079b      	lsls	r3, r3, #30
 8014172:	d413      	bmi.n	801419c <_printf_i+0x23c>
 8014174:	68e0      	ldr	r0, [r4, #12]
 8014176:	9b03      	ldr	r3, [sp, #12]
 8014178:	4298      	cmp	r0, r3
 801417a:	bfb8      	it	lt
 801417c:	4618      	movlt	r0, r3
 801417e:	e7a4      	b.n	80140ca <_printf_i+0x16a>
 8014180:	2301      	movs	r3, #1
 8014182:	4632      	mov	r2, r6
 8014184:	4649      	mov	r1, r9
 8014186:	4640      	mov	r0, r8
 8014188:	47d0      	blx	sl
 801418a:	3001      	adds	r0, #1
 801418c:	d09b      	beq.n	80140c6 <_printf_i+0x166>
 801418e:	3501      	adds	r5, #1
 8014190:	68e3      	ldr	r3, [r4, #12]
 8014192:	9903      	ldr	r1, [sp, #12]
 8014194:	1a5b      	subs	r3, r3, r1
 8014196:	42ab      	cmp	r3, r5
 8014198:	dcf2      	bgt.n	8014180 <_printf_i+0x220>
 801419a:	e7eb      	b.n	8014174 <_printf_i+0x214>
 801419c:	2500      	movs	r5, #0
 801419e:	f104 0619 	add.w	r6, r4, #25
 80141a2:	e7f5      	b.n	8014190 <_printf_i+0x230>
 80141a4:	080170f5 	.word	0x080170f5
 80141a8:	08017106 	.word	0x08017106

080141ac <__sread>:
 80141ac:	b510      	push	{r4, lr}
 80141ae:	460c      	mov	r4, r1
 80141b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141b4:	f000 faae 	bl	8014714 <_read_r>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	bfab      	itete	ge
 80141bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141be:	89a3      	ldrhlt	r3, [r4, #12]
 80141c0:	181b      	addge	r3, r3, r0
 80141c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80141c6:	bfac      	ite	ge
 80141c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80141ca:	81a3      	strhlt	r3, [r4, #12]
 80141cc:	bd10      	pop	{r4, pc}

080141ce <__swrite>:
 80141ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d2:	461f      	mov	r7, r3
 80141d4:	898b      	ldrh	r3, [r1, #12]
 80141d6:	4605      	mov	r5, r0
 80141d8:	05db      	lsls	r3, r3, #23
 80141da:	460c      	mov	r4, r1
 80141dc:	4616      	mov	r6, r2
 80141de:	d505      	bpl.n	80141ec <__swrite+0x1e>
 80141e0:	2302      	movs	r3, #2
 80141e2:	2200      	movs	r2, #0
 80141e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141e8:	f000 f9c4 	bl	8014574 <_lseek_r>
 80141ec:	89a3      	ldrh	r3, [r4, #12]
 80141ee:	4632      	mov	r2, r6
 80141f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141f4:	81a3      	strh	r3, [r4, #12]
 80141f6:	4628      	mov	r0, r5
 80141f8:	463b      	mov	r3, r7
 80141fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014202:	f000 b869 	b.w	80142d8 <_write_r>

08014206 <__sseek>:
 8014206:	b510      	push	{r4, lr}
 8014208:	460c      	mov	r4, r1
 801420a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801420e:	f000 f9b1 	bl	8014574 <_lseek_r>
 8014212:	1c43      	adds	r3, r0, #1
 8014214:	89a3      	ldrh	r3, [r4, #12]
 8014216:	bf15      	itete	ne
 8014218:	6560      	strne	r0, [r4, #84]	; 0x54
 801421a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801421e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014222:	81a3      	strheq	r3, [r4, #12]
 8014224:	bf18      	it	ne
 8014226:	81a3      	strhne	r3, [r4, #12]
 8014228:	bd10      	pop	{r4, pc}

0801422a <__sclose>:
 801422a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801422e:	f000 b8d3 	b.w	80143d8 <_close_r>
	...

08014234 <__swbuf_r>:
 8014234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014236:	460e      	mov	r6, r1
 8014238:	4614      	mov	r4, r2
 801423a:	4605      	mov	r5, r0
 801423c:	b118      	cbz	r0, 8014246 <__swbuf_r+0x12>
 801423e:	6983      	ldr	r3, [r0, #24]
 8014240:	b90b      	cbnz	r3, 8014246 <__swbuf_r+0x12>
 8014242:	f7ff fabd 	bl	80137c0 <__sinit>
 8014246:	4b21      	ldr	r3, [pc, #132]	; (80142cc <__swbuf_r+0x98>)
 8014248:	429c      	cmp	r4, r3
 801424a:	d12b      	bne.n	80142a4 <__swbuf_r+0x70>
 801424c:	686c      	ldr	r4, [r5, #4]
 801424e:	69a3      	ldr	r3, [r4, #24]
 8014250:	60a3      	str	r3, [r4, #8]
 8014252:	89a3      	ldrh	r3, [r4, #12]
 8014254:	071a      	lsls	r2, r3, #28
 8014256:	d52f      	bpl.n	80142b8 <__swbuf_r+0x84>
 8014258:	6923      	ldr	r3, [r4, #16]
 801425a:	b36b      	cbz	r3, 80142b8 <__swbuf_r+0x84>
 801425c:	6923      	ldr	r3, [r4, #16]
 801425e:	6820      	ldr	r0, [r4, #0]
 8014260:	b2f6      	uxtb	r6, r6
 8014262:	1ac0      	subs	r0, r0, r3
 8014264:	6963      	ldr	r3, [r4, #20]
 8014266:	4637      	mov	r7, r6
 8014268:	4283      	cmp	r3, r0
 801426a:	dc04      	bgt.n	8014276 <__swbuf_r+0x42>
 801426c:	4621      	mov	r1, r4
 801426e:	4628      	mov	r0, r5
 8014270:	f000 f944 	bl	80144fc <_fflush_r>
 8014274:	bb30      	cbnz	r0, 80142c4 <__swbuf_r+0x90>
 8014276:	68a3      	ldr	r3, [r4, #8]
 8014278:	3001      	adds	r0, #1
 801427a:	3b01      	subs	r3, #1
 801427c:	60a3      	str	r3, [r4, #8]
 801427e:	6823      	ldr	r3, [r4, #0]
 8014280:	1c5a      	adds	r2, r3, #1
 8014282:	6022      	str	r2, [r4, #0]
 8014284:	701e      	strb	r6, [r3, #0]
 8014286:	6963      	ldr	r3, [r4, #20]
 8014288:	4283      	cmp	r3, r0
 801428a:	d004      	beq.n	8014296 <__swbuf_r+0x62>
 801428c:	89a3      	ldrh	r3, [r4, #12]
 801428e:	07db      	lsls	r3, r3, #31
 8014290:	d506      	bpl.n	80142a0 <__swbuf_r+0x6c>
 8014292:	2e0a      	cmp	r6, #10
 8014294:	d104      	bne.n	80142a0 <__swbuf_r+0x6c>
 8014296:	4621      	mov	r1, r4
 8014298:	4628      	mov	r0, r5
 801429a:	f000 f92f 	bl	80144fc <_fflush_r>
 801429e:	b988      	cbnz	r0, 80142c4 <__swbuf_r+0x90>
 80142a0:	4638      	mov	r0, r7
 80142a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142a4:	4b0a      	ldr	r3, [pc, #40]	; (80142d0 <__swbuf_r+0x9c>)
 80142a6:	429c      	cmp	r4, r3
 80142a8:	d101      	bne.n	80142ae <__swbuf_r+0x7a>
 80142aa:	68ac      	ldr	r4, [r5, #8]
 80142ac:	e7cf      	b.n	801424e <__swbuf_r+0x1a>
 80142ae:	4b09      	ldr	r3, [pc, #36]	; (80142d4 <__swbuf_r+0xa0>)
 80142b0:	429c      	cmp	r4, r3
 80142b2:	bf08      	it	eq
 80142b4:	68ec      	ldreq	r4, [r5, #12]
 80142b6:	e7ca      	b.n	801424e <__swbuf_r+0x1a>
 80142b8:	4621      	mov	r1, r4
 80142ba:	4628      	mov	r0, r5
 80142bc:	f000 f81e 	bl	80142fc <__swsetup_r>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d0cb      	beq.n	801425c <__swbuf_r+0x28>
 80142c4:	f04f 37ff 	mov.w	r7, #4294967295
 80142c8:	e7ea      	b.n	80142a0 <__swbuf_r+0x6c>
 80142ca:	bf00      	nop
 80142cc:	080170a4 	.word	0x080170a4
 80142d0:	080170c4 	.word	0x080170c4
 80142d4:	08017084 	.word	0x08017084

080142d8 <_write_r>:
 80142d8:	b538      	push	{r3, r4, r5, lr}
 80142da:	4604      	mov	r4, r0
 80142dc:	4608      	mov	r0, r1
 80142de:	4611      	mov	r1, r2
 80142e0:	2200      	movs	r2, #0
 80142e2:	4d05      	ldr	r5, [pc, #20]	; (80142f8 <_write_r+0x20>)
 80142e4:	602a      	str	r2, [r5, #0]
 80142e6:	461a      	mov	r2, r3
 80142e8:	f7ec fb31 	bl	800094e <_write>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	d102      	bne.n	80142f6 <_write_r+0x1e>
 80142f0:	682b      	ldr	r3, [r5, #0]
 80142f2:	b103      	cbz	r3, 80142f6 <_write_r+0x1e>
 80142f4:	6023      	str	r3, [r4, #0]
 80142f6:	bd38      	pop	{r3, r4, r5, pc}
 80142f8:	2000b908 	.word	0x2000b908

080142fc <__swsetup_r>:
 80142fc:	4b32      	ldr	r3, [pc, #200]	; (80143c8 <__swsetup_r+0xcc>)
 80142fe:	b570      	push	{r4, r5, r6, lr}
 8014300:	681d      	ldr	r5, [r3, #0]
 8014302:	4606      	mov	r6, r0
 8014304:	460c      	mov	r4, r1
 8014306:	b125      	cbz	r5, 8014312 <__swsetup_r+0x16>
 8014308:	69ab      	ldr	r3, [r5, #24]
 801430a:	b913      	cbnz	r3, 8014312 <__swsetup_r+0x16>
 801430c:	4628      	mov	r0, r5
 801430e:	f7ff fa57 	bl	80137c0 <__sinit>
 8014312:	4b2e      	ldr	r3, [pc, #184]	; (80143cc <__swsetup_r+0xd0>)
 8014314:	429c      	cmp	r4, r3
 8014316:	d10f      	bne.n	8014338 <__swsetup_r+0x3c>
 8014318:	686c      	ldr	r4, [r5, #4]
 801431a:	89a3      	ldrh	r3, [r4, #12]
 801431c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014320:	0719      	lsls	r1, r3, #28
 8014322:	d42c      	bmi.n	801437e <__swsetup_r+0x82>
 8014324:	06dd      	lsls	r5, r3, #27
 8014326:	d411      	bmi.n	801434c <__swsetup_r+0x50>
 8014328:	2309      	movs	r3, #9
 801432a:	6033      	str	r3, [r6, #0]
 801432c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014330:	f04f 30ff 	mov.w	r0, #4294967295
 8014334:	81a3      	strh	r3, [r4, #12]
 8014336:	e03e      	b.n	80143b6 <__swsetup_r+0xba>
 8014338:	4b25      	ldr	r3, [pc, #148]	; (80143d0 <__swsetup_r+0xd4>)
 801433a:	429c      	cmp	r4, r3
 801433c:	d101      	bne.n	8014342 <__swsetup_r+0x46>
 801433e:	68ac      	ldr	r4, [r5, #8]
 8014340:	e7eb      	b.n	801431a <__swsetup_r+0x1e>
 8014342:	4b24      	ldr	r3, [pc, #144]	; (80143d4 <__swsetup_r+0xd8>)
 8014344:	429c      	cmp	r4, r3
 8014346:	bf08      	it	eq
 8014348:	68ec      	ldreq	r4, [r5, #12]
 801434a:	e7e6      	b.n	801431a <__swsetup_r+0x1e>
 801434c:	0758      	lsls	r0, r3, #29
 801434e:	d512      	bpl.n	8014376 <__swsetup_r+0x7a>
 8014350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014352:	b141      	cbz	r1, 8014366 <__swsetup_r+0x6a>
 8014354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014358:	4299      	cmp	r1, r3
 801435a:	d002      	beq.n	8014362 <__swsetup_r+0x66>
 801435c:	4630      	mov	r0, r6
 801435e:	f7ff f8ab 	bl	80134b8 <_free_r>
 8014362:	2300      	movs	r3, #0
 8014364:	6363      	str	r3, [r4, #52]	; 0x34
 8014366:	89a3      	ldrh	r3, [r4, #12]
 8014368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801436c:	81a3      	strh	r3, [r4, #12]
 801436e:	2300      	movs	r3, #0
 8014370:	6063      	str	r3, [r4, #4]
 8014372:	6923      	ldr	r3, [r4, #16]
 8014374:	6023      	str	r3, [r4, #0]
 8014376:	89a3      	ldrh	r3, [r4, #12]
 8014378:	f043 0308 	orr.w	r3, r3, #8
 801437c:	81a3      	strh	r3, [r4, #12]
 801437e:	6923      	ldr	r3, [r4, #16]
 8014380:	b94b      	cbnz	r3, 8014396 <__swsetup_r+0x9a>
 8014382:	89a3      	ldrh	r3, [r4, #12]
 8014384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801438c:	d003      	beq.n	8014396 <__swsetup_r+0x9a>
 801438e:	4621      	mov	r1, r4
 8014390:	4630      	mov	r0, r6
 8014392:	f000 f927 	bl	80145e4 <__smakebuf_r>
 8014396:	89a0      	ldrh	r0, [r4, #12]
 8014398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801439c:	f010 0301 	ands.w	r3, r0, #1
 80143a0:	d00a      	beq.n	80143b8 <__swsetup_r+0xbc>
 80143a2:	2300      	movs	r3, #0
 80143a4:	60a3      	str	r3, [r4, #8]
 80143a6:	6963      	ldr	r3, [r4, #20]
 80143a8:	425b      	negs	r3, r3
 80143aa:	61a3      	str	r3, [r4, #24]
 80143ac:	6923      	ldr	r3, [r4, #16]
 80143ae:	b943      	cbnz	r3, 80143c2 <__swsetup_r+0xc6>
 80143b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80143b4:	d1ba      	bne.n	801432c <__swsetup_r+0x30>
 80143b6:	bd70      	pop	{r4, r5, r6, pc}
 80143b8:	0781      	lsls	r1, r0, #30
 80143ba:	bf58      	it	pl
 80143bc:	6963      	ldrpl	r3, [r4, #20]
 80143be:	60a3      	str	r3, [r4, #8]
 80143c0:	e7f4      	b.n	80143ac <__swsetup_r+0xb0>
 80143c2:	2000      	movs	r0, #0
 80143c4:	e7f7      	b.n	80143b6 <__swsetup_r+0xba>
 80143c6:	bf00      	nop
 80143c8:	20000020 	.word	0x20000020
 80143cc:	080170a4 	.word	0x080170a4
 80143d0:	080170c4 	.word	0x080170c4
 80143d4:	08017084 	.word	0x08017084

080143d8 <_close_r>:
 80143d8:	b538      	push	{r3, r4, r5, lr}
 80143da:	2300      	movs	r3, #0
 80143dc:	4d05      	ldr	r5, [pc, #20]	; (80143f4 <_close_r+0x1c>)
 80143de:	4604      	mov	r4, r0
 80143e0:	4608      	mov	r0, r1
 80143e2:	602b      	str	r3, [r5, #0]
 80143e4:	f7ec facf 	bl	8000986 <_close>
 80143e8:	1c43      	adds	r3, r0, #1
 80143ea:	d102      	bne.n	80143f2 <_close_r+0x1a>
 80143ec:	682b      	ldr	r3, [r5, #0]
 80143ee:	b103      	cbz	r3, 80143f2 <_close_r+0x1a>
 80143f0:	6023      	str	r3, [r4, #0]
 80143f2:	bd38      	pop	{r3, r4, r5, pc}
 80143f4:	2000b908 	.word	0x2000b908

080143f8 <__sflush_r>:
 80143f8:	898a      	ldrh	r2, [r1, #12]
 80143fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fc:	4605      	mov	r5, r0
 80143fe:	0710      	lsls	r0, r2, #28
 8014400:	460c      	mov	r4, r1
 8014402:	d457      	bmi.n	80144b4 <__sflush_r+0xbc>
 8014404:	684b      	ldr	r3, [r1, #4]
 8014406:	2b00      	cmp	r3, #0
 8014408:	dc04      	bgt.n	8014414 <__sflush_r+0x1c>
 801440a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801440c:	2b00      	cmp	r3, #0
 801440e:	dc01      	bgt.n	8014414 <__sflush_r+0x1c>
 8014410:	2000      	movs	r0, #0
 8014412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014416:	2e00      	cmp	r6, #0
 8014418:	d0fa      	beq.n	8014410 <__sflush_r+0x18>
 801441a:	2300      	movs	r3, #0
 801441c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014420:	682f      	ldr	r7, [r5, #0]
 8014422:	602b      	str	r3, [r5, #0]
 8014424:	d032      	beq.n	801448c <__sflush_r+0x94>
 8014426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	075a      	lsls	r2, r3, #29
 801442c:	d505      	bpl.n	801443a <__sflush_r+0x42>
 801442e:	6863      	ldr	r3, [r4, #4]
 8014430:	1ac0      	subs	r0, r0, r3
 8014432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014434:	b10b      	cbz	r3, 801443a <__sflush_r+0x42>
 8014436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014438:	1ac0      	subs	r0, r0, r3
 801443a:	2300      	movs	r3, #0
 801443c:	4602      	mov	r2, r0
 801443e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014440:	4628      	mov	r0, r5
 8014442:	6a21      	ldr	r1, [r4, #32]
 8014444:	47b0      	blx	r6
 8014446:	1c43      	adds	r3, r0, #1
 8014448:	89a3      	ldrh	r3, [r4, #12]
 801444a:	d106      	bne.n	801445a <__sflush_r+0x62>
 801444c:	6829      	ldr	r1, [r5, #0]
 801444e:	291d      	cmp	r1, #29
 8014450:	d82c      	bhi.n	80144ac <__sflush_r+0xb4>
 8014452:	4a29      	ldr	r2, [pc, #164]	; (80144f8 <__sflush_r+0x100>)
 8014454:	40ca      	lsrs	r2, r1
 8014456:	07d6      	lsls	r6, r2, #31
 8014458:	d528      	bpl.n	80144ac <__sflush_r+0xb4>
 801445a:	2200      	movs	r2, #0
 801445c:	6062      	str	r2, [r4, #4]
 801445e:	6922      	ldr	r2, [r4, #16]
 8014460:	04d9      	lsls	r1, r3, #19
 8014462:	6022      	str	r2, [r4, #0]
 8014464:	d504      	bpl.n	8014470 <__sflush_r+0x78>
 8014466:	1c42      	adds	r2, r0, #1
 8014468:	d101      	bne.n	801446e <__sflush_r+0x76>
 801446a:	682b      	ldr	r3, [r5, #0]
 801446c:	b903      	cbnz	r3, 8014470 <__sflush_r+0x78>
 801446e:	6560      	str	r0, [r4, #84]	; 0x54
 8014470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014472:	602f      	str	r7, [r5, #0]
 8014474:	2900      	cmp	r1, #0
 8014476:	d0cb      	beq.n	8014410 <__sflush_r+0x18>
 8014478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801447c:	4299      	cmp	r1, r3
 801447e:	d002      	beq.n	8014486 <__sflush_r+0x8e>
 8014480:	4628      	mov	r0, r5
 8014482:	f7ff f819 	bl	80134b8 <_free_r>
 8014486:	2000      	movs	r0, #0
 8014488:	6360      	str	r0, [r4, #52]	; 0x34
 801448a:	e7c2      	b.n	8014412 <__sflush_r+0x1a>
 801448c:	6a21      	ldr	r1, [r4, #32]
 801448e:	2301      	movs	r3, #1
 8014490:	4628      	mov	r0, r5
 8014492:	47b0      	blx	r6
 8014494:	1c41      	adds	r1, r0, #1
 8014496:	d1c7      	bne.n	8014428 <__sflush_r+0x30>
 8014498:	682b      	ldr	r3, [r5, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d0c4      	beq.n	8014428 <__sflush_r+0x30>
 801449e:	2b1d      	cmp	r3, #29
 80144a0:	d001      	beq.n	80144a6 <__sflush_r+0xae>
 80144a2:	2b16      	cmp	r3, #22
 80144a4:	d101      	bne.n	80144aa <__sflush_r+0xb2>
 80144a6:	602f      	str	r7, [r5, #0]
 80144a8:	e7b2      	b.n	8014410 <__sflush_r+0x18>
 80144aa:	89a3      	ldrh	r3, [r4, #12]
 80144ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144b0:	81a3      	strh	r3, [r4, #12]
 80144b2:	e7ae      	b.n	8014412 <__sflush_r+0x1a>
 80144b4:	690f      	ldr	r7, [r1, #16]
 80144b6:	2f00      	cmp	r7, #0
 80144b8:	d0aa      	beq.n	8014410 <__sflush_r+0x18>
 80144ba:	0793      	lsls	r3, r2, #30
 80144bc:	bf18      	it	ne
 80144be:	2300      	movne	r3, #0
 80144c0:	680e      	ldr	r6, [r1, #0]
 80144c2:	bf08      	it	eq
 80144c4:	694b      	ldreq	r3, [r1, #20]
 80144c6:	1bf6      	subs	r6, r6, r7
 80144c8:	600f      	str	r7, [r1, #0]
 80144ca:	608b      	str	r3, [r1, #8]
 80144cc:	2e00      	cmp	r6, #0
 80144ce:	dd9f      	ble.n	8014410 <__sflush_r+0x18>
 80144d0:	4633      	mov	r3, r6
 80144d2:	463a      	mov	r2, r7
 80144d4:	4628      	mov	r0, r5
 80144d6:	6a21      	ldr	r1, [r4, #32]
 80144d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80144dc:	47e0      	blx	ip
 80144de:	2800      	cmp	r0, #0
 80144e0:	dc06      	bgt.n	80144f0 <__sflush_r+0xf8>
 80144e2:	89a3      	ldrh	r3, [r4, #12]
 80144e4:	f04f 30ff 	mov.w	r0, #4294967295
 80144e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144ec:	81a3      	strh	r3, [r4, #12]
 80144ee:	e790      	b.n	8014412 <__sflush_r+0x1a>
 80144f0:	4407      	add	r7, r0
 80144f2:	1a36      	subs	r6, r6, r0
 80144f4:	e7ea      	b.n	80144cc <__sflush_r+0xd4>
 80144f6:	bf00      	nop
 80144f8:	20400001 	.word	0x20400001

080144fc <_fflush_r>:
 80144fc:	b538      	push	{r3, r4, r5, lr}
 80144fe:	690b      	ldr	r3, [r1, #16]
 8014500:	4605      	mov	r5, r0
 8014502:	460c      	mov	r4, r1
 8014504:	b913      	cbnz	r3, 801450c <_fflush_r+0x10>
 8014506:	2500      	movs	r5, #0
 8014508:	4628      	mov	r0, r5
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	b118      	cbz	r0, 8014516 <_fflush_r+0x1a>
 801450e:	6983      	ldr	r3, [r0, #24]
 8014510:	b90b      	cbnz	r3, 8014516 <_fflush_r+0x1a>
 8014512:	f7ff f955 	bl	80137c0 <__sinit>
 8014516:	4b14      	ldr	r3, [pc, #80]	; (8014568 <_fflush_r+0x6c>)
 8014518:	429c      	cmp	r4, r3
 801451a:	d11b      	bne.n	8014554 <_fflush_r+0x58>
 801451c:	686c      	ldr	r4, [r5, #4]
 801451e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d0ef      	beq.n	8014506 <_fflush_r+0xa>
 8014526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014528:	07d0      	lsls	r0, r2, #31
 801452a:	d404      	bmi.n	8014536 <_fflush_r+0x3a>
 801452c:	0599      	lsls	r1, r3, #22
 801452e:	d402      	bmi.n	8014536 <_fflush_r+0x3a>
 8014530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014532:	f7ff f9e3 	bl	80138fc <__retarget_lock_acquire_recursive>
 8014536:	4628      	mov	r0, r5
 8014538:	4621      	mov	r1, r4
 801453a:	f7ff ff5d 	bl	80143f8 <__sflush_r>
 801453e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014540:	4605      	mov	r5, r0
 8014542:	07da      	lsls	r2, r3, #31
 8014544:	d4e0      	bmi.n	8014508 <_fflush_r+0xc>
 8014546:	89a3      	ldrh	r3, [r4, #12]
 8014548:	059b      	lsls	r3, r3, #22
 801454a:	d4dd      	bmi.n	8014508 <_fflush_r+0xc>
 801454c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801454e:	f7ff f9d6 	bl	80138fe <__retarget_lock_release_recursive>
 8014552:	e7d9      	b.n	8014508 <_fflush_r+0xc>
 8014554:	4b05      	ldr	r3, [pc, #20]	; (801456c <_fflush_r+0x70>)
 8014556:	429c      	cmp	r4, r3
 8014558:	d101      	bne.n	801455e <_fflush_r+0x62>
 801455a:	68ac      	ldr	r4, [r5, #8]
 801455c:	e7df      	b.n	801451e <_fflush_r+0x22>
 801455e:	4b04      	ldr	r3, [pc, #16]	; (8014570 <_fflush_r+0x74>)
 8014560:	429c      	cmp	r4, r3
 8014562:	bf08      	it	eq
 8014564:	68ec      	ldreq	r4, [r5, #12]
 8014566:	e7da      	b.n	801451e <_fflush_r+0x22>
 8014568:	080170a4 	.word	0x080170a4
 801456c:	080170c4 	.word	0x080170c4
 8014570:	08017084 	.word	0x08017084

08014574 <_lseek_r>:
 8014574:	b538      	push	{r3, r4, r5, lr}
 8014576:	4604      	mov	r4, r0
 8014578:	4608      	mov	r0, r1
 801457a:	4611      	mov	r1, r2
 801457c:	2200      	movs	r2, #0
 801457e:	4d05      	ldr	r5, [pc, #20]	; (8014594 <_lseek_r+0x20>)
 8014580:	602a      	str	r2, [r5, #0]
 8014582:	461a      	mov	r2, r3
 8014584:	f7ec fa23 	bl	80009ce <_lseek>
 8014588:	1c43      	adds	r3, r0, #1
 801458a:	d102      	bne.n	8014592 <_lseek_r+0x1e>
 801458c:	682b      	ldr	r3, [r5, #0]
 801458e:	b103      	cbz	r3, 8014592 <_lseek_r+0x1e>
 8014590:	6023      	str	r3, [r4, #0]
 8014592:	bd38      	pop	{r3, r4, r5, pc}
 8014594:	2000b908 	.word	0x2000b908

08014598 <__swhatbuf_r>:
 8014598:	b570      	push	{r4, r5, r6, lr}
 801459a:	460e      	mov	r6, r1
 801459c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145a0:	4614      	mov	r4, r2
 80145a2:	2900      	cmp	r1, #0
 80145a4:	461d      	mov	r5, r3
 80145a6:	b096      	sub	sp, #88	; 0x58
 80145a8:	da08      	bge.n	80145bc <__swhatbuf_r+0x24>
 80145aa:	2200      	movs	r2, #0
 80145ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80145b0:	602a      	str	r2, [r5, #0]
 80145b2:	061a      	lsls	r2, r3, #24
 80145b4:	d410      	bmi.n	80145d8 <__swhatbuf_r+0x40>
 80145b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145ba:	e00e      	b.n	80145da <__swhatbuf_r+0x42>
 80145bc:	466a      	mov	r2, sp
 80145be:	f000 f8bb 	bl	8014738 <_fstat_r>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	dbf1      	blt.n	80145aa <__swhatbuf_r+0x12>
 80145c6:	9a01      	ldr	r2, [sp, #4]
 80145c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145d0:	425a      	negs	r2, r3
 80145d2:	415a      	adcs	r2, r3
 80145d4:	602a      	str	r2, [r5, #0]
 80145d6:	e7ee      	b.n	80145b6 <__swhatbuf_r+0x1e>
 80145d8:	2340      	movs	r3, #64	; 0x40
 80145da:	2000      	movs	r0, #0
 80145dc:	6023      	str	r3, [r4, #0]
 80145de:	b016      	add	sp, #88	; 0x58
 80145e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080145e4 <__smakebuf_r>:
 80145e4:	898b      	ldrh	r3, [r1, #12]
 80145e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145e8:	079d      	lsls	r5, r3, #30
 80145ea:	4606      	mov	r6, r0
 80145ec:	460c      	mov	r4, r1
 80145ee:	d507      	bpl.n	8014600 <__smakebuf_r+0x1c>
 80145f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145f4:	6023      	str	r3, [r4, #0]
 80145f6:	6123      	str	r3, [r4, #16]
 80145f8:	2301      	movs	r3, #1
 80145fa:	6163      	str	r3, [r4, #20]
 80145fc:	b002      	add	sp, #8
 80145fe:	bd70      	pop	{r4, r5, r6, pc}
 8014600:	466a      	mov	r2, sp
 8014602:	ab01      	add	r3, sp, #4
 8014604:	f7ff ffc8 	bl	8014598 <__swhatbuf_r>
 8014608:	9900      	ldr	r1, [sp, #0]
 801460a:	4605      	mov	r5, r0
 801460c:	4630      	mov	r0, r6
 801460e:	f7fe ffbb 	bl	8013588 <_malloc_r>
 8014612:	b948      	cbnz	r0, 8014628 <__smakebuf_r+0x44>
 8014614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014618:	059a      	lsls	r2, r3, #22
 801461a:	d4ef      	bmi.n	80145fc <__smakebuf_r+0x18>
 801461c:	f023 0303 	bic.w	r3, r3, #3
 8014620:	f043 0302 	orr.w	r3, r3, #2
 8014624:	81a3      	strh	r3, [r4, #12]
 8014626:	e7e3      	b.n	80145f0 <__smakebuf_r+0xc>
 8014628:	4b0d      	ldr	r3, [pc, #52]	; (8014660 <__smakebuf_r+0x7c>)
 801462a:	62b3      	str	r3, [r6, #40]	; 0x28
 801462c:	89a3      	ldrh	r3, [r4, #12]
 801462e:	6020      	str	r0, [r4, #0]
 8014630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014634:	81a3      	strh	r3, [r4, #12]
 8014636:	9b00      	ldr	r3, [sp, #0]
 8014638:	6120      	str	r0, [r4, #16]
 801463a:	6163      	str	r3, [r4, #20]
 801463c:	9b01      	ldr	r3, [sp, #4]
 801463e:	b15b      	cbz	r3, 8014658 <__smakebuf_r+0x74>
 8014640:	4630      	mov	r0, r6
 8014642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014646:	f000 f889 	bl	801475c <_isatty_r>
 801464a:	b128      	cbz	r0, 8014658 <__smakebuf_r+0x74>
 801464c:	89a3      	ldrh	r3, [r4, #12]
 801464e:	f023 0303 	bic.w	r3, r3, #3
 8014652:	f043 0301 	orr.w	r3, r3, #1
 8014656:	81a3      	strh	r3, [r4, #12]
 8014658:	89a0      	ldrh	r0, [r4, #12]
 801465a:	4305      	orrs	r5, r0
 801465c:	81a5      	strh	r5, [r4, #12]
 801465e:	e7cd      	b.n	80145fc <__smakebuf_r+0x18>
 8014660:	08013759 	.word	0x08013759

08014664 <memchr>:
 8014664:	4603      	mov	r3, r0
 8014666:	b510      	push	{r4, lr}
 8014668:	b2c9      	uxtb	r1, r1
 801466a:	4402      	add	r2, r0
 801466c:	4293      	cmp	r3, r2
 801466e:	4618      	mov	r0, r3
 8014670:	d101      	bne.n	8014676 <memchr+0x12>
 8014672:	2000      	movs	r0, #0
 8014674:	e003      	b.n	801467e <memchr+0x1a>
 8014676:	7804      	ldrb	r4, [r0, #0]
 8014678:	3301      	adds	r3, #1
 801467a:	428c      	cmp	r4, r1
 801467c:	d1f6      	bne.n	801466c <memchr+0x8>
 801467e:	bd10      	pop	{r4, pc}

08014680 <memmove>:
 8014680:	4288      	cmp	r0, r1
 8014682:	b510      	push	{r4, lr}
 8014684:	eb01 0402 	add.w	r4, r1, r2
 8014688:	d902      	bls.n	8014690 <memmove+0x10>
 801468a:	4284      	cmp	r4, r0
 801468c:	4623      	mov	r3, r4
 801468e:	d807      	bhi.n	80146a0 <memmove+0x20>
 8014690:	1e43      	subs	r3, r0, #1
 8014692:	42a1      	cmp	r1, r4
 8014694:	d008      	beq.n	80146a8 <memmove+0x28>
 8014696:	f811 2b01 	ldrb.w	r2, [r1], #1
 801469a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801469e:	e7f8      	b.n	8014692 <memmove+0x12>
 80146a0:	4601      	mov	r1, r0
 80146a2:	4402      	add	r2, r0
 80146a4:	428a      	cmp	r2, r1
 80146a6:	d100      	bne.n	80146aa <memmove+0x2a>
 80146a8:	bd10      	pop	{r4, pc}
 80146aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80146ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80146b2:	e7f7      	b.n	80146a4 <memmove+0x24>

080146b4 <_realloc_r>:
 80146b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b8:	4680      	mov	r8, r0
 80146ba:	4614      	mov	r4, r2
 80146bc:	460e      	mov	r6, r1
 80146be:	b921      	cbnz	r1, 80146ca <_realloc_r+0x16>
 80146c0:	4611      	mov	r1, r2
 80146c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146c6:	f7fe bf5f 	b.w	8013588 <_malloc_r>
 80146ca:	b92a      	cbnz	r2, 80146d8 <_realloc_r+0x24>
 80146cc:	f7fe fef4 	bl	80134b8 <_free_r>
 80146d0:	4625      	mov	r5, r4
 80146d2:	4628      	mov	r0, r5
 80146d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d8:	f000 f850 	bl	801477c <_malloc_usable_size_r>
 80146dc:	4284      	cmp	r4, r0
 80146de:	4607      	mov	r7, r0
 80146e0:	d802      	bhi.n	80146e8 <_realloc_r+0x34>
 80146e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80146e6:	d812      	bhi.n	801470e <_realloc_r+0x5a>
 80146e8:	4621      	mov	r1, r4
 80146ea:	4640      	mov	r0, r8
 80146ec:	f7fe ff4c 	bl	8013588 <_malloc_r>
 80146f0:	4605      	mov	r5, r0
 80146f2:	2800      	cmp	r0, #0
 80146f4:	d0ed      	beq.n	80146d2 <_realloc_r+0x1e>
 80146f6:	42bc      	cmp	r4, r7
 80146f8:	4622      	mov	r2, r4
 80146fa:	4631      	mov	r1, r6
 80146fc:	bf28      	it	cs
 80146fe:	463a      	movcs	r2, r7
 8014700:	f7fe fec4 	bl	801348c <memcpy>
 8014704:	4631      	mov	r1, r6
 8014706:	4640      	mov	r0, r8
 8014708:	f7fe fed6 	bl	80134b8 <_free_r>
 801470c:	e7e1      	b.n	80146d2 <_realloc_r+0x1e>
 801470e:	4635      	mov	r5, r6
 8014710:	e7df      	b.n	80146d2 <_realloc_r+0x1e>
	...

08014714 <_read_r>:
 8014714:	b538      	push	{r3, r4, r5, lr}
 8014716:	4604      	mov	r4, r0
 8014718:	4608      	mov	r0, r1
 801471a:	4611      	mov	r1, r2
 801471c:	2200      	movs	r2, #0
 801471e:	4d05      	ldr	r5, [pc, #20]	; (8014734 <_read_r+0x20>)
 8014720:	602a      	str	r2, [r5, #0]
 8014722:	461a      	mov	r2, r3
 8014724:	f7ec f8f6 	bl	8000914 <_read>
 8014728:	1c43      	adds	r3, r0, #1
 801472a:	d102      	bne.n	8014732 <_read_r+0x1e>
 801472c:	682b      	ldr	r3, [r5, #0]
 801472e:	b103      	cbz	r3, 8014732 <_read_r+0x1e>
 8014730:	6023      	str	r3, [r4, #0]
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	2000b908 	.word	0x2000b908

08014738 <_fstat_r>:
 8014738:	b538      	push	{r3, r4, r5, lr}
 801473a:	2300      	movs	r3, #0
 801473c:	4d06      	ldr	r5, [pc, #24]	; (8014758 <_fstat_r+0x20>)
 801473e:	4604      	mov	r4, r0
 8014740:	4608      	mov	r0, r1
 8014742:	4611      	mov	r1, r2
 8014744:	602b      	str	r3, [r5, #0]
 8014746:	f7ec f929 	bl	800099c <_fstat>
 801474a:	1c43      	adds	r3, r0, #1
 801474c:	d102      	bne.n	8014754 <_fstat_r+0x1c>
 801474e:	682b      	ldr	r3, [r5, #0]
 8014750:	b103      	cbz	r3, 8014754 <_fstat_r+0x1c>
 8014752:	6023      	str	r3, [r4, #0]
 8014754:	bd38      	pop	{r3, r4, r5, pc}
 8014756:	bf00      	nop
 8014758:	2000b908 	.word	0x2000b908

0801475c <_isatty_r>:
 801475c:	b538      	push	{r3, r4, r5, lr}
 801475e:	2300      	movs	r3, #0
 8014760:	4d05      	ldr	r5, [pc, #20]	; (8014778 <_isatty_r+0x1c>)
 8014762:	4604      	mov	r4, r0
 8014764:	4608      	mov	r0, r1
 8014766:	602b      	str	r3, [r5, #0]
 8014768:	f7ec f927 	bl	80009ba <_isatty>
 801476c:	1c43      	adds	r3, r0, #1
 801476e:	d102      	bne.n	8014776 <_isatty_r+0x1a>
 8014770:	682b      	ldr	r3, [r5, #0]
 8014772:	b103      	cbz	r3, 8014776 <_isatty_r+0x1a>
 8014774:	6023      	str	r3, [r4, #0]
 8014776:	bd38      	pop	{r3, r4, r5, pc}
 8014778:	2000b908 	.word	0x2000b908

0801477c <_malloc_usable_size_r>:
 801477c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014780:	1f18      	subs	r0, r3, #4
 8014782:	2b00      	cmp	r3, #0
 8014784:	bfbc      	itt	lt
 8014786:	580b      	ldrlt	r3, [r1, r0]
 8014788:	18c0      	addlt	r0, r0, r3
 801478a:	4770      	bx	lr

0801478c <_init>:
 801478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801478e:	bf00      	nop
 8014790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014792:	bc08      	pop	{r3}
 8014794:	469e      	mov	lr, r3
 8014796:	4770      	bx	lr

08014798 <_fini>:
 8014798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479a:	bf00      	nop
 801479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801479e:	bc08      	pop	{r3}
 80147a0:	469e      	mov	lr, r3
 80147a2:	4770      	bx	lr
